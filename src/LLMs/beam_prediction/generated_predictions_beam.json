[
    {
        "question": "Question: { Which female actress is the voice over on South Park and is employed as a singer? }",
        "predicted_query": [
            "( AND ( JOIN [ occupation ] [ singer ] ) ( JOIN ( R [ voice actor ] ) [ South Park ] ) )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ voice actor ] ) [ South Park ] ) )",
            "( AND ( JOIN [ employment ] [ singer ] ) ( JOIN ( R [ voice actor ] ) [ South Park ] ) )",
            "( AND ( JOIN [ occupation ] [ singer ] ) ( JOIN ( R [ voice actor or actress ] ) [ South Park ] ) )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ voice actor ] ) [ South Park ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ occupation ] [ singer ] ) ( JOIN ( R [ voice actor ] ) [ South Park ] ) )"
    },
    {
        "question": "Question: { On Lake Winnipeg what is the lakes on river? }",
        "predicted_query": [
            "( AND ( JOIN [ tributary of ] [ Lake Winnipeg ] ) ( JOIN ( R [ located on ] ) [ Lake Winnipeg ] ) )",
            "( JOIN ( R [ lake or reservoir on river ] ) [ Lake Winnipeg ] )",
            "( AND ( JOIN [ located on body of water ] [ Lake Winnipeg ] ) ( JOIN ( R [ tributary ] ) [ Lake Winnipeg ] ) )",
            "( JOIN [ located on river ] [ Lake Winnipeg ] )",
            "( AND ( JOIN [ tributary ] [ Lake Winnipeg ] ) ( JOIN ( R [ located on ] ) [ Lake Winnipeg ] ) )"
        ],
        "gen_label": "( JOIN [ lake on watercourse ] [ Lake Winnipeg ] )"
    },
    {
        "question": "Question: { Which is the PIM authority ID of Paul Erdős? }",
        "predicted_query": [
            "( JOIN ( R [ PIM authority ID ] ) [ Paul Erdős ] )",
            "### Join Query",
            "( JOIN [ PIM authority ID ] [ Paul Erdős ] )",
            "( JOIN ( R [ PIM authority ID ] ) [ Paul Erdős ] )",
            "( JOIN ( R [ PIM ID ] ) [ Paul Erdős ] )"
        ],
        "gen_label": "( JOIN ( R [ PIM authority ID ] ) [ Paul Erdős ] )"
    },
    {
        "question": "Question: { \"Who is {wedded to} to {Radha}, that has a {child} named {Samba} ?\" }",
        "predicted_query": [
            "( AND ( JOIN [ child ] [ Samba ] ) ( JOIN ( R [ spouse ] ) [ Radha ] ) )",
            "( AND ( JOIN [ child ] [ Samba ] ) ( JOIN ( R [ spouse ] ) [ Radha ] ) )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ spouse ] ) [ Radha ] ) )",
            "( AND ( JOIN [ parent of ] [ Samba ] ) ( JOIN ( R [ spouse ] ) [ Radha ] ) )",
            "( AND ( JOIN [ child ] [ Samba ] ) ( JOIN ( R [ married to ] ) [ Radha ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ child ] [ Samba ] ) ( JOIN ( R [ spouse ] ) [ Radha ] ) )"
    },
    {
        "question": "Question: { What is the MIA constituent ID for Johannes Gutenberg? }",
        "predicted_query": [
            "( AND ( JOIN [ member of ] [ MIA ] ) ( JOIN ( R [ ID ] ) [ Johannes Gutenberg ] ) )",
            "( JOIN ( R [ MIA constituent ID ] ) [ Johannes Gutenberg ] )",
            "[",
            "( JOIN ( R [ MIA constituent ID ] ) [ Johannes Gutenberg ] )",
            "( JOIN [ MIA constituent ID ] [ Johannes Gutenberg ] )"
        ],
        "gen_label": "( JOIN ( R [ Minneapolis Institute of Art constituent ID ] ) [ Johannes Gutenberg ] )"
    },
    {
        "question": "Question: { What is in the category of Percy Bysshe Shelley? }",
        "predicted_query": [
            "( JOIN ( R [ category ] ) ( JOIN ( R [ member of ] ) [ Percy Bysshe Shelley ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Percy Bysshe Shelley ] ) ( JOIN ( R [ category ] ) [ Percy Bysshe Shelley ] ) )",
            "( [ joined ] [ occupation ] [ Percy Bysshe Shelley ] )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ category of ] ) [ Percy Bysshe Shelley ] ) )",
            "( JOIN [ category of ] [ Percy Bysshe Shelley ] )"
        ],
        "gen_label": "( JOIN ( R [ Poetry In Voice poet ID ] ) [ Percy Bysshe Shelley ] )"
    },
    {
        "question": "Question: { What is the TDKIV ID for the blog? }",
        "predicted_query": [
            "( JOIN ( R [ TDKIV ID ] ) [ blog ] )",
            "( JOIN ( R [ TDKIV ID ] ) [ blog ] )",
            "( AND ( JOIN [ ID.TDKIV ] [ Blog ] ) [ What is the TDKIV ID for the blog? ] )",
            "( JOIN [ TDKIV ID ] [ blog ] )",
            "( JOIN ( R [ TDK IV ID ] ) [ The Daily Kos ] )"
        ],
        "gen_label": "( JOIN ( R [ TDKIV term ID ] ) [ blog ] )"
    },
    {
        "question": "Question: { What is the maximum Strahler number for Loire? }",
        "predicted_query": [
            "( JOIN ( R [ maximum Strahler number ] ) [ Loire ] )",
            "( JOIN ( R [ Strahler number ] ) [ Loire ] )",
            "( JOIN [ maximum Strahler number ] [ Loire ] )",
            "( AND ( JOIN [ has maximum value of ] [ Strahler number ] ) ( JOIN ( R [ tributary of ] ) [ Loire ] ) )",
            "( JOIN ( R [ has Strahler number ] ) [ Loire ] )"
        ],
        "gen_label": "( JOIN ( R [ maximum Strahler number ] ) [ Loire ] )"
    },
    {
        "question": "Question: { Who is the eponym of Lake Eyre that also is the winner of the Founder's Medal? }",
        "predicted_query": [
            "( AND ( JOIN [ winner ] [ Founder's Medal ] ) ( JOIN ( R [ named after ] ) [ Lake Eyre ] ) )",
            "( AND ( JOIN [ winner of ] [ Founder's Medal ] ) ( JOIN ( R [ named after ] ) [ Lake Eyre ] ) )",
            "( AND ( JOIN [ award received ] [ Founder's Medal ] ) ( JOIN ( R [ named after ] ) [ Lake Eyre ] ) )",
            "( AND ( JOIN [ award received ] [ Founders Medal ] ) ( JOIN ( R [ named after ] ) [ Lake Eyre ] ) )",
            "( AND ( JOIN [ recipient of ] [ Founder's Medal ] ) ( JOIN ( R [ named after ] ) [ Lake Eyre ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ award received ] [ Founder’s Medal ] ) ( JOIN ( R [ named after ] ) [ Kati Thanda–Lake Eyre ] ) )"
    },
    {
        "question": "Question: { Which spot came from the Ebola virus? }",
        "predicted_query": [
            "( JOIN [ location of origin ] [ Ebola virus ] )",
            "( JOIN ( R [ location ] ) ( JOIN ( R [ origin ] ) [ Ebola virus ] ) )",
            "( AND ( JOIN [ has location ] [ Ebola virus ] ) ( JOIN ( R [ place of discovery ] ) [ Ebola virus ] ) )",
            "( JOIN ( JOIN ( R [ place of discovery ] ) [ Ebola virus ] ) [ originated from ] )",
            "( JOIN ( R [ epicenter ] ) ( JOIN ( R [ cause ] ) [ Ebola virus ] ) )"
        ],
        "gen_label": "( JOIN ( R [ member of ] ) ( JOIN ( R [ location of discovery ] ) [ Ebola hemorrhagic fever ] ) )"
    },
    {
        "question": "Question: { who married to of actor of Bepanaah ? }",
        "predicted_query": [
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ cast member ] ) [ Bepanaah ] ) )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ married to ] ) [ Bepanah ] ) )",
            "( JOIN [ married to ] [ Bepanaah ] )",
            "( JOIN ( R [ spouse ] ) [ Bepannaah ] )",
            "( JOIN ( R [ married to ] ) ( JOIN ( R [ cast ] ) [ Bepanaah ] ) )"
        ],
        "gen_label": "( JOIN ( R [ spouse ] ) ( JOIN ( R [ cast member ] ) [ Bepanaah ] ) )"
    },
    {
        "question": "Question: { What is the significance of artists of The Beatles' Story? }",
        "predicted_query": [
            "( JOIN ( R [ significance ] ) ( JOIN ( R [ artist ] ) [ The Beatles' Story ] ) )",
            "( JOIN ( R [ significance ] ) ( JOIN ( R [ artist ] ) [ The Beatles' Story ] ) )",
            "( AND ( JOIN [ notable work ] [ The Beatles' Story ] ) ( JOIN ( R [ influenced by ] ) [ The Beatles ] ) )",
            "( JOIN [ significance ] [ The Beatles' Story ] )",
            "( JOIN ( R [ significance ] ) ( JOIN ( R [ creator ] ) [ The Beatles' Story ] ) )"
        ],
        "gen_label": "( JOIN ( R [ notable work ] ) ( JOIN ( R [ performer ] ) [ The Beatles' Story ] ) )"
    },
    {
        "question": "Question: { Which is the BMLO for Frederick William I of Prussia? }",
        "predicted_query": [
            "( JOIN ( R [ BMLO ] ) [ Frederick William I of Prussia ] )",
            "( JOIN ( R [ BMLO ID ] ) [ Frederick William I of Prussia ] )",
            "( AND ( JOIN [ member of ] [ Frederick William I of Prussia ] ) ( JOIN ( R [ member of ] ) [ BMLO ] ) )",
            "[ JOIN [ BMLO ] [ Frederick William I of Prussia ] ]",
            "( JOIN ( R [ BMLO ID ] ) [ Frederick William I of Prussia ] )"
        ],
        "gen_label": "( JOIN ( R [ BMLO ID ] ) [ Friedrich Wilhelm I of Prussia ] )"
    },
    {
        "question": "Question: { What are the borders of Southern Africa? }",
        "predicted_query": [
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Southern Africa ] ) )",
            "( JOIN ( R [ shares border with ] ) [ Southern Africa ] )",
            "( JOIN [ shares border with ] [ Southern Africa ] )",
            "( AND ( JOIN [ shared by ] [ Southern Africa ] ) ( JOIN ( R [ shares border with ] ) [ Southern Africa ] ) )",
            "( AND ( JOIN [ shares border with ] [ Southern Africa ] ) ( JOIN ( R [ shares border with ] ) [ Southern Africa ] ) )"
        ],
        "gen_label": "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ located in/on physical feature ] ) [ Southern Africa ] ) )"
    },
    {
        "question": "Question: { Which is the arterial supply for the human nose? }",
        "predicted_query": [
            "( JOIN [ arterial supply ] [ human nose ] )",
            "( JOIN ( R [ arterial supply ] ) [ human nose ] )",
            "( JOIN ( R [ arterial supply ] ) [ nose ] )",
            "( JOIN ( R [ artery supply ] ) [ human nose ] )",
            "( JOIN [ arterial supply ] [ human nose ] )"
        ],
        "gen_label": "( JOIN ( R [ arterial supply ] ) [ human nose ] )"
    },
    {
        "question": "Question: { Whhich is {used for treatment} of {death cause} of {Madhavrao I} ? }",
        "predicted_query": [
            "( JOIN ( R [ used for treatment ] ) ( JOIN ( R [ cause of death ] ) [ Madhavrao I ] ) )",
            "( AND ( JOIN [ cause of death ] [ death ] ) ( JOIN ( R [ medical treatment ] ) [ Madhavrao I ] ) )",
            "( JOIN [ cause of death ] [ death of Madhavrao I ] )",
            "( JOIN ( R [ medical condition treated ] ) ( JOIN ( R [ cause of death ] ) [ Madhavrao I ] ) )",
            "( AND ( JOIN [ cause of death ] [ death ] ) ( JOIN ( R [ treated for ] ) [ Madhavrao I ] ) )"
        ],
        "gen_label": "( JOIN ( R [ drug or therapy used for treatment ] ) ( JOIN ( R [ cause of death ] ) [ Madhavrao I ] ) )"
    },
    {
        "question": "Question: { Was Louis Agassiz worked at \"Davis Center for Russian and Eurasian Studies\"which is a subsidiary company of Harvard University? }",
        "predicted_query": [
            "( AND ( JOIN [ subsidiary of ] [ Harvard University ] ) ( JOIN ( R [ employer ] ) [ Louis Agassiz ] ) )",
            "( AND ( JOIN [ employer ] [ Harvard University ] ) ( JOIN ( R [ located in ] ) [ Louis Agassiz ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Davis Center for Russian and Eurasian Studies ] ) ( JOIN ( R [ employer ] ) [ Louis Agassiz ] ) )",
            "( AND ( JOIN [ parent company ] [ Harvard University ] ) ( JOIN ( R [ employer ] ) [ Louis Agassiz ] ) )",
            "( AND ( JOIN [ subsidiary company ] [ Davis Center for Russian and Eurasian Studies ] ) ( JOIN ( R [ employer ] ) [ Louis Agassiz ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ has subsidiary ] [ Davis Center for Russian and Eurasian Studies, Harvard University ] ) ( JOIN ( R [ employer ] ) [ Louis Agassiz ] ) )"
    },
    {
        "question": "Question: { What is the total solar radiation reflected off of Saturn? }",
        "predicted_query": [
            "( JOIN ( R [ total solar radiation reflected off of ] ) [ Saturn ] )",
            "( JOIN ( R [ total solar radiation reflected ] ) [ Saturn ] )",
            "( JOIN [ total solar radiation reflected off of ] [ Saturn ] )",
            "( JOIN ( R [ solar radiation reflected ] ) [ Saturn ] )",
            "( JOIN ( R [ total solar radiation received by Saturn ] ) [ Saturn ] )"
        ],
        "gen_label": "( JOIN ( R [ albedo ] ) [ Saturn ] )"
    },
    {
        "question": "Question: { \"Where is {town} of {Al Jawf Region}, which has {diplomatic relation} is {Sweden} ?\" }",
        "predicted_query": [
            "( AND ( JOIN [ diplomatic relation ] [ Sweden ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Al Jawf Region ] ) )",
            "( AND ( JOIN [ has diplomatic relation ] [ Sweden ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Al Jawf Region ] ) )",
            "( AND ( JOIN [ diplomatic relation ] [ Sweden ] ) ( JOIN ( R [ capital ] ) [ Al Jawf Region ] ) )",
            "( JOIN [ diplomatic relation ] [ Sweden ] ) ( JOIN ( R [ capital ] ) [ Al Jawf Region ] )",
            "( AND ( JOIN [ diplomatic relation ] [ Sweden ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Al Jawf ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ diplomatic relation ] [ Sweden ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Al-Jowf Province ] ) )"
    },
    {
        "question": "Question: { \"What is {forename} of {Walter Yeo}, which has {similar to} is {Wöltje} ?\" }",
        "predicted_query": [
            "( AND ( JOIN [ has similar to ] [ Wöltje ] ) ( JOIN ( R [ given name ] ) [ Walter Yeo ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Wöltje ] ) ( JOIN ( R [ given name ] ) [ Walter Yeo ] ) )",
            "( AND ( JOIN [ similar to ] [ Wöltje ] ) ( JOIN ( R [ given name ] ) [ Walter Yeo ] ) )",
            "( AND ( JOIN [ has similarity ] [ Wöltje ] ) ( JOIN ( R [ given name ] ) [ Walter Yeo ] ) )",
            "( JOIN ( R [ given name ] ) ( JOIN ( R [ similar to ] ) [ Wöltje ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ said to be the same as ] [ Wöltje ] ) ( JOIN ( R [ given name ] ) [ Walter Yeo ] ) )"
    },
    {
        "question": "Question: { What is Aleksandar Šapić's second language and what is their gender? }",
        "predicted_query": [
            "( JOIN ( R [ second language ] ) ( JOIN ( R [ gender ] ) [ Aleksandar Šapić ] ) )",
            "( AND ( JOIN [ gender ] [ male ] ) ( JOIN ( R [ native language ] ) [ Aleksandar Šapić ] ) )",
            "( AND ( JOIN [ language of literacy ] [ Serbian ] ) ( JOIN ( R [ gender ] ) [ Aleksandar Šapić ] ) )",
            "( JOIN [ second language ] [ Aleksandar Šapić ] ) AND ( JOIN ( R [ sex, gender, or sexual orientation ] ) [ Aleksandar Šapić ] )",
            "( AND ( JOIN [ gender ] [ female ] ) ( JOIN ( R [ language ] ) [ Aleksandar Šapić ] ) )"
        ],
        "gen_label": "( JOIN ( R [ has grammatical gender ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Aleksandar Šapić ] ) )"
    },
    {
        "question": "Question: { Who introduced the prize received of Semyon Budyonny? }",
        "predicted_query": [
            "( JOIN ( R [ awarded to ] ) ( JOIN ( R [ recipient ] ) [ Semyon Budyonny ] ) )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ awarded to ] ) [ Semyon Budyonny ] ) )",
            "( AND ( JOIN [ awarded to ] [ Semyon Budyonny ] ) ( JOIN ( R [ awarded to ] ) [ Order of Lenin ] ) )",
            "( JOIN ( R [ awarded to ] ) ( JOIN ( R [ awarded ] ) [ Semyon Budyonny ] ) )",
            "( JOIN [ prize received ] [ Semyon Budyonny ] )"
        ],
        "gen_label": "( JOIN ( R [ inception ] ) ( JOIN ( R [ award received ] ) [ Semyon Budyonny ] ) )"
    },
    {
        "question": "Question: { Which statement describes the Pythagorean theorem? }",
        "predicted_query": [
            "( JOIN [ statement describes ] [ Pythagorean theorem ] )",
            "( JOIN ( R [ contains the information regarding ] ) ( JOIN ( R [ follows ] ) [ Pythagorean theorem ] ) )",
            "( JOIN ( R [ statement ] ) ( JOIN ( R [ follows ] ) [ Pythagorean theorem ] ) )",
            "[]",
            "( JOIN ( R [ follows from ] ) ( JOIN ( R [ follows ] ) [ Pythagorean theorem ] ) )"
        ],
        "gen_label": "( JOIN ( R [ statement describes ] ) [ Pythagorean theorem ] )"
    },
    {
        "question": "Question: { What is Andrey Korotayev's researcher's ID? }",
        "predicted_query": [
            "( [ JOIN ] [ ResearcherID ] [ Andrey Korotayev ] )",
            "( JOIN ( R [ researcher ID ] ) [ Andrey Korotayev ] )",
            "( JOIN ( R [ Andrey Korotayev's researcher's ID ] ) [ World History Encyclopedia ] )",
            "( [ joined by ] [ researcher ID ] [ Andrey Korotayev ] )",
            "( JOIN [ researcher's ID ] [ Andrey Korotayev ] )"
        ],
        "gen_label": "( JOIN ( R [ ResearcherID ] ) [ Andrey Korotayev ] )"
    },
    {
        "question": "Question: { Which euroleague.net ID belongs to Arvydas Sabonis? }",
        "predicted_query": [
            "( JOIN ( R [ euroleague.net ID ] ) [ Arvydas Sabonis ] )",
            "( JOIN ( R [ euroleague.net ID ] ) [ Arvydas Sabonis ] )",
            "( JOIN ( R [ euroleague.net player ID ] ) [ Arvydas Sabonis ] )",
            "( JOIN ( R [ EuroLeague ID ] ) [ Arvydas Sabonis ] )",
            "( JOIN ( R [ euroleague.net ID ] ) [ Arvydas Sabonis ] )"
        ],
        "gen_label": "( JOIN ( R [ euroleague.net player ID ] ) [ Arvydas Sabonis ] )"
    },
    {
        "question": "Question: { Which is Städel Museum artist ID for Käthe Kollwitz? }",
        "predicted_query": [
            "( JOIN ( R [ Städel Museum artist ID ] ) [ Käthe Kollwitz ] )",
            "( [ joined by ] [ Städel Museum artist ID ] [ Käthe Kollwitz ] )",
            "( AND ( JOIN [ artist ID ] [ Städel Museum ] ) [ Käthe Kollwitz ] )",
            "[ JOIN",
            "( JOIN ( R [ Städel Museum artist ID ] ) [ Katharina Kollwitz ] )"
        ],
        "gen_label": "( JOIN ( R [ Städel Museum artist ID ] ) [ Käthe Kollwitz ] )"
    },
    {
        "question": "Question: { What is Deutsche Olympiamannschaft athlete ID for Ralf Schumann ? }",
        "predicted_query": [
            "( [ joined ] [ Ralf Schumann ] )",
            "( JOIN ( R [ Deutsche Olympiamannschaft athlete ID ] ) [ Ralf Schumann ] )",
            "( AND ( JOIN [ Olympic athlete ID ] [ Ralf Schumann ] ) ( JOIN ( R [ member of ] ) [ Deutsche Olympiamannschaft ] ) )",
            "( [ JOIN ] [ Ralf Schumann ] )",
            "( JOIN ( R [ Deutsche Olympiamannschaft athlete ID ] ) [ Ralf Schumann ] )"
        ],
        "gen_label": "( JOIN ( R [ Team Deutschland athlete ID ] ) [ Ralf Schumann ] )"
    },
    {
        "question": "Question: { Is the developer of academic discipline, Petr Vopěnka? }",
        "predicted_query": [
            "( JOIN ( R [ developer ] ) ( JOIN ( R [ field of work ] ) [ Petr Vopěnka ] ) )",
            "( AND ( JOIN [ field of study ] [ Petr Vopěnka ] ) ( JOIN ( R [ influenced by ] ) [ Petr Vopěnka ] ) )",
            "( JOIN ( R [ has field ] ) ( JOIN ( R [ discipline ] ) [ Petr Vopěnka ] ) )",
            "( JOIN ( R [ developer of academic discipline ] ) [ Petr Vopěnka ] )",
            "( AND ( JOIN [ field of work ] [ academic discipline ] ) ( JOIN ( R [ influenced by ] ) [ Petr Vopěnka ] ) )"
        ],
        "gen_label": "( JOIN ( R [ discoverer or inventor ] ) ( JOIN ( R [ field of work ] ) [ Petr Vopěnka ] ) )"
    },
    {
        "question": "Question: { Is 13413 Bob Peterson inventor find the item operator? }",
        "predicted_query": [
            "( JOIN ( R [ inventor ] ) ( JOIN ( R [ manufacturer ] ) [ 13413 Bob Peterson ] ) )",
            "( AND ( JOIN [ operator ] [ inventor ] ) ( JOIN ( R [ inventor ] ) [ 13413 Bob Peterson ] ) )",
            "( JOIN ( R [ operator ] ) ( JOIN ( R [ inventor ] ) [ 13413 Bob Peterson ] ) )",
            "( JOIN ( R [ inventor ] ) ( JOIN ( R [ product or service ] ) [ 13413 Bob Peterson ] ) )",
            "( AND ( JOIN [ item operator ] [ 13413 Bob Peterson ] ) ( JOIN ( R [ inventor ] ) [ 13413 Bob Peterson ] ) )"
        ],
        "gen_label": "( JOIN ( R [ operator ] ) ( JOIN ( R [ discoverer or inventor ] ) [ 13413 Bobpeterson ] ) )"
    },
    {
        "question": "Question: { Which is the oxidation state for phosphorus? }",
        "predicted_query": [
            "( JOIN ( R [ oxidation state ] ) [ phosphorus ] )",
            "( JOIN [ oxidation state ] [ phosphorus ] )",
            "( JOIN ( R [ oxidation state ] ) [ phosphorus ] )",
            "( JOIN ( R [ has oxidation state of ] ) [ phosphorus ] )",
            "( JOIN [ oxidation state ] [ phosphorus ] )"
        ],
        "gen_label": "( JOIN ( R [ oxidation state ] ) [ phosphorus ] )"
    },
    {
        "question": "Question: { Which is the exploitation visa number of Grease? }",
        "predicted_query": [
            "( JOIN ( R [ exploitation visa number ] ) [ Grease ] )",
            "( JOIN [ exploitation visa number ] [ Grease ] )",
            "( JOIN ( R [ exploitation visa number ] ) [ Grease ] )",
            "( JOIN [ exploitation visa number ] [ Grease ] )",
            "( JOIN ( R [ exploitation visa number ] ) [ Grease ] )"
        ],
        "gen_label": "( JOIN ( R [ exploitation mark number ] ) [ Grease ] )"
    },
    {
        "question": "Question: { What is the LinkedIn company ID for Nanyang Technological University? }",
        "predicted_query": [
            "( JOIN ( R [ LinkedIn company ID ] ) [ Nanyang Technological University ] )",
            "( AND ( JOIN [ employer ] [ Nanyang Technological University ] ) ( JOIN ( R [ ID ] ) [ Nanyang Technological University ] ) )",
            "( JOIN ( R [ linkedin.com company ID ] ) [ Nanyang Technological University ] )",
            "{ JOIN ( R [ LinkedIn company ID ] ) [ Nanyang Technological University ] }",
            "( JOIN ( R [ LinkedIn Company ID ] ) [ Nanyang Technological University ] )"
        ],
        "gen_label": "( JOIN ( R [ LinkedIn company or organization ID ] ) [ Nanyang Technological University ] )"
    },
    {
        "question": "Question: { Was George Arliss nominated for the movie  called The Apartment }",
        "predicted_query": [
            "( AND ( JOIN [ named after ] [ George Arliss ] ) ( JOIN ( R [ named after ] ) [ The Apartment ] ) )",
            "( JOIN ( R [ nominated for ] ) ( JOIN ( R [ title ] ) [ The Apartment ] ) )",
            "( JOIN ( R [ cast member ] ) [ The Apartment ] )",
            "( JOIN [ nominated for ] [ The Apartment ] )",
            "( AND ( JOIN [ name ] [ The Apartment ] ) ( JOIN ( R [ nominated for ] ) [ George Arliss ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ winner ] [ George Arliss ] ) ( JOIN ( R [ nominated for ] ) [ The Apartment ] ) )"
    },
    {
        "question": "Question: { What PhD advisor of Clifford Geertz has the significant works The Structure of Social Action? }",
        "predicted_query": [
            "( AND ( JOIN [ notable work ] [ The Structure of Social Action ] ) ( JOIN ( R [ doctoral advisor ] ) [ Clifford Geertz ] ) )",
            "( AND ( JOIN [ notable work ] [ The Structure of Social Action ] ) ( JOIN ( R [ doctoral advisor ] ) [ Clifford Geertz ] ) )",
            "( AND ( JOIN [ significant work ] [ The Structure of Social Action ] ) ( JOIN ( R [ doctoral advisor ] ) [ Clifford Geertz ] ) )",
            "( AND ( JOIN [ significant works ] [ The Structure of Social Action ] ) ( JOIN ( R [ advisor ] ) [ Clifford Geertz ] ) )",
            "( JOIN [ significant work ] [ The Structure of Social Action ] )"
        ],
        "gen_label": "( AND ( JOIN [ notable work ] [ The Structure of Social Action ] ) ( JOIN ( R [ doctoral advisor ] ) [ Clifford Geertz ] ) )"
    },
    {
        "question": "Question: { Which is the rural city of Fukushim? }",
        "predicted_query": [
            "( JOIN [ rural city ] [ Fukushima ] )",
            "( JOIN ( R [ rural city ] ) [ Fukushima ] )",
            "( JOIN ( R [ capital ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Fukushima ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Fukushima Prefecture ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Fukushima ] ) )",
            "( JOIN ( R [ urban area ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Fukushima ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ contains the administrative territorial entity ] [ Kawamata ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Fukushima ] ) )"
    },
    {
        "question": "Question: { Who coined the name of RNA polymerase, who also has work as a biochemist? }",
        "predicted_query": [
            "( AND ( JOIN [ field of work ] [ biochemist ] ) ( JOIN ( R [ discoverer or inventor ] ) [ RNA polymerase ] ) )",
            "( AND ( JOIN [ occupation ] [ biochemist ] ) ( JOIN ( R [ discoverer ] ) [ RNA polymerase ] ) )",
            "( AND ( JOIN [ occupation ] [ biochemist ] ) ( JOIN ( R [ named after ] ) [ RNA polymerase ] ) )",
            "( AND ( JOIN [ occupational field ] [ biochemist ] ) ( JOIN ( R [ named after ] ) [ RNA polymerase ] ) )",
            "( AND ( JOIN [ occupation ] [ biochemist ] ) ( JOIN ( R [ discoverer or inventor ] ) [ RNA polymerase ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ occupation ] [ biochemist ] ) ( JOIN ( R [ discoverer or inventor ] ) [ RNA polymerase ] ) )"
    },
    {
        "question": "Question: { how many records were held for  sports event of  kamal ziani? }",
        "predicted_query": [
            "( JOIN ( R [ number of records held ] ) ( JOIN ( R [ participant in sport ] ) [ Kamal Ziani ] ) )",
            "( JOIN ( R [ number of records held ] ) ( JOIN ( R [ participant in the sport ] ) [ Kamal Ziani ] ) )",
            "( JOIN ( R [ number of records ] ) ( JOIN ( R [ participant in sport ] ) [ Kamal Ziani ] ) )",
            "( JOIN ( R [ record held ] ) ( JOIN ( R [ participant in sport ] ) [ Kamal Ziani ] ) )",
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ sport ] ) [ Kamal Ziani ] ) )"
        ],
        "gen_label": "( JOIN ( R [ record held ] ) ( JOIN ( R [ sports discipline competed in ] ) [ Kamal Ziani ] ) )"
    },
    {
        "question": "Question: { What is the  divisions of member of École Centrale de Lille ? }",
        "predicted_query": [
            "( JOIN ( R [ divisions ] ) ( JOIN ( R [ member of ] ) [ École Centrale de Lille ] ) )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ faculty member ] ) [ École Centrale de Lille ] ) )",
            "( JOIN [ divisions of ] [ École Centrale de Lille ] )",
            "( JOIN ( R [ division ] ) ( JOIN ( R [ member of ] ) [ École Centrale de Lille ] ) )",
            "( JOIN ( R [ divisions ] ) ( JOIN ( R [ faculty member ] ) [ École Centrale de Lille ] ) )"
        ],
        "gen_label": "( JOIN ( R [ organizational divisions ] ) ( JOIN ( R [ member of ] ) [ École Centrale de Lille ] ) )"
    },
    {
        "question": "Question: { Who gave the {contestant} of {series} of {Bully on the Bus} ? }",
        "predicted_query": [
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ part of ] ) [ Bully on the Bus ] ) )",
            "( JOIN ( R [ contestant ] ) ( JOIN ( R [ series ] ) [ Bully on the Bus ] ) )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ part of the series ] ) [ Bully on the Bus ] ) )",
            "( JOIN [ contestant ] [ Bully on the Bus ] )",
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ part of the series ] ) [ Bully on the Bus ] ) )"
        ],
        "gen_label": "( JOIN ( R [ cast member ] ) ( JOIN ( R [ part of the series ] ) [ Bully on the Bus ] ) )"
    },
    {
        "question": "Question: { What literary genre does Sarah Brightman belong to? }",
        "predicted_query": [
            "( JOIN ( R [ literary genre ] ) [ Sarah Brightman ] )",
            "( JOIN [ literary genre ] [ Sarah Brightman ] )",
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ member of work ] ) [ Sarah Brightman ] ) )",
            "( AND ( JOIN [ genre ] [ literary genre ] ) ( JOIN ( R [ genre ] ) [ Sarah Brightman ] ) )",
            "( JOIN [ literary genre ] [ Sarah Brightman ] )"
        ],
        "gen_label": "( JOIN ( R [ genre ] ) ( JOIN ( R [ performer ] ) [ Sarah Brightman in Concert ] ) )"
    },
    {
        "question": "Question: { Who wrote Trishira? }",
        "predicted_query": [
            "( JOIN ( R [ author ] ) ( JOIN ( R [ author of ] ) [ Trishira ] ) )",
            "( JOIN ( R [ author ] ) ( JOIN ( R [ writer ] ) [ Trishira ] ) )",
            "( JOIN ( R [ writer ] ) [ Trishira ] )",
            "( JOIN [ written by ] [ Trishira ] )",
            "( JOIN [ author ] [ Trishira ] )"
        ],
        "gen_label": "( JOIN ( R [ author ] ) ( JOIN ( R [ present in work ] ) [ Trishira ] ) )"
    },
    {
        "question": "Question: { What is  in the satellite bus of X Window System ? }",
        "predicted_query": [
            "( JOIN ( R [ satellite bus ] ) [ X Window System ] )",
            "( JOIN ( R [ has satellite bus ] ) [ X Window System ] )",
            "( JOIN [ satellite bus ] [ X Window System ] )",
            "( JOIN ( R [ satellite bus ] ) ( JOIN ( R [ part of ] ) [ X Window System ] ) )",
            "( AND ( JOIN [ has satellite bus ] [ X Window System ] ) ( JOIN ( R [ has part ] ) [ X Window System ] ) )"
        ],
        "gen_label": "( JOIN [ spacecraft bus ] [ X Window System ] )"
    },
    {
        "question": "Question: { what is the wives of landscape of snake dance, ruth st. denis? }",
        "predicted_query": [
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ location ] ) [ Snake Dance ] ) )",
            "( AND ( JOIN [ spouses ] [ Ruth St. Denis ] ) ( JOIN ( R [ influenced by ] ) [ Snake Dance ] ) )",
            "( JOIN [ spouses ] [ Ruth St. Denis ] ) ( JOIN ( R [ follower of ] ) [ Snake Dance ] )",
            "( AND ( JOIN [ marital status ] [ married ] ) ( JOIN ( R [ influenced by ] ) [ Snake Dance ] ) )",
            "( JOIN ( R [ wife ] ) ( JOIN ( R [ location ] ) [ Snake Dance ] ) )"
        ],
        "gen_label": "( JOIN ( R [ spouse ] ) ( JOIN ( R [ depicts ] ) [ Snake Dance, Ruth St. Denis ] ) )"
    },
    {
        "question": "Question: { What is first language of Dirk Nowitzki ? }",
        "predicted_query": [
            "( JOIN ( R [ first language ] ) [ Dirk Nowitzki ] )",
            "( JOIN [ first language ] [ Dirk Nowitzki ] )",
            "( JOIN ( R [ native language ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Dirk Nowitzki ] ) )",
            "( JOIN ( R JOIN ( R [ native language ] ) ) [ Dirk Nowitzki ] )",
            "( JOIN ( R [ spoken in ] ) ( JOIN ( R [ native language ] ) [ Dirk Nowitzki ] ) )"
        ],
        "gen_label": "( JOIN ( R [ has grammatical case ] ) ( JOIN ( R [ native language ] ) [ Dirk Nowitzki ] ) )"
    },
    {
        "question": "Question: { What are the game mechanics of Dungeons & Dragons? }",
        "predicted_query": [
            "( JOIN ( R [ game mechanics ] ) [ Dungeons & Dragons ] )",
            "( JOIN [ game mechanics ] [ Dungeons & Dragons ] )",
            "( JOIN ( R [ game mechanics ] ) [ Dungeons & Dragons ] )",
            "( JOIN ( R [ has game mechanics ] ) [ Dungeons & Dragons ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Dungeons & Dragons ] ) ( JOIN ( R [ game mechanics ] ) [ Dungeons & Dragons ] ) )"
        ],
        "gen_label": "( JOIN ( R [ game mechanics ] ) [ Dungeons & Dragons ] )"
    },
    {
        "question": "Question: { WHAT IS THE MUSHROOM CAP SHAPE OF PLEUROTUS OSTREATUS }",
        "predicted_query": [
            "( JOIN ( R [ shape ] ) ( JOIN ( R [ has taxon ] ) [ Pleurotus ostreatus ] ) )",
            "( AND ( JOIN [ shape ] [ conical ] ) ( JOIN ( R [ has taxon ID ] ) [ Pleurotus ostreatus ] ) )",
            "( JOIN ( R [ mushroom cap shape ] ) [ Pleurotus ostreatus ] )",
            "( JOIN [ mushroom cap shape ] [ Pleurotus ostreatus ] )",
            "( JOIN ( R [ has shape ] ) ( JOIN ( R [ has taxonomic rank ] ) [ Pleurotus ostreatus ] ) )"
        ],
        "gen_label": "( JOIN ( R [ mushroom cap shape ] ) [ Pleurotus ostreatus ] )"
    },
    {
        "question": "Question: { What is the drug interaction of the prescribed drug for focal epilepsy? }",
        "predicted_query": [
            "( JOIN ( R [ drug interaction ] ) ( JOIN ( R [ drug used for treatment ] ) [ focal epilepsy ] ) )",
            "( AND ( JOIN [ has drug interaction ] [ phenytoin ] ) ( JOIN ( R [ drug used for treatment ] ) [ focal epilepsy ] ) )",
            "( JOIN [ drug interaction ] [ focal epilepsy ] )",
            "( JOIN ( R [ drug interaction ] ) ( JOIN ( R [ prescribed drug ] ) [ focal epilepsy ] ) )",
            "( JOIN ( R [ drug interaction ] ) ( JOIN ( R [ drug for the treatment of ] ) [ focal epilepsy ] ) )"
        ],
        "gen_label": "( JOIN ( R [ significant drug interaction ] ) ( JOIN ( R [ drug or therapy used for treatment ] ) [ focal epilepsy ] ) )"
    },
    {
        "question": "Question: { WHO STUDIED THE SUBITEM OF ENGINEERING ETHICS? }",
        "predicted_query": [
            "( JOIN ( R [ student ] ) ( JOIN ( R [ field of work ] ) [ engineering ethics ] ) )",
            "( JOIN ( R [ student of ] ) ( JOIN ( R [ field of work ] ) [ engineering ethics ] ) )",
            "( [ joined ] [ field of study ] )",
            "( JOIN [ studied by ] [ engineering ethics ] )",
            "( AND ( JOIN [ studied at ] [ engineering ethics ] ) ( JOIN ( R [ field of study ] ) [ William James ] ) )"
        ],
        "gen_label": "( JOIN ( R [ practiced by ] ) ( JOIN ( R [ facet of ] ) [ engineering ethics ] ) )"
    },
    {
        "question": "Question: { What is Quecha's Wikimedia language code? }",
        "predicted_query": [
            "( JOIN [ Wikimedia language code ] [ Quechua ] )",
            "[ JOIN [ R [ Wikimedia language code ] ] [ Quechua ] ]",
            "( JOIN ( R [ Wikimedia Language Code ] ) [ Quechua ] )",
            "( AND ( JOIN [ ISO 639-3 code ] [ Quechua ] ) ( JOIN ( R [ official language ] ) [ Quechua ] ) )",
            "( JOIN [ Wikimedia Language Code ] [ Quechua ] )"
        ],
        "gen_label": "( JOIN ( R [ Wikimedia language code ] ) [ Quechua ] )"
    },
    {
        "question": "Question: { Who founded postmodernism? }",
        "predicted_query": [
            "( JOIN ( R [ founded by ] ) [ postmodernism ] )",
            "( JOIN ( R [ founder ] ) [ postmodernism ] )",
            "( JOIN [ founded by ] [ postmodernism ] )",
            "( JOIN [ founded ] [ postmodernism ] )",
            "( JOIN ( R [ founded by ] ) [ postmodernism ] )"
        ],
        "gen_label": "( JOIN ( R [ member of ] ) ( JOIN ( R [ founded by ] ) [ postmodernism ] ) )"
    },
    {
        "question": "Question: { Which is the top-level Internet domain of Saint-Barthélemy? }",
        "predicted_query": [
            "( JOIN ( R [ top-level Internet domain ] ) [ Saint-Barthélemy ] )",
            "( JOIN ( R [ country code ] ) ( JOIN ( R [ country of origin ] ) [ Saint-Barthélemy ] ) )",
            "( JOIN ( R [ country subdivision ] ) ( JOIN ( R [ country ] ) [ Saint-Barthélemy ] ) )",
            "( JOIN ( R [ top-level domain ] ) [ Saint-Barthélemy ] )",
            "( JOIN [ top-level Internet domain ] [ Saint-Barthélemy ] )"
        ],
        "gen_label": "( JOIN ( R [ top-level Internet domain ] ) [ Saint Barthélemy ] )"
    },
    {
        "question": "Question: { What is the Cultural heritage database in Austria ObjektID for Belvedere? }",
        "predicted_query": [
            "( JOIN ( R [ Cultural heritage database in Austria ObjektID ] ) [ Belvedere ] )",
            "( JOIN ( R [ Cultural Heritage Database in Austria ObjektID ] ) [ Belvedere ] )",
            "( JOIN ( R [ Cultural heritage database in Austria ObjektID ] ) [ Belvedere ] )",
            "( JOIN ( R [ Cultural Heritage Database in Austria object ID ] ) [ Belvedere ] )",
            "( AND ( JOIN [ cultural heritage database ID ] [ Belvedere ] ) ( JOIN ( R [ ID ] ) [ Belvedere ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Cultural heritage database in Austria ObjektID ] ) [ Belvedere ] )"
    },
    {
        "question": "Question: { Which is bordered by the principle office of The Daily Manila Shimbun? }",
        "predicted_query": [
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ headquarters location ] ) [ The Daily Manila Shimbun ] ) )",
            "( AND ( JOIN [ shares border with ] [ Manila ] ) ( JOIN ( R [ headquarters location ] ) [ The Daily Manila Shimbun ] ) )",
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ place of work ] ) [ The Daily Manila Shimbun ] ) )",
            "( AND ( JOIN [ shares border with ] [ The Daily Manila Shimbun ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ The Daily Manila Shimbun ] ) )",
            "( JOIN [ shares border with ] [ The Daily Manila Shimbun ] )"
        ],
        "gen_label": "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ headquarters location ] ) [ The Daily Manila Shimbun ] ) )"
    },
    {
        "question": "Question: { Brown has what spore print color? }",
        "predicted_query": [
            "( JOIN ( R [ spore print color ] ) [ Brown ] )",
            "( JOIN [ spore print color ] [ brown ] )",
            "( AND ( JOIN [ color ] [ brown ] ) ( JOIN ( R [ spore color ] ) [ brown ] ) )",
            "( JOIN [ spore print color ] [ brown ] )",
            "( AND ( JOIN [ has spore print color ] [ brown ] ) ( JOIN ( R [ color ] ) [ spore ] ) )"
        ],
        "gen_label": "( JOIN [ spore print color ] [ brown ] )"
    },
    {
        "question": "Question: { Who is the seiyu of part of a series of Max Jets? }",
        "predicted_query": [
            "( JOIN ( R [ voice actor ] ) ( JOIN ( R [ part of the series ] ) [ Max Jets ] ) )",
            "( JOIN ( R [ voice actor ] ) ( JOIN ( R [ part of the series ] ) [ Max Jets ] ) )",
            "( JOIN ( R [ seiyu ] ) ( JOIN ( R [ part of the series ] ) [ Max Jets ] ) )",
            "( AND ( JOIN [ character in series ] [ Max Jets ] ) ( JOIN ( R [ voice actor ] ) [ Max Jets ] ) )",
            "( JOIN ( R [ voice actor ] ) ( JOIN ( R [ part of the series ] ) [ Max Jet ] ) )"
        ],
        "gen_label": "( JOIN ( R [ voice actor ] ) ( JOIN ( R [ part of the series ] ) [ Max Jets ] ) )"
    },
    {
        "question": "Question: { Who is bestowed by the award won from Karmen Jelincic? }",
        "predicted_query": [
            "( JOIN ( R [ award received ] ) ( JOIN ( R [ winner ] ) [ Karmen Jelenić ] ) )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ award received ] ) [ Karmen Jelincic ] ) )",
            "( AND ( JOIN [ award received ] [ Karmen Jelenić ] ) ( JOIN ( R [ awarded to ] ) [ Karmen Jelenić ] ) )",
            "( JOIN ( R [ awarded by ] ) ( JOIN ( R [ award received ] ) [ Karmen Jelenić ] ) )",
            "( JOIN [ award won ] [ Karmen Jelenić ] )"
        ],
        "gen_label": "( JOIN ( R [ conferred by ] ) ( JOIN ( R [ award received ] ) [ Karmen Jelincic ] ) )"
    },
    {
        "question": "Question: { Which is the public holiday of Georgia? }",
        "predicted_query": [
            "( JOIN ( R [ public holiday ] ) [ Georgia ] )",
            "( JOIN [ public holiday ] [ Georgia ] )",
            "( [ joined by ] [ public holiday ] [ Georgia ] )",
            "( JOIN ( R [ public holiday ] ) [ Georgia ] )",
            "( AND ( JOIN [ observed in ] [ public holiday ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Georgia ] ) )"
        ],
        "gen_label": "( JOIN ( R [ public holiday ] ) [ Georgia ] )"
    },
    {
        "question": "Question: { Which is the spin quantum number for boson? }",
        "predicted_query": [
            "( JOIN ( R [ spin quantum number ] ) [ boson ] )",
            "( JOIN [ spin quantum number ] [ boson ] )",
            "( JOIN [ spin quantum number ] [ boson ] )",
            "( JOIN ( R [ spin quantum number ] ) [ boson ] )",
            "( AND ( JOIN [ has spin quantum number ] ) ( JOIN ( R [ spin quantum number ] ) [ boson ] ) )"
        ],
        "gen_label": "( JOIN ( R [ spin quantum number ] ) [ boson ] )"
    },
    {
        "question": "Question: { Which is {award received} by {pupil} of {Enrico Fermi} ? }",
        "predicted_query": [
            "( JOIN ( R [ award received ] ) ( JOIN ( R [ student ] ) [ Enrico Fermi ] ) )",
            "( JOIN ( R [ award received ] ) ( JOIN ( R [ student ] ) [ Enrico Fermi ] ) )",
            "( AND ( JOIN [ recipient ] [ Enrico Fermi ] ) ( JOIN ( R [ award received ] ) [ Enrico Fermi ] ) )",
            "( JOIN [ award received ] [ Enrico Fermi ] )",
            "( JOIN ( R [ awarded to ] ) ( JOIN ( R [ student of ] ) [ Enrico Fermi ] ) )"
        ],
        "gen_label": "( JOIN ( R [ award received ] ) ( JOIN ( R [ student ] ) [ Enrico Fermi ] ) )"
    },
    {
        "question": "Question: { Which is the honorific prefix for Dame? }",
        "predicted_query": [
            "( JOIN ( R [ honorific prefix ] ) [ Dame ] )",
            "( JOIN [ honorific prefix ] [ Dame ] )",
            "",
            "( JOIN ( R [ honorific prefix ] ) [ Dame ] )",
            "( AND ( JOIN [ honours and awards ] ) ( JOIN ( R [ honorific prefix ] ) [ Dame Judi Dench ] ) )"
        ],
        "gen_label": "( JOIN [ honorific prefix ] [ Dame ] )"
    },
    {
        "question": "Question: { Name the songwriter of Fantasia on a Theme by Thomas Tallis and has Joan Trimble as disciple. }",
        "predicted_query": [
            "( AND ( JOIN [ disciple ] [ Joan Trimble ] ) ( JOIN ( R [ composer ] ) [ Fantasia on a Theme by Thomas Tallis ] ) )",
            "( AND ( JOIN [ student ] [ Joan Trimble ] ) ( JOIN ( R [ composer ] ) [ Fantasia on a Theme by Thomas Tallis ] ) )",
            "( AND ( JOIN [ pupil ] [ Joan Trimble ] ) ( JOIN ( R [ composer ] ) [ Fantasia on a Theme by Thomas Tallis ] ) )",
            "( JOIN ( R [ student of ] ) ( JOIN ( R [ composer ] ) [ Fantasia on a Theme by Thomas Tallis ] ) )",
            "( JOIN [ disciple of ] [ Joan Trimble ] ) ( JOIN ( R [ composer ] ) [ Fantasia on a Theme by Thomas Tallis ] )"
        ],
        "gen_label": "( AND ( JOIN [ student ] [ Joan Trimble ] ) ( JOIN ( R [ composer ] ) [ Fantasia on a Theme by Thomas Tallis ] ) )"
    },
    {
        "question": "Question: { What is in the village of Negev that has diplomatic relations with the Czech Republic? }",
        "predicted_query": [
            "( AND ( JOIN [ diplomatic relations ] [ Czech Republic ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Negev ] ) )",
            "( AND ( JOIN [ has diplomatic relations with ] [ Czech Republic ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Negev ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Negev ] ) ( JOIN ( R [ diplomatic relations ] ) [ Czech Republic ] ) )",
            "( JOIN [ has diplomatic relations with ] [ Czech Republic ] ) ( JOIN ( R [ country ] ) [ Negev ] )",
            "( AND ( JOIN [ diplomatic relation ] [ Czech Republic ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Negev ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ diplomatic relation ] [ Czech Republic ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Negev ] ) )"
    },
    {
        "question": "Question: { Who is the writer of the prequel \"Girls Under Pressure? }",
        "predicted_query": [
            "( JOIN ( R [ writer ] ) ( JOIN ( R [ based on ] ) [ Girls Under Pressure ] ) )",
            "( JOIN ( R [ author ] ) ( JOIN ( R [ part of the series ] ) [ Girls Under Pressure ] ) )",
            "( JOIN [ writer ] [ Girls Under Pressure ] )",
            "( JOIN ( R [ based on ] ) ( JOIN ( R [ writer ] ) [ Girls Under Pressure ] ) )",
            "( JOIN ( R [ author ] ) ( JOIN ( R [ prequel ] ) [ Girls Under Pressure ] ) )"
        ],
        "gen_label": "( JOIN ( R [ author ] ) ( JOIN ( R [ follows ] ) [ Girls under Pressure ] ) )"
    },
    {
        "question": "Question: { What is the Bien de Interes Cultural (BIC) code of Cave of Altamira? }",
        "predicted_query": [
            "( JOIN ( R [ Bien de Interes Cultural (BIC) code ] ) [ Cave of Altamira ] )",
            "( JOIN ( R [ Bien de Interés Cultural (BIC) code ] ) [ Altamira Cave ] )",
            "( AND ( JOIN [ BIC ID ] [ Cave of Altamira ] ) ( JOIN ( R [ UNESCO World Heritage Site ID ] ) [ Cave of Altamira ] ) )",
            "( JOIN ( R [ Bien de Interés Cultural ] ) [ Cave of Altamira ] )",
            "( JOIN ( R [ Bien de Interes Cultural ( BIC ) ] ) [ Cave of Altamira ] )"
        ],
        "gen_label": "( JOIN ( R [ Asset of cultural interest code ] ) [ Cave of Altacosa ] )"
    },
    {
        "question": "Question: { What are the official languages of Grand Duchy of Finland? }",
        "predicted_query": [
            "( JOIN ( R [ official language ] ) ( JOIN ( R [ country ] ) [ Grand Duchy of Finland ] ) )",
            "( JOIN [ official language ] [ Grand Duchy of Finland ] )",
            "( AND ( JOIN [ languages spoken, written or signed ] [ Finnish ] ) ( JOIN ( R [ official language ] ) [ Grand Duchy of Finland ] ) )",
            "( JOIN ( R [ has official language ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Grand Duchy of Finland ] ) )",
            "( JOIN ( R [ official language ] ) [ Grand Duchy of Finland ] )"
        ],
        "gen_label": "( JOIN ( R [ has grammatical case ] ) ( JOIN ( R [ official language ] ) [ Grand Principality of Finland ] ) )"
    },
    {
        "question": "Question: { What type of artwork does Jane Pauley's husband do? }",
        "predicted_query": [
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ spouse ] ) [ Jane Pauley ] ) )",
            "( JOIN ( R [ type of work ] ) ( JOIN ( R [ spouse ] ) [ Jane Pauley ] ) )",
            "( AND ( JOIN [ field of work ] [ artist ] ) ( JOIN ( R [ spouse ] ) [ Jane Pauley ] ) )",
            "( JOIN [ type of artwork ] [ Jane Pauley's husband ] )",
            "( AND ( JOIN [ occupation ] [ artist ] ) ( JOIN ( R [ spouse ] ) [ Jane Pauley ] ) )"
        ],
        "gen_label": "( JOIN ( R [ notable work ] ) ( JOIN ( R [ spouse ] ) [ Jane Pauley ] ) )"
    },
    {
        "question": "Question: { who work  of actor of looney tunes Super Stars' Pepe Le Pew: Zee Best of Zee Best ? }",
        "predicted_query": [
            "( AND ( JOIN [ nominated for ] [ Zee Best of Zee Best ] ) ( JOIN ( R [ cast member ] ) [ Looney Tunes Super Stars ] ) )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ nominated for ] ) [ Looney Tunes Super Stars: The Best of Bugs Bunny ] ) )",
            "( JOIN ( R [ employer ] ) ( JOIN ( R [ cast member ] ) [ Looney Tunes Super Stars' Pepe Le Pew ] ) )",
            "( AND ( JOIN [ work ] [ Zee Best of Zee Best ] ) ( JOIN ( R [ cast member ] ) [ Looney Tunes Super Stars ] ) )",
            "( JOIN ( R [ nominated for ] ) [ Zee Best of Zee Best ] )"
        ],
        "gen_label": "( JOIN ( R [ present in work ] ) ( JOIN ( R [ cast member ] ) [ Looney Tunes Super Stars' Pepe Le Pew: Zee Best of Zee Best ] ) )"
    },
    {
        "question": "Question: { Who compiled and published A Portrait of the Artist as a Young Man? }",
        "predicted_query": [
            "( JOIN ( R [ compiled and published ] ) ( JOIN ( R [ author ] ) [ A Portrait of the Artist as a Young Man ] ) )",
            "( JOIN ( R [ published by ] ) ( JOIN ( R [ author ] ) [ A Portrait of the Artist as a Young Man ] ) )",
            "( JOIN [ compiled and published ] [ A Portrait of the Artist as a Young Man ] )",
            "( JOIN ( R [ publisher ] ) ( JOIN ( R [ author ] ) [ A Portrait of the Artist as a Young Man ] ) )",
            "( JOIN ( R [ publisher ] ) ( JOIN ( R [ creator ] ) [ A Portrait of the Artist as a Young Man ] ) )"
        ],
        "gen_label": "( JOIN ( R [ editor ] ) ( JOIN ( R [ publisher ] ) [ A Portrait of the Artist as a Young Man ] ) )"
    },
    {
        "question": "Question: { What city is adjacent to Essex and is a Royal Borough of Kensington and Chelsea? }",
        "predicted_query": [
            "( AND ( JOIN [ adjacent to ] [ Essex ] ) ( JOIN ( R [ administrative territorial entity ] ) [ Royal Borough of Kensington and Chelsea ] ) )",
            "( AND ( JOIN [ shares border with ] [ Essex ] ) ( JOIN ( R [ administrative territorial entity ] ) [ Royal Borough of Kensington and Chelsea ] ) )",
            "( AND ( JOIN [ admin [ Royal Borough of Kensington and Chelsea ] ] ) ( JOIN ( R [ shares border with ] ) [ Essex ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Royal Borough of Kensington and Chelsea ] ) ( JOIN ( R [ shares border with ] ) [ Essex ] ) )",
            "( AND ( JOIN [ shares border with ] [ Essex ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Royal Borough of Kensington and Chelsea ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ contains the administrative territorial entity ] [ Royal Borough of Kensington and Chelsea ] ) ( JOIN ( R [ shares border with ] ) [ Essex ] ) )"
    },
    {
        "question": "Question: { What do you call a citizen of Belgium? }",
        "predicted_query": [
            "( JOIN ( R [ population ] ) ( JOIN ( R [ country of citizenship ] ) [ Belgium ] ) )",
            "( [ joined ] [ citizen of ] )",
            "( JOIN ( R [ country of citizenship ] ) ( JOIN ( R [ country of origin ] ) [ Belgium ] ) )",
            "( JOIN [ citizen of ] [ Belgium ] )",
            "( JOIN [ country of citizenship ] [ Belgium ] )"
        ],
        "gen_label": "( JOIN ( R [ member of ] ) ( JOIN ( R [ diplomatic relation ] ) [ Belgium ] ) )"
    },
    {
        "question": "Question: { Which is the HQ location of the party of the member Rajesh Khanna? }",
        "predicted_query": [
            "( JOIN ( R [ headquarters location ] ) ( JOIN ( R [ member of political party ] ) [ Rajesh Khanna ] ) )",
            "( JOIN ( R [ headquarters location ] ) ( JOIN ( R [ member of political party ] ) [ Rajesh Khanna ] ) )",
            "( JOIN [ headquarters location ] [ Rajesh Khanna ] )",
            "( AND ( JOIN [ location of headquarters ] [ Rajesh Khanna ] ) ( JOIN ( R [ member of political party ] ) [ Rajesh Khanna ] ) )",
            "( JOIN ( R [ headquarters location ] ) ( JOIN ( R [ political party ] ) [ Rajesh Khanna ] ) )"
        ],
        "gen_label": "( JOIN ( R [ headquarters location ] ) ( JOIN ( R [ member of political party ] ) [ Rajesh Khanna ] ) )"
    },
    {
        "question": "Question: { Which is the publisher of Through the Looking-Glass? }",
        "predicted_query": [
            "( JOIN [ publisher ] [ Through the Looking-Glass ] )",
            "( JOIN ( R [ publisher ] ) [ Through the Looking-Glass ] )",
            "( JOIN ( R [ publisher ] ) [ Through the Looking-Glass and What Alice Found There ] )",
            "( JOIN [ publisher ] [ Through the Looking-Glass and What Alice Found There ] )",
            "( JOIN ( R [ publisher ] ) ( JOIN ( R [ author ] ) [ Through the Looking-Glass ] ) )"
        ],
        "gen_label": "( JOIN ( R [ publisher ] ) [ Through the Looking-Glass ] )"
    },
    {
        "question": "Question: { Which is the Cycling Quotient male cyclist ID of Chris Froome? }",
        "predicted_query": [
            "( JOIN ( R [ Cycling Quotient male cyclist ID ] ) [ Chris Froome ] )",
            "( JOIN ( R [ Cycling Quotient male cyclist ID ] ) [ Chris Froome ] )",
            "( JOIN ( R [ Cycling Quotient cyclist ID ] ) [ Chris Froome ] )",
            "( JOIN ( R [ Cycling Quotient male cyclist ID ] ) [ Chris Froome ] )",
            "( JOIN ( R [ CyclingQuotes male cyclist ID ] ) [ Chris Froome ] )"
        ],
        "gen_label": "( JOIN ( R [ CQ Ranking male cyclist ID ] ) [ Chris Froome ] )"
    },
    {
        "question": "Question: { Which is the Art Museum of Estonia artist ID for Egon Schiele? }",
        "predicted_query": [
            "( JOIN ( R [ Art Museum of Estonia artist ID ] ) [ Egon Schiele ] )",
            "[ jointed by ] [ Egon Schiele ]",
            "( JOIN ( R [ artist ID in the Art Museum of Estonia ] ) [ Egon Schiele ] )",
            "( JOIN ( R [ artist ID ] ) [ Egon Schiele ] )",
            "( AND ( JOIN [ artist ID ] [ Art Museum of Estonia ] ) ( JOIN ( R [ ID ] ) [ Egon Schiele ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Art Museum of Estonia artist ID ] ) [ Egon Schiele ] )"
    },
    {
        "question": "Question: { What is the portrait of Thomas Lawrence's major works? }",
        "predicted_query": [
            "( JOIN ( R [ portrait ] ) ( JOIN ( R [ notable work ] ) [ Thomas Lawrence ] ) )",
            "( JOIN ( R [ portrait of ] ) ( JOIN ( R [ major works ] ) [ Thomas Lawrence ] ) )",
            "( JOIN ( R [ depicts ] ) ( JOIN ( R [ notable work ] ) [ Thomas Lawrence ] ) )",
            "( JOIN [ portrait of ] [ Thomas Lawrence ] )",
            "( AND ( JOIN [ notable work ] [ Portrait of a Lady ] ) ( JOIN ( R [ influenced by ] ) [ Thomas Lawrence ] ) )"
        ],
        "gen_label": "( JOIN ( R [ depicts ] ) ( JOIN ( R [ notable work ] ) [ Thomas Lawrence ] ) )"
    },
    {
        "question": "Question: { What is Allcinema film ID for Groundhog Day ? }",
        "predicted_query": [
            "( JOIN ( R [ AllCinema film ID ] ) [ Groundhog Day ] )",
            "( JOIN [ AllCinema film ID ] [ Groundhog Day ] )",
            "( JOIN ( R [ Allcinema film ID ] ) [ Groundhog Day ] )",
            "( [ joined by ] [ AllCinema film ID ] [ Groundhog Day ] )",
            "[tell us]"
        ],
        "gen_label": "( JOIN ( R [ Allcinema film ID ] ) [ Groundhog Day ] )"
    },
    {
        "question": "Question: { Who is the favorite player of Objective-C, that was developed by Daniel Henry Holmes Ingalls? }",
        "predicted_query": [
            "( AND ( JOIN [ developer ] [ Daniel Henry Holmes Ingalls ] ) ( JOIN ( R [ influenced by ] ) [ Objective-C ] ) )",
            "( AND ( JOIN [ sports team player ] [ Objective-C ] ) ( JOIN ( R [ developer ] ) [ Objective-C ] ) )",
            "( AND ( JOIN [ developed by ] [ Daniel Henry Holmes Ingalls ] ) ( JOIN ( R [ influenced by ] ) [ Objective-C ] ) )",
            "( AND ( JOIN [ developer ] [ Daniel Henry Holmes Ingalls ] ) ( JOIN ( R [ sport ] ) [ Objective-C ] ) )",
            "( JOIN ( R [ favorite player ] ) ( JOIN ( R [ developer ] ) [ Objective-C ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ developer ] [ Dan Ingalls ] ) ( JOIN ( R [ influenced by ] ) [ Objective-C ] ) )"
    },
    {
        "question": "Question: { Which is the ultimate tensile strength of nylon? }",
        "predicted_query": [
            "( JOIN ( R [ ultimate tensile strength ] ) [ nylon ] )",
            "( JOIN ( R [ ultimate tensile strength ] ) [ nylon ] )",
            "( JOIN [ ultimate tensile strength ] [ nylon ] )",
            "( [ joined by ] [ ultimate tensile strength ] [ nylon ] )",
            "( JOIN ( R [ has property ] ) [ ultimate tensile strength ] )"
        ],
        "gen_label": "( JOIN ( R [ ultimate tensile strength ] ) [ nylon ] )"
    },
    {
        "question": "Question: { What is {olympic record} of {sports} {relay race} ? }",
        "predicted_query": [
            "( JOIN ( R [ Olympic record ] ) ( JOIN ( R [ sport ] ) [ relay race ] ) )",
            "( JOIN ( R [ record ] ) ( JOIN ( R [ participant in sport ] ) [ relay race ] ) )",
            "( JOIN ( R [ Olympic record ] ) ( JOIN ( R [ participant in sport ] ) [ relay race ] ) )",
            "( JOIN ( R [ participant in sport ] ) ( JOIN ( R [ sports discipline ] ) [ relay race ] ) )",
            "( AND ( JOIN [ sport ] [ relay race ] ) ( JOIN ( R [ record holder ] ) [ Olympic Games ] ) )"
        ],
        "gen_label": "( JOIN ( R [ record or record progression ] ) ( JOIN ( R [ sport ] ) [ relay race ] ) )"
    },
    {
        "question": "Question: { At what temperature is phosphine flammable? }",
        "predicted_query": [
            "( JOIN ( R [ flammability limit ] ) ( JOIN ( R [ uses ] ) [ phosphine ] ) )",
            "( JOIN ( R [ boiling point ] ) ( JOIN ( R [ reacts with ] ) [ phosphine ] ) )",
            "( AND ( JOIN [ temperature of deposition ] [ phosphine ] ) ( JOIN ( R [ flammable limit ] ) [ phosphine ] ) )",
            "( JOIN [ flammable temperature ] [ phosphine ] )",
            "( JOIN [ temperature at which flammable or combustible ] [ phosphine ] )"
        ],
        "gen_label": "( JOIN ( R [ lower flammable limit ] ) [ phosphine ] )"
    },
    {
        "question": "Question: { Who was {first} {discoverer} of {Indo-European languages} ? }",
        "predicted_query": [
            "( JOIN ( R [ first ] ) ( JOIN ( R [ discoverer ] ) [ Indo-European languages ] ) )",
            "( AND ( JOIN [ discoverer ] [ Indo-European languages ] ) ( JOIN ( R [ discoverer ] ) [ Indo-European languages ] ) )",
            "( JOIN ( R [ discoverer ] ) ( JOIN ( R [ linguistic orphan ] ) [ Indo-European languages ] ) )",
            "( JOIN ( R [ first discoverer ] ) ( JOIN ( R [ linguistic orphan ] ) [ Indo-European languages ] ) )",
            "( JOIN [ first discoverer ] [ Indo-European languages ] )"
        ],
        "gen_label": "( JOIN ( R [ native language ] ) ( JOIN ( R [ discoverer or inventor ] ) [ Indo-European ] ) )"
    },
    {
        "question": "Question: { what is the place of origin of the executive power headed by Led Zappelin? }",
        "predicted_query": [
            "( AND ( JOIN [ head of government ] [ Led Zeppelin ] ) ( JOIN ( R [ place of origin ] ) [ Led Zeppelin ] ) )",
            "( JOIN ( R [ capital ] ) ( JOIN ( R [ head of government ] ) [ Led Zeppelin ] ) )",
            "( JOIN [ place of origin ] [ Led Zeppelin ] )",
            "( AND ( JOIN [ seat ] [ Led Zeppelin ] ) ( JOIN ( R [ head of government ] ) [ Led Zeppelin ] ) )",
            "( JOIN ( R [ place of origin ] ) ( JOIN ( R [ head of government ] ) [ Led Zeppelin ] ) )"
        ],
        "gen_label": "( JOIN ( R [ head of government ] ) ( JOIN ( R [ country of origin ] ) [ Led Zeppelin ] ) )"
    },
    {
        "question": "Question: { \"Which is {bordered by} of {Tamaulipas}, where has {has shires} is {Brewster County} ?\" }",
        "predicted_query": [
            "( AND ( JOIN [ has administrative territorial entity ] [ Brewster County ] ) ( JOIN ( R [ shares border with ] ) [ Tamaulipas ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Brewster County ] ) ( JOIN ( R [ shares border with ] ) [ Tamaulipas ] ) )",
            "( AND ( JOIN [ shares border with ] [ Brewster County ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Tamaulipas ] ) )",
            "( JOIN ( R [ shares border with ] ) [ Tamaulipas ] )",
            "( AND ( JOIN [ has administrative subdivision ] [ Brewster County ] ) ( JOIN ( R [ shares border with ] ) [ Tamaulipas ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ contains the administrative territorial entity ] [ Brewster County ] ) ( JOIN ( R [ shares border with ] ) [ Tamaulipas ] ) )"
    },
    {
        "question": "Question: { What is RePEc Short-ID for Lars Peter Hansen ? }",
        "predicted_query": [
            "[ JOIN [ RePEc short ID ] ] [ Lars Peter Hansen ]",
            "( JOIN ( R [ RePEc short-ID ] ) [ Lars Peter Hansen ] )",
            "( AND ( JOIN [ RECORDS.com artist ID ] [ Lars Peter Hansen ] ) ( JOIN ( R [ RePEc short-ID ] ) [ Lars Peter Hansen ] ) )",
            "( JOIN ( R [ RePEc Author ID ] ) [ Lars Peter Hansen ] )",
            "( JOIN ( R [ RePEC short-ID ] ) [ Lars Peter Hansen ] )"
        ],
        "gen_label": "( JOIN ( R [ RePEc Short-ID ] ) [ Lars Peter Hansen ] )"
    },
    {
        "question": "Question: { What is the source of material of Central Africa? }",
        "predicted_query": [
            "( JOIN ( R [ material ] ) ( JOIN ( R [ located in ] ) [ Central Africa ] ) )",
            "( JOIN [ source of material ] [ Central Africa ] )",
            "( JOIN [ source of material ] [ Central Africa ] )",
            "( JOIN ( R [ source of material ] ) [ Central Africa ] )",
            "( AND ( JOIN [ location of extraction ] [ Central Africa ] ) ( JOIN ( R [ material ] ) [ Central Africa ] ) )"
        ],
        "gen_label": "( JOIN [ source of material ] [ Central Africa ] )"
    },
    {
        "question": "Question: { What is the Swedish Gravestone ID of Alfred Nobel? }",
        "predicted_query": [
            "( JOIN [ Swedish Gravestone ID ] [ Alfred Nobel ] )",
            "( JOIN ( R [ Swedish Gravestone ID ] ) [ Alfred Nobel ] )",
            "( JOIN ( R [ Swedish Gravestone ID ] ) [ Alfred Nobel ] )",
            "( JOIN ( R [ Swedish Gravestone ID ] ) [ Alfred Nobel ] )",
            "( AND ( JOIN [ Gravestone ID ] [ Alfred Nobel ] ) ( JOIN ( R [ located in ] ) [ Alfred Nobel ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Swedish Gravestone ID ] ) [ Alfred Nobel ] )"
    },
    {
        "question": "Question: { What is Museofile of Musée d'Orsay ? }",
        "predicted_query": [
            "( JOIN ( R [ Museofile ID ] ) [ Musée d'Orsay ] )",
            "( JOIN [ Museofile of ] [ Musée d'Orsay ] )",
            "( JOIN ( R [ Museofile ] ) [ Musée d'Orsay ] )",
            "( JOIN ( R [ Museofile ID ] ) [ Musée d'Orsay ] )",
            "( JOIN ( R [ Museum of the Day ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Musée d'Orsay ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Museofile ID ] ) [ Musée d'Orsay ] )"
    },
    {
        "question": "Question: { What is the Open Media Database ID of Mad Max? }",
        "predicted_query": [
            "( JOIN ( R [ Open Media Database ID ] ) [ Mad Max ] )",
            "( JOIN [ Open Media Database ID ] [ Mad Max ] )",
            "( JOIN ( R [ Open Media Database ID ] ) [ Mad Max ] )",
            "( JOIN ( R [ Open Media Database ID ] ) [ Mad Max ] )",
            "( AND ( JOIN [ OMDb ID ] [ Mad Max ] ) ( JOIN ( R [ ID in this field ] ) [ Mad Max ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Open Media Database film ID ] ) [ Mad Max ] )"
    },
    {
        "question": "Question: { What is depicted in the Garden of Guangzhou? }",
        "predicted_query": [
            "( JOIN [ depicted in ] [ Garden of Guangzhou ] )",
            "( JOIN ( R [ depicted in ] ) ( JOIN ( R [ located in ] ) [ Guangzhou ] ) )",
            "( JOIN ( R [ depicts ] ) ( JOIN ( R [ place of work ] ) [ Garden of Guangzhou ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Guangzhou ] ) ( JOIN ( R [ depicts ] ) [ Garden of Guangzhou ] ) )",
            "( JOIN ( R [ depicted in ] ) [ Garden of Guangzhou ] )"
        ],
        "gen_label": "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ depicts ] ) [ Garden in Guangzhou ] ) )"
    },
    {
        "question": "Question: { Which are the papers of the narrative set in The Grapes of Wrath? }",
        "predicted_query": [
            "( JOIN [ papers ] [ The Grapes of Wrath ] )",
            "( JOIN ( R [ papers ] ) ( JOIN ( R [ narrative location ] ) [ The Grapes of Wrath ] ) )",
            "( JOIN ( R [ has work ] ) ( JOIN ( R [ narrative location ] ) [ The Grapes of Wrath ] ) )",
            "( AND ( JOIN [ narrative work ] [ The Grapes of Wrath ] ) ( JOIN ( R [ author ] ) [ The Grapes of Wrath ] ) )",
            "( JOIN ( R [ paper ] ) ( JOIN ( R [ narrative work ] ) [ The Grapes of Wrath ] ) )"
        ],
        "gen_label": "( JOIN ( R [ archives at ] ) ( JOIN ( R [ narrative location ] ) [ The Grapes of Wrath ] ) )"
    },
    {
        "question": "Question: { What is Gamebase64 identifier for Donkey Kong? }",
        "predicted_query": [
            "( JOIN ( R [ Gamebase64 ID ] ) [ Donkey Kong ] )",
            "( JOIN ( R [ Gamebase64 ID ] ) [ Donkey Kong ] )",
            "( JOIN ( R [ Gamebase64 ID ] ) ( JOIN ( R [ question ] ) [ Donkey Kong ] ) )",
            "( JOIN ( R [ Gamebase64 ID ] ) [ Donkey Kong ] )",
            "( JOIN ( R [ Gamebase64 ID ] ) [ Donkey Kong ] )"
        ],
        "gen_label": "( JOIN ( R [ Gamebase64 ID ] ) [ Donkey Kong ] )"
    },
    {
        "question": "Question: { What is srgb colour hex triplet of colour charcoal? }",
        "predicted_query": [
            "( JOIN ( R [ sRGB colour space hex triplet ] ) [ charcoal ] )",
            "( AND ( JOIN [ RGB triplet ] [ charcoal ] ) ( JOIN ( R [ color name ] ) [ charcoal ] ) )",
            "( JOIN ( R [ SRGB colour hex triplet ] ) [ charcoal ] )",
            "( JOIN ( R [ sRGB color space HEX triplet ] ) [ charcoal ] )",
            "( JOIN [ sRGB colour hex triplet ] [ charcoal ] )"
        ],
        "gen_label": "( JOIN ( R [ sRGB color hex triplet ] ) ( JOIN ( R [ color ] ) [ charcoal ] ) )"
    },
    {
        "question": "Question: { What is on the tracklist of the art collection of Papryus Oxyrchynchus 223? }",
        "predicted_query": [
            "( JOIN ( R [ tracklist ] ) ( JOIN ( R [ artist ] ) [ Papyrus Oxyrhynchus 223 ] ) )",
            "( JOIN ( R [ soundtrack ] ) ( JOIN ( R [ contains the administrative territorial entity ] ) [ Papyrus Oxyrhynchus 223 ] ) )",
            "( JOIN ( R [ track listing ] ) ( JOIN ( R [ part of the series ] ) [ Papyrus Oxyrhynchus 223 ] ) )",
            "( JOIN ( R [ has track listing ] ) ( JOIN ( R [ artist ] ) [ Papyrus Oxyrhynchus 223 ] ) )",
            "( JOIN ( R [ soundtrack ] ) ( JOIN ( R [ work ] ) [ Papyrus Oxyrhynchus 223 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ collection ] ) ( JOIN ( R [ published in ] ) [ Papyrus Oxyrhynchus 223 ] ) )"
    },
    {
        "question": "Question: { What is the Q48460 of basin countries of Loch Ness ? }",
        "predicted_query": [
            "( JOIN ( R [ Q48460 ] ) [ Loch Ness ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Loch Ness ] ) ( JOIN ( R [ ID ] ) [ Q48460 ] ) )",
            "( JOIN ( R [ Q48460 ] ) [ Loch Ness ] )",
            "( AND ( JOIN [ country of basin ] [ Loch Ness ] ) ( JOIN ( R [ ID ] ) [ Loch Ness ] ) )",
            "( JOIN [ Q48460 ] [ Loch Ness ] )"
        ],
        "gen_label": "( JOIN ( R [ Dewey Decimal Classification ] ) ( JOIN ( R [ basin country ] ) [ Loch Ness ] ) )"
    },
    {
        "question": "Question: { Mario Vargas Llosa has which Base de datos de premiados person ID? }",
        "predicted_query": [
            "( JOIN ( R [ Base de datos de premiados person ID ] ) [ Mario Vargas Llosa ] )",
            "( JOIN ( R [ Base de datos de premiados person ID ] ) [ Mario Vargas Llosa ] )",
            "( AND ( JOIN [ ID.fr person ID ] [ Mario Vargas Llosa ] ) ( JOIN ( R [ award received ] ) [ Mario Vargas Llosa ] ) )",
            "( JOIN ( R [ Base de datos de premiados person ID ] ) [ Mario Vargas Llosa ] )",
            "( AND ( JOIN [ BD de premiados person ID ] [ Mario Vargas Llosa ] ) ( JOIN ( R [ ID in this field ] ) [ Mario Vargas Llosa ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Base de datos de premiados person ID ] ) [ Mario Vargas Llosa ] )"
    },
    {
        "question": "Question: { What is PIN Code for lives  of Halle Berry ? }",
        "predicted_query": [
            "( JOIN ( R [ postal code ] ) ( JOIN ( R [ place of birth ] ) [ Halle Berry ] ) )",
            "( JOIN [ PIN code ] [ Halle Berry ] )",
            "( JOIN ( R [ postal code ] ) ( JOIN ( R [ place of birth ] ) [ Halle Berry ] ) )",
            "( JOIN ( R [ post office box number ] ) ( JOIN ( R [ place of birth ] ) [ Halle Berry ] ) )",
            "( AND ( JOIN [ place of death ] [ Halle Berry ] ) ( JOIN ( R [ postal code ] ) [ Halle Berry ] ) )"
        ],
        "gen_label": "( JOIN ( R [ postal code ] ) ( JOIN ( R [ residence ] ) [ Halle Berry ] ) )"
    },
    {
        "question": "Question: { Who is the seiyu of the successful film Planes: Fire & Rescue? }",
        "predicted_query": [
            "( JOIN ( R [ voice actor ] ) ( JOIN ( R [ part of the series ] ) [ Planes: Fire & Rescue ] ) )",
            "( JOIN ( R [ voice actor ] ) ( JOIN ( R [ notable work ] ) [ Planes: Fire & Rescue ] ) )",
            "( JOIN ( R [ voice actor ] ) ( JOIN ( R [ based on work ] ) [ Planes: Fire & Rescue ] ) )",
            "( AND ( JOIN [ work ] [ Planes: Fire & Rescue ] ) ( JOIN ( R [ voice actor ] ) [ Planes: Fire & Rescue ] ) )",
            "( JOIN [ seiyu ] [ Planes: Fire & Rescue ] )"
        ],
        "gen_label": "( JOIN ( R [ voice actor ] ) ( JOIN ( R [ follows ] ) [ Planes: Fire & Rescue ] ) )"
    },
    {
        "question": "Question: { Where is the sculptors of  male Smurfs? }",
        "predicted_query": [
            "( JOIN ( R [ sculptor ] ) ( JOIN ( R [ work ] ) [ Smurfs ] ) )",
            "( AND ( JOIN [ work location ] [ sculptor of male Smurfs ] ) ( JOIN ( R [ located in ] ) [ Smurfs ] ) )",
            "( JOIN ( R [ creator ] ) ( JOIN ( R [ has work ] ) [ Smurfs ] ) )",
            "( JOIN [ sculptor ] [ Smurfs ] )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Sculptors of male Smurfs ] ) ( JOIN ( R [ influenced by ] ) [ Smurfs ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ sex or gender ] [ male ] ) ( JOIN ( R [ creator ] ) [ The Smurfs ] ) )"
    },
    {
        "question": "Question: { What is Armenian Cinema ID for Aram Khachaturian ? }",
        "predicted_query": [
            "( JOIN ( R [ Armenian Cinema ID ] ) [ Aram Khachaturian ] )",
            "( JOIN ( R [ Armenian Cinema ID ] ) [ Aram Khachaturian ] )",
            "( JOIN [ Armenian Cinema ID ] [ Aram Khachaturian ] )",
            "[ JOIN ( [ joined [ Armenian Cinema ID ] ] ) [ Aram Khachaturian ] ]",
            "( JOIN ( R [ Armenian Cinema ID ] ) [ Aram Khachaturian ] )"
        ],
        "gen_label": "( JOIN ( R [ Armenian Cinema ID ] ) [ Aram Khachaturian ] )"
    },
    {
        "question": "Question: { What was the university attended by Jad Abumrad while he was a member of the Center for Research Libraries? }",
        "predicted_query": [
            "( AND ( JOIN [ member of ] [ Center for Research Libraries ] ) ( JOIN ( R [ alma mater ] ) [ Jad Abumrad ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Center for Research Libraries ] ) ( JOIN ( R [ alma mater ] ) [ Jad Abumrad ] ) )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ located in ] ) [ Jad Abumrad ] ) )",
            "( JOIN ( R [ institution ] ) ( JOIN ( R [ member of ] ) [ Center for Research Libraries ] ) )",
            "( JOIN [ member of ] [ Center for Research Libraries ] ) ( JOIN ( R [ educated at ] ) [ Jad Abumrad ] )"
        ],
        "gen_label": "( AND ( JOIN [ member of ] [ Center for Research Libraries ] ) ( JOIN ( R [ educated at ] ) [ Jad Abumrad ] ) )"
    },
    {
        "question": "Question: { Which is the UNII for silver nitrate? }",
        "predicted_query": [
            "( JOIN ( R [ UNII ] ) [ silver nitrate ] )",
            "( JOIN [ UNII ] [ silver nitrate ] )",
            "( JOIN [ UNII ] [ silver nitrate ] )",
            "( JOIN ( R [ UNII ] ) [ silver nitrate ] )",
            "( JOIN ( R [ has UNII ] ) [ silver nitrate ] )"
        ],
        "gen_label": "( JOIN ( R [ UNII ] ) [ silver nitrate ] )"
    },
    {
        "question": "Question: { Who is starring in the film series of Souls of the Departed? }",
        "predicted_query": [
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ part of the series ] ) [ Souls of the Departed ] ) )",
            "( JOIN ( R [ actor ] ) ( JOIN ( R [ part of the series ] ) [ Souls of the Departed ] ) )",
            "( AND ( JOIN [ part of the series ] [ Souls of the Departed ] ) ( JOIN ( R [ cast member ] ) [ Souls of the Departed ] ) )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ part of the film series ] ) [ Souls of the Departed ] ) )",
            "( JOIN [ cast member ] [ Souls of the Departed ] )"
        ],
        "gen_label": "( JOIN ( R [ cast member ] ) ( JOIN ( R [ part of the series ] ) [ Souls of the Departed ] ) )"
    },
    {
        "question": "Question: { Who is  connected with makes use of  butterfly stroke? }",
        "predicted_query": [
            "( [ joins ] [ uses ] ) ",
            "( JOIN ( R [ uses ] ) ( JOIN ( R [ sports ] ) [ butterfly stroke ] ) )",
            "( [ joined by ] [ sport ] ) ",
            "( AND ( JOIN [ sport played or practice ] [ butterfly stroke ] ) ( JOIN ( R [ influenced by ] ) [ swimming ] ) )",
            "( JOIN [ makes use of ] [ butterfly stroke ] )"
        ],
        "gen_label": "( JOIN ( R [ connects with ] ) ( JOIN ( R [ uses ] ) [ butterfly stroke ] ) )"
    },
    {
        "question": "Question: { what  is genre of music of portrayed by ghoomar song? }",
        "predicted_query": [
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ performer ] ) [ Ghoomar ] ) )",
            "( JOIN [ genre of music ] [ Ghoomar ] )",
            "( JOIN ( R [ genre of music ] ) ( JOIN ( R [ performer ] ) [ Ghoomar ] ) )",
            "( AND ( JOIN [ genre ] [ classical music ] ) ( JOIN ( R [ depicts ] ) [ Ghoomar ] ) )",
            "( AND ( JOIN [ performed by ] [ Ghoomar ] ) ( JOIN ( R [ genre ] ) [ Ghoomar ] ) )"
        ],
        "gen_label": "( JOIN ( R [ genre ] ) ( JOIN ( R [ performer ] ) [ Ghoomar ] ) )"
    },
    {
        "question": "Question: { what are the  signs and cause of carbon tetrachloride? }",
        "predicted_query": [
            "( JOIN [ signs and cause ] [ carbon tetrachloride ] )",
            "( JOIN ( R [ has symptom or sign ] ) ( JOIN ( R [ cause ] ) [ carbon tetrachloride ] ) )",
            "( JOIN ( R [ symptoms or signs ] ) ( JOIN ( R [ cause ] ) [ carbon tetrachloride ] ) )",
            "( AND ( JOIN [ causes ] [ carbon tetrachloride ] ) ( JOIN ( R [ symptoms ] ) [ carbon tetrachloride ] ) )",
            "( JOIN [ symptoms and signs ] [ carbon tetrachloride ] )"
        ],
        "gen_label": "( JOIN ( R [ symptoms and signs ] ) ( JOIN ( R [ has effect ] ) [ carbon tetrachloride ] ) )"
    },
    {
        "question": "Question: { What is the twin town of the Shiga Prefecture that has districts in the Eugenio de Castro area? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Eugenio de Castro ] ) ( JOIN ( R [ twinned administrative body ] ) [ Shiga Prefecture ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Eugenio de Castro ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Shiga Prefecture ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Eugenio de Castro ] ) ( JOIN ( R [ twinned administrative body ] ) [ Shiga Prefecture ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Eugenio de Castro ] ) ( JOIN ( R [ twinned administrative body ] ) [ Shiga Prefecture ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Eugenio de Castro ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Shiga Prefecture ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ contains the administrative territorial entity ] [ Eugênio de Castro ] ) ( JOIN ( R [ twinned administrative body ] ) [ Shiga Prefecture ] ) )"
    },
    {
        "question": "Question: { Who are the sculptors of The Dream of the Fisherman's Wife whose artistic genre is ukiyo-e? }",
        "predicted_query": [
            "( AND ( JOIN [ artistic genre ] [ ukiyo-e ] ) ( JOIN ( R [ sculptor ] ) [ The Dream of the Fisherman's Wife ] ) )",
            "( AND ( JOIN [ genre ] [ ukiyo-e ] ) ( JOIN ( R [ creator ] ) [ The Dream of the Fisherman's Wife ] ) )",
            "( JOIN ( R [ artist's artistic genre ] ) ( JOIN ( R [ genre ] ) [ The Dream of the Fisherman's Wife ] ) )",
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ artist ] ) [ The Dream of the Fisherman's Wife ] ) )",
            "( AND ( JOIN [ artistic genre ] [ ukiyo-e ] ) ( JOIN ( R [ creator ] ) [ The Dream of the Fisherman's Wife ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ genre ] [ ukiyo-e ] ) ( JOIN ( R [ creator ] ) [ The Dream of the Fisherman's Wife ] ) )"
    },
    {
        "question": "Question: { What are the different sports that make up the Women's Triathlon at the 2008 Summer Olympics? }",
        "predicted_query": [
            "( AND ( JOIN ( R [ participant ] ) [ Women's triathlon at the 200",
            "( JOIN ( R [ sports ] ) ( JOIN ( R [ participant in ] ) [ Women's Triathlon at the 2008 Summer Olympics ] ) )",
            "( JOIN ( R [ has different sports ] ) ( JOIN ( R [ participant in ] ) [ Women's triathlon at the 2008 Summer Olympics ] ) )",
            "( JOIN [ different sports ] [ Women's Triathlon at the 2008 Summer Olympics ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Triathlon at the 2008 Summer Olympics ] ) ( JOIN ( R [ sport ] ) [ Women's triathlon at the 2008 Summer Olympics ] ) )"
        ],
        "gen_label": "( JOIN ( R [ sport ] ) ( JOIN ( R [ follows ] ) [ triathlon at the 2008 Summer Olympics – women's ] ) )"
    },
    {
        "question": "Question: { Which is the noble title of Alexander the Great? }",
        "predicted_query": [
            "( JOIN ( R [ noble title ] ) [ Alexander the Great ] )",
            "( JOIN ( R [ nobleman ] ) ( JOIN ( R [ given name ] ) [ Alexander the Great ] ) )",
            "( JOIN ( R [ noble title ] ) [ Alexander the Great ] )",
            "( JOIN [ noble title ] [ Alexander the Great ] )",
            "( AND ( JOIN [ nobility title ] [ Duke of Macedonia ] ) ( JOIN ( R [ given name ] ) [ Alexander the Great ] ) )"
        ],
        "gen_label": "( JOIN ( R [ noble title ] ) [ Alexander the Great ] )"
    },
    {
        "question": "Question: { Which is conferred by WWE? }",
        "predicted_query": [
            "( JOIN ( R [ conferred by ] ) [ WWE ] )",
            "( JOIN [ conferred by ] [ WWE ] )",
            "( JOIN ( R [ awarded by ] ) ( JOIN ( R [ award received ] ) [ WWE ] ) )",
            "( AND ( JOIN [ award received ] [ WWE Hall of Fame ] ) ( JOIN ( R [ awarded by ] ) [ WWE ] ) )",
            "( JOIN [ conferred by ] [ WWE ] )"
        ],
        "gen_label": "( JOIN [ conferred by ] [ WWE ] )"
    },
    {
        "question": "Question: { Who is the writer of the remake of Lake in the Lake? }",
        "predicted_query": [
            "( JOIN ( R [ writer ] ) ( JOIN ( R [ based on ] ) [ Lake in the Lake ] ) )",
            "( JOIN [ writer ] [ Lake in the Lake ] )",
            "( JOIN ( R [ author ] ) ( JOIN ( R [ director ] ) [ Lake in the Lake ] ) )",
            "( AND ( JOIN [ has work ] [ Lake in the Lake ] ) ( JOIN ( R [ writer ] ) [ Lake in the Lake ] ) )",
            "( JOIN ( R [ writer ] ) ( JOIN ( R [ based on work ] ) [ Lake in the Lake ] ) )"
        ],
        "gen_label": "( JOIN ( R [ author ] ) ( JOIN ( R [ based on ] ) [ Lady in the Lake ] ) )"
    },
    {
        "question": "Question: { What is highest peak of the endemism of Callobius klamath? }",
        "predicted_query": [
            "( JOIN ( R [ highest point ] ) ( JOIN ( R [ endemic to ] ) [ Callobius klamath ] ) )",
            "( JOIN ( R [ highest peak ] ) ( JOIN ( R [ endemism ] ) [ Callobius klamath ] ) )",
            "( AND ( JOIN [ elevation above sea level ] [ highest point ] ) ( JOIN ( R [ endemic to ] ) [ Callobius klamath ] ) )",
            "( JOIN ( R [ highest point ] ) ( JOIN ( R [ endemic to ] ) [ Callobius klamath ] ) )",
            "( AND ( JOIN [ maximum elevation ] [ Mount Shasta ] ) ( JOIN ( R [ endemic to ] ) [ Callobius klamath ] ) )"
        ],
        "gen_label": "( JOIN ( R [ highest point ] ) ( JOIN ( R [ endemic to ] ) [ Callobius klamath ] ) )"
    },
    {
        "question": "Question: { What is crafted from asssembly process of dungaree ? }",
        "predicted_query": [
            "( JOIN ( R [ material ] ) ( JOIN ( R [ manufacturing process ] ) [ dungaree ] ) )",
            "( AND ( JOIN [ product of ] [ dungaree ] ) ( JOIN ( R [ manufacturing process ] ) [ dungaree ] ) )",
            "( JOIN [ manufacturing process ] [ dungaree ] )",
            "( JOIN ( R [ material ] ) ( JOIN ( R [ process ] ) [ dungaree ] ) )",
            "( JOIN ( R [ manufacturing process ] ) ( JOIN ( R [ material ] ) [ dungaree ] ) )"
        ],
        "gen_label": "( JOIN ( R [ made from material ] ) ( JOIN ( R [ fabrication method ] ) [ dungaree ] ) )"
    },
    {
        "question": "Question: { what is pase ID for athelstan? }",
        "predicted_query": [
            "( JOIN ( R [ PASE ID ] ) [ Athelstan ] )",
            "( JOIN [ PASE ID ] [ Athelstan ] )",
            "( JOIN ( R [ PASS ID ] ) [ Athelstan ] )",
            "( JOIN ( R [ Pase ID ] ) [ Æthelstan ] )",
            "( AND ( JOIN [ passport or ID card number ] [ Aethelstan ] ) ( JOIN ( R [ ID in this field ] ) [ Athelstan ] ) )"
        ],
        "gen_label": "( JOIN ( R [ PASE ID ] ) [ Æthelstan ] )"
    },
    {
        "question": "Question: { Who founded the video game publisher of the game Inca? }",
        "predicted_query": [
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ publisher ] ) [ Inca ] ) )",
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ developer ] ) [ Inca ] ) )",
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ publisher ] ) [ Inca ] ) )",
            "( JOIN [ founded by ] [ Inca ] )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Inca ] ) ( JOIN ( R [ founded by ] ) [ Inca ] ) )"
        ],
        "gen_label": "( JOIN ( R [ founded by ] ) ( JOIN ( R [ publisher ] ) [ Inca ] ) )"
    },
    {
        "question": "Question: { What is Czech Street ID of Charles Bridge }",
        "predicted_query": [
            "( JOIN ( R [ Czech Street ID ] ) [ Charles Bridge ] )",
            "( JOIN [ Czech Street ID ] [ Charles Bridge ] )",
            "### Instruction After Facet Output History:",
            "( JOIN ( R [ Czech Street ID ] ) [ Charles Bridge ] )",
            "( AND ( JOIN [ street ID ] [ Charles Bridge ] ) ( JOIN ( R [ ID ] ) [ Charles Bridge ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Czech street ID ] ) [ Charles Bridge ] )"
    },
    {
        "question": "Question: { Which place is adjacent to Turkmenistan that is a member of Commonwealth of Independent States? }",
        "predicted_query": [
            "( AND ( JOIN [ member of ] [ Commonwealth of Independent States ] ) ( JOIN ( R [ shares border with ] ) [ Turkmenistan ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Commonwealth of Independent States ] ) ( JOIN ( R [ shares border with ] ) [ Turkmenistan ] ) )",
            "( AND ( JOIN [ bordering body of water ] [ Caspian Sea ] ) ( JOIN ( R [ adjacent to ] ) [ Turkmenistan ] ) )",
            "( AND ( JOIN [ adjacent to ] [ Turkmenistan ] ) ( JOIN ( R [ member of ] ) [ Commonwealth of Independent States ] ) )",
            "( AND ( JOIN [ shares border with ] [ Turkmenistan ] ) ( JOIN ( R [ member of ] ) [ Commonwealth of Independent States ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ member of ] [ Commonwealth of Independent States ] ) ( JOIN ( R [ shares border with ] ) [ Turkmenistan ] ) )"
    },
    {
        "question": "Question: { Who gave the {on harbour} of {player} of {Gallipoli campaign} ? }",
        "predicted_query": [
            "( JOIN ( R [ port of call ] ) ( JOIN ( R [ participant in the Battle of Gallipoli ] ) [ player ] ) )",
            "( JOIN ( R [ harbour ] ) ( JOIN ( R [ participant in war ] ) [ Gallipoli campaign ] ) )",
            "( JOIN ( R [ port or harbour ] ) ( JOIN ( R [ participant in war ] ) [ Gallipoli campaign ] ) )",
            "( JOIN [ harbour ] [ Gallipoli campaign ] ) ( JOIN ( R [ participant in the military conflict ] ) [ Gallipoli campaign ] )",
            "( AND ( JOIN [ harbour ] [ Gallipoli campaign ] ) ( JOIN ( R [ player ] ) [ Gallipoli campaign ] ) )"
        ],
        "gen_label": "( JOIN ( R [ located in or next to body of water ] ) ( JOIN ( R [ participant ] ) [ Gallipoli Campaign ] ) )"
    },
    {
        "question": "Question: { What is the main color of a polar bear? }",
        "predicted_query": [
            "( JOIN ( R [ main color ] ) [ polar bear ] )",
            "( JOIN ( R [ color ] ) ( JOIN ( R [ species ] ) [ polar bear ] ) )",
            "( JOIN [ main color ] [ polar bear ] )",
            "( JOIN ( R [ main color ] ) [ polar bear ] )",
            "( AND ( JOIN [ base color ] [ brown ] ) ( JOIN ( R [ taxon of ] ) [ polar bear ] ) )"
        ],
        "gen_label": "( JOIN ( R [ sRGB color hex triplet ] ) ( JOIN ( R [ color ] ) [ Ursus maritimus ] ) )"
    },
    {
        "question": "Question: { Which are the peculiar feature of Internal structure of the Moon? }",
        "predicted_query": [
            "( JOIN ( R [ has distinctive feature ] ) ( JOIN ( R [ has part ] ) [ internal structure of the Moon ] ) )",
            "( JOIN [ has peculiar feature ] [ internal structure of the Moon ] )",
            "( AND ( JOIN [ has ] [ peculiar feature ] ) ( JOIN ( R [ has physical property ] ) [ internal structure of the Moon ] ) )",
            "( JOIN ( R [ has physical property ] ) ( JOIN ( R [ has physical property ] ) [ Internal structure of the Moon ] ) )",
            "( JOIN ( R [ distinctive feature ] ) ( JOIN ( R [ has part ] ) [ internal structure of the Moon ] ) )"
        ],
        "gen_label": "( JOIN ( R [ orbital eccentricity ] ) ( JOIN ( R [ facet of ] ) [ internal structure of the Moon ] ) )"
    },
    {
        "question": "Question: { Which is the musical conductor of Lorin Maazel? }",
        "predicted_query": [
            "( JOIN ( R [ conductor ] ) ( JOIN ( R [ composer ] ) [ Lorin Maazel ] ) )",
            "( JOIN ( R [ composer ] ) ( JOIN ( R [ conductor ] ) [ Lorin Maazel ] ) )",
            "( JOIN [ musical conductor ] [ Lorin Maazel ] )",
            "( JOIN ( R [ musical conductor ] ) [ Lorin Maazel ] )",
            "( JOIN ( R [ conductor ] ) ( JOIN ( R [ performer ] ) [ Lorin Maazel ] ) )"
        ],
        "gen_label": "( JOIN [ musical conductor ] [ Lorin Maazel ] )"
    },
    {
        "question": "Question: { Which is the CiNii author ID of the books of François Hollande? }",
        "predicted_query": [
            "( JOIN ( R [ CiNii author ID ] ) [ François Hollande ] )",
            "( JOIN ( R [ CiNii author ID ] ) [ books of François Hollande ] )",
            "( JOIN ( R [ CiNii Author ID ] ) [ François Hollande ] )",
            "( AND ( JOIN [ Cinopedia ID ] [ François Hollande ] ) ( JOIN ( R [ author ] ) [ Cinopedia ] ) )",
            "( JOIN ( R [ CiNii author ID ] ) [ François Hollande ] )"
        ],
        "gen_label": "( JOIN ( R [ NACSIS-CAT author ID ] ) [ François Hollande ] )"
    },
    {
        "question": "Question: { Who is buried next to Hasdai Crescas? }",
        "predicted_query": [
            "( JOIN ( R [ next to ] ) ( JOIN ( R [ place of burial ] ) [ Hasdai Crescas ] ) )",
            "( JOIN [ adjacent to ] [ Hasdai Crescas ] )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ place of burial ] ) [ Hasdai Crescas ] ) )",
            "( AND ( JOIN [ shares burial place ] [ Hasdai Crescas ] ) ( JOIN ( R [ place of burial ] ) [ Hasdai Crescas ] ) )",
            "( JOIN ( R [ adjacent to ] ) ( JOIN ( R [ place of burial ] ) [ Hasdai Crescas ] ) )"
        ],
        "gen_label": "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ place of death ] ) [ Hasdai Crescas ] ) )"
    },
    {
        "question": "Question: { What is the aspect of the history of Malta, which has a diplomatic relation that is India? }",
        "predicted_query": [
            "( AND ( JOIN [ diplomatic relation ] [ India ] ) ( JOIN ( R [ facet of ] ) [ history of Malta ] ) )",
            "( AND ( JOIN [ diplomatic relation ] [ India ] ) ( JOIN ( R [ part of history ] ) [ Malta ] ) )",
            "( AND ( JOIN [ has diplomatic relations with ] [ India ] ) ( JOIN ( R [ part of history ] ) [ Malta ] ) )",
            "( AND ( JOIN [ has diplomatic relations ] [ India ] ) ( JOIN ( R [ part of history ] ) [ Malta ] ) )",
            "( AND ( JOIN [ diplomatic relations ] [ India ] ) ( JOIN ( R [ country ] ) [ Malta ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ diplomatic relation ] [ India ] ) ( JOIN ( R [ facet of ] ) [ history of Malta ] ) )"
    },
    {
        "question": "Question: { Who is the pianist artist of The Rise and Fall of Ziggy Stardust and The Spiders from Mars? }",
        "predicted_query": [
            "( JOIN ( R [ performer ] ) ( JOIN ( R [ composer ] ) [ The Rise and Fall of Ziggy Stardust and the Spiders from Mars ] ) )",
            "{ JOIN ( R [ has work ] ) [ The Rise and Fall of Ziggy Stardust and the",
            "{ JOIN ( R [ performer ] ) ( JOIN ( R [ performer ] ) [ The Rise and Fall of Ziggy Stardust and the Spiders from Mars ] ) }",
            "( JOIN [ artist ] [ The Rise and Fall of Ziggy Stardust and the Spiders from Mars ] )",
            "( JOIN ( R [ composer ] ) ( JOIN ( R [ performer ] ) [ The Rise and Fall of Ziggy Stardust and The Spiders from Mars ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ occupation ] [ pianist ] ) ( JOIN ( R [ performer ] ) [ The Rise and Fall of Ziggy Stardust and the Spiders from Mars ] ) )"
    },
    {
        "question": "Question: { What is the place of origin of the central bank of Sydney Morning Herald? }",
        "predicted_query": [
            "( JOIN ( R [ place of origin ] ) ( JOIN ( R [ publisher ] ) [ Sydney Morning Herald ] ) )",
            "( JOIN ( R [ headquarters location ] ) ( JOIN ( R [ publisher ] ) [ Sydney Morning Herald ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Sydney Morning Herald ] ) ( JOIN ( R [ headquarters location ] ) [ Reserve Bank of Australia ] ) )",
            "( JOIN ( R [ location ] ) ( JOIN ( R [ headquarters ] ) [ Sydney Morning Herald ] ) )",
            "( JOIN [ place of origin ] [ Sydney Morning Herald ] )"
        ],
        "gen_label": "( JOIN ( R [ central bank ] ) ( JOIN ( R [ country of origin ] ) [ The Sydney Morning Herald ] ) )"
    },
    {
        "question": "Question: { Which is GOST 7.67 cyrillic for South Korea? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ South Korea ] ) ( JOIN ( R [ Cyrillic alphabet ] ) [ GOST 7.67 ] ) )",
            "( AND ( JOIN [ Cyrillic alphabet ] [ GOST 7.67 ] ) ( JOIN ( R [ language spoken, written or signed ] ) [ South Korea ] ) )",
            "( JOIN ( R [ GOST 7.67 cyrillic ] ) [ South Korea ] )",
            "( AND ( JOIN [ Cyrillic spelling ] [ GOST 7.67 ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ South Korea ] ) )",
            "( JOIN [ GOST 7.67 cyrillic for ] [ South Korea ] )"
        ],
        "gen_label": "( JOIN ( R [ GOST 7.67 cyrillic ] ) [ South Korea ] )"
    },
    {
        "question": "Question: { Which is the sectional view of guava? }",
        "predicted_query": [
            "( JOIN ( R [ sectional view ] ) [ guava ] )",
            "( JOIN [ sectional view ] [ guava ] )",
            "( JOIN ( R [ sectional view ] ) [ guava ] )",
            "( JOIN ( R [ has sectional view ] ) [ guava ] )",
            "( AND ( JOIN [ part of ] [ sectional view ] ) ( JOIN ( R [ has part ] ) [ guava ] ) )"
        ],
        "gen_label": "( JOIN ( R [ sectional view ] ) [ guava ] )"
    },
    {
        "question": "Question: { What is the first minister of the place of the activity of Richard Russell ? }",
        "predicted_query": [
            "( JOIN ( R [ minister ] ) ( JOIN ( R [ place of activity ] ) [ Richard Russell ] ) )",
            "( JOIN ( R [ first minister ] ) ( JOIN ( R [ place of activity ] ) [ Richard Russell ] ) )",
            "( JOIN [ first minister ] [ Richard Russell ] )",
            "( JOIN ( R [ head of government ] ) ( JOIN ( R [ place of activity ] ) [ Richard Russell ] ) )",
            "( AND ( JOIN [ location of activity ] [ Richard Russell ] ) ( JOIN ( R [ occupation ] ) [ Richard Russell ] ) )"
        ],
        "gen_label": "( JOIN ( R [ head of government ] ) ( JOIN ( R [ work location ] ) [ Richard Russell Jr. ] ) )"
    },
    {
        "question": "Question: { The head of state of Bermuda is what? }",
        "predicted_query": [
            "( JOIN ( R [ head of state ] ) [ Bermuda ] )",
            "( JOIN ( R [ head of state ] ) [ Bermuda ] )",
            "( JOIN [ head of state ] [ Bermuda ] )",
            "( AND ( JOIN [ capital ] [ Hamilton ] ) ( JOIN ( R [ head of state ] ) [ Bermuda ] ) )",
            "( JOIN ( R [ head of state ] ) ( JOIN ( R [ country ] ) [ Bermuda ] ) )"
        ],
        "gen_label": "( JOIN ( R [ head of state ] ) [ Bermuda ] )"
    },
    {
        "question": "Question: { Of what ecological type is the shiitake mushroom'? }",
        "predicted_query": [
            "( JOIN ( R [ ecological type ] ) [ shiitake ] )",
            "( AND ( JOIN [ has taxonomic rank ] [ ecological type ] ) ( JOIN ( R [ has taxonomic rank ] ) [ shiitake ] ) )",
            "( AND ( JOIN [ taxon name ] [ shiitake ] ) ( JOIN ( R [ ecological type ] ) [ shiitake ] ) )",
            "( JOIN ( R [ ecological type ] ) [ shiitake mushroom ] )",
            "( JOIN ( R [ ecological classification ] ) ( JOIN ( R [ taxon ] ) [ shiitake mushroom ] ) )"
        ],
        "gen_label": "( JOIN ( R [ mushroom ecological type ] ) [ Lentinula edodes ] )"
    },
    {
        "question": "Question: { How many children are out of school in the Middle East? }",
        "predicted_query": [
            "( JOIN ( R [ number of children out of school ] ) ( JOIN ( R [ located in ] ) [ Middle East ] ) )",
            "( JOIN [ number of children out of school ] [ Middle East ] )",
            "( JOIN ( R [ number of out-of-school children ] ) ( JOIN ( R [ located in ] ) [ Middle East ] ) )",
            "( JOIN ( R [ number of students out of school ] ) ( JOIN ( R [ region ] ) [ Middle East ] ) )",
            "( JOIN [ number of children out of school ] [ Middle East ] )"
        ],
        "gen_label": "( JOIN ( R [ number of out-of-school children ] ) ( JOIN ( R [ continent ] ) [ Middle East ] ) )"
    },
    {
        "question": "Question: { Who is the prime minister of Niigata Prefecture who has a career as a politician? }",
        "predicted_query": [
            "( AND ( JOIN [ occupation ] [ politician ] ) ( JOIN ( R [ head of government ] ) [ Niigata Prefecture ] ) )",
            "( AND ( JOIN [ occupation ] [ politician ] ) ( JOIN ( R [ follower of ] ) [ Niigata Prefecture ] ) )",
            "( AND ( JOIN [ field of work ] [ politician ] ) ( JOIN ( R [ head of government ] ) [ Niigata Prefecture ] ) )",
            "( AND ( JOIN [ occupation ] [ politician ] ) ( JOIN ( R [ follows occupation ] ) [ Niigata Prefecture ] ) )",
            "### Received:"
        ],
        "gen_label": "( AND ( JOIN [ occupation ] [ politician ] ) ( JOIN ( R [ head of government ] ) [ Niigata Prefecture ] ) )"
    },
    {
        "question": "Question: { What is located in the administrative territorial entity of Nicaragua? }",
        "predicted_query": [
            "( JOIN ( R [ located in the administrative territorial entity ] ) [ Nicaragua ] )",
            "( JOIN [ located in the administrative territorial entity ] [ Nicaragua ] )",
            "( JOIN ( R [ located in administrative territorial entity ] ) [ Nicaragua ] )",
            "( JOIN ( R [ capital ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Nicaragua ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Nicaragua ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Nicaragua ] ) )"
        ],
        "gen_label": "( JOIN [ located in the administrative territorial entity ] [ Nicaragua ] )"
    },
    {
        "question": "Question: { What is Jamie Gillis' Pornhub ID? }",
        "predicted_query": [
            "( JOIN ( R [ Pornhub ID ] ) [ Jamie Gillis ] )",
            "( JOIN ( R [ Pornhub ID ] ) [ Jamie Gillis ] )",
            "( JOIN ( R [ Pornhub performer ID ] ) [ Jamie Gillis ] )",
            "( JOIN [ Pornhub ID ] [ Jamie Gillis ] )",
            "( AND ( JOIN [ PornoHub ID ] [ Jamie Gillis ] ) ( JOIN ( R [ ID ] ) [ Jamie Gillis ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Pornhub star ID ] ) [ Jamie Gillis ] )"
    },
    {
        "question": "Question: { \"Where is the birthplace of Philippe Quintais, which is considered the sister city to Bethlehem?\" }",
        "predicted_query": [
            "( AND ( JOIN [ twinned administrative body ] [ Bethlehem ] ) ( JOIN ( R [ place of birth ] ) [ Philippe Quintais ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Bethlehem ] ) ( JOIN ( R [ place of birth ] ) [ Philippe Quintais ] ) )",
            "( AND ( JOIN [ twin town ] [ Bethlehem ] ) ( JOIN ( R [ place of birth ] ) [ Philippe Quintais ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Bethlehem ] ) ( JOIN ( R [ place of birth ] ) [ Philippe Quintais ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Bethlehem ] ) ( JOIN ( R [ place of death ] ) [ Philippe Quintais ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ twinned administrative body ] [ Bethlehem ] ) ( JOIN ( R [ place of birth ] ) [ Philippe Quintais ] ) )"
    },
    {
        "question": "Question: { Which is the Internet Broadway Database show ID for Antigone? }",
        "predicted_query": [
            "( JOIN ( R [ Internet Broadway Database show ID ] ) [ Antigone ] )",
            "( JOIN [ Internet Broadway Database show ID ] [ Antigone ] )",
            "[Historical Artifact ID] for [Which is the Internet Broadway Database show ID for Antigone?]",
            "( JOIN ( R [ Internet Broadway Database show ID ] ) [ Antigone ] )",
            "( [ joined by ] [ Internet Broadway Database show ID ] [ Antigone ] )"
        ],
        "gen_label": "( JOIN ( R [ Internet Broadway Database show ID ] ) [ Antigone ] )"
    },
    {
        "question": "Question: { Which is the Tropicos publication ID for Botanical Journal of the Linnean Society? }",
        "predicted_query": [
            "( JOIN ( R [ Tropicos publication ID ] ) [ Botanical Journal of the Linnean Society ] )",
            "[ taxon author ID ] JOIN ( [ question ] ) [ Botanical Journal of the Linnean Society ]",
            "( AND ( JOIN [ publication ID ] [ Botanical Journal of the Linnean Society ] ) ( JOIN ( R [ ID ] ) [ Tropicos ] ) )",
            "( JOIN ( R [ Tropicos publication ID ] ) [ The Botanical Journal of the Linnean Society ] )",
            "( JOIN ( R [ taxon author ID ] ) [ Botanical Journal of the Linnean Society ] )"
        ],
        "gen_label": "( JOIN ( R [ Tropicos publication ID ] ) [ Botanical Journal of the Linnean Society ] )"
    },
    {
        "question": "Question: { Which continent did Douglas Adams live in? }",
        "predicted_query": [
            "( JOIN ( R [ continent ] ) [ Douglas Adams ] )",
            "( JOIN [ continent ] [ Douglas Adams ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ continent ] ) ( JOIN ( R [ place of death ] ) [ Douglas Adams ] ) )",
            "( JOIN ( R [ continent ] ) [ Douglas Adams ] )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Douglas Adams ] ) ( JOIN ( R [ continent of residence ] ) [ Douglas Adams ] ) )"
        ],
        "gen_label": "( JOIN ( R [ continent ] ) ( JOIN ( R [ residence ] ) [ Q42 ] ) )"
    },
    {
        "question": "Question: { Where did Boleslaw Prus pass away? It is a sister city of Vilnius. }",
        "predicted_query": [
            "( AND ( JOIN [ twinned administrative body ] [ Vilnius ] ) ( JOIN ( R [ place of death ] ) [ Bolesław Prus ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Vilnius ] ) ( JOIN ( R [ place of death ] ) [ Bolesław Prus ] ) )",
            "( JOIN ( R [ twin town ] ) ( JOIN ( R [ place of death ] ) [ Bolesław Prus ] ) )",
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ place of death ] ) [ Bolesław Prus ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Vilnius ] ) ( JOIN ( R [ location ] ) [ Bolesław Prus ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ twinned administrative body ] [ Vilnius ] ) ( JOIN ( R [ place of death ] ) [ Bolesław Prus ] ) )"
    },
    {
        "question": "Question: { Who is {actress} at {part of series} {You Give Lunch a Bad Name} ? }",
        "predicted_query": [
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ part of the series ] ) [ You Give Lunch a Bad Name ] ) )",
            "( JOIN ( R [ actress ] ) ( JOIN ( R [ part of the series ] ) [ You Give Lunch a Bad Name ] ) )",
            "( [ joins ] [ cast member ] [ You Give Lunch a Bad Name ] )",
            "( JOIN ( R [ character in series ] ) ( JOIN ( R [ part of the series ] ) [ You Give Lunch a Bad Name ] ) )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ part of the series ] ) [ You Give Lunch a Bad Name ] ) )"
        ],
        "gen_label": "( JOIN ( R [ cast member ] ) ( JOIN ( R [ part of the series ] ) [ You Give Lunch a Bad Name ] ) )"
    },
    {
        "question": "Question: { Which is the season start for the A-League? }",
        "predicted_query": [
            "( JOIN ( R [ start date ] ) [ A-League ] )",
            "[ joined by ] [ season start ] [ A-League ] ",
            "( JOIN ( JOIN ( R [ start time ] ) [ A-League ] ) )",
            "( JOIN ( R [ league ] ) ( JOIN ( R [ start season ] ) [ A-League ] ) )",
            "( JOIN [ start date ] [ A-League ] )"
        ],
        "gen_label": "( JOIN ( R [ season starts ] ) [ A-League Men ] )"
    },
    {
        "question": "Question: { What is the side effect of combustion? }",
        "predicted_query": [
            "( JOIN ( R [ has side effect ] ) ( JOIN ( R [ product of ] ) [ combustion ] ) )",
            "( JOIN [ has side effect ] [ combustion ] )",
            "( JOIN [ side effect ] [ combustion ] )",
            "( JOIN ( R [ side effect ] ) ( JOIN ( R [ product of ] ) [ combustion ] ) )",
            "( AND ( JOIN [ has adverse effect ] [ combustion ] ) ( JOIN ( R [ has adverse effect ] ) [ combustion ] ) )"
        ],
        "gen_label": "( JOIN [ side effect ] [ combustion ] )"
    },
    {
        "question": "Question: { What is the UK Provider Reference Number for the University of Birmingham? }",
        "predicted_query": [
            "( JOIN ( R [ UK Provider Reference Number ] ) [ University of Birmingham ] )",
            "( JOIN ( R [ UK Provider Reference Number ] ) [ University of Birmingham ] )",
            "( JOIN ( R [ United Kingdom Provider Reference Number ] ) [ University of Birmingham ] )",
            "( JOIN ( R [ UK Provider Reference Number ] ) [ University of Birmingham ] )",
            "( AND ( JOIN [ provider reference number ] [ University of Birmingham ] ) ( JOIN ( R [ health professional licence number ] ) [ physician ] ) )"
        ],
        "gen_label": "( JOIN ( R [ UK Provider Reference Number ] ) [ University of Birmingham ] )"
    },
    {
        "question": "Question: { WHAT IS THE DIE FROM THE PAINTERS OF SUPREMATISM }",
        "predicted_query": [
            "( [ joined by ] [ cause of death ] ) [ Suprematism ]",
            "( JOIN [ cause of death ] [ Kazimir Malevich ] )",
            "( [ joined by ] [ death date ] ) [ Suprematism ]",
            "( JOIN ( R [ cause of death ] ) ( JOIN ( R [ influenced by ] ) [ Suprematism ] ) )",
            "( JOIN ( R [ causes ] ) ( JOIN ( R [ influenced by ] ) [ Suprematism ] ) )"
        ],
        "gen_label": "( JOIN ( R [ cause of death ] ) ( JOIN ( R [ creator ] ) [ Suprematism ] ) )"
    },
    {
        "question": "Question: { What is the topic of History of British Columbia? }",
        "predicted_query": [
            "[ JOIN ( R [ topic ] )",
            "[ JOIN",
            "( JOIN ( R [ field of work ] ) ( JOIN ( R [ notable work ] ) [ History of British Columbia ] ) )",
            "( JOIN [ topic of history ] [ History of British Columbia ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ British Columbia ] ) ( JOIN ( R [ topic ] ) [ history of British Columbia ] ) )"
        ],
        "gen_label": "( JOIN ( R [ coordinates of southernmost point ] ) ( JOIN ( R [ facet of ] ) [ history of British Columbia ] ) )"
    },
    {
        "question": "Question: { Which is the BAV ID for Ida Tarbell? }",
        "predicted_query": [
            "( JOIN ( R [ BAV ID ] ) [ Ida Tarbell ] )",
            "( JOIN ( R [ BAV ID ] ) [ Ida Tarbell ] )",
            "( JOIN ( R [ BAV ID ] ) [ Ida Tarbell ] )",
            "[ JOIN ] [ BAV ID ] [ Ida Tarbell ]",
            "( JOIN ( R [ Bavaria.de ID ] ) [ Ida Tarbell ] )"
        ],
        "gen_label": "( JOIN ( R [ Vatican Library ID ( former scheme ) ] ) [ Ida Tarbell ] )"
    },
    {
        "question": "Question: { What is the mean age of the South Bohemian Region? }",
        "predicted_query": [
            "( JOIN ( R [ mean age ] ) [ South Bohemian Region ] )",
            "( JOIN ( R [ mean age ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ South Bohemian Region ] ) )",
            "( JOIN ( R [ average age ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ South Bohemian Region ] ) )",
            "( JOIN [ mean age ] [ South Bohemian Region ] )",
            "( JOIN ( R [ mean age ] ) [ South Bohemian Region ] )"
        ],
        "gen_label": "( JOIN ( R [ mean age ] ) [ South Bohemian Region ] )"
    },
    {
        "question": "Question: { How did the actress of Spartacus die? }",
        "predicted_query": [
            "( JOIN ( R [ death place ] ) ( JOIN ( R [ cast member ] ) [ Spartacus ] ) )",
            "( AND ( JOIN [ field ] [ death date ] ) ( JOIN ( R [ cast member ] ) [ Spartacus ] ) )",
            "( AND ( JOIN [ occupation ] [ actor ] ) ( JOIN ( R [ death place ] ) [ Spartacus ] ) )",
            "( JOIN ( R [ place of death ] ) ( JOIN ( R [ cast member ] ) [ Spartacus ] ) )",
            "( JOIN [ death place ] [ Spartacus ] )"
        ],
        "gen_label": "( JOIN ( R [ manner of death ] ) ( JOIN ( R [ cast member ] ) [ Spartacus ] ) )"
    },
    {
        "question": "Question: { Which is the Swedish Olympic Committee athelete ID for Jan-Ove Waldner? }",
        "predicted_query": [
            "( JOIN ( R [ Swedish Olympic Committee athlete ID ] ) [ Jan-Ove Waldner ] )",
            "( [ joined ] [ Jan-Ove Waldner ] )",
            "( JOIN ( R [ Swedish Olympic Committee athlete ID ] ) [ Jan-Ove Waldner ] )",
            "( [ JOIN ] [ Jan-Ove Waldner ] )",
            "( AND ( JOIN [ Swedish Olympians database athlete ID ] [ Jan-Ove Waldner ] ) ( JOIN ( R [ member of ] ) [ Swedish Olympic Committee ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Swedish Olympic Committee athlete ID ] ) [ Jan-Ove Waldner ] )"
    },
    {
        "question": "Question: { Väinö Linna received what prize? }",
        "predicted_query": [
            "( JOIN [ prize received ] [ Väinö Linna ] )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ award received ] ) [ Väinö Linna ] ) )",
            "( JOIN ( R [ award received ] ) [ Väinö Linna ] )",
            "( JOIN ( R [ award received ] ) ( JOIN ( R [ recipient ] ) [ Väinö Linna ] ) )",
            "( AND ( JOIN [ awarded to ] [ Väinö Linna ] ) ( JOIN ( R [ awarded in ] ) [ Väinö Linna ] ) )"
        ],
        "gen_label": "( JOIN ( R [ award received ] ) [ Väinö Linna ] )"
    },
    {
        "question": "Question: { What is the Xenopus Anatomical Ontology ID for the musculoskeletal system? }",
        "predicted_query": [
            "( JOIN ( R [ Xenopus Anatomical Ontology ID ] ) [ musculoskeletal system ] )",
            "( JOIN [ Xenopus Anatomical Ontology ID ] [ musculoskeletal system ] )",
            "( JOIN ( R [ Xenopus Anatomical Ontology ID ] ) [ musculoskeletal system ] )",
            "( AND ( JOIN [ has Xenopus Anatomical Ontology ID ] ) ( JOIN ( R [ has taxonomic authority ] ) [ musculoskeletal system ] ) )",
            "( JOIN ( R [ Xenopus Anatomical Ontology ID ] ) [ musculoskeletal system ] )"
        ],
        "gen_label": "( JOIN ( R [ Xenopus Anatomical Ontology ID ] ) [ human musculoskeletal system ] )"
    },
    {
        "question": "Question: { What is Leo XIII's ODIS ID? }",
        "predicted_query": [
            "[ JOIN ( R [ ODIS ID ] ) [ Leo XIII ] ]",
            "( [ JOIN ] [ ODIS ID ] ) [ Leo XIII ]",
            "( JOIN ( R [ ODIS ID ] ) [ Pope Leo XIII ] )",
            "( JOIN [ ODIS ID ] [ Leo XIII ] )",
            "( AND ( JOIN [ Open Data & Information System ID ] [ Leo XIII ] ) ( JOIN ( R [ ID ] ) [ Leo XIII ] ) )"
        ],
        "gen_label": "( JOIN ( R [ ODIS ID ] ) [ Leo XIII ] )"
    },
    {
        "question": "Question: { watchmaker esco id? }",
        "predicted_query": [
            "( JOIN ( R [ Esco ID ] ) [ watchmaker ] )",
            "( JOIN ( R [ Esco ID ] ) [ watchmaker ] )",
            "( JOIN ( R [ watchmaker Esco ID ] ) [ Esco ] )",
            "( JOIN [ Esco ID ] [ watchmaker ] )",
            "( AND ( JOIN [ ID.com ID ] [ Esco ] ) ( JOIN ( R [ watchmaker ] ) [ Esco ] ) )"
        ],
        "gen_label": "( JOIN ( R [ ESCO Occupation ID ] ) [ watchmaker ] )"
    },
    {
        "question": "Question: { What category of associated people are in Le Mans' twin town? }",
        "predicted_query": [
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ twinned administrative body ] ) [ Le Mans ] ) )",
            "( JOIN ( R [ category of associated people ] ) [ Le Mans ] )",
            "( JOIN ( R [ category of associated people ] ) ( JOIN ( R [ twinned administrative body ] ) [ Le Mans ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Le Mans ] ) ( JOIN ( R [ category ] ) [ Le Mans ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Le Mans ] ) ( JOIN ( R [ category ] ) [ Le Mans ] ) )"
        ],
        "gen_label": "( JOIN ( R [ category of associated people ] ) ( JOIN ( R [ twinned administrative body ] ) [ Le Mans ] ) )"
    },
    {
        "question": "Question: { What is the main topic of Wham!? }",
        "predicted_query": [
            "( JOIN ( R [ main topic ] ) [ Wham! ] )",
            "[Challenge/Reward]",
            "( JOIN [ main topic ] [ Wham! ] )",
            "( AND ( JOIN [ field of work ] [ musician ] ) ( JOIN ( R [ notable work ] ) [ Wham! ] ) )",
            "( JOIN ( R [ topic of this ] ) ( JOIN ( R [ record label ] ) [ Wham! ] ) )"
        ],
        "gen_label": "( JOIN [ template has topic ] [ Wham! ] )"
    },
    {
        "question": "Question: { wich means {explosive velocity} at {2,4,6-trinitrotoluene} ? }",
        "predicted_query": [
            "( JOIN ( R [ explosive velocity ] ) ( JOIN ( R [ chemical formula ] ) [ 2,4,6-trinitrotoluene ] ) )",
            "( JOIN [ explosive velocity ] [ 2,4,6-trinitrotoluene ] )",
            "( AND ( JOIN [ chemical formula ] [ 2,4,6-trinitrotoluene ] ) ( JOIN ( R [ explosive velocity ] ) [ 2,4,6-trinitrotoluene ] ) )",
            "( JOIN ( R [ explosive velocity ] ) ( JOIN ( R [ uses ] ) [ 2,4,6-trinitrotoluene ] ) )",
            "[ JOIN [ R [ explosive velocity ] ] [ 2,4,6-trinitrotoluene ] ]"
        ],
        "gen_label": "( JOIN ( R [ explosive velocity ] ) [ TNT ] )"
    },
    {
        "question": "Question: { What are the unique signs of a sulfuric acid burn? }",
        "predicted_query": [
            "( JOIN [ has unique sign ] [ sulfuric acid burn ] )",
            "( JOIN ( R [ has unique sign ] ) ( JOIN ( R [ symptoms ] ) [ sulfuric acid burn ] ) )",
            "( JOIN ( R [ symptom ] ) ( JOIN ( R [ has effect ] ) [ sulfuric acid burn ] ) )",
            "( AND ( JOIN [ symptoms or signs ] [ sulfuric acid burn ] ) ( JOIN ( R [ symptoms or signs ] ) [ burn ] ) )",
            "( JOIN ( R [ has symptom or sign ] ) ( JOIN ( R [ cause ] ) [ sulfuric acid burn ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ symptoms and signs ] [ burn ] ) ( JOIN ( R [ has effect ] ) [ sulfuric acid ] ) )"
    },
    {
        "question": "Question: { Who is the coach of the Bogdan Tiru team? }",
        "predicted_query": [
            "( JOIN ( R [ coach ] ) ( JOIN ( R [ member of ] ) [ Bogdan Tiru ] ) )",
            "[ JOIN ( R [ coach ] ) [ member of ] [ Bogdan Tiru ] ]",
            "( JOIN [ coach ] [ Bogdan Tiru ] )",
            "( JOIN ( R [ coach ] ) [ Bogdan Tiru ] )",
            "( JOIN ( R [ coach ] ) ( JOIN ( R [ team member ] ) [ Bogdan Tîr ] ) )"
        ],
        "gen_label": "( JOIN ( R [ head coach ] ) ( JOIN ( R [ member of sports team ] ) [ Bogdan Țîru ] ) )"
    },
    {
        "question": "Question: { What is Galiciana Author ID for Augustine of Hippo? }",
        "predicted_query": [
            "( JOIN ( R [ Galiciana Author ID ] ) [ Augustine of Hippo ] )",
            "( JOIN ( R [ Galiciana author ID ] ) [ Augustine of Hippo ] )",
            "[]",
            "[ JOIN ( [ Galiciana Author ID ] ) is [ Augustine of Hippo ] ]",
            "( AND ( JOIN [ ID.fr author ] [ Augustine of Hippo ] ) ( JOIN ( R [ ID in this author ID ] ) [ Augustine of Hippo ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Galiciana authority ID ] ) [ Augustine of Hippo ] )"
    },
    {
        "question": "Question: { Which shape is used for laundry items. }",
        "predicted_query": [
            "( JOIN ( R [ shape ] ) [ laundry items ] )",
            "( JOIN [ shape ] [ laundry items ] )",
            "( JOIN [ has shape ] [ laundry item ] )",
            "( AND ( JOIN [ has shape ] [ square ] ) ( JOIN ( R [ shape ] ) [ laundry item ] ) )",
            "( JOIN ( R [ shape ] ) [ laundry items ] )"
        ],
        "gen_label": "( JOIN ( R [ shape ] ) ( JOIN ( R [ uses ] ) [ laundering ] ) )"
    },
    {
        "question": "Question: { Who is the favorite player of the writer of Black Girl/White Girl? }",
        "predicted_query": [
            "( JOIN ( R [ favorite player ] ) ( JOIN ( R [ author ] ) [ Black Girl/White Girl ] ) )",
            "( JOIN [ favorite player ] [ Black Girl/White Girl ] )",
            "( JOIN ( R [ sports played ] ) ( JOIN ( R [ author ] ) [ Black Girl/White Girl ] ) )",
            "( JOIN ( R [ sports player ] ) ( JOIN ( R [ writer ] ) [ Black Girl/White Girl ] ) )",
            "( AND ( JOIN [ sport ] [ tennis ] ) ( JOIN ( R [ influenced by ] ) [ Black Girl/White Girl ] ) )"
        ],
        "gen_label": "( JOIN ( R [ influenced by ] ) ( JOIN ( R [ author ] ) [ Black Girl / White Girl ] ) )"
    },
    {
        "question": "Question: { Who co-founded the label of Godfather Buried Alive? }",
        "predicted_query": [
            "( JOIN [ founded by ] [ Godfather Buried Alive ] )",
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ record label ] ) [ Godfather Buried Alive ] ) )",
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ record label ] ) [ Godfather Buried Alive ] ) )",
            "( AND ( JOIN [ record label founded ] [ Godfather Buried Alive ] ) ( JOIN ( R [ founded by ] ) [ Godfather Buried Alive ] ) )",
            "( AND ( JOIN [ founded by ] [ Godfather Buried Alive ] ) ( JOIN ( R [ founded by ] ) [ Godfather Buried Alive ] ) )"
        ],
        "gen_label": "( JOIN ( R [ founded by ] ) ( JOIN ( R [ record label ] ) [ Godfather Buried Alive ] ) )"
    },
    {
        "question": "Question: { Who is the narrator of Derek Jacobi? }",
        "predicted_query": [
            "( JOIN ( R [ narrated by ] ) [ Derek Jacobi ] )",
            "( JOIN ( R [ narrator ] ) [ Derek Jacobi ] )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ narrator ] ) [ Derek Jacobi ] ) )",
            "[join] [narrator] [Derek Jacobi]",
            "( JOIN [ narrator ] [ Derek Jacobi ] )"
        ],
        "gen_label": "( JOIN [ narrator ] [ Derek Jacobi ] )"
    },
    {
        "question": "Question: { What is Morrisey's Munzinger Pop ID? }",
        "predicted_query": [
            "( JOIN ( R [ Munzinger Pop ID ] ) [ Morrissey ] )",
            "( JOIN ( R [ Morrisey's Munzinger Pop ID ] ) [ Morrissey ] )",
            "( JOIN ( R [ Morrisey's Munzinger Pop ID ] ) [ Morrissey ] )",
            "[joined by] [Morrissey]",
            "( AND ( JOIN [ Munzinger Person ID ] [ Morrissey ] ) ( JOIN ( R [ ID ] ) [ Morrissey ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Munzinger Pop ID ] ) [ Morrissey ] )"
    },
    {
        "question": "Question: { Which is the Smithsonian American Art Museum: person/institution thesaurus ID for Antoine Watteau? }",
        "predicted_query": [
            "( JOIN ( R [ Smithsonian American Art Museum: person/institution thesaurus ID ] ) [ Antoine Watteau ] )",
            "( JOIN ( R [ Smithsonian American Art Museum: person/institution thesaurus ID ] ) [ Antoine Watteau ] )",
            "( AND ( JOIN [ person/institution thesaurus ID ] [ Antoine Watteau ] ) ( JOIN ( R [ has taxonomic authority ] ) [ Smithsonian American Art Museum ] ) )",
            "( AND ( JOIN [ thesaurus ID ] [ Smithsonian American Art Museum person/institution thesaurus ] ) ( JOIN ( R [ ID in this organization ] ) [ Antoine Watteau ] ) )",
            "( JOIN ( R [ Smithsonian American Art Museum person/institution thesaurus ID ] ) [ Antoine Watteau ] )"
        ],
        "gen_label": "( JOIN ( R [ Smithsonian American Art Museum person/institution ID ] ) [ Jean-Antoine Watteau ] )"
    },
    {
        "question": "Question: { Which is the GeoNames feature code of wetland? }",
        "predicted_query": [
            "( JOIN ( R [ GeoNames feature code ] ) [ wetland ] )",
            "( JOIN [ GeoNames feature code ] [ wetland ] )",
            "[join (R [GeoNames feature code] [wetland])]",
            "( AND ( JOIN [ has the feature of ] [ wetland ] ) ( JOIN ( R [ ID ] ) [ GeoNames ] ) )",
            "( JOIN ( R [ GeoNames feature code ] ) [ wetland ] )"
        ],
        "gen_label": "( JOIN ( R [ GeoNames feature code ] ) [ wetland ] )"
    },
    {
        "question": "Question: { Which is the fracturing of albite? }",
        "predicted_query": [
            "( JOIN ( R [ fracturing of ] ) [ albite ] )",
            "( JOIN [ fracturing of ] [ albite ] )",
            "( AND ( JOIN [ occurs in rock type ] [ albite ] ) ( JOIN ( R [ fracture surface ] ) [ albite ] ) )",
            "( JOIN ( R [ fracture surface ] ) ( JOIN ( R [ mineral composition ] ) [ albite ] ) )",
            "( JOIN [ fracturing of ] [ albite ] )"
        ],
        "gen_label": "( JOIN ( R [ mineral fracture ] ) [ albite ] )"
    },
    {
        "question": "Question: { Which is the Commonwealth Games Federation athlete ID of Sebastian Coe? }",
        "predicted_query": [
            "( JOIN ( R [ Commonwealth Games Federation athlete ID ] ) [ Sebastian Coe ] )",
            "( JOIN [ Commonwealth Games Federation athlete ID ] [ Sebastian Coe ] )",
            "{ JOIN ( R [ Commonwealth Games Federation athlete ID ] ) [ Sebastian Coe ] }",
            "[]",
            "( JOIN ( R [ Commonwealth Games Federation athlete ID ] ) [ Sebastian Coe ] )"
        ],
        "gen_label": "( JOIN ( R [ Commonwealth Games Federation athlete ID ( archived ) ] ) [ Sebastian Coe ] )"
    },
    {
        "question": "Question: { Who is the tenant in The Rape of Proserpina? }",
        "predicted_query": [
            "( JOIN ( R [ tenant ] ) [ The Rape of Proserpina ] )",
            "( JOIN ( R [ resident ] ) ( JOIN ( R [ depicts ] ) [ The Rape of Proserpina ] ) )",
            "( JOIN [ tenant ] [ The Rape of Proserpina ] )",
            "( JOIN ( R [ occupies workplace ] ) ( JOIN ( R [ artist ] ) [ The Rape of Proserpina ] ) )",
            "( JOIN ( R [ tenant ] ) ( JOIN ( R [ depicts ] ) [ The Rape of Proserpina ] ) )"
        ],
        "gen_label": "( JOIN ( R [ occupant ] ) ( JOIN ( R [ location ] ) [ The Rape of Proserpina ] ) )"
    },
    {
        "question": "Question: { What is the forename of John Stagliano, which also has the same meaning as \"loan\"? }",
        "predicted_query": [
            "( AND ( JOIN [ meaning ] [ loan ] ) ( JOIN ( R [ given name ] ) [ John Stagliano ] ) )",
            "( JOIN ( R [ given name ] ) ( JOIN ( R [ has the same meaning as ] ) [ John Stagliano ] ) )",
            "( AND ( JOIN [ has the same meaning ] [ loan ] ) ( JOIN ( R [ given name ] ) [ John Stagliano ] ) )",
            "( AND ( JOIN [ has the same meaning ] [ loan ] ) ( JOIN ( R [ given name ] ) [ John Stagliano ] ) )",
            "( AND ( JOIN [ homonym of ] [ loan ] ) ( JOIN ( R [ given name ] ) [ John Stagliano ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ said to be the same as ] [ Ioan ] ) ( JOIN ( R [ given name ] ) [ John Stagliano ] ) )"
    },
    {
        "question": "Question: { Which is the OpenPlaques subject ID of Richard Wagner? }",
        "predicted_query": [
            "[ JOIN ( R [ OpenPlaques subject ID ] ) [ Richard Wagner ] ]",
            "( JOIN [ OpenPlaques subject ID ] [ Richard Wagner ] )",
            "( JOIN ( R [ OpenPlaques subject ID ] ) [ Richard Wagner ] )",
            "( JOIN ( R [ OpenPlaques subject ID ] ) [ Richard Wagner ] )",
            "( [ joined by ] [ OpenPlaques subject ID ] [ Richard Wagner ] )"
        ],
        "gen_label": "( JOIN ( R [ Open Plaques subject ID ] ) [ Richard Wagner ] )"
    },
    {
        "question": "Question: { Which is the minimum wavelength of sensitivity of Karl G. Jansky Very Large Array? }",
        "predicted_query": [
            "( JOIN ( R [ minimum wavelength of sensitivity ] ) [ Karl G. Jansky Very Large Array ] )",
            "( JOIN ( R [ wavelength of sensitivity ] ) [ Karl G. Jansky Very Large Array ] )",
            "( JOIN ( R [ minimum wavelength of sensitivity ] ) ( JOIN ( R [ uses ] ) [ Karl G. Jansky Very Large Array ] ) )",
            "( JOIN ( R [ wavelength of sensitivity ] ) ( JOIN ( R [ uses ] ) [ Karl G. Jansky Very Large Array ] ) )",
            "( JOIN ( R [ minimum wavelength of sensitivity ] ) [ Karl G. Jansky Very Large Array ] )"
        ],
        "gen_label": "( JOIN ( R [ minimum wavelength of sensitivity ] ) [ Karl G. Jansky Very Large Array ] )"
    },
    {
        "question": "Question: { Name the significance of county of Saskatchewan and has its category of association with Canadian people. }",
        "predicted_query": [
            "( AND ( JOIN [ category of association ] [ Canadian people ] ) ( JOIN ( R [ named after ] ) [ Saskatchewan ] ) )",
            "( AND ( JOIN [ has category ] [ Canadian people ] ) ( JOIN ( R [ named after ] ) [ Saskatchewan ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Saskatchewan ] ) ( JOIN ( R [ significance ] ) [ Canadian people ] ) )",
            "( AND ( JOIN [ category of association ] [ Canadian people ] ) ( JOIN ( R [ country of citizenship ] ) [ Saskatchewan ] ) )",
            "( AND ( JOIN [ member of ] [ Canadian people ] ) ( JOIN ( R [ has significance in ] ) [ Saskatchewan ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ category of associated people ] [ Category:Canadian people ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Saskatchewan ] ) )"
    },
    {
        "question": "Question: { What audio language is O Tannenbaum in? The regulatory body is the IDS - Institute for the German Language. }",
        "predicted_query": [
            "( JOIN [ regulatory body ] [ IDS - Institute for the German Language ] ) ( JOIN ( R [ language of work ] ) [ O Tannenbaum ] )",
            "( AND ( JOIN [ regulatory body ] [ IDS - Institute for the German Language ] ) ( JOIN ( R [ language of work ] ) [ O Tannenbaum ] ) )",
            "( JOIN ( R [ language of audio ] ) ( JOIN ( R [ regulatory body ] ) [ IDS - Institute for the German Language ] ) )",
            "( AND ( JOIN [ member of ] [ IDS - Institute for the German Language ] ) ( JOIN ( R [ language of work ] ) [ O Tannenbaum ] ) )",
            "( JOIN ( R [ official language ] ) ( JOIN ( R [ member of ] ) [ IDS - Institute for the German Language ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ language regulatory body ] [ Leibniz Institute for the German Language ] ) ( JOIN ( R [ language of work or name ] ) [ O Tannenbaum ] ) )"
    },
    {
        "question": "Question: { What is dimethyl ether's UN number? }",
        "predicted_query": [
            "( JOIN ( R [ UN number ] ) [ dimethyl ether ] )",
            "( JOIN [ UN number ] [ dimethyl ether ] )",
            "( AND ( JOIN [ Chemical Abstracts Service registry number ] [ dimethyl ether ] ) ( JOIN ( R [ UN number ] ) [ dimethyl ether ] ) )",
            "( [ joined by ] [ dimethyl ether ] )",
            "( JOIN ( R [ UN number ] ) [ dimethyl ether ] )"
        ],
        "gen_label": "( JOIN ( R [ UN number ] ) [ dimethyl ether ] )"
    },
    {
        "question": "Question: { What written work precedes that of A Long Way from Chicago? }",
        "predicted_query": [
            "( JOIN ( R [ follows ] ) ( JOIN ( R [ author ] ) [ A Long Way from Chicago ] ) )",
            "( JOIN ( R [ written work ] ) ( JOIN ( R [ preceded by ] ) [ A Long Way from Chicago ] ) )",
            "( JOIN [ written work ] [ A Long Way from Chicago ] )",
            "( AND ( JOIN [ preceded by ] [ A Long Way from Chicago ] ) ( JOIN ( R [ author ] ) [ A Long Way from Home ] ) )",
            "( JOIN ( R [ author ] ) ( JOIN ( R [ follows ] ) [ A Long Way from Chicago ] ) )"
        ],
        "gen_label": "( JOIN ( R [ author ] ) ( JOIN ( R [ followed by ] ) [ A Long Way from Chicago ] ) )"
    },
    {
        "question": "Question: { Which is the postcode of the hometown of Ricky Martin? }",
        "predicted_query": [
            "( JOIN ( R [ postcode ] ) ( JOIN ( R [ place of birth ] ) [ Ricky Martin ] ) )",
            "( JOIN ( R [ postal code ] ) ( JOIN ( R [ place of birth ] ) [ Ricky Martin ] ) )",
            "( JOIN ( R [ postcode ] ) [ Ricky Martin ] )",
            "( JOIN [ postcode ] [ hometown of ] ) AND ( JOIN ( R [ place of birth ] ) [ Ricky Martin ] )",
            "( JOIN ( R [ postal code ] ) ( JOIN ( R [ country ] ) [ Ricky Martin ] ) )"
        ],
        "gen_label": "( JOIN ( R [ postal code ] ) ( JOIN ( R [ residence ] ) [ Ricky Martin ] ) )"
    },
    {
        "question": "Question: { Which is the military rank for George Vancouver? }",
        "predicted_query": [
            "( JOIN ( R [ military rank ] ) [ George Vancouver ] )",
            "( JOIN [ military rank ] [ George Vancouver ] )",
            "### Instruction:",
            "( AND ( JOIN [ ranks ] [ military rank ] ) ( JOIN ( R [ occupation ] ) [ George Vancouver ] ) )",
            "( JOIN ( R [ military rank ] ) [ George Vancouver ] )"
        ],
        "gen_label": "( JOIN ( R [ military or police rank ] ) [ George Vancouver ] )"
    },
    {
        "question": "Question: { Name the disciple or the faith followed up by Theodosius Dobzhansky }",
        "predicted_query": [
            "( JOIN ( R [ disciple ] ) ( JOIN ( R [ religion ] ) [ Theodosius Dobzhansky ] ) )",
            "( AND ( JOIN [ religion or worldview ] [ Christianity ] ) ( JOIN ( R [ student ] ) [ Theodosius Dobzhansky ] ) )",
            "( AND ( JOIN [ follower of ] [ Theodosius Dobzhansky ] ) ( JOIN ( R [ student ] ) [ Theodosius Dobzhansky ] ) )",
            "( JOIN ( R [ follower ] ) ( JOIN ( R [ student ] ) [ Theodosius Dobzhansky ] ) )",
            "( JOIN ( R [ student ] ) ( JOIN ( R [ religion ] ) [ Theodosius Dobzhansky ] ) )"
        ],
        "gen_label": "( JOIN ( R [ religion or worldview ] ) ( JOIN ( R [ student ] ) [ Theodosius Dobzhansky ] ) )"
    },
    {
        "question": "Question: { What is Hawai‘i Sports Hall of Fame ID for Duke Kahanamoku ? }",
        "predicted_query": [
            "( JOIN ( R [ Hawaiʻi Sports Hall of Fame ID ] ) [ Duke Kahanamoku ] )",
            "( JOIN ( R [ Hawai'i Sports Hall of Fame ID ] ) [ Duke Kahanamoku ] )",
            "[ JOIN [ NOT ] [ Hawaii Sports Hall of Fame ID ] ] ",
            "[ JOIN [ JOIN [ sports hall of fame athlete",
            "( JOIN ( R [ Hawaii Sports Hall of Fame ID ] ) [ Duke Kahanamoku ] )"
        ],
        "gen_label": "( JOIN ( R [ Hawai‘i Sports Hall of Fame ID ( archived ) ] ) [ Duke Kahanamoku ] )"
    },
    {
        "question": "Question: { what is decimal of radix }",
        "predicted_query": [
            "( JOIN ( R [ base ten numeral system ] ) [ radix ] )",
            "( JOIN [ radix ] [ decimal ] )",
            "( JOIN ( R [ radix ] ) [ decimal ] )",
            "( AND ( JOIN [ radix ] [ base 10 ] ) ( JOIN ( R [ base ] ) [ decimal ] ) )",
            "( JOIN ( R [ base 10 logarithm ] ) [ radix ] )"
        ],
        "gen_label": "( JOIN ( R [ radix ] ) [ decimal ] )"
    },
    {
        "question": "Question: { What is the birth city of Augustus III of Poland, which has boroughs in Cotta? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Cotta ] ) ( JOIN ( R [ place of birth ] ) [ Augustus III of Poland ] ) )",
            "( JOIN ( R [ place of birth ] ) ( JOIN ( R [ contains the administrative territorial entity ] ) [ Cotta ] ) )",
            "( AND ( JOIN [ has borough ] [ Cotta ] ) ( JOIN ( R [ place of birth ] ) [ Augustus III of Poland ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Cotta ] ) ( JOIN ( R [ place of birth ] ) [ Augustus III of Poland ] ) )",
            "( AND ( JOIN [ has administrative territorial entity ] [ Cotta ] ) ( JOIN ( R [ place of birth ] ) [ Augustus III of Poland ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ contains the administrative territorial entity ] [ Cotta ] ) ( JOIN ( R [ place of birth ] ) [ Augustus III of Poland ] ) )"
    },
    {
        "question": "Question: { Which is decays to Higgs boson? }",
        "predicted_query": [
            "( JOIN ( R [ decays to ] ) [ Higgs boson ] )",
            "( JOIN [ decays to ] [ Higgs boson ] )",
            "( JOIN ( R [ decay product ] ) [ Higgs boson ] )",
            "[ JOIN ( [ parent is ] [ Higgs boson ] ) ]",
            "[ JOIN ( [ decays to ] ) [ Higgs boson ] ]"
        ],
        "gen_label": "( JOIN ( R [ decays to ] ) [ Higgs boson ] )"
    },
    {
        "question": "Question: { What is in the category of Wembley Stadium? }",
        "predicted_query": [
            "( JOIN ( R [ category ] ) ( JOIN ( R [ sport ] ) [ Wembley Stadium ] ) )",
            "( JOIN [ category of ] [ Wembley Stadium ] )",
            "( JOIN ( R [ category of ] ) ( JOIN ( R [ located in ] ) [ Wembley Stadium ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Wembley Stadium ] ) ( JOIN ( R [ category ] ) [ Wembley Stadium ] ) )",
            "( JOIN [ category of ] [ Wembley Stadium ] )"
        ],
        "gen_label": "( JOIN [ home venue ] [ Wembley Stadium ] )"
    },
    {
        "question": "Question: { What is the die form for Luigi Comencini that has the genetic association of CNKSR3? }",
        "predicted_query": [
            "( AND ( JOIN [ has genetic association ] [ CNKSR3 ] ) ( JOIN ( R [ die form ] ) [ Luigi Comencini ] ) )",
            "( AND ( JOIN [ genetic association ] [ CNKSR3 ] ) ( JOIN ( R [ die form ] ) [ Luigi Comencini ] ) )",
            "( AND ( JOIN [ gene–disease association ] [ CNKSR3 ] ) ( JOIN ( R [ die form ] ) [ Luigi Comencini ] ) )",
            "( JOIN ( R [ die form ] ) ( JOIN ( R [ has genetic association ] ) [ CNKSR3 ] ) )",
            "( AND ( JOIN [ has genetic association ] [ CNKSR3 ] ) ( JOIN ( R [ shape ] ) [ Luigi Comencini ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ genetic association ] [ CNKSR3 ] ) ( JOIN ( R [ cause of death ] ) [ Luigi Comencini ] ) )"
    },
    {
        "question": "Question: { Who is the choreographer of The Rite of Spring? }",
        "predicted_query": [
            "( JOIN ( R [ choreographer ] ) [ The Rite of Spring ] )",
            "[ JOIN ( R [ composer ] ) ( JOIN ( R [ choreographer ] ) [ The Rite of Spring ] ) ]",
            "( JOIN ( R [ choreographer ] ) ( JOIN ( R [ composer ] ) [ The Rite of Spring ] ) )",
            "( JOIN [ choreographer ] [ The Rite of Spring ] )",
            "( JOIN ( R [ performer ] ) ( JOIN ( R [ choreographer ] ) [ The Rite of Spring ] ) )"
        ],
        "gen_label": "( JOIN ( R [ choreographer ] ) [ The Rite of Spring ] )"
    },
    {
        "question": "Question: { Is Brooklyn that has cities the birth location of Richard E. Bellman? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Brooklyn ] ) ( JOIN ( R [ place of birth ] ) [ Richard E. Bellman ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Brooklyn ] ) ( JOIN ( R [ place of death ] ) [ Richard E. Bellman ] ) )",
            "( JOIN ( R [ has cities ] ) ( JOIN ( R [ place of birth ] ) [ Richard E. Bellman ] ) )",
            "( JOIN [ has cities ] [ Brooklyn ] ) ( JOIN ( R [ place of death ] ) [ Richard E. Bellman ] )",
            "( AND ( JOIN [ location of birth ] [ Brooklyn ] ) ( JOIN ( R [ influenced by ] ) [ Richard E. Bellman ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ contains the administrative territorial entity ] [ Brooklyn ] ) ( JOIN ( R [ place of birth ] ) [ Richard E. Bellman ] ) )"
    },
    {
        "question": "Question: { Who owns the paintings of Paula Hoegh-Guldberg? }",
        "predicted_query": [
            "( JOIN ( R [ owned by ] ) ( JOIN ( R [ artist ] ) [ Paula Hoegh-Guldberg ] ) )",
            "( JOIN ( R [ owner ] ) ( JOIN ( R [ artist ] ) [ Paula Hoegh-Guldberg ] ) )",
            "( JOIN ( R [ owner ] ) ( JOIN ( R [ artist ] ) [ Paula Hoegh-Guldberg ] ) )",
            "( JOIN ( R [ owner ] ) ( JOIN ( R [ painter ] ) [ Paula Hoegh-Guldberg ] ) )",
            "( JOIN [ owned by ] [ Paula Hoegh-Guldberg ] )"
        ],
        "gen_label": "( JOIN ( R [ depicts ] ) ( JOIN ( R [ owner of ] ) [ Paula Høegh-Guldberg ] ) )"
    },
    {
        "question": "Question: { Which is the animal breed for Cavalier King Charles Spaniel? }",
        "predicted_query": [
            "( JOIN ( R [ animal breed ] ) [ Cavalier King Charles Spaniel ] )",
            "( JOIN ( R [ breed ] ) ( JOIN ( R [ parent taxon ] ) [ Cavalier King Charles Spaniel ] ) )",
            "( JOIN [ animal breed ] [ Cavalier King Charles Spaniel ] )",
            "( JOIN ( R [ taxon name ] ) ( JOIN ( R [ breed of ] ) [ Cavalier King Charles Spaniel ] ) )",
            "( JOIN ( R [ animal breed ] ) [ Cavalier King Charles Spaniel ] )"
        ],
        "gen_label": "( JOIN [ animal breed ] [ Cavalier King Charles Spaniel ] )"
    },
    {
        "question": "Question: { What are the subsidiary entities of the United States Department of the Air Force's parent unit? }",
        "predicted_query": [
            "The joined query is: { [ subsidiary entity ] [ joins ] [ United States Department of the Air Force ] }",
            "[ JOIN [ subsidiary ] [ parent organization ] [ United States Department of the Air Force ] ]",
            "( JOIN [ subsidiary of ] [ United States Department of the Air Force ] )",
            "( AND ( JOIN [ parent entity ] [ United States Department of the Air Force ] ) ( JOIN ( R [ subsidiary ] ) [ United States Department of the Air Force ] ) )",
            "( AND ( JOIN [ parent entity ] [ United States Department of the Air Force ] ) ( JOIN ( R [ subsidiary of ] ) [ United States Department of the Air Force ] ) )"
        ],
        "gen_label": "( JOIN ( R [ has subsidiary ] ) ( JOIN ( R [ parent organization ] ) [ United States Department of the Air Force ] ) )"
    },
    {
        "question": "Question: { The Treaty of Versailles was signed by which diplomats? }",
        "predicted_query": [
            "[ JOIN [ diplomat ] [ participant ] [ Treaty of Versailles ] ]",
            "[ JOIN [ diplomat ] [ Treaty of Versailles ] ]",
            "( AND ( JOIN [ diplomatic representative ] [ Treaty of Versailles ] ) ( JOIN ( R [ diplomat ] ) [ Treaty of Versailles ] ) )",
            "( JOIN ( R [ diplomat ] ) ( JOIN ( R [ participant in the conflict ] ) [ Treaty of Versailles ] ) )",
            "( JOIN ( R [ diplomats ] ) ( JOIN ( R [ signed by ] ) [ Treaty of Versailles ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ signatory ] ) [ Treaty of Versailles ] ) )"
    },
    {
        "question": "Question: { What is the minimum age for compulsory education in Oregon? }",
        "predicted_query": [
            "( JOIN ( R [ minimum age for compulsory education ] ) [ Oregon ] )",
            "( JOIN ( R [ minimum age ] ) ( JOIN ( R [ compulsory education ] ) [ Oregon ] ) )",
            "( JOIN [ minimum age for compulsory education ] [ Oregon ] )",
            "( AND ( JOIN [ has minimum age ] [ compulsory education ] ) ( JOIN ( R [ education system ] ) [ Oregon ] ) )",
            "( JOIN ( R [ age of compulsory education ] ) ( JOIN ( R [ located in ] ) [ Oregon ] ) )"
        ],
        "gen_label": "( JOIN ( R [ compulsory education ( minimum age ) ] ) [ Oregon ] )"
    },
    {
        "question": "Question: { Who gave the{established by} of {member of} of {Ernest Lawrence} ? }",
        "predicted_query": [
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ member of ] ) [ Ernest Lawrence ] ) )",
            "( AND ( JOIN [ founded by ] [ Ernest Lawrence ] ) ( JOIN ( R [ member of ] ) [ Ernest Lawrence ] ) )",
            "( JOIN ( R [ founding member ] ) ( JOIN ( R [ member of ] ) [ Ernest Lawrence ] ) )",
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ member of ] ) [ Ernest Lawrence ] ) )",
            "( JOIN ( R [ established by ] ) ( JOIN ( R [ member of ] ) [ Ernest Lawrence ] ) )"
        ],
        "gen_label": "( JOIN ( R [ founded by ] ) ( JOIN ( R [ member of ] ) [ Ernest Lawrence ] ) )"
    },
    {
        "question": "Question: { What painter of Maoism died in Zhongnanhai? }",
        "predicted_query": [
            "( AND ( JOIN [ location of death ] [ Zhongnanhai ] ) ( JOIN ( R [ artist ] ) [ Maoism ] ) )",
            "( AND ( JOIN [ place of death ] [ Zhongnanhai ] ) ( JOIN ( R [ painter ] ) [ Maoism ] ) )",
            "( AND ( JOIN [ location ] [ Zhongnanhai ] ) ( JOIN ( R [ artist ] ) [ Maoism ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Zhongnanhai ] ) ( JOIN ( R [ artist ] ) [ Maoism ] ) )",
            "( JOIN [ place of death ] [ Zhongnanhai ] ) ( JOIN ( R [ painter ] ) [ Maoism ] )"
        ],
        "gen_label": "( AND ( JOIN [ place of death ] [ Zhongnanhai ] ) ( JOIN ( R [ creator ] ) [ Maoism ] ) )"
    },
    {
        "question": "Question: { Which is a service entry of Airbus A340? }",
        "predicted_query": [
            "( JOIN ( R [ service entry ] ) [ Airbus A340 ] )",
            "( JOIN [ service entry ] [ Airbus A340 ] )",
            "( [ joined by ] [ service entry ] [ Airbus A340 ] )",
            "( JOIN ( R [ service entry ] ) [ Airbus A340 ] )",
            "( AND ( JOIN [ provides service for ] [ Airbus A340 ] ) ( JOIN ( R [ service area ] ) [ Airbus A340 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ service entry ] ) [ Airbus A340 ] )"
    },
    {
        "question": "Question: { Which is the Deutsche Synchronkartei film ID of Pan's Labyrinth? }",
        "predicted_query": [
            "( JOIN ( R [ Deutsche Synchronkartei film ID ] ) [ Pan's Labyrinth ] )",
            "( JOIN ( R [ Deutsche Synchronkartei film ID ] ) [ Pan's Labyrinth ] )",
            "( AND ( JOIN [ Deutsche Synchronkartei ID ] [ Pan's Labyrinth ] ) ( JOIN ( R [ ID ] ) [ Pan's Labyrinth ] ) )",
            "( JOIN ( R [ Deutsche Synchronkartei film ID ] ) [ Pan's Labyrinth ] )",
            "( JOIN ( R [ Deutsche Synchronkartei film ID ] ) [ Pan's Labyrinth ] )"
        ],
        "gen_label": "( JOIN ( R [ Deutsche Synchronkartei film ID ] ) [ Pan's Labyrinth ] )"
    },
    {
        "question": "Question: { What is language is spoken by the Gujarati people? }",
        "predicted_query": [
            "( JOIN ( R [ language spoken ] ) [ Gujarati people ] )",
            "( JOIN [ language spoken ] [ Gujarati ] )",
            "( JOIN ( R [ spoken in ] ) ( JOIN ( R [ language ] ) [ Gujarati people ] ) )",
            "( JOIN ( R [ language spoken in ] ) ( JOIN ( R [ ethnicity ] ) [ Gujarati people ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Gujarat ] ) ( JOIN ( R [ language ] ) [ Gujarati people ] ) )"
        ],
        "gen_label": "( JOIN [ language used ] [ Gujarati ] )"
    },
    {
        "question": "Question: { What is image of function for sine ? }",
        "predicted_query": [
            "( JOIN ( R [ image of function ] ) [ sine ] )",
            "( JOIN [ function of ] [ sine ] )",
            "( JOIN ( R [ has image of function ] ) [ sine ] )",
            "( JOIN ( R [ function ] ) ( JOIN ( R [ has image ] ) [ sine ] ) )",
            "( AND ( JOIN [ function performed ] [ sine ] ) ( JOIN ( R [ has image ] ) [ sine ] ) )"
        ],
        "gen_label": "( JOIN ( R [ image of function ] ) [ sine ] )"
    },
    {
        "question": "Question: { Is a truffle not the same as the species Tuber aestivum? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Tuber aestivum ] ) ( JOIN ( R [ different from ] ) [ truffle ] ) )",
            "( AND ( JOIN [ taxon name ] [ Tuber aestivum ] ) ( JOIN ( R [ different from ] ) [ truffle ] ) )",
            "( JOIN ( R [ has taxonomic authority ] ) ( JOIN ( R [ taxon ] ) [ truffle ] ) )",
            "( AND ( JOIN [ contains the taxon ] [ Tuber aestivum ] ) ( JOIN ( R [ different from ] ) [ truffle ] ) )",
            "( JOIN ( R [ different from ] ) ( JOIN ( R [ species ] ) [ truffle ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ taxonomic type ] [ summer truffle ] ) ( JOIN ( R [ different from ] ) [ truffle ] ) )"
    },
    {
        "question": "Question: { Which is the diaspora of the African Americans? }",
        "predicted_query": [
            "( JOIN ( R [ diaspora ] ) [ African Americans ] )",
            "( JOIN [ diaspora ] [ African Americans ] )",
            "( AND ( JOIN [ ethnic group ] [ African American ] ) ( JOIN ( R [ influenced by ] ) [ diaspora ] ) )",
            "( JOIN ( R [ diaspora ] ) [ African American ] )",
            "( JOIN ( R [ diaspora ] ) [ African Americans ] )"
        ],
        "gen_label": "( JOIN ( R [ diaspora ] ) [ African Americans ] )"
    },
    {
        "question": "Question: { Which is the Basketball-Reference.com NBA coach ID of George Mikan? }",
        "predicted_query": [
            "Overview of basketball",
            "( JOIN ( R [ Basketball-Reference.com coach ID ] ) [ George Mikan ] )",
            "( JOIN ( R [ Basketball Reference coach ID ] ) [ George Mikan ] )",
            "[]",
            "( JOIN ( R [ Basketball-Reference.com NBA coach ID ] ) [ George Mikan ] )"
        ],
        "gen_label": "( JOIN ( R [ Basketball Reference NBA coach ID ] ) [ George Mikan ] )"
    },
    {
        "question": "Question: { Did Denis Diderot die in the 3rd arrondissement of Paris? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ 3rd arrondissement of Paris ] ) ( JOIN ( R [ place of death ] ) [ Denis Diderot ] ) )",
            "( AND ( JOIN [ administrative body ] [ 3rd arrondissement of Paris ] ) ( JOIN ( R [ place of death ] ) [ Denis Diderot ] ) )",
            "( JOIN ( R [ place of death ] ) ( JOIN ( R [ place of residence ] ) [ Denis Diderot ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ place of death ] ) [ Denis Diderot ] ) )",
            "( AND ( JOIN [ location of death ] [ 3rd arrondissement of Paris ] ) ( JOIN ( R [ place of death ] ) [ Denis Diderot ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ contains the administrative territorial entity ] [ 3rd arrondissement of Paris ] ) ( JOIN ( R [ place of death ] ) [ Denis Diderot ] ) )"
    },
    {
        "question": "Question: { What chess title does did Alexander Gelman earn? }",
        "predicted_query": [
            "( JOIN ( R [ chess title ] ) ( JOIN ( R [ awarded to ] ) [ Alexander Gelman ] ) )",
            "( JOIN [ chess title ] [ Alexander Gelman ] )",
            "( JOIN [ chess title ] [ did Alexander Gelman earn? ] )",
            "( JOIN ( R [ chess title ] ) [ Alexander Gelman ] )",
            "( AND ( JOIN [ award received ] [ Chess title ] ) ( JOIN ( R [ occupation ] ) [ Alexander Gelman ] ) )"
        ],
        "gen_label": "( JOIN ( R [ conferred by ] ) ( JOIN ( R [ title of chess person ] ) [ Alexander Gelman ] ) )"
    },
    {
        "question": "Question: { Which is the patronage of the Berlin U-Bahn? }",
        "predicted_query": [
            "( JOIN ( R [ patronage ] ) ( JOIN ( R [ operator ] ) [ Berlin U-Bahn ] ) )",
            "( JOIN [ patronage ] [ Berlin U-Bahn ] )",
            "[]",
            "( JOIN ( R [ patronage ] ) ( JOIN ( R [ operated by ] ) [ Berlin U-Bahn ] ) )",
            "( JOIN ( R [ patron saint ] ) ( JOIN ( R [ operator ] ) [ Berlin U-Bahn ] ) )"
        ],
        "gen_label": "( JOIN ( R [ patronage ] ) [ Berlin U-Bahn ] )"
    },
    {
        "question": "Question: { What is the diplomatic relation between Iceland, which has arrondissements, and Arkhangelsk Oblast? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Arkhangelsk Oblast ] ) ( JOIN ( R [ diplomatic relation ] ) [ Iceland ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Arkhangelsk Oblast ] ) ( JOIN ( R [ diplomatic relations ] ) [ Iceland ] ) )",
            "( JOIN ( R [ contains the administrative territorial entity ] ) [ Iceland ] )",
            "( AND ( JOIN [ has diplomatic relations ] [ Arkhangelsk Oblast ] ) ( JOIN ( R [ contains the administrative territorial entity ] ) [ Iceland ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ arrondissement ] ) ( JOIN ( R [ diplomatic relation ] ) [ Iceland ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ contains the administrative territorial entity ] [ Arkhangelsk Oblast ] ) ( JOIN ( R [ diplomatic relation ] ) [ Iceland ] ) )"
    },
    {
        "question": "Question: { Which is the grants academic degree for Free University of Berlin? }",
        "predicted_query": [
            "( JOIN ( R [ awarded academic degree ] ) ( JOIN ( R [ institution ] ) [ Free University of Berlin ] ) )",
            "( JOIN ( R [ academic degree ] ) [ Free University of Berlin ] )",
            "( JOIN [ academic degree ] [ Free University of Berlin ] )",
            "( JOIN ( R [ degree awarded ] ) ( JOIN ( R [ institution ] ) [ Free University of Berlin ] ) )",
            "( JOIN [ grants academic degree ] [ Free University of Berlin ] )"
        ],
        "gen_label": "( JOIN ( R [ grants ] ) [ Free University Berlin ] )"
    },
    {
        "question": "Question: { WHICH IS THE TYPOLOGY OF WROTE LANGUAGE OF ROBERT OPPENHEIMER }",
        "predicted_query": [
            "( JOIN ( R [ language spoken, written or signed ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Robert Oppenheimer ] ) )",
            "[ JOIN [ joined by ] [ written language ] [ Robert Oppenheimer ] ]",
            "( JOIN ( R [ linguistic typology ] ) ( JOIN ( R [ language of work ] ) [ Robert Oppenheimer ] ) )",
            "( JOIN [ language spoken ] [ Robert Oppenheimer ] )",
            "( JOIN ( R [ type of written language ] ) [ Robert Oppenheimer ] )"
        ],
        "gen_label": "( JOIN ( R [ linguistic typology ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Robert Oppenheimer ] ) )"
    },
    {
        "question": "Question: { How often are the Paralympic games held? }",
        "predicted_query": [
            "( JOIN ( R [ frequency ] ) ( JOIN ( R [ held ] ) [ Paralympic Games ] ) )",
            "( JOIN [ held on ] [ Paralympic Games ] )",
            "( JOIN ( R [ number of athletes ] ) ( JOIN ( R [ held ] ) [ Paralympic Games ] ) )",
            "( AND ( JOIN [ sport discipline ] [ Paralympic Games ] ) ( JOIN ( R [ held ] ) [ Paralympic Games ] ) )",
            "( JOIN ( R [ held on ] ) ( JOIN ( R [ held by ] ) [ Paralympic Games ] ) )"
        ],
        "gen_label": "( JOIN ( R [ event interval ] ) [ Paralympic Games ] )"
    },
    {
        "question": "Question: { When will Triple H return to Wrestle Mania? }",
        "predicted_query": [
            "( [ joined by ] [ participant ] [ Triple H ] )",
            "( [ joined by ] [ present in work ] )",
            "[]",
            "( JOIN [ scheduled for ] [ WrestleMania ] ) ( JOIN ( R [ follows ] ) [ Triple H ] )",
            "( AND ( JOIN [ has participant ] [ Triple H ] ) ( JOIN ( R [ follows ] ) [ WrestleMania ] ) )"
        ],
        "gen_label": "( JOIN ( R [ cast member ] ) ( JOIN ( R [ followed by ] ) [ WrestleMania I ] ) )"
    },
    {
        "question": "Question: { Where is the medals of the artist who inspired this of Solaris? }",
        "predicted_query": [
            "( JOIN ( R [ location ] ) ( JOIN ( R [ influenced by ] ) [ Solaris ] ) )",
            "( AND ( JOIN [ has winner ] [ Solaris ] ) ( JOIN ( R [ influenced by ] ) [ Tarkovsky's Solaris ] ) )",
            "( JOIN [ medals awarded ] [ Solaris ] )",
            "( JOIN ( R [ award received ] ) ( JOIN ( R [ influenced by ] ) [ Solaris ] ) )",
            "( AND ( JOIN [ located in administrative territorial entity ] [ Solaris ] ) ( JOIN ( R [ influenced by ] ) [ Tarkovsky ] ) )"
        ],
        "gen_label": "( JOIN ( R [ award received ] ) ( JOIN ( R [ after a work by ] ) [ Solaris ] ) )"
    },
    {
        "question": "Question: { Who {wrote the screenplay} for {Reservoir Dogs}, a {film} by {Quentin Tarantino}? }",
        "predicted_query": [
            "( AND ( JOIN [ written by ] [ Quentin Tarantino ] ) ( JOIN ( R [ based on work ] ) [ Reservoir Dogs ] ) )",
            "( JOIN ( R [ screenwriter ] ) ( JOIN ( R [ based on work ] ) [ Reservoir Dogs ] ) )",
            "( AND ( JOIN [ writer ] [ Quentin Tarantino ] ) ( JOIN ( R [ based on work ] ) [ Reservoir Dogs ] ) )",
            "( AND ( JOIN [ work on ] [ Reservoir Dogs ] ) ( JOIN ( R [ screenwriter ] ) [ Quentin Tarantino ] ) )",
            "( JOIN ( R [ screenplay writer ] ) ( JOIN ( R [ writer ] ) [ Reservoir Dogs ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ filmography ] [ Quentin Tarantino filmography ] ) ( JOIN ( R [ screenwriter ] ) [ Reservoir Dogs ] ) )"
    },
    {
        "question": "Question: { Which is Swiss Federal Archives ID for Rudolf Hess? }",
        "predicted_query": [
            "( JOIN ( R [ Swiss Federal Archives ID ] ) [ Rudolf Hess ] )",
            "( JOIN [ Swiss Federal Archives ID ] [ Rudolf Hess ] )",
            "( JOIN ( R [ Swiss Federal Archives ID ] ) [ Rudolf Hess ] )",
            "( JOIN ( R [ Swiss Federal Archives ID ] ) [ Rudolf Hess ] )",
            "( JOIN ( R [ Swiss Federal Archives ID ] ) [ Rudolf Hess ] )"
        ],
        "gen_label": "( JOIN ( R [ Swiss Federal Archives ID ] ) [ Rudolf Heß ] )"
    },
    {
        "question": "Question: { Which instrument is of Herbie Hancock? }",
        "predicted_query": [
            "( JOIN ( R [ instrument ] ) [ Herbie Hancock ] )",
            "### Formerly:",
            "( AND ( JOIN [ performer ] [ Herbie Hancock ] ) ( JOIN ( R [ instrument ] ) [ Herbie Hancock ] ) )",
            "( JOIN ( R [ played instrument ] ) [ Herbie Hancock ] )",
            "( JOIN ( R [ musical instrument ] ) ( JOIN ( R [ member of ] ) [ Herbie Hancock ] ) )"
        ],
        "gen_label": "( JOIN ( R [ instrument ] ) [ Herbie Hancock ] )"
    },
    {
        "question": "Question: { Which is the KMDb person ID for Jeff Bridges? }",
        "predicted_query": [
            "( JOIN ( R [ KMDb person ID ] ) [ Jeff Bridges ] )",
            "( JOIN ( R [ KMDb person ID ] ) [ Jeff Bridges ] )",
            "( JOIN [ KMDb person ID ] [ Jeff Bridges ] )",
            "( JOIN ( R [ KMDb person ID ] ) [ Jeff Bridges ] )",
            "( JOIN ( R [ KMDb Person ID ] ) [ Jeff Bridges ] )"
        ],
        "gen_label": "( JOIN ( R [ KMDb person ID ] ) [ Jeff Bridges ] )"
    },
    {
        "question": "Question: { Who is working on science that works on molecular functioning? }",
        "predicted_query": [
            "( AND ( JOIN [ field of work ] [ molecular functioning ] ) ( JOIN ( R [ influenced by ] ) [ biochemistry ] ) )",
            "( JOIN [ works on ] [ molecular functioning ] )",
            "( AND ( JOIN [ field of work ] [ molecular function ] ) ( JOIN ( R [ discoverer or inventor ] ) [ molecular function ] ) )",
            "( JOIN ( R [ has scientific or technological field ] ) ( JOIN ( R [ field of work ] ) [ molecular function ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ molecular functioning ] ) ( JOIN ( R [ discoverer or inventor ] ) [ molecular functioning ] ) )"
        ],
        "gen_label": "( JOIN ( R [ is the study of ] ) ( JOIN ( R [ studied in ] ) [ molecular function ] ) )"
    },
    {
        "question": "Question: { Tell me the national floral emblem of Jack Cole. }",
        "predicted_query": [
            "( JOIN ( R [ national floral emblem ] ) ( JOIN ( R [ given name ] ) [ Jack Cole ] ) )",
            "( JOIN [ national floral emblem ] [ Jack Cole ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Jack Cole ] ) ( JOIN ( R [ national symbol ] ) [ Jack Cole ] ) )",
            "( JOIN ( R [ national floral emblem ] ) [ Jack Cole ] )",
            "( AND ( JOIN [ has national symbol ] [ national floral emblem of Jack Cole ] ) ( JOIN ( R [ given name ] ) [ Jack Cole ] ) )"
        ],
        "gen_label": "( JOIN ( R [ official symbol ] ) ( JOIN ( R [ country of citizenship ] ) [ Jack Cole ] ) )"
    },
    {
        "question": "Question: { Which is the statistical leader of LeBron James? }",
        "predicted_query": [
            "[]",
            "[ ( JOIN ( JOIN ( R [ sport ] ) [ basketball ] ) [ LeBron James ] ) ]",
            "( AND ( JOIN [ population of administrative territorial entity ] [ LeBron James ] ) ( JOIN ( R [ leader ] ) [ LeBron James ] ) )",
            "### Instruction:",
            "( JOIN ( R [ leader ] ) [ LeBron James ] )"
        ],
        "gen_label": "( JOIN [ statistical leader ] [ LeBron James ] )"
    },
    {
        "question": "Question: { Who is married to Mr. Bean? }",
        "predicted_query": [
            "( JOIN [ married to ] [ Mr. Bean ] )",
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ parent ] ) [ Mr. Bean ] ) )",
            "( JOIN ( R [ spouse ] ) [ Mr. Bean ] )",
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ parent of ] ) [ Mr. Bean ] ) )",
            "( JOIN ( R [ married to ] ) [ Mr. Bean ] )"
        ],
        "gen_label": "( JOIN ( R [ spouse ] ) ( JOIN ( R [ cast member ] ) [ Mr. Bean ] ) )"
    },
    {
        "question": "Question: { Who is {member of} of {county seat of} of {Palikir} ? }",
        "predicted_query": [
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ capital of ] ) [ Palikir ] ) )",
            "( JOIN ( R [ capital of ] ) ( JOIN ( R [ country ] ) [ Palikir ] ) )",
            "( JOIN ( R [ capital ] ) ( JOIN ( R [ country ] ) [ Palikir ] ) )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ capital of ] ) [ Palikir ] ) )",
            "( JOIN ( R [ capital city ] ) ( JOIN ( R [ country ] ) [ Palikir ] ) )"
        ],
        "gen_label": "( JOIN ( R [ member of ] ) ( JOIN ( R [ capital of ] ) [ Palikir ] ) )"
    },
    {
        "question": "Question: { Which is in the endemism of Reunion Stonechat }",
        "predicted_query": [
            "( JOIN ( R [ endemism ] ) [ Reunion Stonechat ] )",
            "( JOIN ( R [ endemic to ] ) ( JOIN ( R [ taxon ] ) [ Reunion Stonechat ] ) )",
            "( JOIN [ endemism ] [ Reunion Stonechat ] )",
            "( JOIN ( R [ taxon of ] ) [ Reunion Stonechat ] )",
            "( AND ( JOIN [ biogeographical region ] [ endemism of Reunion Stonechat ] ) ( JOIN ( R [ taxon ] ) [ Reunion Stonechat ] ) )"
        ],
        "gen_label": "( JOIN ( R [ located in/on physical feature ] ) ( JOIN ( R [ endemic to ] ) [ Reunion Stonechat ] ) )"
    },
    {
        "question": "Question: { Who are the lineal descendants of Mazhar Ali Khan? }",
        "predicted_query": [
            "( JOIN ( R [ lineal descendant ] ) ( JOIN ( R [ child ] ) [ Mazhar Ali Khan ] ) )",
            "( JOIN ( R [ lineal descendant ] ) [ Mazhar Ali Khan ] )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ parent ] ) [ Mazhar Ali Khan ] ) )",
            "[ JOIN [ lineal descendant ] [ Mazhar Ali Khan ] ]",
            "( AND ( JOIN [ child ] [ Mazhar Ali Khan ] ) ( JOIN ( R [ parent ] ) [ Muhammad Ali Jinnah ] ) )"
        ],
        "gen_label": "( JOIN ( R [ genre ] ) ( JOIN ( R [ relative ] ) [ Mazhar Ali Khan ] ) )"
    },
    {
        "question": "Question: { Who is made by  part of series  Homage to the Square--Insert? }",
        "predicted_query": [
            "( JOIN ( R [ creator ] ) ( JOIN ( R [ part of the series ] ) [ Homage to the Square–Insert ] ) )",
            "( JOIN ( R [ part of series ] ) ( JOIN ( R [ artist ] ) [ Homage to the Square–Insert ] ) )",
            "( AND ( JOIN [ series ] [ Homage to the Square–Insert ] ) ( JOIN ( R [ creator ] ) [ Homage to the Square ] ) )",
            "( AND ( JOIN [ part of series ] [ Homage to the Square--Insert ] ) ( JOIN ( R [ creator ] ) [ Homage to the Square ] ) )",
            "( JOIN ( R [ made by ] ) ( JOIN ( R [ part of series ] ) [ Homage to the Square–Insert ] ) )"
        ],
        "gen_label": "( JOIN ( R [ creator ] ) ( JOIN ( R [ part of the series ] ) [ Homage to the Square--Insert ] ) )"
    },
    {
        "question": "Question: { Who is related to actress Ishaqzaade? }",
        "predicted_query": [
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ cast member ] ) [ Ishaqzaade ] ) )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ sibling ] ) [ Ishaqzaade ] ) )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ cast member ] ) [ Ishaqzaade ] ) )",
            "( AND ( JOIN [ cast member ] [ Ishaqzaade ] ) ( JOIN ( R [ sibling ] ) [ Ishaqzaade ] ) )",
            "( JOIN [ sibling ] [ Ishaqzaade ] )"
        ],
        "gen_label": "( JOIN ( R [ relative ] ) ( JOIN ( R [ cast member ] ) [ Ishaqzaade ] ) )"
    },
    {
        "question": "Question: { Who was formed as the leader of Momoiro Clover Z? }",
        "predicted_query": [
            "( JOIN ( R [ formed as the leader ] ) [ Momoiro Clover Z ] )",
            "( AND ( JOIN [ member of ] [ Momoiro Clover Z ] ) ( JOIN ( R [ formed or established ] ) [ Momoiro Clover Z ] ) )",
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ member of ] ) [ Momoiro Clover Z ] ) )",
            "( JOIN [ formed as the leader of ] [ Momoiro Clover Z ] )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ formed or established by ] ) [ Momoiro Clover Z ] ) )"
        ],
        "gen_label": "( JOIN ( R [ capital of ] ) ( JOIN ( R [ location of formation ] ) [ Momoiro Clover Z ] ) )"
    },
    {
        "question": "Question: { What is the {twin town} of {Suzhou} that has {category of associated people} from {Category: People from Esbjerg}? }",
        "predicted_query": [
            "( AND ( JOIN [ category of associated people ] [ Category: People from Esbjerg ] ) ( JOIN ( R [ twin town ] ) [ Suzhou ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Esbjerg ] ) ( JOIN ( R [ twinned administrative body ] ) [ Suzhou ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Category: People from Esbjerg ] ) ( JOIN ( R [ twinned administrative body ] ) [ Suzhou ] ) )",
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ has the administrative territorial entity ] ) [ Suzhou ] ) )",
            "( AND ( JOIN [ category of associated people ] [ Category: People from Esbjerg ] ) ( JOIN ( R [ twinned administrative body ] ) [ Suzhou ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ category of associated people ] [ Category:People from Esbjerg ] ) ( JOIN ( R [ twinned administrative body ] ) [ Suzhou ] ) )"
    },
    {
        "question": "Question: { Who are the characters of Adam and Eve? }",
        "predicted_query": [
            "( JOIN [ characters ] [ Adam and Eve ] )",
            "( JOIN ( R [ character ] ) ( JOIN ( R [ cast member ] ) [ Adam and Eve ] ) )",
            "( JOIN ( R [ characters ] ) [ Adam and Eve ] )",
            "( AND ( JOIN [ cast member ] [ Adam and Eve ] ) ( JOIN ( R [ follows ] ) [ Adam and Eve ] ) )",
            "( JOIN ( R [ character ] ) ( JOIN ( R [ protagonist ] ) [ Adam and Eve ] ) )"
        ],
        "gen_label": "( JOIN ( R [ characters ] ) ( JOIN ( R [ based on ] ) [ Adam and Eve ] ) )"
    },
    {
        "question": "Question: { What was Alistair Brownlee accused of? }",
        "predicted_query": [
            "[ JOIN ] [ Alistair Brownlee ]",
            "( JOIN ( R [ allegation ] ) ( JOIN ( R [ sport ] ) [ Alistair Brownlee ] ) )",
            "( JOIN ( R [ convicted of ] ) ( JOIN ( R [ sport ] ) [ Alistair Brownlee ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ North Yorkshire ] ) ( JOIN ( R [ alleged participant in ] ) [ Alistair Brownlee ] ) )",
            "( AND ( JOIN [ accused of ] [ Alistair Brownlee ] ) ( JOIN ( R [ notable event ] ) [ Alistair Brownlee ] ) )"
        ],
        "gen_label": "( JOIN ( R [ participant ] ) ( JOIN ( R [ participant in ] ) [ Alistair Brownlee ] ) )"
    },
    {
        "question": "Question: { Who is incumbent of the position of William Jennings Bryan ? }",
        "predicted_query": [
            "( JOIN [ incumbent ] [ William Jennings Bryan ] )",
            "( JOIN ( R [ occupant ] ) ( JOIN ( R [ successor ] ) [ William Jennings Bryan ] ) )",
            "( JOIN ( R [ incumbent ] ) [ William Jennings Bryan ] )",
            "( JOIN ( R [ incumbent ] ) [ William Jennings Bryan ] )",
            "( JOIN ( R [ incumbent ] ) ( JOIN ( R [ position held ] ) [ William Jennings Bryan ] ) )"
        ],
        "gen_label": "( JOIN ( R [ position holder ] ) ( JOIN ( R [ position held ] ) [ William Jennings Bryan ] ) )"
    },
    {
        "question": "Question: { What is the Gram staining for Gram-positive? }",
        "predicted_query": [
            "( JOIN ( R [ Gram stain ] ) [ Gram-positive ] )",
            "( JOIN [ Gram staining ] [ Gram-positive ] )",
            "( JOIN ( R [ Gram staining ] ) [ Gram-positive ] )",
            "( JOIN ( R [ Gram stain ] ) [ gram positive ] )",
            "( AND ( JOIN [ gram-staining ] [ gram-positive ] ) ( JOIN ( R [ follows ] ) [ Gram stain ] ) )"
        ],
        "gen_label": "( JOIN [ Gram staining ] [ gram-positive bacteria ] )"
    },
    {
        "question": "Question: { What performances has Marilyn Chambers done as an actress? }",
        "predicted_query": [
            "( JOIN ( R [ performance ] ) ( JOIN ( R [ cast member ] ) [ Marilyn Chambers ] ) )",
            "( JOIN ( R [ performer ] ) ( JOIN ( R [ cast member ] ) [ Marilyn Chambers ] ) )",
            "( AND ( JOIN [ cast member ] [ Marilyn Chambers ] ) ( JOIN ( R [ performed in ] ) [ Actress ] ) )",
            "( AND ( JOIN [ performed by ] [ Marilyn Chambers ] ) ( JOIN ( R [ cast member ] ) [ The Loved One ] ) )",
            "( JOIN ( R [ performances ] ) ( JOIN ( R [ cast member ] ) [ Marilyn Chambers ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ field of this occupation ] [ acting ] ) ( JOIN ( R [ occupation ] ) [ Marilyn Chambers ] ) )"
    },
    {
        "question": "Question: { Which does fez wear? }",
        "predicted_query": [
            "( JOIN [ wears ] [ fez ] )",
            "( JOIN ( R [ wears ] ) [ fez ] )",
            "### Instruction:",
            "( JOIN [ wears ] [ fez ] )",
            "( AND ( JOIN [ wears ] [ fez ] ) ( JOIN ( R [ follows ] ) [ Mohammed Ali Jinnah ] ) )"
        ],
        "gen_label": "( JOIN [ wears ] [ fez ] )"
    },
    {
        "question": "Question: { Which is the hierarchical BrainInfo ID of the frontal lobe? }",
        "predicted_query": [
            "( JOIN ( R [ hierarchical BrainInfo ID ] ) [ frontal lobe ] )",
            "( [ joined by ] [ braininfo.org hierarchical ID ] [ frontal lobe ] )",
            "( AND ( JOIN [ hierarchy BrainInfo ID ] [ frontal lobe ] ) ( JOIN ( R [ ID ] ) [ frontal lobe ] ) )",
            "( JOIN [ hierarchical BrainInfo ID ] [ frontal lobe ] )",
            "( JOIN ( R [ hierarchical BrainInfo ID ] ) [ frontal lobe ] )"
        ],
        "gen_label": "( JOIN ( R [ BrainInfo ID ( hierarchical ) ] ) [ Frontal Lobe ] )"
    },
    {
        "question": "Question: { What is the tonality of Goldberg Variations? }",
        "predicted_query": [
            "( JOIN ( R [ tonality ] ) [ Goldberg Variations ] )",
            "( JOIN ( R [ key ] ) ( JOIN ( R [ composer ] ) [ Goldberg Variations ] ) )",
            "( JOIN [ tonality ] [ Goldberg Variations ] )",
            "( JOIN ( R [ tonality ] ) [ Goldberg Variations ] )",
            "( JOIN [ tonality ] [ Goldberg Variations ] )"
        ],
        "gen_label": "( JOIN ( R [ tonality ] ) [ Goldberg Variations ] )"
    },
    {
        "question": "Question: { Which is the UAI code for Collège de France? }",
        "predicted_query": [
            "( JOIN ( R [ UAI code ] ) [ Collège de France ] )",
            "( JOIN ( R [ UAI code ] ) [ Collège de France ] )",
            "( JOIN [ UAI code ] [ Collège de France ] )",
            "( AND ( JOIN [ University of Alberta Institutional Identifier ] [ Collège de France ] ) ( JOIN ( R [ UAI ID ] ) [ Collège de France ] ) )",
            "( JOIN ( R [ UAI ID ] ) [ Collège de France ] )"
        ],
        "gen_label": "( JOIN ( R [ UAI code ] ) [ Collège de France ] )"
    },
    {
        "question": "Question: { Which is the storyboard artist for Ub Iwerks? }",
        "predicted_query": [
            "( JOIN ( R [ storyboard artist ] ) [ Ub Iwerks ] )",
            "( JOIN ( R [ storyboard artist ] ) [ Ub Iwerks ] )",
            "( JOIN ( R [ storyboard artist ] ) [ Ub Iwerks ] )",
            "( JOIN [ storyboard artist ] [ Ub Iwerks ] )",
            "( AND ( JOIN [ occupation ] [ storyboard artist ] ) ( JOIN ( R [ follows work ] ) [ Ub Iwerks ] ) )"
        ],
        "gen_label": "( JOIN [ storyboard artist ] [ Ub Iwerks ] )"
    },
    {
        "question": "Question: { Which is the Carnegie Classification of Institutions for Higher Education of Washington University in St. Louis? }",
        "predicted_query": [
            "( JOIN ( R [ Carnegie Classification of Institutions of Higher Education ] ) [ Washington University in St. Louis ] )",
            "( [ joint ] [ Carnegie Classification of Institutions of Higher Education ] )",
            "( JOIN ( R [ Carnegie Classification of Institutions for Higher Education ] ) [ Washington University in St. Louis ] )",
            "( JOIN ( R [ faculty member ] ) [ Carnegie Classification of Institutions of Higher Education ] )",
            "( JOIN ( R [ Carnegie Classification of Institutions for Higher Education ] ) [ Washington University in St. Louis ] )"
        ],
        "gen_label": "( JOIN ( R [ Carnegie Classification of Institutions of Higher Education ] ) [ Washington University in St. Louis ] )"
    },
    {
        "question": "Question: { Which literary works are from sculptor Arturo Belano? }",
        "predicted_query": [
            "( JOIN ( R [ work ] ) ( JOIN ( R [ influenced by ] ) [ Arturo Belano ] ) )",
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ creator ] ) [ Arturo Belano ] ) )",
            "( AND ( JOIN [ field of work ] [ sculptor ] ) ( JOIN ( R [ influenced by ] ) [ Arturo Belano ] ) )",
            "( JOIN [ literary work ] [ Arturo Belano ] )",
            "( AND ( JOIN [ located in ] [ Sculpture ] ) ( JOIN ( R [ author ] ) [ Arturo Belano ] ) )"
        ],
        "gen_label": "( JOIN ( R [ notable work ] ) ( JOIN ( R [ creator ] ) [ Arturo Belano ] ) )"
    },
    {
        "question": "Question: { The Stranger OCLC work ID is? }",
        "predicted_query": [
            "[ JOIN ( R [ OCLC work ID ] ) ]",
            "( JOIN [ OCLC work ID ] [ The Stranger ] )",
            "( JOIN ( R [ OCLC work ID ] ) [ The Stranger ] )",
            "( JOIN ( R [ OCLC work ID ] ) [ The Stranger ] )",
            "( AND ( JOIN [ OCLC WorldCat work ID ] [ Stranger ] ) ( JOIN ( R [ ISBN ] ) [ The Stranger ] ) )"
        ],
        "gen_label": "( JOIN ( R [ OCLC work ID ] ) [ The Stranger ] )"
    },
    {
        "question": "Question: { What country is Colin Renfrew a citizen of? }",
        "predicted_query": [
            "( JOIN ( R [ capital city ] ) ( JOIN ( R [ country of citizenship ] ) [ Colin Renfrew ] ) )",
            "( JOIN ( R [ country of citizenship ] ) ( JOIN ( R [ place of birth ] ) [ Colin Renfrew ] ) )",
            "( JOIN ( R [ country ] ) ( JOIN ( R [ place of birth ] ) [ Colin Renfrew ] ) )",
            "( JOIN [ country of citizenship ] [ Colin Renfrew ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ United Kingdom ] ) ( JOIN ( R [ country of citizenship ] ) [ Colin Renfrew ] ) )"
        ],
        "gen_label": "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ country of citizenship ] ) [ Colin Renfrew ] ) )"
    },
    {
        "question": "Question: { What diplomatic relation comes from The Amazing Spider Man? }",
        "predicted_query": [
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ based on ] ) [ The Amazing Spider-Man ] ) )",
            "( AND ( JOIN [ diplomatic relation ] [ The Amazing Spider-Man ] ) ( JOIN ( R [ diplomatic relation ] ) [ The Amazing Spider-Man ] ) )",
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country of origin ] ) [ The Amazing Spider-Man ] ) )",
            "( JOIN [ diplomatic relation ] [ The Amazing Spider-Man ] )",
            "( AND ( JOIN [ has diplomatic relation ] [ The Amazing Spider-Man ] ) ( JOIN ( R [ diplomatic relation ] ) [ The Amazing Spider-Man ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country of origin ] ) [ The Amazing Spider-Man ] ) )"
    },
    {
        "question": "Question: { What is the BFMTV.com ID for Bernard Arnault? }",
        "predicted_query": [
            "( JOIN ( R [ BFM TV ID ] ) [ Bernard Arnault ] )",
            "( JOIN ( R [ BFMTV.com ID ] ) [ Bernard Arnault ] )",
            "( JOIN ( R [ BFM TV ID ] ) [ Bernard Arnault ] )",
            "( JOIN ( R [ BFM TV ID ] ) [ Bernard Arnault ] )",
            "( JOIN ( R [ BFM TV person ID ] ) [ Bernard Arnault ] )"
        ],
        "gen_label": "( JOIN ( R [ VERIF ID ] ) [ Bernard Arnault ] )"
    },
    {
        "question": "Question: { Last words of François Rabelais? }",
        "predicted_query": [
            "[ JOIN [ last words ] [ François R",
            "( JOIN ( R [ last words ] ) [ François Rabelais ] )",
            "( JOIN ( R [ has last words ] ) [ François Rabelais ] )",
            "[ JOIN ( R [ last words ] ) ] [ François Rabelais",
            "( JOIN [ last words ] [ François Rabelais ] )"
        ],
        "gen_label": "( JOIN ( R [ last words ] ) [ François Rabelais ] )"
    },
    {
        "question": "Question: { Which scientific area holds the portrait of the statue of the Sacred Heart of Jesus Christ? }",
        "predicted_query": [
            "( AND ( JOIN [ field of science ] [ statue of the Sacred Heart of Jesus Christ ] ) ( JOIN ( R [ depicts ] ) [ statue of the Sacred Heart of Jesus Christ ] ) )",
            "( JOIN ( R [ scientific discipline ] ) ( JOIN ( R [ depicts ] ) [ Sacred Heart of Jesus ] ) )",
            "( AND ( JOIN [ field of study ] [ sculpture ] ) ( JOIN ( R [ depicts ] ) [ Sacred Heart of Jesus ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Sacred Heart of Jesus ] ) ( JOIN ( R [ depicts ] ) [ Sacred Heart of Jesus ] ) )",
            "( JOIN ( R [ scientific field ] ) ( JOIN ( R [ subject of ] ) [ Statue of the Sacred Heart of Jesus ] ) )"
        ],
        "gen_label": "( JOIN ( R [ field of work ] ) ( JOIN ( R [ depicts ] ) [ statue of Sacred Heart of Jesus Christ ] ) )"
    },
    {
        "question": "Question: { who translated shareholder of warface }",
        "predicted_query": [
            "( JOIN ( R [ translated by ] ) ( JOIN ( R [ shareholder ] ) [ Warface ] ) )",
            "( JOIN [ translated by ] [ Warface ] )",
            "( JOIN ( R [ translator ] ) ( JOIN ( R [ shareholder ] ) [ Warface ] ) )",
            "{ JOIN [ translated into ] [ shareholder ] [ Warface ] }",
            "( AND ( JOIN [ shareholder of ] [ Warface ] ) ( JOIN ( R [ translated into ] ) [ Warface ] ) )"
        ],
        "gen_label": "( JOIN ( R [ owned by ] ) ( JOIN ( R [ translator ] ) [ Warface: Clutch ] ) )"
    },
    {
        "question": "Question: { Which is {heritage designation} of {administrative centre} {Kingdom of Kongo} ? }",
        "predicted_query": [
            "( JOIN ( R [ UNESCO World Heritage Site ID ] ) ( JOIN ( R [ capital ] ) [ Kingdom of Kongo ] ) )",
            "( JOIN [ heritage designation ] [ Kingdom of Kongo ] )",
            "( JOIN ( R [ heritage designation ] ) ( JOIN ( R [ capital ] ) [ Kingdom of Kongo ] ) )",
            "( JOIN ( R [ designated by ] ) ( JOIN ( R [ capital ] ) [ Kingdom of Kongo ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Kingdom of Kongo ] ) ( JOIN ( R [ designated as a World Heritage Site ] ) [ Kongo ] ) )"
        ],
        "gen_label": "( JOIN ( R [ heritage designation ] ) ( JOIN ( R [ capital ] ) [ Kingdom of Kongo ] ) )"
    },
    {
        "question": "Question: { who were the grand children  of king  on main street? }",
        "predicted_query": [
            "( JOIN ( R [ child ] ) ( JOIN ( R [ located in ] ) [ Main Street ] ) )",
            "( JOIN ( R [ grandchild ] ) ( JOIN ( R [ located in ] ) [ Main Street ] ) )",
            "( JOIN [ grandchild ] [ King on Main Street ] )",
            "( AND ( JOIN [ child ] [ Main Street ] ) ( JOIN ( R [ grandparent ] ) [ King ] ) )",
            "( AND ( JOIN [ parent of ] [ Main Street ] ) ( JOIN ( R [ child ] ) [ King ] ) )"
        ],
        "gen_label": "( JOIN ( R [ relative ] ) ( JOIN ( R [ producer ] ) [ The King on Main Street ] ) )"
    },
    {
        "question": "Question: { The album after The Jazz Giants '56 featured what musician? }",
        "predicted_query": [
            "( JOIN ( R [ composer ] ) ( JOIN ( R [ performer ] ) [ The Jazz Giants '56 ] ) )",
            "( JOIN ( R [ follow-up work ] ) ( JOIN ( R [ performer ] ) [ The Jazz Giants '56 ] ) )",
            "( AND ( JOIN [ followed by ] [ The Jazz Giants '56 ] ) ( JOIN ( R [ performer ] ) [ The Jazz Giants '56 ] ) )",
            "( JOIN ( R [ follows ] ) ( JOIN ( R [ genre ] ) [ The Jazz Giants '56 ] ) )",
            "( JOIN ( R [ followed by ] ) ( JOIN ( R [ performed in ] ) [ The Jazz Giants '56 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ performer ] ) ( JOIN ( R [ followed by ] ) [ The Jazz Giants '56 ] ) )"
    },
    {
        "question": "Question: { Who is the assassin of the Martin Luther King Jr.? }",
        "predicted_query": [
            "( JOIN ( R [ assassin ] ) [ Martin Luther King Jr. ] )",
            "( JOIN ( R [ assailant ] ) ( JOIN ( R [ cause of death ] ) [ Martin Luther King Jr. ] ) )",
            "( JOIN ( R [ assassin ] ) [ Martin Luther King, Jr. ] )",
            "( JOIN [ assassin of ] [ Martin Luther King Jr. ] )",
            "( JOIN ( R [ assassin ] ) ( JOIN ( R [ follower ] ) [ Martin Luther King Jr. ] ) )"
        ],
        "gen_label": "( JOIN ( R [ killed by ] ) ( JOIN ( R [ commemorates ] ) [ memorials to Martin Luther King Jr. ] ) )"
    },
    {
        "question": "Question: { What is port of registry forTallinn ? }",
        "predicted_query": [
            "( JOIN ( R [ port of registry ] ) [ Tallinn ] )",
            "( JOIN [ port of registry ] [ Tallinn ] )",
            "( JOIN ( R [ port of registry ] ) [ Tallinn ] )",
            "( JOIN ( R [ port of registry ] ) [ Tallinn ] )",
            "( JOIN ( R [ port of registry ] ) [ Tallinn ] )"
        ],
        "gen_label": "( JOIN [ port of registry ] [ Tallinn ] )"
    },
    {
        "question": "Question: { What is the rank of taxon parent of Australopithecus ? }",
        "predicted_query": [
            "( JOIN ( R [ rank of taxon parent ] ) [ Australopithecus ] )",
            "( JOIN [ rank of taxon parent ] [ Australopithecus ] )",
            "( JOIN ( R [ taxon rank ] ) ( JOIN ( R [ parent taxon ] ) [ Australopithecus ] ) )",
            "( JOIN ( R [ rank ] ) ( JOIN ( R [ taxon parent ] ) [ Australopithecus ] ) )",
            "( JOIN ( R [ rank in taxonomic hierarchy ] ) ( JOIN ( R [ taxon parent ] ) [ Australopithecus ] ) )"
        ],
        "gen_label": "( JOIN ( R [ taxon rank ] ) ( JOIN ( R [ parent taxon ] ) [ Australopithecus ] ) )"
    },
    {
        "question": "Question: { Which is the filming location for The Godfather Part II? }",
        "predicted_query": [
            "( JOIN ( R [ filming location ] ) [ The Godfather Part II ] )",
            "( JOIN [ filming location ] [ The Godfather Part II ] )",
            "( JOIN ( R [ location of filming ] ) [ The Godfather Part II ] )",
            "( JOIN ( R [ filming location ] ) [ The Godfather Part II ] )",
            "( JOIN ( R [ filming location ] ) [ The Godfather, Part II ] )"
        ],
        "gen_label": "( JOIN ( R [ filming location ] ) [ The Godfather Part II ] )"
    },
    {
        "question": "Question: { The individual who discovered pulsar is in which field of study? }",
        "predicted_query": [
            "( JOIN ( R [ field of study ] ) ( JOIN ( R [ discoverer ] ) [ pulsar ] ) )",
            "( AND ( JOIN [ field of study ] [ astronomy ] ) ( JOIN ( R [ discoverer ] ) [ pulsar ] ) )",
            "( [ joined by ] [ field of study ] ) ",
            "( JOIN [ field of study ] [ pulsar ] )",
            "( AND ( JOIN [ occupation ] [ astronomer ] ) ( JOIN ( R [ discoverer ] ) [ pulsar ] ) )"
        ],
        "gen_label": "( JOIN ( R [ field of work ] ) ( JOIN ( R [ discoverer or inventor ] ) [ pulsar ] ) )"
    },
    {
        "question": "Question: { Which was established, before there was Mission San Carlos Borromeo de Carmelo? }",
        "predicted_query": [
            "( AND ( JOIN [ established ] [ Mission San Carlos Borromeo de Carmelo ] ) ( JOIN ( R [ preceded by ] ) [ founded ] ) )",
            "( JOIN ( R [ founded before ] ) ( JOIN ( R [ founded by ] ) [ Mission San Carlos Borromeo de Carmelo ] ) )",
            "( AND ( JOIN [ established in time ] [ Mission San Carlos Borromeo de Carmelo ] ) ( JOIN ( R [ founded by ] ) [ San Carlos Borromeo ] ) )",
            "( AND ( JOIN [ established ] [ Mission San Carlos Borromeo de Carmelo ] ) ( JOIN ( R [ founded before ] ) [ Mission San Carlos Borromeo de Carmelo ] ) )",
            "( JOIN ( R [ founded before ] ) ( JOIN ( R [ located in ] ) [ Mission San Carlos Borromeo de Carmelo ] ) )"
        ],
        "gen_label": "( JOIN ( R [ founded by ] ) ( JOIN ( R [ follows ] ) [ Mission San Carlos Borromeo de Carmelo ] ) )"
    },
    {
        "question": "Question: { Who is the academic supervisor of the actor of The Twilight Samurai ? }",
        "predicted_query": [
            "( JOIN ( R [ academic supervisor ] ) ( JOIN ( R [ cast member ] ) [ The Twilight Samurai ] ) )",
            "( JOIN ( R [ student ] ) ( JOIN ( R [ cast member ] ) [ The Twilight Samurai ] ) )",
            "( JOIN ( R [ instructor ] ) ( JOIN ( R [ cast member ] ) [ The Twilight Samurai ] ) )",
            "( AND ( JOIN [ faculty member ] [ actor ] ) ( JOIN ( R [ student ] ) [ The Twilight Samurai ] ) )",
            "( JOIN ( R [ taught by ] ) ( JOIN ( R [ cast ] ) [ The Twilight Samurai ] ) )"
        ],
        "gen_label": "( JOIN ( R [ student of ] ) ( JOIN ( R [ cast member ] ) [ The Twilight Samurai ] ) )"
    },
    {
        "question": "Question: { Who is Denis William Brogan's spouse? }",
        "predicted_query": [
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ child ] ) [ Denis William Brogan ] ) )",
            "( JOIN ( R [ spouse ] ) [ Denis William Brogan ] )",
            "( JOIN ( R [ spouse ] ) [ Denis William Brogan ] )",
            "( JOIN [ spouse ] [ Denis William Brogan ] )",
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ member of ] ) [ Denis William Brogan ] ) )"
        ],
        "gen_label": "( JOIN ( R [ student of ] ) ( JOIN ( R [ spouse ] ) [ Denis William Brogan ] ) )"
    },
    {
        "question": "Question: { Who is/are the {authors} of {The Man with Two Faces}? }",
        "predicted_query": [
            "( JOIN ( R [ author ] ) ( JOIN ( R [ writer ] ) [ The Man with Two Faces ] ) )",
            "( JOIN [ author ] [ The Man with Two Faces ] )",
            "( JOIN ( R [ author ] ) ( JOIN ( R [ based on ] ) [ The Man with Two Faces ] ) )",
            "( JOIN ( R [ writer or editor ] ) ( JOIN ( R [ writer ] ) [ The Man with Two Faces ] ) )",
            "( JOIN ( R [ author ] ) ( JOIN ( R [ writer ] ) [ The Man with Two Faces ] ) )"
        ],
        "gen_label": "( JOIN ( R [ author ] ) ( JOIN ( R [ based on ] ) [ The Man with Two Faces ] ) )"
    },
    {
        "question": "Question: { Apollo 13 was nominated for and won which awards? }",
        "predicted_query": [
            "( JOIN ( R [ award received ] ) ( JOIN ( R [ nominated for ] ) [ Apollo 13 ] ) )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ nominated for ] ) [ Apollo 13 ] ) )",
            "( AND ( JOIN [ nominee ] [ Apollo 13 ] ) ( JOIN ( R [ award received ] ) [ Apollo 13 ] ) )",
            "( JOIN [ nominated for ] [ won ] ) ( JOIN ( R [ winner ] ) [ Apollo 13 ] )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ nominated for ] ) [ Apollo 13 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ winner ] ) ( JOIN ( R [ nominated for ] ) [ Apollo 13 ] ) )"
    },
    {
        "question": "Question: { Where was the birth place of Grazia Deledda? }",
        "predicted_query": [
            "( JOIN [ place of birth ] [ Grazia Deledda ] )",
            "( JOIN ( R [ place of birth ] ) ( JOIN ( R [ place of death ] ) [ Grazia Deledda ] ) )",
            "( JOIN ( R [ place of birth ] ) [ Grazia Deledda ] )",
            "( AND ( JOIN [ located in administrative territorial entity ] [ Sardinia ] ) ( JOIN ( R [ place of birth ] ) [ Grazia Deledda ] ) )",
            "( JOIN ( R [ location ] ) ( JOIN ( R [ place of birth ] ) [ Grazia Deledda ] ) )"
        ],
        "gen_label": "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ place of birth ] ) [ Grazia Deledda ] ) )"
    },
    {
        "question": "Question: { What musical instrument, played by Bill Withers, is constructed out of the source material maple? }",
        "predicted_query": [
            "( AND ( JOIN [ material ] [ maple ] ) ( JOIN ( R [ instrument ] ) [ Bill Withers ] ) )",
            "( AND ( JOIN [ material ] [ maple ] ) ( JOIN ( R [ made from material ] ) [ bill withers ] ) )",
            "( AND ( JOIN [ contains material ] [ maple ] ) ( JOIN ( R [ instrument ] ) [ Bill Withers ] ) )",
            "( AND ( JOIN [ contains material ] [ maple ] ) ( JOIN ( R [ made from material ] ) [ Bill Withers ] ) )",
            "( AND ( JOIN [ made from material ] [ maple ] ) ( JOIN ( R [ instrument ] ) [ Bill Withers ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ made from material ] [ maple wood ] ) ( JOIN ( R [ instrument ] ) [ Bill Withers ] ) )"
    },
    {
        "question": "Question: { Who are the inhabitants of the the county seat of Ulaanbaatar? }",
        "predicted_query": [
            "( JOIN ( R [ population ] ) ( JOIN ( R [ capital ] ) [ Ulaanbaatar ] ) )",
            "( JOIN ( R [ inhabitant ] ) ( JOIN ( R [ capital ] ) [ Ulaanbaatar ] ) )",
            "( JOIN ( R [ inhabitant ] ) ( JOIN ( R [ capital ] ) [ Ulaanbaatar ] ) )",
            "{ JOIN (",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Ulaanbaatar ] ) ( JOIN ( R [ inhabited by ] ) [ Ulaanbaatar ] ) )"
        ],
        "gen_label": "( JOIN ( R [ population ] ) ( JOIN ( R [ capital of ] ) [ Ulaanbaatar ] ) )"
    },
    {
        "question": "Question: { Who is married to the daughters of Ferdinand II of Aragon? }",
        "predicted_query": [
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ child ] ) [ Ferdinand II of Aragon ] ) )",
            "( AND ( JOIN [ child ] [ Ferdinand II of Aragon ] ) ( JOIN ( R [ spouse ] ) [ Isabella I of Castile ] ) )",
            "( JOIN [ married to ] [ Ferdinand II of Aragon ] )",
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ children ] ) [ Ferdinand II of Aragon ] ) )",
            "( JOIN [ spouse ] [ Ferdinand II of Aragon ] )"
        ],
        "gen_label": "( JOIN ( R [ spouse ] ) ( JOIN ( R [ child ] ) [ Ferdinand II of Aragon ] ) )"
    },
    {
        "question": "Question: { Which is the Yelp ID for Eiffel tower? }",
        "predicted_query": [
            "( JOIN ( R [ Yelp ID ] ) [ Eiffel Tower ] )",
            "( JOIN ( R [ Yelp business ID ] ) [ Eiffel Tower ] )",
            "( JOIN [ Yelp ID ] [ Eiffel Tower ] )",
            "( JOIN ( R [ Yelp ID ] ) [ Eiffel Tower ] )",
            "( JOIN ( R [ Yelp business ID ] ) [ Eiffel Tower ] )"
        ],
        "gen_label": "( JOIN ( R [ Yelp ID ] ) [ Eiffel Tower ] )"
    },
    {
        "question": "Question: { What is Guide to Pharmacology Ligand ID for L-Cysteine ? }",
        "predicted_query": [
            "( JOIN ( R [ Guide to Pharmacology Ligand ID ] ) [ L-cysteine ] )",
            "( JOIN ( R [ Guide to Pharmacology ligand ID ] ) [ L-cysteine ] )",
            "( JOIN ( R [ Guide to Pharmacology Ligand ID ] ) [ L-cysteine ] )",
            "( JOIN [ Guide to Pharmacology Ligand ID ] [ L-cysteine ] )",
            "( AND ( JOIN [ LIGAND ID ] [ L-cysteine ] ) ( JOIN ( R [ drug ] ) [ L-cysteine ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Guide to Pharmacology Ligand ID ] ) [ L-Cysteine ] )"
    },
    {
        "question": "Question: { What is in the region of the University of Hanover, that has Lake Leine? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Lake Leine ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ University of Hanover ] ) )",
            "( AND ( JOIN [ shares border with ] [ Lake Leine ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ University of Hanover ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ shares border with ] ) [ Lake Leine ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Lake Leine ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ University of Hanover ] ) )",
            "( AND ( JOIN [ shares border with ] [ Lake Leine ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ University of Hanover ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ located in or next to body of water ] [ Leine ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Leibniz University Hannover ] ) )"
    },
    {
        "question": "Question: { What is recorded species holding of Nashorn, Zebra & Co. }",
        "predicted_query": [
            "( JOIN ( R [ species holding ] ) ( JOIN ( R [ taxon ] ) [ Nashorn, Zebra & Co. ] ) )",
            "( JOIN [ recorded species holding ] [ Nashorn, Zebra & Co. ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Nashorn, Zebra & Co. ] ) ( JOIN ( R [ taxon ID ] ) [ Nashorn, Zebra & Co. ] ) )",
            "( JOIN ( R [ record label ] ) ( JOIN ( R [ employer ] ) [ Nashorn, Zebra & Co. ] ) )",
            "( JOIN ( R [ taxon ID ] ) ( JOIN ( R [ taxon ] ) [ Nashorn, Zebra & Co. ] ) )"
        ],
        "gen_label": "( JOIN ( R [ species kept ] ) ( JOIN ( R [ filming location ] ) [ Nashorn, Zebra & Co. ] ) )"
    },
    {
        "question": "Question: { What is tributary of  bay for São Miguel island ? }",
        "predicted_query": [
            "( JOIN [ tributary of bay ] [ São Miguel Island ] )",
            "( JOIN ( R [ tributary ] ) ( JOIN ( R [ bay ] ) [ São Miguel Island ] ) )",
            "( JOIN ( R [ tributary of ] ) ( JOIN ( R [ bay ] ) [ São Miguel Island ] ) )",
            "( AND ( JOIN [ bay of ] [ São Miguel Island ] ) ( JOIN ( R [ tributary of ] ) [ São Miguel Island ] ) )",
            "( JOIN ( R [ tributary body ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ São Miguel Island ] ) )"
        ],
        "gen_label": "( JOIN ( R [ tributary ] ) ( JOIN ( R [ located in or next to body of water ] ) [ São Miguel Island ] ) )"
    },
    {
        "question": "Question: { What is ITIS TSN for Sphyraena? }",
        "predicted_query": [
            "[ JOIN [ ITIS taxon synonymy number ] [ Sphyraena ] ]",
            "( JOIN ( R [ ITIS taxon serial number ] ) [ Sphyraena ] )",
            "( JOIN ( R [ ITIS TSN ] ) [ Sphyraena ] )",
            "( JOIN ( R [ ITIS Taxonomic Serial Number ] ) [ Sphyraena ] )",
            "( JOIN [ ITIS TSN ] [ Sphyraena ] )"
        ],
        "gen_label": "( JOIN ( R [ ITIS TSN ] ) [ Sphyraena ] )"
    },
    {
        "question": "Question: { What is the Lotsawa house tibetan author ID of Tenzin Gyatso? }",
        "predicted_query": [
            "( JOIN ( R [ Lotsawa house tibetan author ID ] ) [ Tenzin Gyatso ] )",
            "( JOIN ( R [ Lotus Translation Database author ID ] ) [ Tenzin Gyatso ] )",
            "( JOIN ( R [ Lotsawa House Tibetan author ID ] ) [ Tenzin Gyatso ] )",
            "( AND ( JOIN [ Tibetan Author ID ] [ Tenzin Gyatso ] ) ( JOIN ( R [ question ] ) [ Lotsawa house ] ) )",
            "( AND ( JOIN [ Tibetan author ID ] [ Tenzin Gyatso ] ) ( JOIN ( R [ ID ] ) [ Lotsawa House ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Lotsawa House Tibetan author ID ] ) [ Tenzin Gyatso ] )"
    },
    {
        "question": "Question: { What is Hall for Light Amiga database ID of Doom ? }",
        "predicted_query": [
            "[ JOIN ( R [ Hall for Light Amiga database ID ] ) [ Doom ] ]",
            "( JOIN ( R [ Hall for Light Amiga database ID ] ) [ Doom ] )",
            "( AND ( JOIN [ Hall for Artists database ID ] [ Doom ] ) ( JOIN ( R [ ID in Hall for Artists ] ) [ Doom ] ) )",
            "( JOIN ( R [ Hall for Light Amiga database ID ] ) [ Doom ] )",
            "( JOIN ( R [ Hall for Light Amiga database ID ] ) [ Doom ] )"
        ],
        "gen_label": "( JOIN ( R [ Hall of Light ID ] ) [ Doom ] )"
    },
    {
        "question": "Question: { What is the name of the prequel to Red Dead Redemption that came out for the Playstation 2? }",
        "predicted_query": [
            "( AND ( JOIN [ platform ] [ PlayStation 2 ] ) ( JOIN ( R [ based on ] ) [ Red Dead Redemption ] ) )",
            "( JOIN ( R [ has sequel ] ) ( JOIN ( R [ platform ] ) [ Red Dead Redemption ] ) )",
            "( AND ( JOIN [ platform ] [ PlayStation 2 ] ) ( JOIN ( R [ prequel ] ) [ Red Dead Redemption ] ) )",
            "( AND ( JOIN [ platform ] [ PlayStation 2 ] ) ( JOIN ( R [ based on work ] ) [ Red Dead Redemption ] ) )",
            "( AND ( JOIN [ video game console ] [ PlayStation 2 ] ) ( JOIN ( R [ prequel ] ) [ Red Dead Redemption ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ platform ] [ PlayStation 2 ] ) ( JOIN ( R [ follows ] ) [ Red Dead Redemption ] ) )"
    },
    {
        "question": "Question: { What is James Collinson's job? }",
        "predicted_query": [
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ employer ] ) [ James Collinson ] ) )",
            "( JOIN ( R [ occupation ] ) [ James Collinson ] )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ father ] ) [ James Collinson ] ) )",
            "( JOIN [ occupation ] [ James Collinson ] )",
            "( AND ( JOIN [ employer ] [ James Collinson ] ) ( JOIN ( R [ occupation ] ) [ James Collinson ] ) )"
        ],
        "gen_label": "( JOIN ( R [ field of this occupation ] ) ( JOIN ( R [ occupation ] ) [ James Collinson ] ) )"
    },
    {
        "question": "Question: { What is shareholders W. Chump & Sons Ltd's artwork? }",
        "predicted_query": [
            "( JOIN ( R [ shareholder ] ) ( JOIN ( R [ work ] ) [ W. Chump & Sons Ltd ] ) )",
            "( JOIN ( R [ shareholders ] ) ( JOIN ( R [ creator ] ) [ W. Chump & Sons Ltd ] ) )",
            "( JOIN ( R [ shares held by ] ) ( JOIN ( R [ work ] ) [ W. Chump & Sons Ltd ] ) )",
            "( JOIN [ shareholders ] [ W. Chump & Sons Ltd. ] )",
            "( AND ( JOIN [ work ] [ W. Chump & Sons Ltd. ] ) ( JOIN ( R [ shareholder ] ) [ W. Chump & Sons Ltd. ] ) )"
        ],
        "gen_label": "( JOIN ( R [ notable work ] ) ( JOIN ( R [ owned by ] ) [ W. Chump & Sons Ltd ] ) )"
    },
    {
        "question": "Question: { What is located near the birthplace of Catherine Deneuve? }",
        "predicted_query": [
            "( JOIN [ located near ] [ birthplace of Catherine Deneuve ] )",
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ place of birth ] ) [ Catherine Deneuve ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ place of birth ] ) [ Catherine Deneuve ] ) )",
            "( AND ( JOIN [ shares border with ] [ Belgium ] ) ( JOIN ( R [ place of birth ] ) [ Catherine Deneuve ] ) )",
            "( JOIN [ located near ] [ birthplace ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Catherine Deneuve ] )"
        ],
        "gen_label": "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ place of birth ] ) [ Catherine Deneuve ] ) )"
    },
    {
        "question": "Question: { Which is the ISO 639-6 code for Old English? }",
        "predicted_query": [
            "( JOIN ( R [ ISO 639-6 code ] ) [ Old English ] )",
            "( JOIN ( R [ ISO 639-6 code ] ) [ Old English ] )",
            "( JOIN [ ISO 639-6 code ] [ Old English ] )",
            "[ JOIN [ chapter of ISO 639-6 ID ] [ Old English ] ]",
            "( AND ( JOIN [ language code ] [ ISO 639-6 ] ) ( JOIN ( R [ language ] ) [ Old English ] ) )"
        ],
        "gen_label": "( JOIN ( R [ ISO 639-6 code ] ) [ Old English ] )"
    },
    {
        "question": "Question: { Which place, named after curium, is a member of the German Academy of Sciences Leopoldina? }",
        "predicted_query": [
            "( AND ( JOIN [ member of ] [ German Academy of Sciences Leopoldina ] ) ( JOIN ( R [ named after ] ) [ curium ] ) )",
            "( AND ( JOIN [ named after ] [ curium ] ) ( JOIN ( R [ member of ] ) [ German Academy of Sciences Leopoldina ] ) )",
            "( AND ( JOIN [ member of ] [ German Academy of Sciences Leopoldina ] ) ( JOIN ( R [ named after ] ) [ curium ] ) )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ named after ] ) [ curium ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ named after ] ) [ curium ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ member of ] [ German Academy of Sciences Leopoldina ] ) ( JOIN ( R [ named after ] ) [ curium ] ) )"
    },
    {
        "question": "Question: { What film is starring the series of The Smell of Music? }",
        "predicted_query": [
            "( AND ( JOIN [ cast member ] [ The Smell of Music ] ) ( JOIN ( R [ based on ] ) [ The Smell of Music ] ) )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ part of the series ] ) [ The Smell of Music ] ) )",
            "( AND ( JOIN [ part of the series ] [ The Smell of Music ] ) ( JOIN ( R [ cast member ] ) [ The Smell of Music ] ) )",
            "( JOIN [ cast member ] [ The Smell of Music ] )",
            "( AND ( JOIN [ series ] [ The Smell of Music ] ) ( JOIN ( R [ cast member ] ) [ The Smell of Music ] ) )"
        ],
        "gen_label": "( JOIN ( R [ cast member ] ) ( JOIN ( R [ part of the series ] ) [ The Smell of Music ] ) )"
    },
    {
        "question": "Question: { Which is the home world for Superman? }",
        "predicted_query": [
            "( JOIN ( R [ homeworld ] ) [ Superman ] )",
            "( JOIN ( R [ planet of origin ] ) [ Superman ] )",
            "( JOIN [ home world ] [ Superman ] )",
            "( JOIN ( R [ home world ] ) [ Superman ] )",
            "( AND ( JOIN [ location of headquarters ] [ DC Comics ] ) ( JOIN ( R [ homeworld ] ) [ Superman ] ) )"
        ],
        "gen_label": "( JOIN ( R [ home world ] ) [ Superman ] )"
    },
    {
        "question": "Question: { wich means  {GOST 7.75–97 code}at {Azerbaijani}? }",
        "predicted_query": [
            "( JOIN ( R [ GOST 7.75–97 code ] ) [ Azerbaijani ] )",
            "( AND ( JOIN [ ISO 3166-1 alpha-2 country code ] [ Azerbaijan ] ) ( JOIN ( R [ GOST 7.75–97 code ] ) [ Azerbaijani ] ) )",
            "( JOIN [ GOST 7.75–97 code ] [ Azerbaijani ] )",
            "( AND ( JOIN [ GOST 7.75-97 code ] [ Azerbaijani ] ) [ Azerbaijani ] )",
            "( JOIN ( R [ GOST 7.75–97 code ] ) [ Azerbaijani ] )"
        ],
        "gen_label": "( JOIN ( R [ GOST 7.75–97 code ] ) [ Azerbaijani ] )"
    },
    {
        "question": "Question: { \"What {psychologist} is a {medical speciality}  of {mental disorder}, that has {has proponent}  ?\" }",
        "predicted_query": [
            "( AND ( JOIN [ has proponent ] [ psychiatry ] ) ( JOIN ( R [ field of study ] ) [ psychology ] ) )",
            "( AND ( JOIN [ practiced by ] [ mental disorder ] ) ( JOIN ( R [ influenced by ] ) [ psychology ] ) )",
            "( AND ( JOIN [ has proponent ] [ psychiatry ] ) ( JOIN ( R [ medical specialty ] ) [ psychiatry ] ) )",
            "( AND ( JOIN [ field of study ] [ mental disorder ] ) ( JOIN ( R [ influenced by ] ) [ psychologist ] ) )",
            "( AND ( JOIN [ proponent ] [ psychiatry ] ) ( JOIN ( R [ field of study ] ) [ psychiatry ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ practiced by ] [ psychologist ] ) ( JOIN ( R [ health specialty ] ) [ mental disorder ] ) )"
    },
    {
        "question": "Question: { What is Köppen climate classification group for Huế? }",
        "predicted_query": [
            "( JOIN ( R [ Köppen climate classification group ] ) [ Huế ] )",
            "( JOIN [ Köppen climate classification group ] [ Huế ] )",
            "( AND ( JOIN [ Köppen–Geiger climate classification ] [ Köppen climate classification group for Huế ] ) ( JOIN ( R [ named after ] ) [ Köppen climate classification group for Huế ] ) )",
            "( [ JOIN ] [ Köppen climate classification group ] )",
            "( [ JOIN ] [ Köppen climate classification group ] [ Huế ] )"
        ],
        "gen_label": "( JOIN ( R [ Köppen climate classification ] ) [ Huế ] )"
    },
    {
        "question": "Question: { How many members does the Coptic Orthodox Church of Alexandria have? }",
        "predicted_query": [
            "( JOIN ( R [ number of members ] ) ( JOIN ( R [ member of ] ) [ Coptic Orthodox Church of Alexandria ] ) )",
            "( JOIN [ number of members ] [ Coptic Orthodox Church of Alexandria ] )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ member of ] ) [ Coptic Orthodox Church of Alexandria ] ) )",
            "( JOIN ( R [ number of members ] ) [ Coptic Orthodox Church of Alexandria ] )",
            "( JOIN ( R [ member ] ) ( JOIN ( R [ member of ] ) [ Coptic Orthodox Church of Alexandria ] ) )"
        ],
        "gen_label": "( JOIN ( R [ member count ] ) [ Coptic Orthodox Church ] )"
    },
    {
        "question": "Question: { \"Which name after, Eridanus, has a gender expression that is male?\" }",
        "predicted_query": [
            "( AND ( JOIN [ gender expression ] [ male ] ) ( JOIN ( R [ named after ] ) [ Eridanus ] ) )",
            "( AND ( JOIN [ grammatical gender ] [ male ] ) ( JOIN ( R [ named after ] ) [ Eridanus ] ) )",
            "( And JOIN ( R [ gender expression ] ) ( Eridanus ) )",
            "( AND ( JOIN [ gender ] [ male ] ) ( JOIN ( R [ named after ] ) [ Eridanus ] ) )",
            "( AND ( JOIN [ has grammatical gender ] [ male ] ) ( JOIN ( R [ named after ] ) [ Eridanus ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ sex or gender ] [ male ] ) ( JOIN ( R [ named after ] ) [ Eridanus ] ) )"
    },
    {
        "question": "Question: { In Gaelic Ireland, what was the position it was succeded by before it was the Lordship of Ireland? }",
        "predicted_query": [
            "( AND ( JOIN [ predecessor of ] [ Lordship of Ireland ] ) ( JOIN ( R [ language spoken, written or signed ] ) [ Gaelic Ireland ] ) )",
            "( AND ( JOIN [ preceded by ] [ Lordship of Ireland ] ) ( JOIN ( R [ language spoken, written or signed ] ) [ Gaelic Ireland ] ) )",
            "( AND ( JOIN [ replaced by ] [ Lordship of Ireland ] ) ( JOIN ( R [ language spoken, written or signed ] ) [ Gaelic Ireland ] ) )",
            "( AND ( JOIN [ predecessor of ] [ Lordship of Ireland ] ) ( JOIN ( R [ language ] ) [ Gaelic Ireland ] ) )",
            "( JOIN ( R [ predecessor of ] ) ( JOIN ( R [ position held ] ) [ Gaelic Ireland ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ follows ] [ Lordship of Ireland ] ) ( JOIN ( R [ followed by ] ) [ Gaelic Ireland ] ) )"
    },
    {
        "question": "Question: { What did Drmitri Kombarov fund? }",
        "predicted_query": [
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ sponsor ] ) [ Dmitri Kombarov ] ) )",
            "( JOIN ( R [ funded by ] ) ( JOIN ( R [ occupation ] ) [ Dmitri Kombarov ] ) )",
            "( AND ( JOIN [ founded by ] [ Dmitri Kombarov ] ) ( JOIN ( R [ funded by ] ) [ Dmitri Kombarov ] ) )",
            "[ JOIN [ funded by ] ] [ Dmitri Kombarov ]",
            "[not found]"
        ],
        "gen_label": "( JOIN ( R [ sponsor ] ) ( JOIN ( R [ participant in ] ) [ Dmitri Kombarov ] ) )"
    },
    {
        "question": "Question: { What is Jim lovells crew member? }",
        "predicted_query": [
            "( JOIN ( R [ crew member ] ) [ Jim Lovell ] )",
            "( JOIN ( R [ member of crew ] ) [ Jim Lovell ] )",
            "[join] [crew member] [Jim Lovell]",
            "( AND ( JOIN [ member of crew ] [ Jim Lovell ] ) ( JOIN ( R [ member of ] ) [ Jim Lovell ] ) )",
            "( JOIN [ crew member ] [ Jim Lovell ] )"
        ],
        "gen_label": "( JOIN [ crew member ] [ Jim Lovell ] )"
    },
    {
        "question": "Question: { Which is the chivalric order for Pedro Calderòn de la Barca? }",
        "predicted_query": [
            "( JOIN ( R [ chivalric order ] ) [ Pedro Calderón de la Barca ] )",
            "( JOIN ( R [ knightly order ] ) ( JOIN ( R [ member of ] ) [ Pedro Calderón de la Barca ] ) )",
            "( JOIN ( R [ chivalric order ] ) [ Pedro Calderón de la Barca ] )",
            "( JOIN [ chivalric order ] [ Pedro Calderón de la Barca ] )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ awarded to ] ) [ Pedro Calderón de la Barca ] ) )"
        ],
        "gen_label": "( JOIN ( R [ chivalric order ] ) [ Pedro Calderón de la Barca ] )"
    },
    {
        "question": "Question: { What is the Treaty of Versailles' depositor? }",
        "predicted_query": [
            "( JOIN ( R [ depositor ] ) [ Treaty of Versailles ] )",
            "( JOIN ( R [ signatory ] ) ( JOIN ( R [ participant in ] ) [ Treaty of Versailles ] ) )",
            "( JOIN [ depositor ] [ Treaty of Versailles ] )",
            "( AND ( JOIN [ participant in war ] [ Treaty of Versailles ] ) ( JOIN ( R [ deposited in ] ) [ Treaty of Versailles ] ) )",
            "( JOIN ( R [ depositor ] ) [ Treaty of Versailles ] )"
        ],
        "gen_label": "( JOIN ( R [ depositary ] ) [ Treaty of Versailles ] )"
    },
    {
        "question": "Question: { Which is the development of anatomical structure for pulmonary alveolus? }",
        "predicted_query": [
            "( JOIN ( R [ development of anatomical structure ] ) [ pulmonary alveolus ] )",
            "( JOIN ( R [ anatomical structure ] ) ( JOIN ( R [ has development ] ) [ pulmonary alveolus ] ) )",
            "( AND ( JOIN [ has development of ] [ pulmonary alveolus ] ) ( JOIN ( R [ has development ] ) [ pulmonary alveolus ] ) )",
            "( [ joined by ] [ development of anatomical structure ] [ pulmonary alveolus ] )",
            "( JOIN [ development of anatomical structure ] [ pulmonary alveolus ] )"
        ],
        "gen_label": "( JOIN ( R [ development of anatomical structure ] ) [ pulmonary alveolus ] )"
    },
    {
        "question": "Question: { What is the loyalty program for Turkish Airlines? }",
        "predicted_query": [
            "( JOIN ( R [ loyalty program ] ) [ Turkish Airlines ] )",
            "( JOIN [ loyalty program ] [ Turkish Airlines ] )",
            "[joined by] [Turkish Airlines]",
            "( AND ( JOIN [ member of ] [ Turkish Airlines ] ) ( JOIN ( R [ loyalty program ] ) [ Turkish Airlines ] ) )",
            "The JOIN query contains a JOIN ( [ loyalty program ] ) whose child is [ Turkish Airlines ] ."
        ],
        "gen_label": "( JOIN ( R [ reward program ] ) [ Turkish Airlines ] )"
    },
    {
        "question": "Question: { What is WomenWriters ID for Virginia Woolf ? }",
        "predicted_query": [
            "( JOIN ( R [ WomenWriters ID ] ) [ Virginia Woolf ] )",
            "( JOIN [ WomenWriters ID ] [ Virginia Woolf ] )",
            "( JOIN ( R [ WomenWriters ID ] ) [ Virginia Woolf ] )",
            "( JOIN ( R [ WomenWriters ID ] ) [ Virginia Woolf ] )",
            "( JOIN ( R [ womenwriters.org ID ] ) [ Virginia Woolf ] )"
        ],
        "gen_label": "( JOIN ( R [ WomenWriters ID ] ) [ Virginia Woolf ] )"
    },
    {
        "question": "Question: { What is place in Würzburg is also known as roentgen? }",
        "predicted_query": [
            "( AND ( JOIN [ known as ] [ roentgen ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Würzburg ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Würzburg ] ) ( JOIN ( R [ named after ] ) [ Wilhelm Conrad Röntgen ] ) )",
            "( JOIN [ known as ] [ roentgen ] )",
            "( AND ( JOIN [ named after ] [ Wilhelm Conrad Röntgen ] ) ( JOIN ( R [ place of discovery or invention ] ) [ X-ray ] ) )",
            "( AND ( JOIN [ place of discovery ] [ roentgen ] ) ( JOIN ( R [ named after ] ) [ Wilhelm Conrad Röntgen ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ work location ] [ Würzburg ] ) ( JOIN ( R [ named after ] ) [ roentgen ] ) )"
    },
    {
        "question": "Question: { What work shows the role model of Edward Albee? }",
        "predicted_query": [
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ influenced by ] ) [ Edward Albee ] ) )",
            "( JOIN [ work shows ] [ Edward Albee ] )",
            "( [ joins ] [ work ] [ Edward Albee ] )",
            "( AND ( JOIN [ occupation ] [ playwright ] ) ( JOIN ( R [ influenced by ] ) [ Edward Albee ] ) )",
            "( AND ( JOIN [ role model ] [ Edward Albee ] ) ( JOIN ( R [ occupation ] ) [ Edward Albee ] ) )"
        ],
        "gen_label": "( JOIN ( R [ work location ] ) ( JOIN ( R [ influenced by ] ) [ Edward Albee ] ) )"
    },
    {
        "question": "Question: { Which is the Sefaria ID for Leviticus? }",
        "predicted_query": [
            "( JOIN ( R [ Sefaria ID ] ) [ Leviticus ] )",
            "[ JOIN ( R [ Sefaria ID ] )",
            "( JOIN ( R [ Sefaria ID ] ) [ Leviticus ] )",
            "( JOIN [ Sefaria ID ] [ Leviticus ] )",
            "( JOIN ( R [ Sefaria book ID ] ) [ Leviticus ] )"
        ],
        "gen_label": "( JOIN ( R [ Sefaria ID ] ) [ Leviticus ] )"
    },
    {
        "question": "Question: { What is the brain's Spider Ontology ID? }",
        "predicted_query": [
            "( JOIN ( R [ Spider Ontology ID ] ) [ brain ] )",
            "( JOIN ( R [ Spider Ontology ID ] ) [ brain ] )",
            "( JOIN [ Spider Ontology ID ] [ brain ] )",
            "( JOIN ( R [ spider taxon ID ] ) [ brain ] )",
            "( AND ( JOIN [ spider ontology ID ] [ BRAIN ] ) [ brain ] )"
        ],
        "gen_label": "( JOIN ( R [ Spider Ontology ID ] ) [ brain ] )"
    },
    {
        "question": "Question: { What dates was Margarita Simonyan married to her husbands? }",
        "predicted_query": [
            "( JOIN ( R [ date of marriage ] ) ( JOIN ( R [ spouse ] ) [ Margarita Simonyan ] ) )",
            "( AND ( JOIN [ end time ] [ death date ] ) ( JOIN ( R [ spouse ] ) [ Margarita Simonyan ] ) )",
            "( JOIN ( R [ start date ] ) ( JOIN ( R [ spouse ] ) [ Margarita Simonyan ] ) )",
            "( JOIN ( R [ date of death ] ) ( JOIN ( R [ spouse ] ) [ Margarita Simonyan ] ) )",
            "( JOIN [ married to ] [ Margarita Simonyan ] ) AND ( JOIN ( R [ date of death ] ) [ Margarita Simonyan ] )"
        ],
        "gen_label": "( JOIN ( R [ work period ( start ) ] ) ( JOIN ( R [ spouse ] ) [ Margarita Simonyan ] ) )"
    },
    {
        "question": "Question: { In The Indian War of Independence, what is the favorite player of the writer? }",
        "predicted_query": [
            "( AND ( JOIN [ sports player ] [ writer ] ) ( JOIN ( R [ influenced by ] ) [ Indian War of Independence ] ) )",
            "( JOIN ( R [ favorite player ] ) ( JOIN ( R [ participant ] ) [ Indian War of Independence ] ) )",
            "( AND ( JOIN [ sport played ] [ cricket ] ) ( JOIN ( R [ influenced by ] ) [ The Indian War of Independence ] ) )",
            "( JOIN [ favorite player ] [ The Indian War of Independence ] )",
            "( AND ( JOIN [ sports team player ] [ writer ] ) ( JOIN ( R [ influenced by ] ) [ Indian War of Independence ] ) )"
        ],
        "gen_label": "( JOIN ( R [ influenced by ] ) ( JOIN ( R [ author ] ) [ The Indian War of Independence ] ) )"
    },
    {
        "question": "Question: { Which is the global-warming potential of dichlorodifluoromethane? }",
        "predicted_query": [
            "( JOIN ( R [ global warming potential ] ) [ dichlorodifluoromethane ] )",
            "( JOIN ( R [ global-warming potential ] ) [ dichlorodifluoromethane ] )",
            "( JOIN ( R [ has global warming potential ] ) [ dichlorodifluoromethane ] )",
            "( JOIN ( R [ has global warming potential ] ) [ dichlorodifluoromethane ] )",
            "( JOIN [ global-warming potential of ] [ dichlorodifluoromethane ] )"
        ],
        "gen_label": "( JOIN ( R [ global warming potential ] ) [ dichlorodifluoromethane ] )"
    },
    {
        "question": "Question: { What is the AMCA Radiocommunications Licence ID for Qantas? }",
        "predicted_query": [
            "( JOIN ( R [ AMCA Radiocommunications Licence ID ] ) [ Qantas ] )",
            "( AND ( JOIN [ licence ID ] [ AMCA Radiocommunications Licence ID ] ) ( JOIN ( R [ operator ] ) [ Qantas ] ) )",
            "( JOIN [ AMCA Radiocommunications Licence ID ] [ Qantas ] )",
            "( JOIN ( R [ AMCA Radiocommunications Licence ID ] ) [ Qantas ] )",
            "( JOIN ( R [ AMCA Radiocommunications Licence ID ] ) [ Qantas Airways ] )"
        ],
        "gen_label": "( JOIN ( R [ ACMA Radiocommunications Client Number ] ) [ Qantas ] )"
    },
    {
        "question": "Question: { What was the diplomatic relation of the release region of Pet Sounds? }",
        "predicted_query": [
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country of origin ] ) [ Pet Sounds ] ) )",
            "( JOIN [ diplomatic relation ] [ Pet Sounds ] )",
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ place of release ] ) [ Pet Sounds ] ) )",
            "( AND ( JOIN [ diplomatic relations ] [ United States ] ) ( JOIN ( R [ country of origin ] ) [ Pet Sounds ] ) )",
            "( AND ( JOIN [ has diplomatic relations ] [ United States ] ) ( JOIN ( R [ country of origin ] ) [ Pet Sounds ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ place of publication ] ) [ Pet Sounds ] ) )"
    },
    {
        "question": "Question: { Where did Jacqueline Fernandez go to university? }",
        "predicted_query": [
            "( JOIN [ place of study ] [ Jacqueline Fernandez ] )",
            "( JOIN ( R [ place of education ] ) ( JOIN ( R [ alma mater ] ) [ Jacqueline Fernandez ] ) )",
            "( JOIN ( R [ location ] ) ( JOIN ( R [ alma mater ] ) [ Jacqueline Fernandez ] ) )",
            "( JOIN ( R [ alma mater ] ) [ Jacqueline Fernandez ] )",
            "( AND ( JOIN [ location ] [ New York City ] ) ( JOIN ( R [ alma mater ] ) [ Jacqueline Fernandez ] ) )"
        ],
        "gen_label": "( JOIN ( R [ grants ] ) ( JOIN ( R [ educated at ] ) [ Jacqueline Fernandez ] ) )"
    },
    {
        "question": "Question: { The trachea is of what anatomical branch? }",
        "predicted_query": [
            "( JOIN ( R [ anatomical branch ] ) [ trachea ] )",
            "( JOIN [ anatomical branch ] [ trachea ] )",
            "( JOIN ( R [ branches ] ) ( JOIN ( R [ has branch ] ) [ trachea ] ) )",
            "( JOIN ( R [ branch of ] ) ( JOIN ( R [ has branch ] ) [ trachea ] ) )",
            "( AND ( JOIN [ parent of ] [ trachea ] ) ( JOIN ( R [ branch of ] ) [ anatomical system ] ) )"
        ],
        "gen_label": "( JOIN [ anatomical branch of ] [ trachea ] )"
    },
    {
        "question": "Question: { Is the prescribed drug esmolol the cause of death of Randy Savage? }",
        "predicted_query": [
            "( AND ( JOIN [ drug or treatment ] [ esmolol ] ) ( JOIN ( R [ cause of death ] ) [ Randy Savage ] ) )",
            "( JOIN ( R [ has drug ] ) ( JOIN ( R [ drug used for treatment ] ) [ Randy Savage ] ) )",
            "( AND ( JOIN [ drug used for treatment ] [ esmolol ] ) ( JOIN ( R [ cause of death ] ) [ Randy Savage ] ) )",
            "( JOIN ( R [ prescribed drug ] ) ( JOIN ( R [ cause of death ] ) [ Randy Savage ] ) )",
            "( AND ( JOIN [ cause of death ] [ esmolol ] ) ( JOIN ( R [ drug ] ) [ Randy Savage ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ drug or therapy used for treatment ] [ esmolol ] ) ( JOIN ( R [ cause of death ] ) [ Randy Savage ] ) )"
    },
    {
        "question": "Question: { Which character was a musician in Guardians of the Galaxy? }",
        "predicted_query": [
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ cast member ] ) [ Guardians of the Galaxy ] ) )",
            "( JOIN [ musician ] [ Guardians of the Galaxy ] )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ genre ] ) ( JOIN ( R [ has work ] ) [ Guardians of the Galaxy ] ) ) )",
            "( AND ( JOIN [ occupational field ] [ musician ] ) ( JOIN ( R [ character ] ) [ Guardians of the Galaxy ] ) )",
            "( AND ( JOIN [ occupation ] [ musician ] ) ( JOIN ( R [ character ] ) [ Guardians of the Galaxy ] ) )"
        ],
        "gen_label": "( JOIN ( R [ performer ] ) ( JOIN ( R [ characters ] ) [ Guardians of the Galaxy ] ) )"
    },
    {
        "question": "Question: { Who is the child of Albert I, Prince of Monaco? }",
        "predicted_query": [
            "( JOIN ( R [ father ] ) ( JOIN ( R [ child ] ) [ Albert I, Prince of Monaco ] ) )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ parent ] ) [ Albert I, Prince of Monaco ] ) )",
            "( JOIN [ child ] [ Albert I, Prince of Monaco ] )",
            "( JOIN ( R [ father ] ) [ Albert I, Prince of Monaco ] )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ spouse ] ) [ Albert I, Prince of Monaco ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ place of burial ] [ Cathedral of Our Lady Immaculate ] ) ( JOIN ( R [ father ] ) [ Albert I, Prince of Monaco ] ) )"
    },
    {
        "question": "Question: { What is participant in conflict of 4th Fighter Group United States army air Forces? }",
        "predicted_query": [
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ conflict ] ) [ 4th Fighter Group, United States Army Air Forces ] ) )",
            "( AND ( JOIN [ conflict ] [ 4th Fighter Group ] ) ( JOIN ( R [ participant in war ] ) [ 4th Fighter Group ] ) )",
            "( JOIN ( R [ participant in conflict ] ) ( JOIN ( R [ conflict ] ) [ 4th Fighter Group, United States Army Air Forces ] ) )",
            "( JOIN [ participant in conflict ] [ 4th Fighter Group, United States Army Air Forces ] )",
            "( JOIN ( R [ participant in conflict ] ) [ 4th Fighter Group, United States Army Air Forces ] )"
        ],
        "gen_label": "( JOIN ( R [ conflict ] ) ( JOIN ( R [ item operated ] ) [ 4th Fighter Group ( United States Army Air Forces ) ] ) )"
    },
    {
        "question": "Question: { What is the partner town of the place from Tomas Cruz Martinez? }",
        "predicted_query": [
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ place of birth ] ) [ Tomás Cruz Martínez ] ) )",
            "( JOIN ( R [ twin town ] ) ( JOIN ( R [ place of birth ] ) [ Tomás Cruz Martínez ] ) )",
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ place of birth ] ) [ Tomás Cruz Martínez ] ) )",
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ place of work ] ) [ Tomás Cruz Martínez ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Tomás Cruz Martínez ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Tomás Cruz Martínez ] ) )"
        ],
        "gen_label": "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ work location ] ) [ Tomás Cruz Martínez ] ) )"
    },
    {
        "question": "Question: { Who {established} {label} of {Super Junior} ? }",
        "predicted_query": [
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ record label ] ) [ Super Junior ] ) )",
            "( JOIN [ established ] [ Super Junior ] )",
            "( JOIN ( R [ founded ] ) ( JOIN ( R [ record label ] ) [ Super Junior ] ) )",
            "( JOIN ( R [ established ] ) ( JOIN ( R [ member of ] ) [ Super Junior ] ) )",
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ member of ] ) [ Super Junior ] ) )"
        ],
        "gen_label": "( JOIN ( R [ founded by ] ) ( JOIN ( R [ record label ] ) [ Super Junior ] ) )"
    },
    {
        "question": "Question: { What are the signs of the method of murder of Claude Monet? }",
        "predicted_query": [
            "( JOIN ( R [ medical condition or cause of death ] ) ( JOIN ( R [ method of murder ] ) [ Claude Monet ] ) )",
            "( JOIN ( R [ symptoms ] ) ( JOIN ( R [ cause of death ] ) [ Claude Monet ] ) )",
            "( JOIN ( R [ has symptom ] ) ( JOIN ( R [ cause of death ] ) [ Claude Monet ] ) )",
            "( JOIN [ symptoms ] [ murder method ] )",
            "( AND ( JOIN [ cause of death ] [ murder ] ) ( JOIN ( R [ symptoms ] ) [ Claude Monet ] ) )"
        ],
        "gen_label": "( JOIN ( R [ symptoms and signs ] ) ( JOIN ( R [ cause of death ] ) [ Claude Monet ] ) )"
    },
    {
        "question": "Question: { What is the subclass of herbicide? }",
        "predicted_query": [
            "( JOIN ( R [ taxon rank ] ) ( JOIN ( R [ parent material ] ) [ herbicide ] ) )",
            "( JOIN [ subclass of ] [ herbicide ] )",
            "( AND ( JOIN [ parent taxon ] [ herbicide ] ) ( JOIN ( R [ taxon of ] ) [ herbicide ] ) )",
            "( AND ( JOIN [ has taxon ID ] [ Herbicide ] ) ( JOIN ( R [ taxon of ] ) [ Herbicide ] ) )",
            "( JOIN [ taxon of ] [ herbicide ] )"
        ],
        "gen_label": "( JOIN ( R [ subclass of ] ) [ herbicide ] )"
    },
    {
        "question": "Question: { Which is Cinema of Israel ID of Patrick Stewart ? }",
        "predicted_query": [
            "( JOIN ( R [ Cinema of Israel ID ] ) [ Patrick Stewart ] )",
            "( JOIN ( R JOIN [ Cinema of Israel ID ] ) [ Patrick Stewart ] )",
            "( AND ( JOIN [ ID.com ] [ Cinema of Israel ] ) ( JOIN ( R [ ID ] ) [ Patrick Stewart ] ) )",
            "( JOIN ( R [ Cinema of Israel ID ] ) [ Patrick Stewart ] )",
            "( JOIN ( R [ Cinema of Israel ID ] ) [ Patrick Stewart ] )"
        ],
        "gen_label": "( JOIN ( R [ Cinema of Israel ID ] ) [ Patrick Stewart ] )"
    },
    {
        "question": "Question: { Which is the Quebec municipalities geographical code for Montreal? }",
        "predicted_query": [
            "( JOIN ( R [ Quebec municipalities geographical code ] ) [ Montreal ] )",
            "( AND ( JOIN [ QGIS location ID ] [ Quebec municipalities geographical code for Montreal ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Montreal ] ) )",
            "( JOIN ( R [ Quebec municipalities geographical code ] ) [ Montreal ] )",
            "( JOIN ( R [ Quebec municipalities geographical code ] ) [ Montreal ] )",
            "( JOIN ( R [ Quebec geographical code ] ) [ Montreal ] )"
        ],
        "gen_label": "( JOIN ( R [ Quebec municipalities geographical code ] ) [ Montreal ] )"
    },
    {
        "question": "Question: { What was Todor Zhivkov's field of work? }",
        "predicted_query": [
            "( JOIN ( R [ field of work ] ) [ Todor Zhivkov ] )",
            "( AND ( JOIN [ occupation ] [ field of work ] ) ( JOIN ( R [ occupation ] ) [ Todor Zhivkov ] ) )",
            "( JOIN [ field of work ] [ Todor Zhivkov ] )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ field of work ] ) [ Todor Zhivkov ] ) )",
            "( JOIN ( R [ field of work ] ) [ Todor Zhivkov ] )"
        ],
        "gen_label": "( JOIN ( R [ field of this occupation ] ) ( JOIN ( R [ occupation ] ) [ Todor Zhivkov ] ) )"
    },
    {
        "question": "Question: { How does one verbally pronounce the foods traditionally associated with Eid Al-Adha? }",
        "predicted_query": [
            "( JOIN ( R [ pronunciation ] ) ( JOIN ( R [ associated with ] ) [ Eid al-Adha ] ) )",
            "( JOIN [ pronounced in ] [ foods traditionally associated with Eid al-Adha ] )",
            "( AND ( JOIN [ spoken language ] [ English ] ) ( JOIN ( R [ associated with ] ) [ Eid al-Adha ] ) )",
            "( AND ( JOIN [ spoken in ] [ Arabic ] ) ( JOIN ( R [ associated with ] ) [ Eid al-Adha ] ) )",
            "( JOIN ( R [ pronunciation ] ) ( JOIN ( R [ traditional foods ] ) [ Eid al-Adha ] ) )"
        ],
        "gen_label": "( JOIN ( R [ pronunciation audio ] ) ( JOIN ( R [ foods traditionally associated ] ) [ Eid al-Adha ] ) )"
    },
    {
        "question": "Question: { What is nitrogen's common procurement vocabulary? }",
        "predicted_query": [
            "( JOIN ( R [ common procure",
            "( AND ( JOIN [ has common vocabulary ] [ nitrogen ] ) ( JOIN ( R [ has common vocabulary ] ) [ nitrogen ] ) )",
            "( JOIN ( R [ common procurement vocabulary ] ) [ nitrogen ] )",
            "( JOIN ( R [ Common Procurement Vocabulary ] ) [ nitrogen ] )",
            "( JOIN [ common procurement vocabulary ] [ nitrogen ] )"
        ],
        "gen_label": "( JOIN ( R [ Common Procurement Vocabulary code ] ) [ nitrogen ] )"
    },
    {
        "question": "Question: { What is the official name of the star Arp 220? }",
        "predicted_query": [
            "( JOIN ( R [ official name ] ) [ Arp 220 ] )",
            "( JOIN [ official name ] [ Arp 220 ] )",
            "( AND ( JOIN [ name ] [ Arp 220 ] ) ( JOIN ( R [ official name ] ) [ Arp 220 ] ) )",
            "[ JOIN ( R [ official name ] ) [ Arp 220 ] ]",
            "( JOIN ( R [ official name ] ) ( JOIN ( R [ parent star system ] ) [ Arp 220 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ native label ] ) ( JOIN ( R [ constellation ] ) [ Arp 220 ] ) )"
    },
    {
        "question": "Question: { Which is the trunk prefix from Nintendo? }",
        "predicted_query": [
            "( JOIN ( R [ trunk prefix ] ) [ Nintendo ] )",
            "( JOIN ( R [ trunk prefix ] ) [ Nintendo ] )",
            "( JOIN [ trunk prefix ] [ Nintendo ] )",
            "( JOIN ( R [ country calling code ] ) ( JOIN ( R [ parent company ] ) [ Nintendo ] ) )",
            "( AND ( JOIN [ IATA airport code ] [ NCL ] ) ( JOIN ( R [ country prefix ] ) [ Nintendo ] ) )"
        ],
        "gen_label": "( JOIN ( R [ trunk prefix ] ) ( JOIN ( R [ location of formation ] ) [ Nintendo ] ) )"
    },
    {
        "question": "Question: { Who is the patron saint of the Knights Templar whose political office was held in Abbot? }",
        "predicted_query": [
            "( AND ( JOIN [ political office ] [ abbot ] ) ( JOIN ( R [ patron saint ] ) [ Knights Templar ] ) )",
            "( AND ( JOIN [ occupation ] [ abbot ] ) ( JOIN ( R [ patron saint ] ) [ Knights Templar ] ) )",
            "( AND ( JOIN [ office held ] [ abbot ] ) ( JOIN ( R [ patron saint ] ) [ Knights Templar ] ) )",
            "( AND ( JOIN [ political office held ] [ abbot ] ) ( JOIN ( R [ patron saint ] ) [ Knights Templar ] ) )",
            "( AND ( JOIN [ position held ] [ Abbot ] ) ( JOIN ( R [ patron saint ] ) [ Knights Templar ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ position held ] [ abbot ] ) ( JOIN ( R [ patron saint ] ) [ Knights Templars ] ) )"
    },
    {
        "question": "Question: { What is the language used in Constant Puyo, that is typology place-manner-time? }",
        "predicted_query": [
            "( AND ( JOIN [ linguistic typology ] ) ( JOIN ( R [ time ] ) [ Constant Puyo ] ) )",
            "( JOIN ( R [ language used ] ) ( JOIN ( R [ typology ] ) [ Constant Puyo ] ) )",
            "( AND ( JOIN [ typology ] [ place-manner-time ] ) ( JOIN ( R [ language ] ) [ Constant Puyo ] ) )",
            "( JOIN ( R [ linguistic typology ] ) ( JOIN ( R [ grammatical category ] ) [ Constant Puyo ] ) )",
            "( AND ( JOIN [ place-manner-time ] [ typology ] ) ( JOIN ( R [ spoken language ] ) [ Constant Puyo ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ linguistic typology ] [ place–manner–time ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Constant Puyo ] ) )"
    },
    {
        "question": "Question: { Who is Oche chiun's brother? }",
        "predicted_query": [
            "( JOIN ( R [ sibling ] ) [ Oche Chiun ] )",
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ member of ] ) [ Oche chiun ] ) )",
            "[ JOIN ] [ sibling ] [ Oche chiun ] . ",
            "( AND ( JOIN [ sibling ] [ Oche chiun ] ) ( JOIN ( R [ follows ] ) [ Oche chiun ] ) )",
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ twin brother ] ) [ Oche Chiun ] ) )"
        ],
        "gen_label": "( JOIN ( R [ sibling ] ) ( JOIN ( R [ performer ] ) [ Oíche chiún / Orinoco Flow ] ) )"
    },
    {
        "question": "Question: { who is inspiration to son of ben? }",
        "predicted_query": [
            "( JOIN ( R [ influenced by ] ) ( JOIN ( R [ child ] ) [ Ben ] ) )",
            "( JOIN [ influenced by ] [ Ben ] )",
            "( AND ( JOIN [ child ] [ Benjamin ] ) ( JOIN ( R [ influenced by ] ) [ Benjamin Britten ] ) )",
            "( JOIN [ inspired by ] [ Benjamin Britten ] )",
            "( AND ( JOIN [ father ] [ Ben ] ) ( JOIN ( R [ inspired by ] ) [ Ben ] ) )"
        ],
        "gen_label": "( JOIN ( R [ inspired by ] ) ( JOIN ( R [ mother ] ) [ Ben ] ) )"
    },
    {
        "question": "Question: { Which musical instrument is used to play New General Catalogue's \"aircraft in fleet\"? }",
        "predicted_query": [
            "( JOIN ( R [ musical instrument ] ) ( JOIN ( R [ part of ] ) [ New General Catalogue ] ) )",
            "( JOIN [ musical instrument ] [ aircraft in fleet ] ) JOIN ( JOIN ( R [ catalogue raisonné ] ) [ New General Catalogue ] )",
            "( AND ( JOIN [ instrument ] [ aircraft in fleet ] ) ( JOIN ( R [ composer ] ) [ New General Catalogue ] ) )",
            "( AND ( JOIN [ has part of ] [ aircraft in fleet ] ) ( JOIN ( R [ instrument used ] ) [ New General Catalogue ] ) )",
            "( JOIN ( R [ musical instrument ] ) ( JOIN ( R [ fleet ] ) [ New General Catalogue ] ) )"
        ],
        "gen_label": "( JOIN ( R [ instrument ] ) ( JOIN ( R [ item operated ] ) [ New General Catalogue ] ) )"
    },
    {
        "question": "Question: { If Margaret Grubb's daughter has a child, what is it called? }",
        "predicted_query": [
            "( AND ( JOIN [ child ] [ Margaret Grubb ] ) ( JOIN ( R [ named after ] ) [ Margaret Grubb ] ) )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ parent ] ) [ Margaret Grubb ] ) )",
            "[ JOIN ( R [ named after ] ) ] [ Margaret Grubb ]",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ child ] ) [ Margaret Grubb ] ) )",
            "( AND ( JOIN [ parent of ] [ Margaret Grubb ] ) ( JOIN ( R [ child of ] ) [ Margaret Grubb ] ) )"
        ],
        "gen_label": "( JOIN ( R [ father ] ) ( JOIN ( R [ child ] ) [ Margaret Grubb ] ) )"
    },
    {
        "question": "Question: { What is the profit for stockholders of Disney? }",
        "predicted_query": [
            "( JOIN ( R [ profit ] ) ( JOIN ( R [ shareholder ] ) [ Disney ] ) )",
            "( JOIN ( R [ profit for stockholders ] ) [ Disney ] )",
            "( JOIN [ profit for stockholders ] [ Disney ] )",
            "( JOIN ( R [ profit for stockholders ] ) [ Walt Disney Company ] )",
            "( JOIN [ profit for stockholders ] [ The Walt Disney Company ] )"
        ],
        "gen_label": "( JOIN ( R [ total revenue ] ) ( JOIN ( R [ owned by ] ) [ Disneyland ] ) )"
    },
    {
        "question": "Question: { What is Cullum number for James Longstreet? }",
        "predicted_query": [
            "[join] [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\": [{\"join\":",
            "( JOIN ( R [ Cullum number ] ) [ James Longstreet ] )",
            "[join] [has Cullum number] [James Longstreet]",
            "( AND ( JOIN [ JSTOR ID for ] [ Cullum number for James Longstreet ] ) ( JOIN ( R [ ID ] ) [ James Longstreet ] ) )",
            "( JOIN ( R [ Cullum number ] ) [ James Longstreet ] )"
        ],
        "gen_label": "( JOIN ( R [ Cullum number ] ) [ James Longstreet ] )"
    },
    {
        "question": "Question: { What voltage do the outlets in Valledupar put out? }",
        "predicted_query": [
            "( JOIN [ voltage ] [ Valledupar ] )",
            "( JOIN ( R [ voltage ] ) ( JOIN ( R [ powered by ] ) [ Valledupar ] ) )",
            "( JOIN ( R [ electrical outlet voltage ] ) ( JOIN ( R [ located in ] ) [ Valledupar ] ) )",
            "( AND ( JOIN [ has electrical outlet voltage ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Valledupar ] ) )",
            "( JOIN ( R [ electric power system ] ) ( JOIN ( R [ powered by ] ) [ Valledupar ] ) )"
        ],
        "gen_label": "( JOIN ( R [ mains voltage ] ) ( JOIN ( R [ country ] ) [ Valledupar ] ) )"
    },
    {
        "question": "Question: { Which is the Cinémathèque québécoise work identifier of Intolerance? }",
        "predicted_query": [
            "( JOIN ( R [ Cinémathèque québécoise work identifier ] ) [ Intolerance ] )",
            "( JOIN ( R [ Cinémathèque québécoise work identifier ] ) [ Intolerance ] )",
            "( JOIN ( R [ Cinémathèque québécoise work ID ] ) [ Intolerance ] )",
            "( JOIN ( R [ Cinémathèque québécoise film work identifier ] ) [ Intolerance ] )",
            "( AND ( JOIN [ Cinema of Québec work ID ] [ Intolerance (film) ] ) ( JOIN ( R [ ID.net work ID ] ) [ Intolerance ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Cinémathèque québécoise work ID ] ) [ Intolerance ] )"
    },
    {
        "question": "Question: { Which is {diplomatic relation} {state} of {Statue of Zeus at Olympia} ? }",
        "predicted_query": [
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country ] ) [ Statue of Zeus at Olympia ] ) )",
            "( JOIN [ diplomatic relation ] [ Statue of Zeus at Olympia ] )",
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country ] ) [ Statue of Zeus at Olympia ] ) )",
            "( AND ( JOIN [ diplomatic relation ] [ state ] ) ( JOIN ( R [ located in ] ) [ Statue of Zeus at Olympia ] ) )",
            "( JOIN ( R [ diplomatic relations ] ) ( JOIN ( R [ located in ] ) [ Statue of Zeus at Olympia ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country ] ) [ Statue of Zeus at Olympia ] ) )"
    },
    {
        "question": "Question: { What is the Teirstimmenarchiv ID for Bornean orangutan? }",
        "predicted_query": [
            "( JOIN ( R [ Teirstimmenarchiv ID ] ) [ Bornean orangutan ] )",
            "( JOIN ( R [ Teirstimmenarchiv ID ] ) [ Bornean orangutan ] )",
            "( JOIN ( R [ Teirstimmenarchiv ID ] ) [ Bornean orangutan ] )",
            "( JOIN ( R [ Teisterstimmenarchiv ID ] ) [ Bornean orangutan ] )",
            "( AND ( JOIN [ Teirstimmenarchiv ID ] [ Bornean orangutan ] ) [ has taxon ID ] )"
        ],
        "gen_label": "( JOIN ( R [ Tierstimmenarchiv ID ] ) [ Bornean orangutan ] )"
    },
    {
        "question": "Question: { Which is the ACM Classification Code 2012 of computer crime? }",
        "predicted_query": [
            "( JOIN ( R [ ACM Classification Code 2012 ] ) [ computer crime ] )",
            "( JOIN ( R [ ACM Classification Code 2012 ] ) [ computer crime ] )",
            "[]",
            "( JOIN ( R [ ACM Classification Code 2012 ] ) [ computer crime ] )",
            "( JOIN ( R [ ACM Classification Code 2012 ] ) [ computer crime ] )"
        ],
        "gen_label": "( JOIN ( R [ ACM Classification Code ( 2012 ) ] ) [ cybercrime ] )"
    },
    {
        "question": "Question: { WHO PRECEDED THE SET IN LOCATION OF THE RED AND THE BLACK }",
        "predicted_query": [
            "( JOIN ( R [ set in location ] ) ( JOIN ( R [ author ] ) [ The Red and the Black ] ) )",
            "( JOIN ( R [ located in ] ) ( JOIN ( R [ set in ] ) [ Red and the Black ] ) )",
            "( AND ( JOIN [ follows ] [ Red and the Black ] ) ( JOIN ( R [ located in ] ) [ Red and the Black ] ) )",
            "( JOIN [ preceded by ] [ The Red and the Black ] )",
            "( JOIN ( R [ preceded by ] ) ( JOIN ( R [ set in location ] ) [ Red and the Black ] ) )"
        ],
        "gen_label": "( JOIN ( R [ replaces ] ) ( JOIN ( R [ narrative location ] ) [ The Red and the Black ] ) )"
    },
    {
        "question": "Question: { What is the official language of a member of Iran? }",
        "predicted_query": [
            "( JOIN ( R [ official language ] ) ( JOIN ( R [ member of ] ) [ Iran ] ) )",
            "( JOIN [ official language ] [ Iran ] )",
            "( JOIN [ official language ] [ Iran ] )",
            "( JOIN ( R [ official language ] ) ( JOIN ( R [ member of ] ) [ Iran ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Iran ] ) ( JOIN ( R [ official language ] ) [ Iran ] ) )"
        ],
        "gen_label": "( JOIN ( R [ official language ] ) ( JOIN ( R [ member of ] ) [ Iran ] ) )"
    },
    {
        "question": "Question: { What is  geographical feature continent of Kamenný vrch? }",
        "predicted_query": [
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Kamenný vrch ] ) )",
            "( JOIN ( R [ continent ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Kamenný vrch ] ) )",
            "( JOIN ( R [ geographical feature ] ) ( JOIN ( R [ located in ] ) [ Kamenný vrch ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Kamenný vrch ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Kamenný vrch ] ) )",
            "( JOIN [ geographical feature continent ] [ Kamenný vrch ] )"
        ],
        "gen_label": "( JOIN ( R [ located in/on physical feature ] ) ( JOIN ( R [ continent ] ) [ Kamenný vrch ] ) )"
    },
    {
        "question": "Question: { What is SilentEra.com film ID for The Gold Rush ? }",
        "predicted_query": [
            "( JOIN ( R [ SilentEra.com film ID ] ) [ The Gold Rush ] )",
            "[",
            "( JOIN ( R [ Silent Era film ID ] ) [ The Gold Rush ] )",
            "( JOIN ( R [ SilentEra.com film ID ] ) [ The Gold Rush ] )",
            "( JOIN ( R [ SilentEra film ID ] ) [ The Gold Rush ] )"
        ],
        "gen_label": "( JOIN ( R [ SilentEra.com film ID ] ) [ The Gold Rush ] )"
    },
    {
        "question": "Question: { What is the name of a platonic solid, which is of the significant works of Euthydemus? }",
        "predicted_query": [
            "( AND ( JOIN [ notable work ] [ Euthydemus ] ) ( JOIN ( R [ named after ] ) [ platonic solid ] ) )",
            "( JOIN ( R [ named after ] ) ( JOIN ( R [ has part ] ) [ tetrahedron ] ) )",
            "( AND ( JOIN [ notable work ] [ Euthydemus ] ) ( JOIN ( R [ name ] ) [ platonic solid ] ) )",
            "( AND ( JOIN [ significant work ] [ Euthydemus ] ) ( JOIN ( R [ name ] ) [ platonic solid ] ) )",
            "( AND ( JOIN [ notable work ] [ Significant Works of Euthydemus ] ) ( JOIN ( R [ named after ] ) [ platonic solid ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ notable work ] [ Euthydemus ] ) ( JOIN ( R [ named after ] ) [ Platonic solid ] ) )"
    },
    {
        "question": "Question: { What is the NFL ID for George Blanda? }",
        "predicted_query": [
            "( JOIN ( R [ NFL ID ] ) [ George Blanda ] )",
            "( JOIN ( R [ NFL ID ] ) [ George Blanda ] )",
            "( AND ( JOIN [ National Football League ID ] [ George Blanda ] ) ( JOIN ( R [ sports league ID ] ) [ George Blanda ] ) )",
            "[ JOIN [ NFL ID ] [ George Blanda ] ]",
            "( [ JOIN ] [ George Blanda ] )"
        ],
        "gen_label": "( JOIN ( R [ NFL.com player ID ( former scheme ) ] ) [ George Blanda ] )"
    },
    {
        "question": "Question: { Which is partially coincident with chocolate milk? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ chocolate milk ] ) ( JOIN ( R [ has a common border with ] ) [ Guatemala ] ) )",
            "( JOIN [ partially coincident ] [ chocolate milk ] )",
            "( JOIN [ partially coincident with ] [ chocolate milk ] )",
            "( AND ( JOIN [ has common ancestor ] [ chocolate milk ] ) ( JOIN ( R [ has common ancestor ] ) [ cocoa ] ) )",
            "( AND ( JOIN [ shares border with ] [ chocolate milk ] ) ( JOIN ( R [ has a common border with ] ) [ chocolate milk ] ) )"
        ],
        "gen_label": "( JOIN [ partially coincident with ] [ chocolate milk ] )"
    },
    {
        "question": "Question: { What is the biological sex of Pandukabhaya of Anuradhapua whose antonym is female? }",
        "predicted_query": [
            "( AND ( JOIN [ antonym ] [ female ] ) ( JOIN ( R [ sex ] ) [ Pandukabhaya of Anuradhapura ] ) )",
            "( AND ( JOIN [ opposite of ] [ female ] ) ( JOIN ( R [ sex ] ) [ Pandukabhaya of Anuradhapura ] ) )",
            "( AND ( JOIN [ opposite of ] [ female ] ) ( JOIN ( R [ biological sex ] ) [ Pandukabhaya of Anuradhapura ] ) )",
            "( AND ( JOIN [ antonym ] [ female ] ) ( JOIN ( R [ biological sex ] ) [ Pandukabhaya of Anuradhapura ] ) )",
            "( AND ( JOIN [ converse of ] [ female ] ) ( JOIN ( R [ biological sex ] ) [ Pandukabhaya ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ opposite of ] [ female ] ) ( JOIN ( R [ sex or gender ] ) [ Pandukabhaya of Anuradhapura ] ) )"
    },
    {
        "question": "Question: { What is the NALT ID for β-lactose? }",
        "predicted_query": [
            "( JOIN ( R [ NALT ID ] ) [ β-lactose ] )",
            "( JOIN ( R [ NALT taxon ID ] ) [ β-lactose ] )",
            "( AND ( JOIN [ National Animal and Plant Taxonomy Initiative taxon ID ] [ β-lactose ] ) ( JOIN ( R [ has taxon ID in ] ) [ β-lactose ] ) )",
            "( JOIN ( R [ NALT ID ] ) [ β-lactose ] )",
            "( JOIN [ NALT ID ] [ β-lactose ] )"
        ],
        "gen_label": "( JOIN ( R [ NALT ID ] ) [ β-lactose ] )"
    },
    {
        "question": "Question: { What is the number of objects in the museum collection of The Garden of Earthly Delights? }",
        "predicted_query": [
            "( JOIN ( R [ number of objects in the museum collection ] ) [ The Garden of Earthly Delights ] )",
            "( JOIN ( R [ number of items in collection ] ) [ The Garden of Earthly Delights ] )",
            "( JOIN [ number of objects in the museum collection ] [ The Garden of Earthly Delights ] )",
            "( JOIN ( R [ number of items in collection ] ) [ The Garden of Earthly Delights ] )",
            "( JOIN ( R [ number of objects ] ) [ The Garden of Earthly Delights ] )"
        ],
        "gen_label": "( JOIN ( R [ collection or exhibition size ] ) ( JOIN ( R [ collection ] ) [ The Garden of Earthly Delights ] ) )"
    },
    {
        "question": "Question: { What is the subcellular localization code for Cdc42se2? }",
        "predicted_query": [
            "( JOIN ( R [ subcellular localization code ] ) [ Cdc42se2 ] )",
            "( JOIN ( R [ subcellular localization code ] ) [ Cdc42se2 ] )",
            "( AND ( JOIN [ has subcellular localization code ] ) ( JOIN ( R [ protein accession number ] ) [ Cdc42se2 ] ) )",
            "( JOIN [ subcellular localization code ] [ Cdc42se2 ] )",
            "( JOIN ( R [ has subcellular localization code ] ) [ CDC42SE2 ] )"
        ],
        "gen_label": "( JOIN ( R [ cell component ] ) ( JOIN ( R [ encodes ] ) [ Cdc42se2 ] ) )"
    },
    {
        "question": "Question: { Which is the Library of Congress authority ID of George Albert Boulenger? }",
        "predicted_query": [
            "( JOIN ( R [ Library of Congress authority ID ] ) [ George Albert Boulenger ] )",
            "( JOIN ( R [ library of congress authority ID ] ) [ George Albert Boulenger ] )",
            "( [ JOIN ] [ library of congress authority ID ] )",
            "( JOIN ( R [ library of congress authority ID ] ) [ George Albert Boulenger ] )",
            "( JOIN ( R [ Library of Congress authority ID ] ) [ George Albert Boulenger ] )"
        ],
        "gen_label": "( JOIN ( R [ Library of Congress authority ID ] ) [ George Albert Boulenger ] )"
    },
    {
        "question": "Question: { What borough in the Straight of Magellan is adjacent to the Tierra del Fuego Province? }",
        "predicted_query": [
            "( AND ( JOIN [ shares border with ] [ Tierra del Fuego Province ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Strait of Magellan ] ) )",
            "( AND ( JOIN [ shares border with ] [ Tierra del Fuego Province ] ) ( JOIN ( R [ adjacent to ] ) [ Strait of Magellan ] ) )",
            "( AND ( JOIN [ adjacent to ] [ Tierra del Fuego Province ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Strait of Magellan ] ) )",
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Strait of Magellan ] ) )",
            "( JOIN ( R [ bordering body of water ] ) ( JOIN ( R [ adjacent to ] ) [ Tierra del Fuego Province ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ shares border with ] [ Tierra del Fuego, Antarctica and South Atlantic Islands Province ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Strait of Magellan ] ) )"
    },
    {
        "question": "Question: { Who is the {immunology} {specialist} that {developed} {penicillin}? }",
        "predicted_query": [
            "( AND ( JOIN [ field of work ] [ immunology ] ) ( JOIN ( R [ developed by ] ) [ penicillin ] ) )",
            "( JOIN ( R [ specialty ] ) ( JOIN ( R [ developed by ] ) [ penicillin ] ) )",
            "( AND ( JOIN [ field of specialization ] [ immunology ] ) ( JOIN ( R [ developed by ] ) [ penicillin ] ) )",
            "( AND ( JOIN [ field of medicine ] [ immunology ] ) ( JOIN ( R [ discoverer or inventor ] ) [ penicillin ] ) )",
            "( JOIN ( R [ medical specialty ] ) ( JOIN ( R [ developed by ] ) [ penicillin ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ field of work ] [ immunology ] ) ( JOIN ( R [ discoverer or inventor ] ) [ penicillin ] ) )"
    },
    {
        "question": "Question: { What is the ARICNS for Fomalhaut? }",
        "predicted_query": [
            "( JOIN ( R [ ARICNS ] ) [ Fomalhaut ] )",
            "( JOIN ( R [ ARICNS ] ) [ Fomalhaut ] )",
            "( JOIN ( R [ ARIANS ] ) [ Fomalhaut ] )",
            "( JOIN [ ARICNS ] [ Fomalhaut ] )",
            "( [ joined by ] [ Fomalhaut ] )"
        ],
        "gen_label": "( JOIN ( R [ ARICNS ] ) [ Fomalhaut ] )"
    },
    {
        "question": "Question: { Which is NLBPA ID for Hank Aaron? }",
        "predicted_query": [
            "( JOIN ( R [ NLBPA ID ] ) [ Hank Aaron ] )",
            "( JOIN ( R [ National Basketball Players Association ID ] ) [ Hank Aaron ] )",
            "( JOIN ( R [ NBA player ID ] ) [ Hank Aaron ] )",
            "( JOIN ( R [ NLBPA ID ] ) [ Hank Aaron ] )",
            "( JOIN [ NLBPA ID ] [ Hank Aaron ] )"
        ],
        "gen_label": "( JOIN ( R [ NLBPA ID ] ) [ Hank Aaron ] )"
    },
    {
        "question": "Question: { which fax number of Federal Communications Commission ? }",
        "predicted_query": [
            "( JOIN ( R [ fax number ] ) [ Federal Communications Commission ] )",
            "( JOIN [ fax number ] [ Federal Communications Commission ] )",
            "( JOIN ( R [ facsimile number ] ) [ Federal Communications Commission ] )",
            "{ JOIN [ facsimile number ] [ Federal Communications Commission ] }",
            "( JOIN ( JOIN ( R [ facsimile number ] ] ) [ Federal Communications Commission ] )"
        ],
        "gen_label": "( JOIN ( R [ fax number ] ) [ Federal Communications Commission ] )"
    },
    {
        "question": "Question: { Which is the Carnegie Hall work ID for Hungarian Rhapsody No.2 ? }",
        "predicted_query": [
            "( JOIN ( R [ Carnegie Hall work ID ] ) [ Hungarian Rhapsody No. 2 ] )",
            "( JOIN ( R [ Carnegie Hall work ID ] ) [ Hungarian Rhapsody No. 2 ] )",
            "( AND ( JOIN [ work ID ] [ Hungarian Rhapsody No. 2 ] ) ( JOIN ( R [ question ] ) [ What is the Carnegie Hall work ID for Hungarian Rhapsody No. 2? ] ) )",
            "( JOIN ( R [ Carnegie Hall work ID ] ) [ Hungarian Rhapsody No. 2 ] )",
            "( JOIN ( R [ Carnegie Hall Work ID ] ) [ Hungarian Rhapsody No.2 ] )"
        ],
        "gen_label": "( JOIN ( R [ Carnegie Hall work ID ] ) [ Hungarian Roidy No. 2 ] )"
    },
    {
        "question": "Question: { Tell me the sector of product of Astana-bike. }",
        "predicted_query": [
            "( JOIN ( R [ industry ] ) ( JOIN ( R [ product ] ) [ Astana-bike ] ) )",
            "( JOIN ( R [ industry ] ) ( JOIN ( R [ product or service ] ) [ Astana-bike ] ) )",
            "( JOIN ( R [ sector of product ] ) [ Astana-bike ] )",
            "( JOIN [ sector of product ] [ Astana-bike ] )",
            "( JOIN ( R [ industry or sector of activity ] ) ( JOIN ( R [ product or service ] ) [ Astana-bike ] ) )"
        ],
        "gen_label": "( JOIN ( R [ industry ] ) ( JOIN ( R [ manufacturer ] ) [ Astana-bike ] ) )"
    },
    {
        "question": "Question: { which  Avibase ID of house sparrow ? }",
        "predicted_query": [
            "( JOIN ( R [ Avibase taxonomy ID ] ) [ house sparrow ] )",
            "( JOIN ( R [ Avibase ID ] ) [ house sparrow ] )",
            "( JOIN ( R [ Avibase species code ] ) [ house sparrow ] )",
            "( JOIN [ Avibase ID ] [ house sparrow ] )",
            "( AND ( JOIN [ Avibase taxon ID ] [ House sparrow ] ) ( JOIN ( R [ ID ] ) [ House sparrow ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Avibase taxon ID ] ) [ House Sparrow ] )"
    },
    {
        "question": "Question: { What are the production statistics for the ivory coast? }",
        "predicted_query": [
            "( JOIN ( R [ production statistics ] ) [ Ivory Coast ] )",
            "( JOIN [ production statistics ] [ Ivory Coast ] )",
            "( JOIN ( R [ production statistics ] ) [ Ivory Coast ] )",
            "( AND ( JOIN [ produces ] [ Ivory Coast ] ) ( JOIN ( R [ produced by ] ) [ Ivory Coast ] ) )",
            "( JOIN ( R [ production statistic ] ) [ Ivory Coast ] )"
        ],
        "gen_label": "( JOIN ( R [ production statistics ] ) [ Ivory Coast ] )"
    },
    {
        "question": "Question: { What is Ricorso author ID for James Joyce ? }",
        "predicted_query": [
            "( JOIN ( R [ Ricorso author ID ] ) [ James Joyce ] )",
            "( JOIN ( R [ author ID in Ricorso ] ) [ James Joyce ] )",
            "[ JOIN ( R [ author ID ] ) [ James Joyce ] ]",
            "[declaration] JOIN [Ricorso author ID] [James Joyce]",
            "( [ joined by ] [ Ricorso author ID ] [ James Joyce ] )"
        ],
        "gen_label": "( JOIN ( R [ Ricorso author ID ] ) [ James Joyce ] )"
    },
    {
        "question": "Question: { What is Malmo's Swedish urban area code? }",
        "predicted_query": [
            "( JOIN ( R [ Swedish urban area code ] ) [ Malmö ] )",
            "( JOIN ( R [ urban area code ] ) [ Malmö ] )",
            "( JOIN ( R [ telephone area code ] ) [ Malmö ] )",
            "( JOIN [ Swedish urban area code ] [ Malmö ] )",
            "( AND ( JOIN [ telephone area code ] [ Malmö ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Malmö ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Swedish urban area code ] ) [ Malmö ] )"
    },
    {
        "question": "Question: { Who is the leader of the Robert A. Heinlein award? }",
        "predicted_query": [
            "( JOIN ( R [ leader ] ) ( JOIN ( R [ award received ] ) [ Robert A. Heinlein ] ) )",
            "( [ joined ] [ winner ] [ Robert A. Heinlein Award ] )",
            "[ ( JOIN [ leader ] [ Robert A. Heinlein Award ] )  ]",
            "( JOIN ( R [ head of government ] ) ( JOIN ( R [ award received ] ) [ Robert A. Heinlein Award ] ) )",
            "( JOIN ( R [ awarded to ] ) ( JOIN ( R [ leader ] ) [ Robert A. Heinlein Award ] ) )"
        ],
        "gen_label": "( JOIN ( R [ winner ] ) ( JOIN ( R [ award received ] ) [ Robert A. Heinlein ] ) )"
    },
    {
        "question": "Question: { Who are the daughters that were written by The Meaning of Matthew? }",
        "predicted_query": [
            "( JOIN [ author ] [ The Meaning of Matthew ] )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ author ] ) [ The Meaning of Matthew ] ) )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ author ] ) [ The Meaning of Matthew ] ) )",
            "( JOIN ( R [ has literary work ] ) ( JOIN ( R [ author ] ) [ The Meaning of Matthew ] ) )",
            "( AND ( JOIN [ author ] [ The Meaning of Matthew ] ) ( JOIN ( R [ child ] ) [ Matthew ] ) )"
        ],
        "gen_label": "( JOIN ( R [ child ] ) ( JOIN ( R [ author ] ) [ The Meaning of Matthew ] ) )"
    },
    {
        "question": "Question: { Which is the Google Play Music artist ID for Tim McGraw? }",
        "predicted_query": [
            "[ ( JOIN ( JOIN ( R [ artist ] ) [ Tim McGraw ] ) ) ]",
            "( JOIN ( R [ Google Play Music artist ID ] ) [ Tim McGraw ] )",
            "( JOIN [ Google Play Music artist ID ] [ Tim McGraw ] )",
            "( JOIN ( R [ Google Play Music artist ID ] ) [ Tim McGraw ] )",
            "( JOIN ( R [ Google Play Music artist ID ] ) [ Tim McGraw ] )"
        ],
        "gen_label": "( JOIN ( R [ Google Play Music artist ID ( former scheme ) ] ) [ Tim McGraw ] )"
    },
    {
        "question": "Question: { What is Jamie Whincup's personal name that is said to be different from Jakov? }",
        "predicted_query": [
            "( AND ( JOIN [ different name ] [ Jakov ] ) ( JOIN ( R [ given name ] ) [ Jamie Whincup ] ) )",
            "( AND ( JOIN [ different from ] [ Jakov ] ) ( JOIN ( R [ given name ] ) [ Jamie Whincup ] ) )",
            "( AND ( JOIN [ has different name ] [ Jakov ] ) ( JOIN ( R [ given name ] ) [ Jamie Whincup ] ) )",
            "( JOIN ( R [ name ] ) ( JOIN ( R [ different name ] ) [ Jakov Whincup ] ) )",
            "( JOIN ( R [ different from ] ) ( JOIN ( R [ given name ] ) [ Jakov ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ said to be the same as ] [ Yakov ] ) ( JOIN ( R [ given name ] ) [ Jamie Whincup ] ) )"
    },
    {
        "question": "Question: { Which is Artists in Canada record number of Leonard Cohen? }",
        "predicted_query": [
            "( JOIN ( R [ Artists in Canada record number ] ) [ Leonard Cohen ] )",
            "",
            "( JOIN [ Artists in Canada record number ] [ Leonard Cohen ] )",
            "[Challenge/Rewards]",
            "( AND ( JOIN [ Record ID ] [ Artists in Canada ] ) ( JOIN ( R [ ID ] ) [ Leonard Cohen ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Artists in Canada record number ] ) [ Leonard Cohen ] )"
    },
    {
        "question": "Question: { who sidekick  of has kids of talia al ghul ? }",
        "predicted_query": [
            "( AND ( JOIN [ child ] [ Talia al Ghul ] ) ( JOIN ( R [ character ] ) [ Robin ] ) )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ sibling ] ) [ Talia al Ghul ] ) )",
            "( AND ( JOIN [ parent of ] [ Talia al Ghul ] ) ( JOIN ( R [ child ] ) [ Batman ] ) )",
            "( JOIN ( R [ has child ] ) ( JOIN ( R [ sibling ] ) [ Talia al Ghul ] ) )",
            "( AND ( JOIN [ child ] [ Talia al Ghul ] ) ( JOIN ( R [ partner ] ) [ Batman ] ) )"
        ],
        "gen_label": "( JOIN ( R [ sidekick of ] ) ( JOIN ( R [ child ] ) [ Talia al Ghul ] ) )"
    },
    {
        "question": "Question: { Which  is Oklahoma Sports Hall of Fame ID of T. Boone Pickens ? }",
        "predicted_query": [
            "( JOIN ( R [ Oklahoma Sports Hall of Fame ID ] ) [ T. Boone Pickens ] )",
            "( JOIN ( R [ Oklahoma Sports Hall of Fame ID ] ) [ T. Boone Pickens ] )",
            "( JOIN ( R [ Oklahoma Sports Hall of Fame athlete ID ] ) [ T. Boone Pickens ] )",
            "[ JOIN ( R [ Oklahoma Sports Hall of Fame ID ] ) [ T. Boone Pickens ] ]",
            "( JOIN ( R [ Oklahoma Sports Hall of Fame ID ] ) [ T. Boone Pickens ] )"
        ],
        "gen_label": "( JOIN ( R [ Oklahoma Sports Hall of Fame ID ( dead link ) ] ) [ T. Boone Pickens ] )"
    },
    {
        "question": "Question: { What is the party and ideology of Vladimir Ovsyannikov? }",
        "predicted_query": [
            "( JOIN [ party and ideology ] [ Vladimir Ovsyannikov ] )",
            "( JOIN ( R [ political party and ideology ] ) ( JOIN ( R [ member of political party ] ) [ Vladimir Ovsyannikov ] ) )",
            "[ JOIN [ political party ] ] [ Vladimir Ovsyannikov ]",
            "( JOIN ( R [ party and ideology ] ) [ Vladimir Ovsyannikov ] )",
            "( JOIN ( R [ member of political party ] ) ( JOIN ( R [ political party or ideology ] ) [ Vladimir Ovsyannikov ] ) )"
        ],
        "gen_label": "( JOIN ( R [ political ideology ] ) ( JOIN ( R [ member of political party ] ) [ Vladimir Ovsyannikov ] ) )"
    },
    {
        "question": "Question: { What is the county seat where the principal office of the International Council on Monuments and Sites is located? }",
        "predicted_query": [
            "( AND ( JOIN [ capital of ] [ International Council on Monuments and Sites ] ) ( JOIN ( R [ headquarters location ] ) [ International Council on Monuments and Sites ] ) )",
            "( JOIN ( R [ capital ] ) ( JOIN ( R [ headquarters location ] ) [ International Council on Monuments and Sites ] ) )",
            "( JOIN [ capital city ] [ International Council on Monuments and Sites ] ) AND ( JOIN ( R [ located in the administrative territorial entity ] ) [ International Council on Monuments and Sites ] )",
            "( AND ( JOIN [ seat ] [ county seat ] ) ( JOIN ( R [ headquarters location ] ) [ International Council on Monuments and Sites ] ) )",
            "( JOIN ( R [ capital ] ) ( JOIN ( R [ headquarter location ] ) [ International Council on Monuments and Sites ] ) )"
        ],
        "gen_label": "( JOIN ( R [ capital of ] ) ( JOIN ( R [ headquarters location ] ) [ International Council on Monuments and Sites ] ) )"
    },
    {
        "question": "Question: { Which is the Libraries.org ID for Bibliothèque nationale de France? }",
        "predicted_query": [
            "( JOIN ( R [ Libraries.org ID ] ) [ Bibliothèque nationale de France ] )",
            "( JOIN ( R [ Libraries.org ID ] ) [ Bibliothèque",
            "( JOIN ( R [ libraries.org ID ] ) [ Bibliothèque nationale de France ] )",
            "( JOIN ( R [ Libraries.org ID ] ) [ Bibliothèque nationale de France ] )",
            "( JOIN ( R [ Libraries.org ID ] ) [ Bibliothèque nationale de France ] )"
        ],
        "gen_label": "( JOIN ( R [ Libraries.org ID ] ) [ Bibliothèque nationale de France ] )"
    },
    {
        "question": "Question: { What is the Time Zone of administrative headquarters taungoo dyansty? }",
        "predicted_query": [
            "( JOIN ( R [ time zone ] ) ( JOIN ( R [ capital ] ) [ Taungoo dynasty ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Taungoo Dynasty ] ) ( JOIN ( R [ time zone ] ) [ Taungoo Dynasty ] ) )",
            "( JOIN [ time zone ] [ Taungoo Dynasty ] )",
            "( JOIN ( R [ time zone ] ) ( JOIN ( R [ headquarters location ] ) [ Taungoo dynasty ] ) )",
            "( JOIN ( R [ time zone ] ) ( JOIN ( R [ administrative territorial entity ] ) [ Taungoo dynasty ] ) )"
        ],
        "gen_label": "( JOIN ( R [ located in time zone ] ) ( JOIN ( R [ capital ] ) [ Taungoo dynasty ] ) )"
    },
    {
        "question": "Question: { vehicles per capit in shanghai }",
        "predicted_query": [
            "( JOIN ( R [ vehicles per capita ] ) [ Shanghai ] )",
            "( JOIN ( R [ number of vehicles per capita ] ) [ Shanghai ] )",
            "( JOIN [ vehicles per capita ] [ Shanghai ] )",
            "( JOIN ( R [ vehicles per capita ] ) [ Shanghai ] )",
            "( AND ( JOIN [ population ] [ Shanghai ] ) ( JOIN ( R [ vehicles per capita ] ) [ Shanghai ] ) )"
        ],
        "gen_label": "( JOIN ( R [ vehicles per thousand people ] ) [ Shanghai ] )"
    },
    {
        "question": "Question: { who sons of portrait of antinous Osiris? }",
        "predicted_query": [
            "( JOIN ( R [ son ] ) ( JOIN ( R [ depicts ] ) [ Antinous ] ) )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ depicts ] ) [ Antinous ] ) )",
            "( AND ( JOIN [ parent of ] [ Osiris ] ) ( JOIN ( R [ child ] ) [ Antinous ] ) )",
            "( JOIN [ son ] [ Osiris ] ) ( JOIN ( R [ depicts ] ) [ Antinous ] )",
            "( AND ( JOIN [ child ] [ Osiris ] ) ( JOIN ( R [ depicts ] ) [ Antinous ] ) )"
        ],
        "gen_label": "( JOIN ( R [ child ] ) ( JOIN ( R [ depicts ] ) [ Antinous-Osiris ] ) )"
    },
    {
        "question": "Question: { Which is the British Museum person-institution for Henry Lawson? }",
        "predicted_query": [
            "( JOIN ( R [ British Museum person-institution ] ) [ Henry Lawson ] )",
            "( JOIN ( R [ British Museum person ID ] ) [ Henry Lawson ] )",
            "( AND ( JOIN [ person-institution ] [ British Museum ] ) ( JOIN ( R [ follower ] ) [ Henry Lawson ] ) )",
            "( JOIN [ person-institution ] [ Henry Lawson ] )",
            "( JOIN ( R [ British Museum person-institution ID ] ) [ Henry Lawson ] )"
        ],
        "gen_label": "( JOIN ( R [ British Museum person or institution ID ] ) [ Henry Lawson ] )"
    },
    {
        "question": "Question: { What is professional or sports partner for giovanni falcone? }",
        "predicted_query": [
            "( JOIN ( R [ professional or sports partner ] ) ( JOIN ( R [ member of ] ) [ Giovanni Falcone ] ) )",
            "( JOIN ( R [ sports partner ] ) ( JOIN ( R [ occupation ] ) [ Giovanni Falcone ] ) )",
            "( AND ( JOIN [ sport or professional field ] [ Giovanni Falcone ] ) ( JOIN ( R [ member of ] ) [ Giovanni Falcone ] ) )",
            "( JOIN [ professional or sports partner ] [ Giovanni Falcone ] )",
            "( JOIN ( R [ partner ] ) ( JOIN ( R [ occupation ] ) [ Giovanni Falcone ] ) )"
        ],
        "gen_label": "( JOIN [ partner in business or sport ] [ Giovanni Falcone ] )"
    },
    {
        "question": "Question: { Which is produced by petroleum? }",
        "predicted_query": [
            "( JOIN ( R [ produced by ] ) [ petroleum ] )",
            "( JOIN [ produces ] [ petroleum ] )",
            "( JOIN [ produced by ] [ petroleum ] )",
            "( JOIN ( R [ product of ] ) ( JOIN ( R [ produced by ] ) [ petroleum ] ) )",
            "( AND ( JOIN [ produces ] [ petroleum ] ) ( JOIN ( R [ product of ] ) [ petroleum ] ) )"
        ],
        "gen_label": "( JOIN [ produced by ] [ petroleum ] )"
    },
    {
        "question": "Question: { What contributing factor does toast have? }",
        "predicted_query": [
            "( AND ( JOIN [ has ] [ toast ] ) ( JOIN ( R [ has effect ] ) [ toast ] ) )",
            "( JOIN [ has contributing factor ] [ toast ] )",
            "( JOIN ( R [ has effect ] ) ( JOIN ( R [ product or service provided ] ) [ toast ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ toast ] ) ( JOIN ( R [ has effect ] ) [ toast ] ) )",
            "( JOIN [ has contributing factor ] [ toast ] )"
        ],
        "gen_label": "( JOIN ( R [ has contributing factor ] ) [ toast ] )"
    },
    {
        "question": "Question: { Who owns The Storm on the Sea of Galilee? }",
        "predicted_query": [
            "( JOIN ( R [ owned by ] ) ( JOIN ( R [ location ] ) [ The Storm on the Sea of Galilee ] ) )",
            "[ JOIN [ owned by ] [ The Storm on the Sea of Galilee ] ]",
            "( JOIN ( R [ owner ] ) ( JOIN ( R [ location ] ) [ The Storm on the Sea of Galilee ] ) )",
            "( JOIN ( R [ owner ] ) [ The Storm on the Sea of Galilee ] )",
            "( JOIN ( R [ owned by ] ) ( JOIN ( R [ subject of ] ) [ The Storm on the Sea of Galilee ] ) )"
        ],
        "gen_label": "( JOIN [ owner of ] [ The Storm on the Sea of Galilee ] )"
    },
    {
        "question": "Question: { who is published of Physical Review ? }",
        "predicted_query": [
            "( JOIN ( R [ publisher ] ) ( JOIN ( R [ author ] ) [ Physical Review ] ) )",
            "( JOIN [ published by ] [ Physical Review ] )",
            "( JOIN [ publisher ] [ Physical Review ] )",
            "( JOIN ( R [ published in journal ] ) ( JOIN ( R [ publisher ] ) [ Physical Review ] ) )",
            "( JOIN ( R [ publisher ] ) ( JOIN ( R [ publisher ] ) [ Physical Review ] ) )"
        ],
        "gen_label": "( JOIN [ published in ] [ Physical Review ] )"
    },
    {
        "question": "Question: { Which is the shape of dome? }",
        "predicted_query": [
            "( JOIN ( R [ shape ] ) [ dome ] )",
            "( JOIN [ shape ] [ dome ] )",
            "( JOIN [ has shape ] [ dome ] )",
            "[ JOIN ( [ shape ] ) [ dome ] ]",
            "[ JOIN ( [ has shape ] ) [ domed ] ]"
        ],
        "gen_label": "( JOIN [ shape ] [ dome ] )"
    },
    {
        "question": "Question: { Who is the facility operator of Atlas Air? }",
        "predicted_query": [
            "( JOIN ( R [ facility operator ] ) [ Atlas Air ] )",
            "( JOIN ( R [ operator ] ) [ Atlas Air ] )",
            "( JOIN ( R [ operator ] ) ( JOIN ( R [ operator of ] ) [ Atlas Air ] ) )",
            "( JOIN [ facility operator ] [ Atlas Air ] )",
            "( JOIN [ operator ] [ Atlas Air ] )"
        ],
        "gen_label": "( JOIN ( R [ operator ] ) ( JOIN ( R [ item operated ] ) [ Atlas Air ] ) )"
    },
    {
        "question": "Question: { Name the developer of Fresnel lens, who graduated from Lycee Malherbe. }",
        "predicted_query": [
            "( AND ( JOIN [ alumni ] [ Lycée Malherbe ] ) ( JOIN ( R [ developer ] ) [ Fresnel lens ] ) )",
            "( AND ( JOIN [ graduate ] [ Lycee Malherbe ] ) ( JOIN ( R [ developer ] ) [ Fresnel lens ] ) )",
            "( AND ( JOIN [ graduated from ] [ Lycée Malherbe ] ) ( JOIN ( R [ inventor or designer ] ) [ Fresnel lens ] ) )",
            "( AND ( JOIN [ educated at ] [ Lycée Malherbe ] ) ( JOIN ( R [ developer ] ) [ Fresnel lens ] ) )",
            "( JOIN ( R [ developer ] ) ( JOIN ( R [ educated at ] ) [ Fresnel lens ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ educated at ] [ Lycée Malherbe ] ) ( JOIN ( R [ discoverer or inventor ] ) [ Fresnel lens ] ) )"
    },
    {
        "question": "Question: { What city is the twin city of Oslo and also the setting for \"A Tree Grows in Brooklyn\" }",
        "predicted_query": [
            "( AND ( JOIN [ twinned administrative body ] [ Oslo ] ) ( JOIN ( R [ location ] ) [ A Tree Grows in Brooklyn ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Oslo ] ) ( JOIN ( R [ setting ] ) [ A Tree Grows in Brooklyn ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Oslo ] ) ( JOIN ( R [ setting ] ) [ A Tree Grows in Brooklyn ] ) )",
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ setting ] ) [ A Tree Grows in Brooklyn ] ) )",
            "( JOIN ( R [ twin city ] ) ( JOIN ( R [ setting ] ) [ A Tree Grows in Brooklyn ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ twinned administrative body ] [ Oslo ] ) ( JOIN ( R [ narrative location ] ) [ A Tree Grows in Brooklyn ] ) )"
    },
    {
        "question": "Question: { Which {exchange} is {developed by} {File Allocation Table} ? }",
        "predicted_query": [
            "( JOIN ( R [ developed by ] ) ( JOIN ( R [ file system ] ) [ FAT ] ) )",
            "( JOIN ( R [ exchange ] ) ( JOIN ( R [ developer ] ) [ FAT ] ) )",
            "( JOIN ( R [ developed by ] ) ( JOIN ( R [ file system ] ) [ File Allocation Table ] ) )",
            "( AND ( JOIN [ developer or designer ] [ File Allocation Table ] ) ( JOIN ( R [ question ] ) [ What is the file system of the Amiga? ] ) )",
            "( JOIN ( R [ developer ] ) ( JOIN ( R [ file system ] ) [ FAT ] ) )"
        ],
        "gen_label": "( JOIN ( R [ stock exchange ] ) ( JOIN ( R [ developer ] ) [ File Allocation Table ] ) )"
    },
    {
        "question": "Question: { Which is the tonality of atonality? }",
        "predicted_query": [
            "( JOIN ( R [ tonality ] ) [ atonality ] )",
            "[ JOIN ( R [ joined by ] ) [ tonality ] ]",
            "( JOIN [ tonality ] [ atonality ] )",
            "( AND ( JOIN [ musical key or mode ] [ atonality ] ) ( JOIN ( R [ follows ] ) [ atonality ] ) )",
            "( JOIN [ tonality ] [ atonality ] )"
        ],
        "gen_label": "( JOIN [ tonality ] [ atonality ] )"
    },
    {
        "question": "Question: { Who is the singer in the series of Bone Palace Ballet? }",
        "predicted_query": [
            "( JOIN ( R [ performer ] ) ( JOIN ( R [ part of the series ] ) [ Bone Palace Ballet ] ) )",
            "( JOIN ( R [ singer ] ) ( JOIN ( R [ part of the series ] ) [ Bone Palace Ballet ] ) )",
            "[The History of the Decline and Fall of the Roman Empire]",
            "[Challenge/Question History]",
            "( AND ( JOIN [ series or film ] [ Bone Palace Ballet ] ) ( JOIN ( R [ performer ] ) [ Bone Palace Ballet ] ) )"
        ],
        "gen_label": "( JOIN ( R [ performer ] ) ( JOIN ( R [ followed by ] ) [ Bone Palace Ballet ] ) )"
    },
    {
        "question": "Question: { Oslo Opera House has a Kulturminne ID of what? }",
        "predicted_query": [
            "( JOIN ( R [ Kulturminne ID ] ) [ Oslo Opera House ] )",
            "( JOIN ( R [ culture or artwork ID ] ) [ Oslo Opera House ] )",
            "( JOIN ( R [ Kulturminne ID ] ) ( JOIN ( R [ located in ] ) [ Oslo Opera House ] ) )",
            "( AND ( JOIN [ ID in Kulturminne database ] [ Oslo Opera House ] ) [ Kulturminne database ID ] )",
            "( JOIN ( R [ Kulturminne ID ] ) [ Oslo Opera House ] )"
        ],
        "gen_label": "( JOIN ( R [ Kulturminne ID ] ) [ Oslo Opera House ] )"
    },
    {
        "question": "Question: { Which musician's sequel is Amos Moses? }",
        "predicted_query": [
            "( JOIN ( R [ sequel ] ) [ Amos Moses ] )",
            "( JOIN ( R [ has sequel ] ) [ Amos Moses ] )",
            "( AND ( JOIN [ follow-up work ] [ Amos Moses ] ) ( JOIN ( R [ composer ] ) [ Amos Moses ] ) )",
            "( JOIN [ sequel ] [ Amos Moses ] )",
            "( AND ( JOIN [ has sequel ] [ Amos Moses ] ) ( JOIN ( R [ composer ] ) [ Amos Moses ] ) )"
        ],
        "gen_label": "( JOIN ( R [ performer ] ) ( JOIN ( R [ followed by ] ) [ Amos Moses ] ) )"
    },
    {
        "question": "Question: { Which is the LOINC ID of the body mass index? }",
        "predicted_query": [
            "( JOIN ( R [ LOINC ID ] ) [ body mass index ] )",
            "( JOIN [ LOINC ID ] [ body mass index ] )",
            "### Supplement",
            "( JOIN ( R [ LOINC ID ] ) [ body mass index ] )",
            "( JOIN ( R [ LOINC ] ) [ body mass index ] )"
        ],
        "gen_label": "( JOIN ( R [ LOINC ID ] ) [ body mass index ] )"
    },
    {
        "question": "Question: { Where did the painters of Takaka: night and day reside? }",
        "predicted_query": [
            "( JOIN ( R [ location ] ) ( JOIN ( R [ place of work ] ) [ Takaka: night and day ] ) )",
            "( JOIN [ place of residence ] [ Takaka: night and day ] )",
            "( JOIN ( R [ place of work ] ) ( JOIN ( R [ place of work ] ) [ Takaka: night and day ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Takaka ] ) ( JOIN ( R [ place of work ] ) [ Takaka: night and day ] ) )",
            "( AND ( JOIN [ location of work ] [ Takaka: night and day ] ) ( JOIN ( R [ place of death ] ) [ Takaka: night and day ] ) )"
        ],
        "gen_label": "( JOIN ( R [ employer ] ) ( JOIN ( R [ creator ] ) [ Takaka: night and day ] ) )"
    },
    {
        "question": "Question: { What is Scandinavian Airlines' CVR number? }",
        "predicted_query": [
            "( JOIN ( R [ Civil Aviation Authority registration number ] ) [ Scandinavian Airlines ] )",
            "( JOIN ( R [ CAA registration number ] ) [ Scandinavian Airlines ] )",
            "( JOIN ( R [ Scandinavian Airlines' CVR number ] ) [ Scandinavian Airlines ] )",
            "[ JOIN [ CVR number ] [ Scandinavian Airlines ] ]",
            "( AND ( JOIN [ ICAO airline code ] [ SAS ] ) ( JOIN ( R [ registration number ] ) [ Scandinavian Airlines ] ) )"
        ],
        "gen_label": "( JOIN ( R [ CVR number ] ) [ Scandinavian Airlines ] )"
    },
    {
        "question": "Question: { Which is {afflicts} of {outcome} of {dichlorodifluoromethane} ? }",
        "predicted_query": [
            "( JOIN [ afflicts ] [ dichlorodifluoromethane ] )",
            "( JOIN ( R [ affected by ] ) ( JOIN ( R [ has effect ] ) [ dichlorodifluoromethane ] ) )",
            "",
            "( JOIN [ affects ] [ dichlorodifluoromethane ] )",
            "( AND ( JOIN [ has adverse effect ] [ dichlorodifluoromethane ] ) ( JOIN ( R [ affected by ] ) [ dichlorodifluoromethane ] ) )"
        ],
        "gen_label": "( JOIN ( R [ afflicts ] ) ( JOIN ( R [ has effect ] ) [ dichlorodifluoromethane ] ) )"
    },
    {
        "question": "Question: { Which is the birth year of the discoverer of law of superposition? }",
        "predicted_query": [
            "( JOIN ( R [ year of discovery ] ) ( JOIN ( R [ discoverer ] ) [ law of superposition ] ) )",
            "( JOIN ( R [ discovered by ] ) ( JOIN ( R [ discoverer ] ) [ law of superposition ] ) )",
            "( AND ( JOIN [ follows from ] [ law of superposition ] ) ( JOIN ( R [ discoverer ] ) [ law of superposition ] ) )",
            "( JOIN ( R [ discoverer ] ) ( JOIN ( R [ follows ] ) [ law of superposition ] ) )",
            "( JOIN [ discoverer ] [ law of superposition ] )"
        ],
        "gen_label": "( JOIN ( R [ date of birth ] ) ( JOIN ( R [ discoverer or inventor ] ) [ law of superposition ] ) )"
    },
    {
        "question": "Question: { What is Victor A. McKusick's Munk's Roll ID? }",
        "predicted_query": [
            "( JOIN",
            "( JOIN ( R [ Munk's Roll ID ] ) [ Victor A. McKusick ] )",
            "( JOIN ( R [ Munk's Roll ID ] ) [ Victor A. McKusick ] )",
            "[ JOIN [ child of [ Munk's Roll ] ] [ Victor A. McKusick ] ]",
            "( JOIN ( R [ Munk's Roll ID ] ) [ Victor A. McKusick ] )"
        ],
        "gen_label": "( JOIN ( R [ Munk's Roll ID ] ) [ Victor A. McKusick ] )"
    },
    {
        "question": "Question: { Which is the BTO five-letter code for Little Owl? }",
        "predicted_query": [
            "( JOIN ( R [ BTO five-letter code ] ) [ Little Owl ] )",
            "( JOIN ( R [ BTO five-letter code ] ) [ Little Owl ] )",
            "( JOIN [ BTO five-letter code ] [ Little Owl ] )",
            "( AND ( JOIN [ BirdLife International species code ] [ Little Owl ] ) ( JOIN ( R [ IATA airport code ] ) [ London Heathrow Airport ] ) )",
            "( JOIN ( R [ BTO five-letter code ] ) [ little owl ] )"
        ],
        "gen_label": "( JOIN ( R [ BTO five-letter code ] ) [ Little Owl ] )"
    },
    {
        "question": "Question: { Which is the twinned administrative body for Besançon? }",
        "predicted_query": [
            "( JOIN ( R [ twinned administrative body ] ) [ Besançon ] )",
            "( JOIN [ twinned administrative body ] [ Besançon ] )",
            "( [ joined by ] [ twinned administrative body ] [ Besançon ] )",
            "( JOIN ( R [ twinned administrative body ] ) [ Besançon ] )",
            "( AND ( JOIN [ twinned administrative body ] [ Besançon ] ) ( JOIN ( R [ twinned administrative body ] ) [ Besançon ] ) )"
        ],
        "gen_label": "( JOIN ( R [ twinned administrative body ] ) [ Besançon ] )"
    },
    {
        "question": "Question: { Who is the partner and child of Constantine V? }",
        "predicted_query": [
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ child ] ) [ Constantine V ] ) )",
            "( JOIN [ partner and child ] [ Constantine V ] )",
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ parent ] ) [ Constantine V ] ) )",
            "( AND ( JOIN [ parent of ] [ Constantine V ] ) ( JOIN ( R [ spouse ] ) [ Constantine V ] ) )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ spouse ] ) [ Constantine V ] ) )"
        ],
        "gen_label": "( JOIN ( R [ spouse ] ) ( JOIN ( R [ mother ] ) [ Konstantinos V ] ) )"
    },
    {
        "question": "Question: { What is IPv6 routing prefix for University of Tübingen? }",
        "predicted_query": [
            "( JOIN ( R [ IPv6 routing prefix ] ) [ University of Tübingen ] )",
            "( JOIN [ IPv6 routing prefix ] [ University of Tübingen ] )",
            "( AND ( JOIN [ uses ] [ IPv6 routing prefix ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ University of Tübingen ] ) )",
            "( JOIN ( R [ IPv6 routing prefix ] ) [ University of Tübingen ] )",
            "( JOIN ( R [ IPv6 routing prefix ] ) [ University of Tübingen ] )"
        ],
        "gen_label": "( JOIN ( R [ IPv6 routing prefix ] ) [ University of Tübingen ] )"
    },
    {
        "question": "Question: { Which {timeline of topic} is {place of activity} of {Antonio Sánchez Díaz de Rivera} ? }",
        "predicted_query": [
            "( AND ( JOIN [ place of activity ] [ Antonio Sánchez Díaz de Rivera ] ) ( JOIN ( R [ time period ] ) [ Antonio Sánchez Díaz de Rivera ] ) )",
            "( JOIN ( R [ timeline of topic ] ) ( JOIN ( R [ place of activity ] ) [ Antonio Sánchez Díaz de Rivera ] ) )",
            "( JOIN ( R [ time line of topic ] ) ( JOIN ( R [ place of activity ] ) [ Antonio Sánchez Díaz de Rivera ] ) )",
            "( AND ( JOIN [ location of activity ] [ Antonio Sánchez Díaz de Rivera ] ) ( JOIN ( R [ follows ] ) [ Antonio Sánchez Díaz de Rivera ] ) )",
            "( JOIN [ timeline of topic ] [ Antonio Sánchez Díaz de Rivera ] )"
        ],
        "gen_label": "( JOIN ( R [ history of topic ] ) ( JOIN ( R [ work location ] ) [ Antonio Sánchez Díaz de Rivera ] ) )"
    },
    {
        "question": "Question: { What is the team that created the screenplay Senna? }",
        "predicted_query": [
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ screenwriter ] ) [ Sen",
            "( JOIN ( R [ screenwriter ] ) ( JOIN ( R [ creator ] ) [ Senna ] ) )",
            "[ JOIN ( [ joined by ] [ screenwriter ] ) [ Senna ] ]",
            "( AND ( JOIN [ cast member ] [ Senna ] ) ( JOIN ( R [ screenwriter ] ) [ Senna ] ) )",
            "( JOIN ( R [ team member ] ) ( JOIN ( R [ screenwriter ] ) [ Senna ] ) )"
        ],
        "gen_label": "( JOIN ( R [ member of sports team ] ) ( JOIN ( R [ screenwriter ] ) [ Senna ] ) )"
    },
    {
        "question": "Question: { What is  in the territory claimed by of United States of America ? }",
        "predicted_query": [
            "( JOIN [ claimed by ] [ United States of America ] )",
            "( JOIN ( R [ claimed by ] ) ( JOIN ( R [ country ] ) [ United States ] ) )",
            "( JOIN ( R [ territory claimed by ] ) [ United States of America ] )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ country of origin ] ) [ United States of America ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ United States of America ] ) ( JOIN ( R [ claimed by ] ) [ United States ] ) )"
        ],
        "gen_label": "( JOIN [ territory claimed by ] [ United States ] )"
    },
    {
        "question": "Question: { Which   location of discovery of Mesopotamia ? }",
        "predicted_query": [
            "( JOIN ( R [ location of discovery ] ) [ Mesopotamia ] )",
            "( JOIN ( R [ place of discovery ] ) [ Mesopotamia ] )",
            "( JOIN [ location of discovery ] [ Mesopotamia ] )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Mesopotamia ] ) ( JOIN ( R [ place of discovery ] ) [ Mesopotamia ] ) )",
            "( JOIN ( R [ place of discovery ] ) [ Mesopotamia ] )"
        ],
        "gen_label": "( JOIN [ location of discovery ] [ Mesopotamia ] )"
    },
    {
        "question": "Question: { Which is the short-term exposure limit of ammonia? }",
        "predicted_query": [
            "( JOIN ( R [ short-term exposure limit ] ) [ ammonia ] )",
            "( JOIN [ short-term exposure limit ] [ ammonia ] )",
            "( JOIN ( R [ short-term exposure limit ] ) [ ammonia ] )",
            "( JOIN ( R [ short-term exposure limit ] ) [ ammonia ] )",
            "( JOIN [ short-term exposure limit ] [ ammonia ] )"
        ],
        "gen_label": "( JOIN ( R [ short-term exposure limit ] ) [ ammonia ] )"
    },
    {
        "question": "Question: { What is {the CRICOS Provider Code for Australian National University? }",
        "predicted_query": [
            "( JOIN ( R [ CRICOS Provider Code ] ) [ Australian National University ] )",
            "( [ joined by ] [ CRICOS Provider Code ] [ Australian National University ] )",
            "( JOIN [ CRICOS Provider Code ] [ Australian National University ] )",
            "( JOIN ( R [ CRICOS Provider Code ] ) [ Australian National University ] )",
            "( AND ( JOIN [ Cricos provider code ] [ Australian National University ] ) ( JOIN ( R [ institution ] ) [ Australian National University ] ) )"
        ],
        "gen_label": "( JOIN ( R [ CRICOS Provider Code ] ) [ Australian National University ] )"
    },
    {
        "question": "Question: { Define twinning of staurolite. }",
        "predicted_query": [
            "( JOIN ( R [ twinned with ] ) [ staurolite ] )",
            "( AND ( JOIN [ twinned mineral species ] [ staurolite ] ) ( JOIN ( R [ defined in ] ) [ twinning of staurolite ] ) )",
            "( JOIN [ twinned with ] [ staurolite ] )",
            "( JOIN [ twinning of ] [ staurolite ] )",
            "( JOIN ( R [ twinning of ] ) [ staurolite ] )"
        ],
        "gen_label": "( JOIN ( R [ twinning ] ) [ staurolite ] )"
    },
    {
        "question": "Question: { What is the address of James Madison? }",
        "predicted_query": [
            "( JOIN ( R [ location ] ) ( JOIN ( R [ place of death ] ) [ James Madison ] ) )",
            "( JOIN [ address ] [ James Madison ] )",
            "( JOIN ( R [ address ] ) [ James Madison ] )",
            "( JOIN ( R [ postal code ] ) ( JOIN ( R [ place of birth ] ) [ James Madison ] ) )",
            "( JOIN [ postal code ] [ James Madison ] )"
        ],
        "gen_label": "( JOIN [ addressee ] [ James Madison ] )"
    },
    {
        "question": "Question: { What is the forename of John Ames Mitchell that is said to be the same as Jógvan? }",
        "predicted_query": [
            "( AND ( JOIN [ given name ] [ Jógvan ] ) ( JOIN ( R [ given name ] ) [ John Ames Mitchell ] ) )",
            "( AND ( JOIN [ different name ] [ Jógvan Hansen ] ) ( JOIN ( R [ given name ] ) [ John Ames Mitchell ] ) )",
            "( AND ( JOIN [ has the same name ] [ Jógvan Hansen ] ) ( JOIN ( R [ given name ] ) [ John Ames Mitchell ] ) )",
            "( AND ( JOIN [ said to be the same as ] [ Jógvan ] ) ( JOIN ( R [ given name ] ) [ John Ames Mitchell ] ) )",
            "( AND ( JOIN [ given name ] [ Jógvans ] ) ( JOIN ( R [ given name ] ) [ John Ames Mitchell ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ said to be the same as ] [ Jógvan ] ) ( JOIN ( R [ given name ] ) [ John Ames Mitchell ] ) )"
    },
    {
        "question": "Question: { In the Grand Teton National Park, what is located in the protected area? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Grand Teton National Park ] ) ( JOIN ( R [ protected area ] ) [ Grand Teton National Park ] ) )",
            "( JOIN ( R [ located in the protected area ] ) [ Grand Teton National Park ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Grand Teton National Park ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Grand Teton National Park ] ) )",
            "( JOIN ( R [ protected area ] ) ( JOIN ( R [ located in ] ) [ Grand Teton National Park ] ) )",
            "( JOIN [ located in the protected area ] [ Grand Teton National Park ] )"
        ],
        "gen_label": "( JOIN [ located in protected area ] [ Grand Teton National Park ] )"
    },
    {
        "question": "Question: { What did Christie Brinkley's husband say }",
        "predicted_query": [
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ child ] ) [ Christie Brinkley ] ) )",
            "The JOIN query is: { JOIN [ spouse ] [ Christie Brinkley ] }",
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ parent of ] ) [ Christie Brinkley ] ) )",
            "( JOIN ( R [ husband ] ) ( JOIN ( R [ child ] ) [ Christie Brinkley ] ) )",
            "( AND ( JOIN [ spouse ] [ Christie Brinkley ] ) ( JOIN ( R [ said by ] ) [ Christie Brinkley ] ) )"
        ],
        "gen_label": "( JOIN ( R [ influenced by ] ) ( JOIN ( R [ spouse ] ) [ Christie Brinkley ] ) )"
    },
    {
        "question": "Question: { What did Samuel's students study? }",
        "predicted_query": [
            "( JOIN ( R [ student ] ) ( JOIN ( R [ field of work ] ) [ Samuel Johnson ] ) )",
            "( AND ( JOIN [ studied at ] [ Samuel ] ) ( JOIN ( R [ field of study ] ) [ Samuel ] ) )",
            "( JOIN ( R [ field of study ] ) ( JOIN ( R [ student ] ) [ Samuel ] ) )",
            "( JOIN [ studied ] [ Samuel ] )",
            "( JOIN [ studied by ] [ Samuel ] )"
        ],
        "gen_label": "( JOIN ( R [ present in work ] ) ( JOIN ( R [ student ] ) [ Samuel ] ) )"
    },
    {
        "question": "Question: { Which is the Latvian Olympic Committee athlete ID for Māris Štrombergs? }",
        "predicted_query": [
            "( JOIN ( R [ Latvian Olympic Committee athlete ID ] ) [ Māris Štrombergs ] )",
            "( JOIN ( R [ Latvian Olympic Committee athlete ID ] ) [ Maris Strombergs ] )",
            "( JOIN ( R [ Latvian Olympic Committee athlete ID ] ) [ Māris Štrombergs ] )",
            "( AND ( JOIN [ LETR ] [ Māris Štrombergs ] ) ( JOIN ( R [ ID ] ) [ Latvian Olympic Committee ] ) )",
            "( JOIN ( R [ Latvian Olympic Committee athlete ID ] ) [ Maris Strombergs ] )"
        ],
        "gen_label": "( JOIN ( R [ Latvian Olympic Committee athlete ID ( archived ) ] ) [ Māris Štrombergs ] )"
    },
    {
        "question": "Question: { What is in the  Art UK venue ID of University of York ? }",
        "predicted_query": [
            "( JOIN ( R [ Art UK venue ID ] ) [ University of York ] )",
            "( JOIN ( R [ Art UK venue ID ] ) [ University of York ] )",
            "( AND ( JOIN [ art museum or gallery ] [ University of York ] ) ( JOIN ( R [ ID ] ) [ University of York ] ) )",
            "( JOIN ( R [ artwork.uk venue ID ] ) [ University of York ] )",
            "( JOIN ( R [ Art UK venue ID ] ) [ University of York ] )"
        ],
        "gen_label": "( JOIN ( R [ Art UK venue ID ] ) [ University of York ] )"
    },
    {
        "question": "Question: { What is the governing text of obstruction of justice that belongs to jurisdiction of Germany? }",
        "predicted_query": [
            "( JOIN [ governing text ] [ obstruction of justice ] )",
            "( AND ( JOIN [ governing body ] [ Germany ] ) ( JOIN ( R [ legislation ] ) [ obstruction of justice ] ) )",
            "( JOIN ( R [ governing text ] ) ( JOIN ( R [ jurisdiction ] ) [ obstruction of justice ] ) )",
            "( AND ( JOIN [ jurisdiction ] [ Germany ] ) ( JOIN ( R [ governing text ] ) [ obstruction of justice ] ) )",
            "( AND ( JOIN [ governed by ] [ Germany ] ) ( JOIN ( R [ governing text ] ) [ obstruction of justice ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ applies to jurisdiction ] [ Germany ] ) ( JOIN ( R [ main regulatory text ] ) [ obstruction of justice ] ) )"
    },
    {
        "question": "Question: { How do you address the head or the supreme authority of Khanka Lake? }",
        "predicted_query": [
            "( JOIN [ head or supreme authority ] [ Khanka Lake ] )",
            "( JOIN ( R [ head or supreme authority ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Khanka Lake ] ) )",
            "( JOIN ( R [ head of government ] ) ( JOIN ( R [ country ] ) [ Khanka Lake ] ) )",
            "( JOIN ( R [ leader ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Khanka Lake ] ) )",
            "( AND ( JOIN [ diplomatic or official name ] [ Khanka Lake ] ) ( JOIN ( R [ head of government ] ) [ Khanka Lake ] ) )"
        ],
        "gen_label": "( JOIN ( R [ head of state ] ) ( JOIN ( R [ basin country ] ) [ Khanka ] ) )"
    },
    {
        "question": "Question: { What file format is the environment of Grand Theft Auto III? }",
        "predicted_query": [
            "( JOIN ( R [ file format ] ) ( JOIN ( R [ environment ] ) [ Grand Theft Auto III ] ) )",
            "( JOIN ( R [ has format ] ) ( JOIN ( R [ location ] ) [ Grand Theft Auto III ] ) )",
            "( JOIN [ file format ] [ Grand Theft Auto III ] )",
            "( AND ( JOIN [ has file format ] [ Grand Theft Auto III environment ] ) ( JOIN ( R [ has format ] ) [ Grand Theft Auto III ] ) )",
            "( JOIN ( R [ format ] ) ( JOIN ( R [ location ] ) [ Grand Theft Auto III ] ) )"
        ],
        "gen_label": "( JOIN ( R [ readable file format ] ) ( JOIN ( R [ platform ] ) [ Grand Theft Auto III ] ) )"
    },
    {
        "question": "Question: { Which is the UMLS CUI for standard genetic code? }",
        "predicted_query": [
            "( JOIN ( R [ UMLS CUI ] ) [ standard genetic code ] )",
            "( JOIN [ UMLS CUI ] [ standard genetic code ] )",
            "( JOIN [ uses ] [ standard genetic code ] )",
            "( JOIN ( R [ UMLS CUI ] ) [ genetic code ] )",
            "( JOIN ( R [ UMLS CUI ] ) [ standard genetic code ] )"
        ],
        "gen_label": "( JOIN ( R [ UMLS CUI ] ) [ standard genetic code ] )"
    },
    {
        "question": "Question: { What edition's translation of Vulgate? }",
        "predicted_query": [
            "( JOIN ( R [ translation of ] ) ( JOIN ( R [ translation of ] ) [ Vulgate ] ) )",
            "( JOIN [ translation of ] [ Vulgate ] )",
            "( JOIN ( R [ translation ] ) ( JOIN ( R [ translation of ] ) [ Vulgate ] ) )",
            "( JOIN ( R [ translated from the ] ) ( JOIN ( R [ translation of ] ) [ Vulgate ] ) )",
            "( AND ( JOIN [ translation ] [ Vulgate ] ) ( JOIN ( R [ translated from ] ) [ Vulgate ] ) )"
        ],
        "gen_label": "( JOIN ( R [ has edition or translation ] ) ( JOIN ( R [ edition or translation of ] ) [ Vulgate ] ) )"
    },
    {
        "question": "Question: { What is the child body of the parent body of the Miranda Rights? }",
        "predicted_query": [
            "( JOIN ( R [ child body ] ) ( JOIN ( R [ parent body ] ) [ Miranda Rights ] ) )",
            "( AND ( JOIN [ parent of ] [ Miranda Rights ] ) ( JOIN ( R [ child of ] ) [ Miranda rights ] ) )",
            "( JOIN [ child body ] [ Miranda Rights ] )",
            "( AND ( JOIN [ parent of ] [ Miranda rights ] ) ( JOIN ( R [ parent body ] ) [ Miranda Rights ] ) )",
            "( JOIN ( R [ parent body ] ) ( JOIN ( R [ has parent body ] ) [ Miranda Rights ] ) )"
        ],
        "gen_label": "( JOIN ( R [ child astronomical body ] ) ( JOIN ( R [ parent astronomical body ] ) [ Miranda ] ) )"
    },
    {
        "question": "Question: { Which is {source of inspiration} of {characters} of {The Legend of the 7 Golden Vampires} ? }",
        "predicted_query": [
            "( JOIN ( R [ source of inspiration ] ) ( JOIN ( R [ characters ] ) [ The Legend of the 7 Golden Vampires ] ) )",
            "( AND ( JOIN [ influenced by ] [ The Legend of the 7 Golden Vampires ] ) ( JOIN ( R [ inspired by ] ) [ The Legend of the 7 Golden Vampires ] ) )",
            "( JOIN ( R [ source of inspiration ] ) ( JOIN ( R [ character ] ) [ The Legend of the 7 Golden Vampires ] ) )",
            "( JOIN [ source of inspiration ] [ characters of The Legend of the 7 Golden Vampires ] )",
            "( AND ( JOIN [ inspired by ] [ The Legend of the 7 Golden Vampires ] ) ( JOIN ( R [ character ] ) [ The Legend of the 7 Golden Vampires ] ) )"
        ],
        "gen_label": "( JOIN ( R [ inspired by ] ) ( JOIN ( R [ characters ] ) [ The Legend of the 7 Golden Vampires ] ) )"
    },
    {
        "question": "Question: { What is the Human Development Index for Papua New Guinea? }",
        "predicted_query": [
            "( JOIN ( R [ Human Development Index ] ) [ Papua New Guinea ] )",
            "( [ joined by ] [ human development index ] [ Papua New Guinea ] )",
            "( JOIN [ Human Development Index ] [ Papua New Guinea ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Papua New Guinea ] ) ( JOIN ( R [ human development index ] ) [ Papua New Guinea ] ) )",
            "( JOIN ( R [ joins the field of ] ) [ Papua New Guinea ] )"
        ],
        "gen_label": "( JOIN ( R [ Human Development Index ] ) [ Papua New Guinea ] )"
    },
    {
        "question": "Question: { Who is the diplomat of Serbia? }",
        "predicted_query": [
            "[delegation of Serbia]",
            "( JOIN ( R [ diplomatic relations ] ) [ Serbia ] )",
            "( JOIN [ diplomat of ] [ Serbia ] )",
            "( JOIN [ diplomat ] [ Serbia ] )",
            "( JOIN ( R [ diplomat ] ) [ Serbia ] )"
        ],
        "gen_label": "( JOIN ( R [ member of ] ) ( JOIN ( R [ diplomatic relation ] ) [ Serbia ] ) )"
    },
    {
        "question": "Question: { What resident of Werner Herzog lives in West Carson? }",
        "predicted_query": [
            "( AND ( JOIN [ shares border with ] [ West Carson ] ) ( JOIN ( R [ place of residence ] ) [ Werner Herzog ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ West Carson ] ) ( JOIN ( R [ place of residence ] ) [ Werner Herzog ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ West Carson ] ) ( JOIN ( R [ resident country ] ) [ Werner Herzog ] ) )",
            "( JOIN ( R [ resident ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ West Carson, California ] ) )",
            "( AND ( JOIN [ shares border with ] [ West Carson ] ) ( JOIN ( R [ resident country ] ) [ Werner Herzog ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ shares border with ] [ West Carson ] ) ( JOIN ( R [ residence ] ) [ Werner Herzog ] ) )"
    },
    {
        "question": "Question: { Who is nominated by the United Nations Secretary-General? }",
        "predicted_query": [
            "( JOIN [ nominated by ] [ United Nations Secretary-General ] )",
            "( JOIN ( R [ nominated by ] ) ( JOIN ( R [ member of ] ) [ United Nations Secretary-General ] ) )",
            "( JOIN ( R [ nominated by ] ) [ United Nations Secretary-General ] )",
            "( AND ( JOIN [ nominated by ] [ United Nations Secretary-General ] ) ( JOIN ( R [ nominated for ] ) [ United Nations Secretary-General ] ) )",
            "[ ( joint ) [ nominated by ] ]"
        ],
        "gen_label": "( JOIN ( R [ nominated by ] ) [ United Nations Secretary-General ] )"
    },
    {
        "question": "Question: { What is Octavio Paz' Paris Review intervieweeID? }",
        "predicted_query": [
            "( JOIN ( R [ Paris Review interviewee ID ] ) [ Octavio Paz ] )",
            "( AND ( JOIN [ participant ] [ Paris Review ] ) ( JOIN ( R [ ID ] ) [ Octavio Paz ] ) )",
            "( JOIN [ Paris Review interviewee ID ] [ Octavio Paz ] )",
            "( [ joined by ] [ Octavio Paz ] )",
            "[Répertoire des personnages historiques]"
        ],
        "gen_label": "( JOIN ( R [ The Paris Review interviewee ID ] ) [ Octavio Paz ] )"
    },
    {
        "question": "Question: { \"Which is {named for} of {utopia},whose {ilthlustrated by} is {Ambrosius Holbein} ?\" }",
        "predicted_query": [
            "( AND ( JOIN [ illustrated by ] [ Ambrosius Holbein ] ) ( JOIN ( R [ named for ] ) [ utopia ] ) )",
            "[ JOIN [ illustrated by ] [ Ambrosius Holbein ] ] [ JOIN [ named for ] [ utopia ] ]",
            "( AND ( JOIN [ depicts ] [ Ambrosius Holbein ] ) ( JOIN ( R [ named for ] ) [ utopia ] ) )",
            "( AND ( JOIN [ illustrates ] [ Ambrosius Holbein ] ) ( JOIN ( R [ named after ] ) [ utopia ] ) )",
            "( JOIN ( R [ illustrated by ] ) ( JOIN ( R [ named for ] ) [ utopia ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ illustrator ] [ Ambrosius Holbein ] ) ( JOIN ( R [ named after ] ) [ utopia ] ) )"
    },
    {
        "question": "Question: { Who is the county seat for Kendel Herrarte's birthplace? }",
        "predicted_query": [
            "( JOIN ( R [ capital ] ) ( JOIN ( R [ place of birth ] ) [ Kendel Herrarte ] ) )",
            "[ JOIN [",
            "( JOIN ( R [ capital of ] ) ( JOIN ( R [ place of birth ] ) [ Kendel Herrarte ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Kendel Herrarte ] ) ( JOIN ( R [ capital ] ) [ Kendel Herrarte ] ) )",
            "( JOIN [ capital of ] [ Kendel Herrarte ] )"
        ],
        "gen_label": "( JOIN ( R [ capital of ] ) ( JOIN ( R [ place of birth ] ) [ Kendel Herrarte ] ) )"
    },
    {
        "question": "Question: { Which is typology  language native of Søren Kierkegaard ? }",
        "predicted_query": [
            "( JOIN ( R [ typology language ] ) [ Søren Kierkegaard ] )",
            "( JOIN ( R [ linguistic typology ] ) ( JOIN ( R [ native language ] ) [ Søren Kierkegaard ] ) )",
            "( JOIN [ typology language native ] [ Søren Kierkegaard ] )",
            "( JOIN ( R [ native language ] ) ( JOIN ( R [ language of work ] ) [ Søren Kierkegaard ] ) )",
            "( AND ( JOIN [ native language ] [ Danish ] ) ( JOIN ( R [ language of work ] ) [ Søren Kierkegaard ] ) )"
        ],
        "gen_label": "( JOIN ( R [ linguistic typology ] ) ( JOIN ( R [ native language ] ) [ Søren Kierkegaard ] ) )"
    },
    {
        "question": "Question: { what is elfilm of person id of linus torvalds }",
        "predicted_query": [
            "( JOIN ( R [ Elfilm person ID ] ) [ Linus Torvalds ] )",
            "( JOIN ( R [ Elfwood person ID ] ) [ Linus Torvalds ] )",
            "( JOIN [ person ID ] [ Linus Torvalds ] )",
            "( AND ( JOIN [ person ID ] [ Linus Torvalds ] ) ( JOIN ( R [ film ID ] ) [ Elf ] ) )",
            "( AND ( JOIN [ ID.fr person ID ] [ Linus Torvalds ] ) ( JOIN ( R [ film ID ] ) [ Elf ] ) )"
        ],
        "gen_label": "( JOIN ( R [ elFilm person ID ] ) [ Linus Torvalds ] )"
    },
    {
        "question": "Question: { \"Which is {developer} of {elliptic function}, whose {location of birth} is {Finnøy} ?\" }",
        "predicted_query": [
            "( AND ( JOIN [ place of birth ] [ Finnøy ] ) ( JOIN ( R [ developer ] ) [ elliptic function ] ) )",
            "( AND ( JOIN [ location of birth ] [ Finnøy ] ) ( JOIN ( R [ developer ] ) [ elliptic function ] ) )",
            "( JOIN ( R [ developer ] ) ( JOIN ( R [ place of birth ] ) [ elliptic function ] ) )",
            "( AND ( JOIN [ place of birth ] [ Fjøløy ] ) ( JOIN ( R [ developer ] ) [ elliptic function ] ) )",
            "( AND ( JOIN [ location of death ] [ Finnøy ] ) ( JOIN ( R [ developed by ] ) [ elliptic function ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ place of birth ] [ Finnøy ] ) ( JOIN ( R [ discoverer or inventor ] ) [ elliptic function ] ) )"
    },
    {
        "question": "Question: { Which is Stereo Ve Mono artist ID for Shoshana Damari? }",
        "predicted_query": [
            "( JOIN ( R [ Stereo Ve Mono artist ID ] ) [ Shoshana Damari ] )",
            "( JOIN ( R [ Stereo Ve Mono artist ID ] ) [ Shoshana Damari ] )",
            "( JOIN ( R [ StereoVeMono artist ID ] ) [ Shoshana Damari ] )",
            "( AND ( JOIN [ stereo/mono ID ] [ Stereo Ve Mono artist ID for Shoshana Damari ] ) [ Shoshana Damari ] )",
            "( JOIN ( R [ Stereo Ve Mono artist ID ] ) [ Shoshana Damari ] )"
        ],
        "gen_label": "( JOIN ( R [ Stereo Ve Mono artist ID ] ) [ Shoshana Damari ] )"
    },
    {
        "question": "Question: { What is in the category of South Korea} ?\n? }",
        "predicted_query": [
            "( JOIN ( R [ category ] ) [ South Korea ] )",
            "( JOIN [ category of ] [ South Korea ] )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ category ] ) [ South Korea ] ) )",
            "( JOIN [ category of ] [ South Korea ] )",
            "( JOIN ( R [ category ] ) [ South Korea ] )"
        ],
        "gen_label": "( JOIN ( R [ age of consent ] ) [ South Korea ] )"
    },
    {
        "question": "Question: { Name the antonym of opinion that has see also in the statement. }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ United States ] ) ( JOIN ( R [ opposite ] ) [ opinion ] ) )",
            "( AND ( JOIN [ has see also ] [ opinion ] ) ( JOIN ( R [ opposite ] ) [ name ] ) )",
            "( JOIN [ has see also ] [ opinion ] )",
            "( JOIN ( R [ opposite ] ) ( JOIN ( R [ has see also ] ) [ opinion ] ) )",
            "( AND ( JOIN [ has see also ] [ opinion ] ) ( JOIN ( R [ opposite of ] ) [ name ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ different from ] [ statement ] ) ( JOIN ( R [ opposite of ] ) [ opinion ] ) )"
    },
    {
        "question": "Question: { What are Dick Van Dyke's top honors? }",
        "predicted_query": [
            "( JOIN ( R [ award received ] ) ( JOIN ( R [ honors received ] ) [ Dick Van Dyke ] ) )",
            "( JOIN ( R [ has award recipient ] ) ( JOIN ( R [ awarded to ] ) [ Dick Van Dyke ] ) )",
            "( JOIN ( R [ awarded to ] ) ( JOIN ( R [ awards received ] ) [ Dick Van Dyke ] ) )",
            "( JOIN [ top honors ] [ Dick Van Dyke ] )",
            "( AND ( JOIN [ award received ] [ Dick Van Dyke ] ) ( JOIN ( R [ honors received ] ) [ Dick Van Dyke ] ) )"
        ],
        "gen_label": "( JOIN ( R [ winner ] ) ( JOIN ( R [ award received ] ) [ Dick Van Dyke ] ) )"
    },
    {
        "question": "Question: { What type of geology of anorthite is monitored by the Vesuvius Observatory during eruptions? }",
        "predicted_query": [
            "( AND ( JOIN [ monitored by ] [ Vesuvius Observatory ] ) ( JOIN ( R [ geology ] ) [ anorthite ] ) )",
            "( JOIN ( R [ type of geology ] ) ( JOIN ( R [ monitored by ] ) [ Vesuvius Observatory ] ) )",
            "( JOIN [ monitored by ] [ Vesuvius Observatory ] ) ( JOIN ( R [ has geological unit ] ) [ anorthite ] )",
            "( AND ( JOIN [ monitors ] [ Vesuvius Observatory ] ) ( JOIN ( R [ geology ] ) [ anorthite ] ) )",
            "( AND ( JOIN [ monitored by ] [ Vesuvius Observatory ] ) ( JOIN ( R [ has geology ] ) [ anorthite ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ volcano observatory ] [ Vesuvius Observatory ] ) ( JOIN ( R [ type locality ( geology ) ] ) [ anorthite ] ) )"
    },
    {
        "question": "Question: { What is the benefit of capital punishment? }",
        "predicted_query": [
            "( JOIN [ benefit ] [ capital punishment ] )",
            "[death penalty]",
            "( AND ( JOIN [ has benefit ] [ capital punishment ] ) ( JOIN ( R [ follows ] ) [ capital punishment ] ) )",
            "( JOIN ( R [ benefit ] ) [ capital punishment ] )",
            "( JOIN [ benefit of ] [ capital punishment ] )"
        ],
        "gen_label": "( JOIN [ has use ] [ capital punishment ] )"
    },
    {
        "question": "Question: { Name the religious incorporation of the Titanic record producer }",
        "predicted_query": [
            "( JOIN ( R [ religious incorporation ] ) [ Titanic record producer ] )",
            "( JOIN ( R [ religious affiliation ] ) ( JOIN ( R [ record label ] ) [ Titanic ] ) )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ record label ] ) [ Titanic ] ) )",
            "( AND ( JOIN [ part of the religious body ] [ Titanic record producer ] ) ( JOIN ( R [ named after ] ) [ Titanic ] ) )",
            "( JOIN [ religious incorporation ] [ Titanic record producer ] )"
        ],
        "gen_label": "( JOIN ( R [ religion or worldview ] ) ( JOIN ( R [ producer ] ) [ Titanic ] ) )"
    },
    {
        "question": "Question: { What is the set in location of Anabasis whose diplomatic relation is Portugal? }",
        "predicted_query": [
            "( AND ( JOIN [ diplomatic relation ] [ Portugal ] ) ( JOIN ( R [ set in location ] ) [ Anabasis ] ) )",
            "( AND ( JOIN [ diplomatic relations ] [ Portugal ] ) ( JOIN ( R [ set in location ] ) [ Anabasis ] ) )",
            "( AND ( JOIN [ diplomatic relation ] [ Portugal ] ) ( JOIN ( R [ location ] ) [ Anabasis ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Portugal ] ) ( JOIN ( R [ diplomatic relation ] ) [ Anabasis ] ) )",
            "( AND ( JOIN [ has diplomatic relations ] [ Portugal ] ) ( JOIN ( R [ set in location ] ) [ Anabasis ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ diplomatic relation ] [ Portugal ] ) ( JOIN ( R [ narrative location ] ) [ Anabasis ] ) )"
    },
    {
        "question": "Question: { hew Gek Khim recalls a day in her early 20s when she was shopping with her maternal grandfather, wealthy Singaporean banker and philanthropist Tan Chin Tuan. They ended up in a jewellery store where she wanted to make a purchase, but he balked and tried to dissuade her. Finally he said, “You know, Khim, diamonds don’t pay dividends.” }",
        "predicted_query": [
            "( AND ( JOIN [ has ] [ Tan Chin Tuan ] ) ( JOIN ( R [ influenced by ] ) [ Khim Ong ] ) )",
            "( JOIN ( R [ child of ] ) ( JOIN ( R [ parent of ] ) [ Khim Ong ] ) )",
            "( AND ( JOIN [ notable work ] [ Diamonds Don't Pay Dividends ] ) ( JOIN ( R [ influenced by ] ) [ Khim Ong ] ) )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ child ] ) [ Khim Ong-Webb ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Singapore ] ) ( JOIN ( R [ notable event ] ) [ Hew Gek Khim ] ) )"
        ],
        "gen_label": "( JOIN ( R [ history of topic ] ) ( JOIN ( R [ place of birth ] ) [ Chew Gek Khim ] ) )"
    },
    {
        "question": "Question: { What is LaTeX string for inverse of flat ? }",
        "predicted_query": [
            "( JOIN ( R [ LaTeX string ] ) [ inverse of flat ] )",
            "( JOIN [ LaTeX string ] [ inverse of flat ] )",
            "( AND ( JOIN [ has inverse of ] [ flat ] ) ( JOIN ( R [ LaTeX syntax ] ) [ inverse ] ) )",
            "( JOIN ( R [ LaTeX string ] ) ( JOIN ( R [ inverse of ] ) [ flat ] ) )",
            "( AND ( JOIN [ uses ] [ flat ] ) ( JOIN ( R [ inverse of ] ) [ LaTeX string ] ) )"
        ],
        "gen_label": "( JOIN ( R [ TeX string ] ) ( JOIN ( R [ opposite of ] ) [ flat sign ] ) )"
    },
    {
        "question": "Question: { When was Joan Rivers born and what was she nominated for? }",
        "predicted_query": [
            "( AND ( JOIN [ nominated for ] [ Academy Award for Best Supporting Actress ] ) ( JOIN ( R [ place of birth ] ) [ Joan Rivers ] ) )",
            "( JOIN ( R [ award received ] ) ( JOIN ( R [ nominated for ] ) [ Joan Rivers ] ) )",
            "( JOIN [ nominated for ] [ Joan Rivers ] ) ( JOIN ( R [ given name ] ) [ Joan Rivers ] )",
            "( AND ( JOIN [ nominated for ] [ Emmy Award for Outstanding Writing in a Comedy or Drama Series ] ) ( JOIN ( R [ place of birth ] ) [ Joan Rivers ] ) )",
            "( AND ( JOIN [ nomination ] [ nominated for ] ) ( JOIN ( R [ date of death ] ) [ Joan Rivers ] ) )"
        ],
        "gen_label": "( JOIN ( R [ inception ] ) ( JOIN ( R [ nominated for ] ) [ Joan Rivers ] ) )"
    },
    {
        "question": "Question: { What child star appeared in Nico Icon? }",
        "predicted_query": [
            "( JOIN ( R [ child ] ) ( JOIN ( R [ cast member ] ) [ Nico Icon ] ) )",
            "( JOIN [ child star ] [ Nico Icon ] )",
            "( AND ( JOIN [ cast member ] [ Nico Icon ] ) ( JOIN ( R [ child ] ) [ Nico ] ) )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ cast member ] ) [ Nico Icon ] ) )",
            "( AND ( JOIN [ parent of ] [ Nico Icon ] ) ( JOIN ( R [ cast member ] ) [ Nico Icon ] ) )"
        ],
        "gen_label": "( JOIN ( R [ mother ] ) ( JOIN ( R [ cast member ] ) [ Nico Icon ] ) )"
    },
    {
        "question": "Question: { Which is the OpenDomesday settlement ID of Brighton? }",
        "predicted_query": [
            "[ JOIN [ OpenDomesday settlement ID ] [ Brighton ] ]",
            "( JOIN ( R [ OpenDomesday settlement ID ] ) [ Brighton ] )",
            "( JOIN ( R [ OpenDomesday settlement ID ] ) [ Brighton ] )",
            "( JOIN [ OpenDomesday settlement ID ] [ Brighton ] )",
            "( JOIN ( R [ OpenDomesday settlement ID ] ) [ Brighton and Hove ] )"
        ],
        "gen_label": "( JOIN ( R [ OpenDomesday settlement ID ] ) [ Brighton ] )"
    },
    {
        "question": "Question: { What is Redump.org ID for Space Invaders ? }",
        "predicted_query": [
            "( JOIN ( R [ Redump.org ID ] ) [ Space Invaders ] )",
            "( JOIN [ Redump.org ID ] [ Space Invaders ] )",
            "### Honorario Facet History:",
            "( JOIN ( R [ Redump.com ID ] ) [ Space Invaders ] )",
            "( JOIN ( R [ Redump.org game ID ] ) [ Space Invaders ] )"
        ],
        "gen_label": "( JOIN ( R [ Redump.org ID ] ) [ Space Invaders ] )"
    },
    {
        "question": "Question: { What is the name of the star that has a Lassell ring and has the Nereid's child body? }",
        "predicted_query": [
            "( AND ( JOIN [ has the body of ] [ Nereid's child ] ) ( JOIN ( R [ named after ] ) [ Lassell's ring ] ) )",
            "( AND ( JOIN [ has body ] [ Nereid's child ] ) ( JOIN ( R [ named after ] ) [ Lassell's ring ] ) )",
            "( AND ( JOIN [ named after ] [ Nereus ] ) ( JOIN ( R [ has the property ] ) [ Lassell's ring ] ) )",
            "( AND ( JOIN [ body ] [ Nereid's child ] ) ( JOIN ( R [ named after ] ) [ Lassell's ring ] ) )",
            "( AND ( JOIN [ has Nereid's child body ] [ Lassell ring ] ) ( JOIN ( R [ named after ] ) [ Nereid's child body ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ child astronomical body ] [ Lassell ring ] ) ( JOIN ( R [ parent astronomical body ] ) [ Nereid ] ) )"
    },
    {
        "question": "Question: { who field of this work of anna orlova? }",
        "predicted_query": [
            "( JOIN ( R [ field of work ] ) ( JOIN ( R [ work ] ) [ Anna Orlov ] ) )",
            "[join] [field of this work] [Anna Orlov]",
            "[ JOIN ] [ field of work ] [ Anna Orlov ]",
            "( JOIN [ field of this work ] [ Anna Orlov ] )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ work ] ) [ Anna Orlov ] ) )"
        ],
        "gen_label": "( JOIN ( R [ field of this occupation ] ) ( JOIN ( R [ occupation ] ) [ Anna Orlova ] ) )"
    },
    {
        "question": "Question: { What is Nelson-Atkins Museum of Art person ID for William Johnson? }",
        "predicted_query": [
            "( JOIN ( R [ Nelson-Atkins Museum of Art person ID ] ) [ William Johnson ] )",
            "[ jointed by ] [ William Johnson ]",
            "( JOIN ( R [ Nelson-Atkins Museum of Art person ID ] ) [ William Johnson ] )",
            "( AND ( JOIN [ person ID ] [ Nelson-Atkins Museum of Art ] ) ( JOIN ( R [ ID ] ) [ William Johnson ] ) )",
            "( JOIN ( R [ Nelson-Atkins Museum of Art person ID ] ) [ William H. Johnson ] )"
        ],
        "gen_label": "( JOIN ( R [ Nelson-Atkins Museum of Art person ID ] ) [ William H. Johnson ] )"
    },
    {
        "question": "Question: { Who spirit is Harry Potter possessed by? }",
        "predicted_query": [
            "( JOIN ( R [ spiritual being ] ) [ Harry Potter ] )",
            "[]",
            "( JOIN ( R [ spirit ] ) [ Harry Potter ] )",
            "( AND ( JOIN [ possessor ] [ Harry Potter ] ) ( JOIN ( R [ influenced by ] ) [ Harry Potter ] ) )",
            "( JOIN [ possessed by ] [ Harry Potter ] )"
        ],
        "gen_label": "( JOIN ( R [ possessed by spirit ] ) [ Harry Potter ] )"
    },
    {
        "question": "Question: { Who has children by the writers of A Monograph of the British Palaeozoic Phyllopoda (Phyllocarida, Packard)? }",
        "predicted_query": [
            "[",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ author ] ) [ A Monograph of the British Palaeozoic Phyllopoda (Phyllocarida, Packard) ] ) )",
            "( JOIN ( R [ has child ] ) ( JOIN ( R [ author ] ) [ A Monograph of the British Palaeozoic Phyllopoda (Phyllocarida, Packard) ] ) )",
            "[ JOIN",
            "( JOIN [ has children ] [ A Monograph of the British Palaeozoic Phyllopoda (Phyllocarida, Packard) ] )"
        ],
        "gen_label": "( JOIN ( R [ child ] ) ( JOIN ( R [ author ] ) [ A monograph of the British Palæozoic Phyllopoda ( Phyllocarida, Packard ) . ] ) )"
    },
    {
        "question": "Question: { Which is the KEGG ID of nitric acid? }",
        "predicted_query": [
            "( JOIN ( R [ KEGG ID ] ) [ nitric acid ] )",
            "( JOIN ( R [ KEGG ID ] ) [ nitric acid ] )",
            "( AND ( JOIN [ ChemIDplus ] [ KEGG ID ] ) ( JOIN ( R [ IUPAC ID ] ) [ nitric acid ] ) )",
            "( JOIN [ KEGG ID ] [ nitric acid ] )",
            "( JOIN ( R [ KEGG ID ] ) [ nitric acid ] )"
        ],
        "gen_label": "( JOIN ( R [ KEGG ID ] ) [ nitric acid ] )"
    },
    {
        "question": "Question: { What is Rosetta Code ID of permutation ? }",
        "predicted_query": [
            "( JOIN ( R [ Rosetta Code ID ] ) [ permutation ] )",
            "( AND ( JOIN [ ROSetta Code ID ] ) ( JOIN ( R [ permutation ] ) ) )",
            "( JOIN [ Rosetta Code ID ] [ permutation ] )",
            "( JOIN ( R [ Rosetta Code ID ] ) [ permutation ] )",
            "( JOIN ( R [ Rosetta Code ID ] ) [ permutation ] )"
        ],
        "gen_label": "( JOIN ( R [ Rosetta Code page ID ] ) [ permutation ] )"
    },
    {
        "question": "Question: { What is the language of name of the Peasants with the grammatical gender of masculine animate non-personal? }",
        "predicted_query": [
            "( JOIN ( R [ grammatical gender ] ) ( JOIN ( R [ person ] ) [ Peasants with the grammatical gender of masculine animate non-personal ] ) )",
            "( AND ( JOIN [ grammatical gender ] [ masculine animate non-personal ] ) ( JOIN ( R [ language of name ] ) [ Peasants ] ) )",
            "( JOIN [ grammatical gender ] [ masculine animate non-personal ] ) JOIN ( JOIN ( R [ language of name ] ) [ Peasants ] )",
            "( JOIN ( R [ language of name ] ) ( JOIN ( R [ grammatical gender ] ) [ peasants ] ) )",
            "( AND ( JOIN [ grammatical gender of masculine animate non-personal ] [ peasants ] ) ( JOIN ( R [ language of name ] ) [ peasants ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ has grammatical gender ] [ masculine animate non-personal ] ) ( JOIN ( R [ language of work or name ] ) [ The Peasants ] ) )"
    },
    {
        "question": "Question: { Which is participating teams of FC Bayern Munich? }",
        "predicted_query": [
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ member of ] ) [ FC Bayern Munich ] ) )",
            "( JOIN ( R [ participating teams ] ) [ FC Bayern Munich ] )",
            "( JOIN [ participating teams ] [ FC Bayern Munich ] )",
            "( JOIN [ participates in sport event ] [ FC Bayern Munich ] )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ participant in ] ) [ FC Bayern Munich ] ) )"
        ],
        "gen_label": "( JOIN [ participating team ] [ FC Bayern Munich ] )"
    },
    {
        "question": "Question: { Which is a continent of San Marino? }",
        "predicted_query": [
            "( JOIN ( R [ continent ] ) [ San Marino ] )",
            "( JOIN [ continent ] [ San Marino ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ San Marino ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ continent ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) [ San Marino ] )",
            "( JOIN [ continent ] [ San Marino ] )"
        ],
        "gen_label": "( JOIN ( R [ continent ] ) [ San Marino ] )"
    },
    {
        "question": "Question: { In which type, the War of Honor film is written by? }",
        "predicted_query": [
            "( JOIN ( R [ type ] ) ( JOIN ( R [ writer ] ) [ War of Honor ] ) )",
            "( JOIN [ written by ] [ War of Honor ] )",
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ written by ] ) [ War of Honor ] ) )",
            "( AND ( JOIN [ written by ] [ War of Honor ] ) ( JOIN ( R [ type of work ] ) [ War of Honor ] ) )",
            "( JOIN [ type ] [ War of Honor ] ) ( JOIN ( R [ writer ] ) [ War of Honor ] )"
        ],
        "gen_label": "( JOIN ( R [ genre ] ) ( JOIN ( R [ author ] ) [ War of Honor ] ) )"
    },
    {
        "question": "Question: { What {has rural cities} of {national of} of {Fatai Rolling Dollar} ? }",
        "predicted_query": [
            "[",
            "( JOIN ( R [ has rural city ] ) ( JOIN ( R [ country of origin ] ) [ Fatai Rolling Dollar ] ) )",
            "( JOIN ( R [ country of manufacture ] ) ( JOIN ( R [ country of origin ] ) [ Fatai Rolling Dollar ] ) )",
            "( JOIN ( R [ has rural cities ] ) ( JOIN ( R [ country of citizenship ] ) [ Fatai Rolling Dollar ] ) )",
            "( AND ( JOIN [ country ] [ United States ] ) ( JOIN ( R [ place of death ] ) [ Fatai Rolling Dollar ] ) )"
        ],
        "gen_label": "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ country of citizenship ] ) [ Fatai Rolling Dollar ] ) )"
    },
    {
        "question": "Question: { What was the biological location and cause of death of Ernst Bollden? }",
        "predicted_query": [
            "( JOIN ( R [ biological location ] ) ( JOIN ( R [ cause of death ] ) [ Ernst Bollden ] ) )",
            "( AND ( JOIN [ cause of death ] [ cancer ] ) ( JOIN ( R [ place of death ] ) [ Ernst Bollden ] ) )",
            "( AND ( JOIN [ place of death or findspot ] [ Ernst Bollden ] ) ( JOIN ( R [ cause of death ] ) [ Ernst Bollden ] ) )",
            "( JOIN ( R [ location of death ] ) ( JOIN ( R [ cause of death ] ) [ Ernst Bollden ] ) )",
            "( JOIN [ biological location ] [ Ernst Bollden ] ) ( JOIN ( R [ cause of death ] ) [ Ernst Bollden ] )"
        ],
        "gen_label": "( JOIN ( R [ anatomical location ] ) ( JOIN ( R [ cause of death ] ) [ Ernst Bolldén ] ) )"
    },
    {
        "question": "Question: { Who is the chairwoman of Eric Rossi's political party? }",
        "predicted_query": [
            "( JOIN ( R [ chairwoman ] ) ( JOIN ( R [ member of political party ] ) [ Eric Rossi ] ) )",
            "( JOIN ( R [ chairman ] ) ( JOIN ( R [ member of political party ] ) [ Eric Rossi ] ) )",
            "( JOIN [ chairwoman ] [ Eric Rossi ] )",
            "( JOIN ( R [ chairperson ] ) ( JOIN ( R [ member of political party ] ) [ Eric Rossi ] ) )",
            "( AND ( JOIN [ member of political party ] [ Eric Rossi ] ) ( JOIN ( R [ head of government ] ) [ Jean-Claude Juncker ] ) )"
        ],
        "gen_label": "( JOIN ( R [ chairperson ] ) ( JOIN ( R [ member of political party ] ) [ Éric Rossi ] ) )"
    },
    {
        "question": "Question: { Which is the Irish Rugby Football Union men's player ID for Brian O'Driscoll? }",
        "predicted_query": [
            "( JOIN ( R [ Irish Rugby Football Union men's player ID ] ) [ Brian O'Driscoll ] )",
            "( AND ( JOIN [ IRFU player ID ] [ Brian O'Driscoll ] ) ( JOIN ( R [ ID ] ) [ Irish Rugby Football Union ] ) )",
            "( JOIN ( R [ Irish Rugby Football Union men's player ID ] ) [ Brian O'Driscoll ] )",
            "[rugby player ID] JOIN [Brian O'Driscoll]",
            "( AND ( JOIN [ Irish Rugby Football Union player ID ] [ Brian O'Driscoll ] ) ( JOIN ( R [ sports discipline ] ) [ rugby union ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Irish Rugby Football Union men's player ID ] ) [ Brian O'Driscoll ] )"
    },
    {
        "question": "Question: { Which is the net worth estimate for Elizabeth Holmes? }",
        "predicted_query": [
            "( JOIN ( R [ net worth estimate ] ) [ Elizabeth Holmes ] )",
            "( JOIN ( R [ net worth estimate ( in US dollars ) ] ) [ Elizabeth Holmes ] )",
            "### Historical Optimization Description:",
            "( JOIN ( R [ net worth estimate ] ) [ Elizabeth Holmes ] )",
            "( JOIN [ net worth estimate ] [ Elizabeth Holmes ] )"
        ],
        "gen_label": "( JOIN ( R [ net worth ] ) [ Elizabeth Holmes ] )"
    },
    {
        "question": "Question: { What is FIS ID for Shaun White? }",
        "predicted_query": [
            "[deaths caused by avalanche]",
            "( JOIN [ FIS ID ] [ Shaun White ] )",
            "( JOIN ( R [ FIS ID ] ) [ Shaun White ] )",
            "( [ JOIN ] [ FIS athlete ID ] )",
            "( AND ( JOIN [ Fédération Internationale de Ski ID ] [ Shaun White ] ) ( JOIN ( R [ sports discipline ] ) [ Shaun White ] ) )"
        ],
        "gen_label": "( JOIN ( R [ FIS snowboarder ID ] ) [ Shaun White ] )"
    },
    {
        "question": "Question: { What is the country of jurisdiction of Germany? }",
        "predicted_query": [
            "( JOIN [ country of jurisdiction ] [ Germany ] )",
            "( JOIN ( R [ country of jurisdiction ] ) [ Germany ] )",
            "( JOIN ( R [ country of origin ] ) [ Germany ] )",
            "( JOIN [ country of jurisdiction ] [ Germany ] )",
            "( AND ( JOIN [ has capital of ] [ Berlin ] ) ( JOIN ( R [ country of origin ] ) [ Germany ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ applies to jurisdiction ] [ Germany ] ) ( JOIN ( R [ main regulatory text ] ) [ unfree labour ] ) )"
    },
    {
        "question": "Question: { What country is the candidate from the Philippine-American War from? }",
        "predicted_query": [
            "( JOIN ( R [ country ] ) ( JOIN ( R [ participant ] ) [ Philippine-American War ] ) )",
            "( JOIN ( R [ country of origin ] ) ( JOIN ( R [ participant ] ) [ Philippine-American War ] ) )",
            "( AND ( JOIN [ participant ] [ Philippine-American War ] ) ( JOIN ( R [ country ] ) [ Philippine-American War ] ) )",
            "( JOIN [ country of origin ] [ Philippine-American War ] )",
            "( AND ( JOIN [ location of establishment ] [ Philippines ] ) ( JOIN ( R [ participant ] ) [ Philippine–American War ] ) )"
        ],
        "gen_label": "( JOIN ( R [ mobile country code ] ) ( JOIN ( R [ participant ] ) [ Philippine–American War ] ) )"
    },
    {
        "question": "Question: { What is quoted on the tracklist of How to Recover from a Brain Disease: Is Addiction a Disease, or Is there a Disease-like Stage in Addiction? }",
        "predicted_query": [
            "( JOIN ( R [ quoted in ] ) ( JOIN ( R [ track listing ] ) [ How to Recover from a Brain Disease: Is Addiction a Disease, or Is there a Disease-like Stage in Addiction? ] ) )",
            "( JOIN ( R [ trading platform ] ) ( JOIN ( R [ track listing ] ) [ How to Recover from a Brain Disease: Is Addiction a Disease, or Is there a Disease-like Stage in Addiction? ] ) )",
            "( JOIN [ quoted on ] [ How to Recover from a Brain Disease: Is Addiction a Disease, or Is there a Disease-like Stage in Addiction? ] )",
            "( AND ( JOIN [ quoted in ] [ How to Recover from a Brain Disease: Is Addiction a Disease, or Is there a Disease-like Stage in Addiction? ] ) ( JOIN ( R [ track list ] ) [ How to Recover from a Brain Disease: Is Addiction a Disease, or Is there a Disease-like Stage in Addiction? ] ) ) ",
            "( JOIN ( R [ stock exchange ] ) ( JOIN ( R [ track list ] ) [ How to Recover from a Brain Disease: Is Addiction a Disease, or Is there a Disease-like Stage in Addiction? ] ) )"
        ],
        "gen_label": "( JOIN ( R [ published in ] ) ( JOIN ( R [ cites work ] ) [ How to Recover from a Brain Disease: Is Addiction a Disease, or Is there a Disease-like Stage in Addiction? ] ) )"
    },
    {
        "question": "Question: { When was Cyd Charisse's nephew born? }",
        "predicted_query": [
            "( JOIN ( R [ child ] ) ( JOIN ( R [ born ] ) [ Cyd Charisse ] ) )",
            "( JOIN ( R [ date of death ] ) ( JOIN ( R [ nephew ] ) [ Cyd Charisse ] ) )",
            "( AND ( JOIN [ child ] [ Cyd Charisse ] ) ( JOIN ( R [ born ] ) [ Cyd Charisse ] ) )",
            "( JOIN [ child of ] [ Cyd Charisse ] ) ( JOIN ( R [ has sibling ] ) [ Cyd Charisse ] )",
            "( AND ( JOIN [ has sibling ] [ Cyd Charisse ] ) ( JOIN ( R [ born to ] ) [ Cyd Charisse ] ) )"
        ],
        "gen_label": "( JOIN ( R [ date of birth ] ) ( JOIN ( R [ relative ] ) [ Cyd Charisse ] ) )"
    },
    {
        "question": "Question: { Who gave the{next crossing upstream} of {shooting location} of {Independence Day: Resurgence} ? }",
        "predicted_query": [
            "( JOIN ( R [ next crossing upstream ] ) ( JOIN ( R [ location of filming ] ) [ Independence Day: Resurgence ] ) )",
            "( JOIN ( R [ crossing ] ) ( JOIN ( R [ location of filming ] ) [ Independence Day: Resurgence ] ) )",
            "( JOIN ( R [ next crossing downstream ] ) ( JOIN ( R [ location of filming ] ) [ Independence Day: Resurgence ] ) )",
            "( JOIN [ next crossing upstream ] [ Independence Day: Resurgence ] )",
            "( AND ( JOIN [ upstream tributary ] [ Mississippi River ] ) ( JOIN ( R [ location of filming ] ) [ Independence Day: Resurgence ] ) )"
        ],
        "gen_label": "( JOIN ( R [ next crossing upstream ] ) ( JOIN ( R [ filming location ] ) [ Independence Day: Resurgence ] ) )"
    },
    {
        "question": "Question: { Who performs \"Unchained Melody\"? }",
        "predicted_query": [
            "( JOIN ( R [ performer ] ) ( JOIN ( R [ composer ] ) [ Unchained Melody ] ) )",
            "( JOIN [ performed by ] [ Unchained Melody ] )",
            "( JOIN ( R [ performer ] ) [ Unchained Melody ] )",
            "( JOIN",
            "( JOIN ( R [ performed by ] ) [ Unchained Melody ] )"
        ],
        "gen_label": "( JOIN ( R [ performer ] ) [ Unchained Melody ] )"
    },
    {
        "question": "Question: { who starring of preceeds of agent cody banks ? }",
        "predicted_query": [
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ follows ] ) [ Agent Cody Banks ] ) )",
            "( JOIN ( R [ actor ] ) ( JOIN ( R [ follows ] ) [ Agent Cody Banks ] ) )",
            "( JOIN [ cast member ] [ Agent Cody Banks ] )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ preceded by ] ) [ Agent Cody Banks ] ) )",
            "( AND ( JOIN [ follows ] [ Agent Cody Banks ] ) ( JOIN ( R [ cast member ] ) [ Agent Cody Banks ] ) )"
        ],
        "gen_label": "( JOIN ( R [ cast member ] ) ( JOIN ( R [ followed by ] ) [ Agent Cody Banks ] ) )"
    },
    {
        "question": "Question: { which is the literary works of doctoral supervisor of finn e kydland }",
        "predicted_query": [
            "( JOIN ( R [ literary works ] ) ( JOIN ( R [ doctoral advisor ] ) [ Finn E. Kydland ] ) )",
            "( JOIN [ literary works ] [ Finn E. Kydland ] )",
            "( [ joins ] [ literary work ] [ Finn E. Kydland ] )",
            "( JOIN ( R [ author ] ) ( JOIN ( R [ doctoral advisor ] ) [ Finn E. Kydland ] ) )",
            "( [ joins ] [ work ] [ Finn E. Kydland ] )"
        ],
        "gen_label": "( JOIN ( R [ notable work ] ) ( JOIN ( R [ doctoral advisor ] ) [ Finn E. Kydland ] ) )"
    },
    {
        "question": "Question: { who is actor of part of series of zippered ? }",
        "predicted_query": [
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ part of the series ] ) [ Zippered ] ) )",
            "( JOIN ( R [ actor ] ) ( JOIN ( R [ part of the series ] ) [ zippered ] ) )",
            "( JOIN [ cast member ] [ Zippered ] )",
            "[Répertoire des sources du droit public français]",
            "[Répertoire des sources du droit public français]"
        ],
        "gen_label": "( JOIN ( R [ cast member ] ) ( JOIN ( R [ part of the series ] ) [ Zippered ] ) )"
    },
    {
        "question": "Question: { What is the place of interment of Gregory Blaxland, which divides into Warringah Council? }",
        "predicted_query": [
            "[SIGHTSEEING.COM] JOIN ( [ divided by ] ) [ Gregory Blaxland ]",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Warringah Council ] ) ( JOIN ( R [ place of interment ] ) [ Gregory Blaxland ] ) )",
            "( JOIN ( R [ place of interment ] ) [ Gregory Blaxland ] )",
            "( JOIN ( R [ place of interment ] ) ( JOIN ( R [ divided by ] ) [ Warringah Council ] ) )",
            "( AND ( JOIN [ shares border with ] [ Warringah Council ] ) ( JOIN ( R [ place of burial or entombment ] ) [ Gregory Blaxland ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ contains the administrative territorial entity ] [ Warringah Council ] ) ( JOIN ( R [ place of burial ] ) [ Gregory Blaxland ] ) )"
    },
    {
        "question": "Question: { What is the rate of literacy in Washington state? }",
        "predicted_query": [
            "( JOIN ( R [ literacy rate ] ) [ Washington ( U.S. state ) ] )",
            "( JOIN [ literacy rate ] [ Washington (state) ] )",
            "( JOIN ( R [ literacy rate ] ) [ Washington ( state ) ] )",
            "( AND ( JOIN [ literacy rate ] [ Washington ( state ) ] ) ( JOIN ( R [ follows ] ) [ William S. Burroughs ] ) )",
            "( JOIN ( R [ literacy rate ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Washington ( state ) ] ) )"
        ],
        "gen_label": "( JOIN ( R [ population ] ) ( JOIN ( R [ country ] ) [ Reading ] ) )"
    },
    {
        "question": "Question: { Which is the authority for Yale University? }",
        "predicted_query": [
            "( JOIN ( R [ authority ] ) [ Yale University ] )",
            "( JOIN [ authority ] [ Yale University ] )",
            "( JOIN ( R [ authority ] ) [ Yale University ] )",
            "( JOIN [ authority for ] [ Yale University ] )",
            "( AND ( JOIN [ authority for ] [ Yale University ] ) ( JOIN ( R [ located in ] ) [ Yale University ] ) )"
        ],
        "gen_label": "( JOIN ( R [ authority ] ) [ Yale University ] )"
    },
    {
        "question": "Question: { Which is the Colour Index International constitution ID for zinc oxide? }",
        "predicted_query": [
            "( JOIN ( R [ Colour Index International constitution ID ] ) [ zinc oxide ] )",
            "( [ JOIN ] [ Colour Index International constitution ID ] [ zinc oxide ] )",
            "[ JOIN [ JOIN [ has [ Colour Index International constitution ID ] ] [ zinc oxide ] ] ]",
            "( AND ( JOIN [ Color Index International constitution ID ] [ zinc oxide ] ) ( JOIN ( R [ ID in this field ] ) [ zinc oxide ] ) )",
            "( JOIN ( R [ Colour Index International constitution ID ] ) [ zinc oxide ] )"
        ],
        "gen_label": "( JOIN ( R [ Colour Index International constitution ID ] ) [ zinc oxide ] )"
    },
    {
        "question": "Question: { Who is the brother of Aeschylus ,who has a career  as military personnel.? }",
        "predicted_query": [
            "( AND ( JOIN [ occupation ] [ military personnel ] ) ( JOIN ( R [ sibling ] ) [ Aeschylus ] ) )",
            "( JOIN [ career ] [ military personnel ] ) ( JOIN [ sibling ] [ Aeschylus ] )",
            "[ ( JOIN ( R [ sibling ] ) ( JOIN ( R [ occupation ] ) [ Aeschylus ] ) ) ]",
            "( AND ( JOIN [ occupation ] [ military personnel ] ) ( JOIN ( R [ sibling ] ) [ Aeschylus ] ) )",
            "( AND ( JOIN [ field of work ] [ military personnel ] ) ( JOIN ( R [ sibling ] ) [ Aeschylus ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ occupation ] [ military personnel ] ) ( JOIN ( R [ sibling ] ) [ Aeschylus ] ) )"
    },
    {
        "question": "Question: { What Genre of music of the Author of In The Flesh? }",
        "predicted_query": [
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ author ] ) [ In the Flesh ] ) )",
            "( JOIN ( R [ genre of music ] ) ( JOIN ( R [ author ] ) [ In the Flesh ] ) )",
            "( JOIN [ genre of music ] [ In the Flesh ] )",
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ author ] ) [ In the Flesh ] ) )",
            "( AND ( JOIN [ field of work ] [ music genre ] ) ( JOIN ( R [ author ] ) [ In the Flesh ] ) )"
        ],
        "gen_label": "( JOIN ( R [ genre ] ) ( JOIN ( R [ lyricist ] ) [ In the Flesh ] ) )"
    },
    {
        "question": "Question: { Which is the stellar rotational velocity for Antares? }",
        "predicted_query": [
            "( JOIN ( R [ stellar rotational velocity ] ) [ Antares ] )",
            "( JOIN ( R [ rotational velocity ] ) [ Antares ] )",
            "( JOIN [ stellar rotational velocity ] [ Antares ] )",
            "( JOIN ( R [ stellar rotational velocity ] ) [ Antares ] )",
            "( JOIN ( R [ rotational velocity ] ) [ Antares ] )"
        ],
        "gen_label": "( JOIN ( R [ stellar rotational velocity ] ) [ Antares ] )"
    },
    {
        "question": "Question: { Which is the category for alumni of educational institution of Dartmouth College? }",
        "predicted_query": [
            "( JOIN [ category for alumni of educational institution ] [ Dartmouth College ] )",
            "( JOIN ( R [ category ] ) ( JOIN ( R [ alumni ] ) [ Dartmouth College ] ) )",
            "( JOIN ( R [ category of ] ) ( JOIN ( R [ alumni ] ) [ Dartmouth College ] ) )",
            "( JOIN ( R [ category for alumni ] ) [ Dartmouth College ] )",
            "( AND ( JOIN [ member of ] [ Dartmouth College ] ) ( JOIN ( R [ category ] ) [ alumni of Dartmouth College ] ) )"
        ],
        "gen_label": "( JOIN ( R [ category for alumni of educational institution ] ) [ Dartmouth College ] )"
    },
    {
        "question": "Question: { What is the tributary} of on the  bay of Austria-Hungary? }",
        "predicted_query": [
            "( JOIN ( R [ tributary ] ) ( JOIN ( R [ bay ] ) [ Austria-Hungary ] ) )",
            "( JOIN [ tributary of ] [ Bay of Austria-Hungary ] )",
            "( JOIN ( R [ tributary ] ) ( JOIN ( R [ located in the bay of ] ) [ Austria-Hungary ] ) )",
            "( JOIN ( R [ tributary of ] ) ( JOIN ( R [ located in the bay of ] ) [ Austria-Hungary ] ) )",
            "( AND ( JOIN [ bay of ] [ Austria-Hungary ] ) ( JOIN ( R [ tributary of ] ) [ Austria-Hungary ] ) )"
        ],
        "gen_label": "( JOIN ( R [ tributary ] ) ( JOIN ( R [ located in or next to body of water ] ) [ Austria-Hungary ] ) )"
    },
    {
        "question": "Question: { What is the Unifrance company id for NHK? }",
        "predicted_query": [
            "( JOIN ( R [ Unifrance company ID ] ) [ NHK ] )",
            "( JOIN ( R [ Unifrance company ID ] ) [ NHK ] )",
            "( JOIN ( R [ Unifrance company ID ] ) [ NHK ] )",
            "( JOIN [ Unifrance company ID ] [ NHK ] )",
            "( [ joined by ] [ Unifrance company ID ] ) [ NHK ]"
        ],
        "gen_label": "( JOIN ( R [ Unifrance company ID ] ) [ NHK ] )"
    },
    {
        "question": "Question: { What method of murder is mentioned in the dedication of Church of St Peter and St Paul, in the Church of England? }",
        "predicted_query": [
            "( JOIN ( R [ method of murder ] ) ( JOIN ( R [ dedicatee ] ) [ Church of St Peter and St Paul, in the Church of England ] ) )",
            "( AND ( JOIN [ named after ] [ Church of St Peter and St Paul, in the Church of England ] ) ( JOIN ( R [ method of murder ] ) [ John Donne ] ) )",
            "( AND ( JOIN [ contains the information about ] [ Church of St Peter and St Paul, in the Church of England ] ) ( JOIN ( R [ method of murder ] ) [ John Donne ] ) )",
            "( JOIN ( R [ form of death ] ) ( JOIN ( R [ dedicatee ] ) [ Church of St Peter and St Paul, in the Church of England ] ) )",
            "( AND ( JOIN [ notable work ] [ Church of St Peter and St Paul, in the Church of England ] ) ( JOIN ( R [ form of death ] ) [ William Wilberforce ] ) )"
        ],
        "gen_label": "( JOIN ( R [ cause of death ] ) ( JOIN ( R [ dedicated to ] ) [ Church of St Peter St Paul ( church of England ) ] ) )"
    },
    {
        "question": "Question: { What is IPv4 routing prefix for Boeing ? }",
        "predicted_query": [
            "( JOIN ( R [ IPv4 routing prefix ] ) [ Boeing ] )",
            "( JOIN [ IPv4 routing prefix ] [ Boeing ] )",
            "( [ joined by ] [ IPv4 routing prefix ] [ Boeing ] )",
            "( AND ( JOIN [ Internet Protocol version 4 ( IPv4 ) ] [ Boeing ] ) ( JOIN ( R [ IP address prefix ] ) [ Boeing ] ) )",
            "( JOIN ( R [ IPv4 routing prefix ] ) [ Boeing ] )"
        ],
        "gen_label": "( JOIN ( R [ IPv4 routing prefix ] ) [ Boeing ] )"
    },
    {
        "question": "Question: { What is a facet of a polytype of 600-cell with an equilateral triangle base? }",
        "predicted_query": [
            "( AND ( JOIN [ facet of ] [ equilateral triangle ] ) ( JOIN ( R [ has facet ] ) [ 600-cell ] ) )",
            "( JOIN ( R [ facet ] ) ( JOIN ( R [ base shape ] ) [ 600-cell ] ) )",
            "( AND ( JOIN [ base shape ] [ equilateral triangle ] ) ( JOIN ( R [ facet ] ) [ 600-cell ] ) )",
            "( AND ( JOIN [ has facet ] [ equilateral triangle base ] ) ( JOIN ( R [ has facet ] ) [ 600-cell ] ) )",
            "( JOIN [ facet of ] [ polytype of 600-cell with an equilateral triangle base ] )"
        ],
        "gen_label": "( AND ( JOIN [ base ] [ equilateral triangle ] ) ( JOIN ( R [ has facet polytope ] ) [ 600-cell ] ) )"
    },
    {
        "question": "Question: { Which was the target of Battle of Stalingrad? }",
        "predicted_query": [
            "( JOIN ( R [ target of ] ) [ Battle of Stalingrad ] )",
            "( JOIN ( R [ target ] ) [ Battle of Stalingrad ] )",
            "( JOIN ( R [ participant in the Battle of Stalingrad ] ) [ Battle of Stalingrad ] )",
            "( JOIN [ target of ] [ Battle of Stalingrad ] )",
            "( AND ( JOIN [ location of battle ] [ Battle of Stalingrad ] ) ( JOIN ( R [ participant in the war ] ) [ Battle of Stalingrad ] ) )"
        ],
        "gen_label": "( JOIN ( R [ target ] ) [ Battle of Stalingrad ] )"
    },
    {
        "question": "Question: { Which of Henry Holidays' paintings are his representative works? }",
        "predicted_query": [
            "( JOIN ( R [ notable work ] ) ( JOIN ( R [ artist ] ) [ Henry Holiday ] ) )",
            "( AND ( JOIN [ work of ] [ Henry Holiday ] ) ( JOIN ( R [ notable work ] ) [ Henry Holiday ] ) )",
            "( JOIN [ representative work ] [ Henry Holiday ] )",
            "( JOIN ( R [ painter ] ) ( JOIN ( R [ notable work ] ) [ Henry Holiday ] ) )",
            "( AND ( JOIN [ genre ] [ painting ] ) ( JOIN ( R [ notable work ] ) [ Henry Holiday ] ) )"
        ],
        "gen_label": "( JOIN ( R [ depicts ] ) ( JOIN ( R [ notable work ] ) [ Henry Holiday ] ) )"
    },
    {
        "question": "Question: { Which is {sporting event} of {child of} {Gore Vidal} ? }",
        "predicted_query": [
            "( JOIN ( R [ sporting event ] ) ( JOIN ( R [ child ] ) [ Gore Vidal ] ) )",
            "( JOIN ( R [ sport ] ) ( JOIN ( R [ child ] ) [ Gore Vidal ] ) )",
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ child ] ) [ Gore Vidal ] ) )",
            "( JOIN [ sporting event ] [ child of ] ) [ Gore Vidal ]",
            "( JOIN ( R [ participant in sport ] ) ( JOIN ( R [ father ] ) [ Gore Vidal ] ) )"
        ],
        "gen_label": "( JOIN ( R [ sports discipline competed in ] ) ( JOIN ( R [ father ] ) [ Gore Vidal ] ) )"
    },
    {
        "question": "Question: { Maryland is coordinates of southernmost point ? }",
        "predicted_query": [
            "( JOIN ( R [ coordinates of southernmost point ] ) [ Maryland ] )",
            "( JOIN [ southernmost point ] [ Maryland ] )",
            "( JOIN [ coordinates of southernmost point ] [ Maryland ] )",
            "( AND ( JOIN [ latitude ] [ 37°N ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Maryland ] ) )",
            "( AND ( JOIN [ latitude or longitude ] [ southernmost point of Maryland ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Maryland ] ) )"
        ],
        "gen_label": "( JOIN ( R [ coordinates of southernmost point ] ) [ Maryland ] )"
    },
    {
        "question": "Question: { Who is Leo Kanner's Patient? }",
        "predicted_query": [
            "( JOIN ( R [ patient ] ) [ Leo Kanner ] )",
            "( JOIN [ patient ] [ Leo Kanner ] )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ diagnosed with ] ) [ Leo Kanner ] ) )",
            "( JOIN ( R [ patient of ] ) ( JOIN ( R [ psychiatrist ] ) [ Leo Kanner ] ) )",
            "( AND ( JOIN [ doctor ] [ Leo Kanner ] ) ( JOIN ( R [ patient ] ) [ autism ] ) )"
        ],
        "gen_label": "( JOIN [ patient of ] [ Leo Kanner ] )"
    },
    {
        "question": "Question: { Which is the organisation directed from the office of the pope? }",
        "predicted_query": [
            "( JOIN [ directed from office ] [ papacy ] )",
            "( JOIN ( R [ headquartered in ] ) ( JOIN ( R [ director ] ) [ Pope ] ) )",
            "( JOIN ( R [ directed from office ] ) [ Pope ] )",
            "( JOIN [ directed from the office ] [ papacy ] )",
            "( AND ( JOIN [ director ] [ Pope ] ) ( JOIN ( R [ headed by ] ) [ Catholic Church ] ) )"
        ],
        "gen_label": "( JOIN ( R [ organization directed by the office or position ] ) [ pope ] )"
    },
    {
        "question": "Question: { What is the Annie Award for? }",
        "predicted_query": [
            "( JOIN ( R [ award received ] ) ( JOIN ( R [ award received ] ) [ Annie Award ] ) )",
            "( JOIN ( JOIN ( R [ award received ] ) [ Annie Award ] ) )",
            "( JOIN ( R [ Annie Award for ] ) [ animation ] )",
            "( JOIN [ Annie Award for ] [ Annie Award ] )",
            "( AND ( JOIN [ award received by ] [ Annie Award ] ) ( JOIN ( R [ award received by ] ) [ Annie Award ] ) )"
        ],
        "gen_label": "( JOIN [ nominated for ] [ Annie Award ] )"
    },
    {
        "question": "Question: { Which is the BVPB authority ID for Asturias? }",
        "predicted_query": [
            "( JOIN ( R [ BVPB authority ID ] ) [ Asturias ] )",
            "( JOIN ( R [ BVPB authority ID ] ) [ Asturias ] )",
            "( JOIN ( R [ BVPB authority ID ] ) [ Asturias ] )",
            "( JOIN ( R [ BVKP authority ID ] ) [ Asturias ] )",
            "( JOIN [ BVPB authority ID ] [ Asturias ] )"
        ],
        "gen_label": "( JOIN ( R [ BVPB authority ID ] ) [ Asturias ] )"
    },
    {
        "question": "Question: { In what field of profession is Daniel Kucan? }",
        "predicted_query": [
            "( JOIN ( R [ field of profession ] ) ( JOIN ( R [ occupation ] ) [ Daniel Kucan ] ) )",
            "( JOIN ( R [ field of work ] ) ( JOIN ( R [ occupation ] ) [ Daniel Kucan ] ) )",
            "( JOIN [ field of profession ] [ Daniel Kucan ] )",
            "( AND ( JOIN [ occupation ] [ professional field ] ) ( JOIN ( R [ field of study ] ) [ Daniel Kucan ] ) )",
            "( JOIN ( R [ field of profession ] ) [ Daniel Kucan ] )"
        ],
        "gen_label": "( JOIN ( R [ field of this occupation ] ) ( JOIN ( R [ occupation ] ) [ Daniel Kucan ] ) )"
    },
    {
        "question": "Question: { What is the publication interval for The New York Times? }",
        "predicted_query": [
            "( JOIN ( R [ publication interval ] ) [ The New York Times ] )",
            "( JOIN [ publication interval ] [ The New York Times ] )",
            "( JOIN ( R [ publication interval ] ) [ The New York Times ] )",
            "( AND ( JOIN [ time span of publication ] [ The New York Times ] ) ( JOIN ( R [ time span ] ) [ The New York Times ] ) )",
            "( JOIN ( R [ publication interval ] ) ( JOIN ( R [ publisher ] ) [ The New York Times ] ) )"
        ],
        "gen_label": "( JOIN ( R [ publication interval ] ) [ The New York Times ] )"
    },
    {
        "question": "Question: { What is outcome  signs of scarlet fever ? }",
        "predicted_query": [
            "( JOIN [ has outcome ] [ scarlet fever ] )",
            "( JOIN ( R [ has effect ] ) ( JOIN ( R [ symptoms ] ) [ scarlet fever ] ) )",
            "[ JOIN ( [ diagnosed with ] ) [ scarlet fever ] ]",
            "( JOIN ( JOIN ( R [ has effect ] ) [ scarlet fever ] ) )",
            "( JOIN ( R [ has outcome ] ) ( JOIN ( R [ has symptom ] ) [ scarlet fever ] ) )"
        ],
        "gen_label": "( JOIN ( R [ has cause ] ) ( JOIN ( R [ symptoms and signs ] ) [ scarlet fever ] ) )"
    },
    {
        "question": "Question: { On the Churchill River what lakes are on the river? }",
        "predicted_query": [
            "( JOIN ( R [ located on body of water ] ) ( JOIN ( R [ tributary ] ) [ Churchill River ] ) )",
            "( JOIN [ lakes on river ] [ Churchill River ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Churchill River ] ) ( JOIN ( R [ located on the border of ] ) [ Churchill River ] ) )",
            "( JOIN ( R [ has tributary ] ) ( JOIN ( R [ located on body of water ] ) [ Churchill River ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Churchill River ] ) ( JOIN ( R [ tributary ] ) [ Churchill River ] ) )"
        ],
        "gen_label": "( JOIN ( R [ lake on watercourse ] ) [ Churchill River ] )"
    },
    {
        "question": "Question: { Who is life stance of Executive Order 6022 written by? }",
        "predicted_query": [
            "( JOIN ( R [ life stance ] ) ( JOIN ( R [ author ] ) [ Executive Order 6022 ] ) )",
            "( AND ( JOIN [ has participant ] [ Executive Order 6022 ] ) ( JOIN ( R [ influenced by ] ) [ life stance ] ) )",
            "( JOIN [ life stance ] [ Executive Order 6022 ] )",
            "( JOIN ( R [ philosophy or worldview ] ) ( JOIN ( R [ author ] ) [ Executive Order 6022 ] ) )",
            "( AND ( JOIN [ influenced by ] [ Executive Order 6022 ] ) ( JOIN ( R [ influenced by ] ) [ life stance ] ) )"
        ],
        "gen_label": "( JOIN ( R [ religion or worldview ] ) ( JOIN ( R [ author ] ) [ Executive Order 6022 ] ) )"
    },
    {
        "question": "Question: { Which is the first appearance of Mario? }",
        "predicted_query": [
            "[ JOIN [ first appearance ] [ Mario ] ]",
            "( JOIN [ first appearance ] [ Mario ] )",
            "( JOIN ( R [ first appearance ] ) [ Mario ] )",
            "[DELETE_QUERY_HISTORY]",
            "[]"
        ],
        "gen_label": "( JOIN ( R [ first appearance ] ) [ Mario ] )"
    },
    {
        "question": "Question: { What is the population of the Anambra State? }",
        "predicted_query": [
            "( JOIN ( R [ population ] ) [ Anambra State ] )",
            "( JOIN [ population ] [ Anambra State ] )",
            "( JOIN ( R [ population ] ) [ Anambra State ] )",
            "( JOIN ( R [ population ] ) [ Anambra ] )",
            "( JOIN ( R [ population ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Anambra State ] ) )"
        ],
        "gen_label": "( JOIN ( R [ population ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Anambra State ] ) )"
    },
    {
        "question": "Question: { The consequence of this autoimmune disease is? }",
        "predicted_query": [
            "( JOIN [ has consequence ] [ autoimmune disease ] )",
            "( JOIN ( R [ has consequence ] ) ( JOIN ( R [ causes ] ) [ systemic lupus erythematosus ] ) )",
            "( JOIN [ consequence ] [ autoimmune disease ] )",
            "( JOIN ( R [ consequence ] ) [ autoimmune disease ] )",
            "( JOIN ( R [ has effect ] ) ( JOIN ( R [ cause ] ) [ autoimmune disease ] ) )"
        ],
        "gen_label": "( JOIN ( R [ genetic association ] ) ( JOIN ( R [ has effect ] ) [ autoimmune disease ] ) )"
    },
    {
        "question": "Question: { Which is the seat of team Eddie Miller? }",
        "predicted_query": [
            "( JOIN ( R [ seat of government ] ) [ Eddie Miller ] )",
            "( JOIN ( R [ capital ] ) ( JOIN ( R [ member of sports team ] ) [ Eddie Miller ] ) )",
            "( JOIN [ seat of team ] [ Eddie Miller ] )",
            "[DELETE THE JOIN]",
            "( AND ( JOIN [ location of headquarters ] [ Eddie Miller ] ) ( JOIN ( R [ member of ] ) [ Eddie Miller ] ) )"
        ],
        "gen_label": "( JOIN ( R [ headquarters location ] ) ( JOIN ( R [ member of sports team ] ) [ Eddie Miller ] ) )"
    },
    {
        "question": "Question: { what is the source of watercourse of the Fraser River, that has hill range in American Cordillera? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ American Cordillera ] ) ( JOIN ( R [ source of watercourse ] ) [ Fraser River ] ) )",
            "( AND ( JOIN [ mountain range ] [ American Cordillera ] ) ( JOIN ( R [ source of ] ) [ Fraser River ] ) )",
            "( AND ( JOIN [ has summit ] [ American Cordillera ] ) ( JOIN ( R [ source of watercourse ] ) [ Fraser River ] ) )",
            "( AND ( JOIN [ mountain range ] [ American Cordillera ] ) ( JOIN ( R [ tributary ] ) [ Fraser River ] ) )",
            "( AND ( JOIN [ part of mountain range ] [ American Cordillera ] ) ( JOIN ( R [ source of ] ) [ Fraser River ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ mountain range ] [ American Cordillera ] ) ( JOIN ( R [ origin of the watercourse ] ) [ Fraser River ] ) )"
    },
    {
        "question": "Question: { What is the stock exchange for PayPal? }",
        "predicted_query": [
            "( JOIN ( R [ stock exchange ] ) [ PayPal ] )",
            "( JOIN [ stock exchange ] [ PayPal ] )",
            "( JOIN [ stock exchange ] [ PayPal ] )",
            "( [ joined by ] [ stock exchange ] [ PayPal ] )",
            "( JOIN ( R [ stock exchange ] ) [ PayPal ] )"
        ],
        "gen_label": "( JOIN ( R [ stock exchange ] ) [ PayPal ] )"
    },
    {
        "question": "Question: { What is the timezone in Arab States Broadcasting Union? }",
        "predicted_query": [
            "( JOIN ( R [ time zone ] ) ( JOIN ( R [ member of ] ) [ Arab States Broadcasting Union ] ) )",
            "[ JOIN [ member of ] [ time zone ] [ Arab States Broadcasting Union ] ]",
            "( JOIN [ time zone ] [ Arab States Broadcasting Union ] )",
            "{ JOIN [ time zone ] [ member of ] [ Arab States Broadcasting Union ] }",
            "( AND ( JOIN [ located in time zone ] [ Arab States Broadcasting Union ] ) ( JOIN ( R [ located in time zone ] ) [ Arab States Broadcasting Union ] ) )"
        ],
        "gen_label": "( JOIN ( R [ located in time zone ] ) ( JOIN ( R [ headquarters location ] ) [ Arab States Broadcasting Union ] ) )"
    },
    {
        "question": "Question: { Who are the inhabitants of the main topic of the History of Bangladesh? }",
        "predicted_query": [
            "( JOIN ( R [ inhabitant ] ) ( JOIN ( R [ topic ] ) [ History of Bangladesh ] ) )",
            "( JOIN ( R [ inhabitant of ] ) ( JOIN ( R [ topic ] ) [ history of Bangladesh ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ History of Bangladesh ] ) ( JOIN ( R [ inhabited by ] ) [ History of Bangladesh ] ) )",
            "( JOIN ( R [ population ] ) ( JOIN ( R [ topic ] ) [ History of Bangladesh ] ) )",
            "( JOIN [ inhabitant ] [ History of Bangladesh ] )"
        ],
        "gen_label": "( JOIN ( R [ population ] ) ( JOIN ( R [ facet of ] ) [ history of Bangladesh ] ) )"
    },
    {
        "question": "Question: { Which is the THW Kiel player ID for Nikola Karabatić? }",
        "predicted_query": [
            "( [ JOIN ] [ THW Kiel player ID ] )",
            "( JOIN ( R [ THW Kiel player ID ] ) [ Nikola Karabatić ] )",
            "( JOIN ( R [ THW Kiel player ID ] ) ( JOIN ( R [ ID ] ) [ Nikola Karabatić ] ) )",
            "( JOIN ( R [ THW Kiel player ID ] ) [ Nikola Karabatić ] )",
            "( [ JOIN ] [ Nikola Karabatić ] )"
        ],
        "gen_label": "( JOIN ( R [ THW Kiel player ID ] ) [ Nikola Karabatić ] )"
    },
    {
        "question": "Question: { We can do it replica is what? }",
        "predicted_query": [
            "( JOIN ( R [ replica of ] ) [ We Can Do It! ] )",
            "( JOIN [ replica of ] [ We Can Do It! ] )",
            "( JOIN [ replica of ] [ We can do it ] )",
            "( JOIN ( R [ copyright holder ] ) ( JOIN ( R [ manufacturer ] ) [ We Can Do It! ] ) )",
            "( AND ( JOIN [ has replica of ] [ We can do it ] ) ( JOIN ( R [ has copy ] ) [ We Can Do It! ] ) )"
        ],
        "gen_label": "( JOIN ( R [ model ] ) [ We Can Do It! ] )"
    },
    {
        "question": "Question: { What is Tetris's KLOV ID? }",
        "predicted_query": [
            "( JOIN ( R [ KLOV ID ] ) [ Tetris ] )",
            "( JOIN [ KLOV ID ] [ Tetris ] )",
            "( JOIN ( R [ KLOV ID ] ) [ Tetris ] )",
            "( AND ( JOIN [ Video Games Database ID ] [ Tetris ] ) ( JOIN ( R [ KLOV ID ] ) [ Tetris ] ) )",
            "( JOIN ( R [ KLOV ID ] ) [ Tetris ] )"
        ],
        "gen_label": "( JOIN ( R [ Killer List of Videogames ID ] ) [ Tetris ] )"
    },
    {
        "question": "Question: { Which woman mistakenly understood as man? }",
        "predicted_query": [
            "### Historical Artifacts:",
            "( AND ( JOIN [ sex or gender ] [ male ] ) ( JOIN ( R [ mistaken for ] ) [ woman ] ) )",
            "( JOIN [ mistakenly understood as ] [ man ] )",
            "( AND ( JOIN [ gender identity ] [ male ] ) ( JOIN ( R [ mistaken for ] ) [ woman ] ) )",
            "( AND ( JOIN [ sex or gender ] [ male ] ) ( JOIN ( R [ incorrectly identified as ] ) [ John C. Lilly ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ different from ] [ man ] ) ( JOIN ( R [ sex or gender ] ) [ Judas Iscariot ] ) )"
    },
    {
        "question": "Question: { Which is the citizenship of Agnetha Fältskog? }",
        "predicted_query": [
            "( JOIN ( R [ citizenship ] ) [ Agnetha Fältskog ] )",
            "( JOIN ( R [ citizenship ] ) ( JOIN ( R [ place of birth ] ) [ Agnetha Fältskog ] ) )",
            "( JOIN [ citizenship ] [ Agnetha Fältskog ] )",
            "( JOIN ( R [ country of citizenship ] ) ( JOIN ( R [ member of ] ) [ Agnetha Fältskog ] ) )",
            "( JOIN ( R [ citizenship ] ) ( JOIN ( R [ country of citizenship ] ) [ Agnetha Fältskog ] ) )"
        ],
        "gen_label": "( JOIN ( R [ public holiday ] ) ( JOIN ( R [ country of citizenship ] ) [ Agnetha Fältskog ] ) )"
    },
    {
        "question": "Question: { What is in the category of Ernest Renan? }",
        "predicted_query": [
            "( JOIN ( R [ category ] ) [ Ernest Renan ] )",
            "( JOIN [ category of ] [ Ernest Renan ] )",
            "( JOIN [ category of ] [ Ernest Renan ] )",
            "( JOIN ( R [ category ] ) ( JOIN ( R [ field of work ] ) [ Ernest Renan ] ) )",
            "( AND ( JOIN [ field of work ] [ category ] ) ( JOIN ( R [ follows ] ) [ Ernest Renan ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Académie des Inscriptions et Belles-Lettres member ID ] ) [ Ernest Renan ] )"
    },
    {
        "question": "Question: { Name the writer  of Kepler's laws of planetary motion }",
        "predicted_query": [
            "( JOIN ( R [ author ] ) ( JOIN ( R [ discoverer ] ) [ Kepler's laws of planetary motion ] ) )",
            "( JOIN ( R [ writer ] ) [ Kepler's laws of planetary motion ] )",
            "( JOIN [ writer ] [ Kepler's laws of planetary motion ] )",
            "( JOIN ( R [ author ] ) ( JOIN ( R [ follows ] ) [ Kepler's laws of planetary motion ] ) )",
            "( JOIN ( R [ writer or editor ] ) [ Kepler's laws of planetary motion ] )"
        ],
        "gen_label": "( AND ( JOIN [ occupation ] [ writer ] ) ( JOIN ( R [ named after ] ) [ Kepler's laws of planetary motion ] ) )"
    },
    {
        "question": "Question: { Which is the partnership with of Antipope John XXIII? }",
        "predicted_query": [
            "( JOIN ( R [ partnership with ] ) ( JOIN ( R [ member of ] ) [ Antipope John XXIII ] ) )",
            "( JOIN [ partnership with ] [ Antipope John XXIII ] )",
            "( JOIN ( R [ partner ] ) ( JOIN ( R [ member of ] ) [ Antipope John XXIII ] ) )",
            "( JOIN [ partnership of ] [ Antipope John XXIII ] )",
            "( JOIN ( R [ partnership ] ) ( JOIN ( R [ member of ] ) [ Antipope John XXIII ] ) )"
        ],
        "gen_label": "( JOIN [ partnership with ] [ John XXIII ] )"
    },
    {
        "question": "Question: { What is Albert Günther's RA Collections ID? }",
        "predicted_query": [
            "( JOIN [ RA Collections ID ] [ Albert Günther ] )",
            "[ JOIN ] [ RA Collections ID ] [ Albert Günther ]",
            "( JOIN ( R [ RA Collections ID ] ) [ Albert Günther ] )",
            "( AND ( JOIN [ Royal Albert Memorial Museum Collections ID ] [ Albert Günther ] ) ( JOIN ( R [ ID ] ) [ Albert Günther ] ) )",
            "( JOIN ( R [ RA Collections ID ] ) [ Albert Günther ] )"
        ],
        "gen_label": "( JOIN ( R [ RA Collections ID ] ) [ Albert Günther ] )"
    },
    {
        "question": "Question: { Which is dissolved, abolished or demolished for Delian League? }",
        "predicted_query": [
            "( JOIN ( R [ dissolved, abolished, or demolished ] ) [ Delian League ] )",
            "( JOIN [ dissolved, abolished or demolished ] [ Delian League ] )",
            "( JOIN ( R [ dissolved, abolished or demolished ] ) [ Delian League ] )",
            "{ JOIN [ dissolved or disestablished ] [ Delian League ] }",
            "( JOIN ( R [ dissolved or abolished ] ) ( JOIN ( R [ member of ] ) [ Delian League ] ) )"
        ],
        "gen_label": "( JOIN ( R [ dissolved, abolished or demolished date ] ) [ Delian League ] )"
    },
    {
        "question": "Question: { What is the Musee d'Orsay ID for Whistler's Mother? }",
        "predicted_query": [
            "( JOIN ( R [ Musee d'Orsay ID ] ) [ Whistler's Mother ] )",
            "( JOIN ( R [ Musee d'Orsay ID ] ) [ Whistler's Mother ] )",
            "( JOIN ( R [ Musée d'Orsay ID ] ) [ Whistler's Mother ] )",
            "( AND ( JOIN [ Museum of Fine Arts, Boston ID ] [ Whistler's Mother ] ) ( JOIN ( R [ ID in this artist ] ) [ James McNeill Whistler ] ) )",
            "( JOIN ( R [ Musee d'Orsay ID ] ) [ Mother ] )"
        ],
        "gen_label": "( JOIN ( R [ Musée d'Orsay artwork ID ] ) [ Whistler's Mother ] )"
    },
    {
        "question": "Question: { What sport does Bernard Hinault play, whose governing body is the Union Cycliste Internationale? }",
        "predicted_query": [
            "( AND ( JOIN [ sport governing body ] [ Union Cycliste Internationale ] ) ( JOIN ( R [ sport ] ) [ Bernard Hinault ] ) )",
            "( AND ( JOIN [ member of ] [ Union Cycliste Internationale ] ) ( JOIN ( R [ sport ] ) [ Bernard Hinault ] ) )",
            "( AND ( JOIN [ governing body ] [ Union Cycliste Internationale ] ) ( JOIN ( R [ sport ] ) [ Bernard Hinault ] ) )",
            "( AND ( JOIN [ sports governing body ] [ Union Cycliste Internationale ] ) ( JOIN ( R [ sport ] ) [ Bernard Hinault ] ) )",
            "( AND ( JOIN [ member of ] [ Union Cycliste Internationale ] ) ( JOIN ( R [ sport ] ) [ Bernard Hinault ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ authority ] [ Union Cycliste Internationale ] ) ( JOIN ( R [ sport ] ) [ Bernard Hinault ] ) )"
    },
    {
        "question": "Question: { What is the diplomatic relation of International Energy Agency member the Kingdom of Hawaii? }",
        "predicted_query": [
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ member of ] ) [ International Energy Agency ] ) )",
            "( AND ( JOIN [ member of ] [ International Energy Agency ] ) ( JOIN ( R [ diplomatic relation ] ) [ Hawaii ] ) )",
            "( AND ( JOIN [ member of ] [ International Energy Agency ] ) ( JOIN ( R [ diplomatic relations ] ) [ Kingdom of Hawaii ] ) )",
            "( JOIN [ diplomatic relation ] [ International Energy Agency member ] )",
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ member of ] ) [ International Energy Agency ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ member of ] [ International Energy Agency ] ) ( JOIN ( R [ diplomatic relation ] ) [ Kingdom of Hawaiʻi ] ) )"
    },
    {
        "question": "Question: { What is the domain of Lucien Maxant's daughter? }",
        "predicted_query": [
            "( JOIN ( R [ domain ] ) ( JOIN ( R [ child ] ) [ Lucien Maxant ] ) )",
            "( JOIN ( R [ field of work ] ) ( JOIN ( R [ child ] ) [ Lucien Maxant ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Lucien Maxant's daughter ] ) ( JOIN ( R [ field of work ] ) [ Lucien Maxant ] ) )",
            "( JOIN [ domain ] [ Lucien Maxant's daughter ] )",
            "( JOIN [ domain of ] [ Lucien Maxant's daughter ] )"
        ],
        "gen_label": "( JOIN ( R [ field of work ] ) ( JOIN ( R [ father ] ) [ Lucien Maxant ] ) )"
    },
    {
        "question": "Question: { Who is the father of the characters of Exodus? }",
        "predicted_query": [
            "( JOIN ( R [ child ] ) ( JOIN ( R [ characters ] ) [ Exodus ] ) )",
            "( JOIN [ father ] [ Exodus ] )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ character ] ) [ Exodus ] ) )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ character ] ) [ Exodus ] ) )",
            "( AND ( JOIN [ parent of ] [ Exodus ] ) ( JOIN ( R [ parent of ] ) [ Moses ] ) )"
        ],
        "gen_label": "( JOIN ( R [ father ] ) ( JOIN ( R [ characters ] ) [ Exodus ] ) )"
    },
    {
        "question": "Question: { What is the river at Cape Canaveral? }",
        "predicted_query": [
            "( JOIN [ river at ] [ Cape Canaveral ] )",
            "( JOIN ( R [ tributary ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Cape Canaveral ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Cape Canaveral ] ) ( JOIN ( R [ tributary ] ) [ St. Johns River ] ) )",
            "( JOIN ( R [ flows into ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Cape Canaveral ] ) )",
            "( JOIN ( R [ tributary of ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Cape Canaveral ] ) )"
        ],
        "gen_label": "( JOIN ( R [ tributary ] ) ( JOIN ( R [ located in or next to body of water ] ) [ Cape Canaveral ] ) )"
    },
    {
        "question": "Question: { When is {diplomatic relation} and {citizenship} of {Mike Tyson} ? }",
        "predicted_query": [
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country of citizenship ] ) [ Mike Tyson ] ) )",
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country of citizenship ] ) [ Mike Tyson ] ) )",
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country of citizenship ] ) [ Mike Tyson ] ) )",
            "( AND ( JOIN [ diplomatic relation ] [ citizenship ] ) ( JOIN ( R [ country of citizenship ] ) [ Mike Tyson ] ) )",
            "( JOIN ( R [ diplomatic relations ] ) ( JOIN ( R [ citizenship ] ) [ Mike Tyson ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country of citizenship ] ) [ Mike Tyson ] ) )"
    },
    {
        "question": "Question: { Which is the diplomatic relation of the nationality of Buck O'Neil? }",
        "predicted_query": [
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country of citizenship ] ) [ Buck O'Neil ] ) )",
            "{ JOIN [ diplomatic relations ] [ country of citizenship ] [ Buck O'Neil ] }",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ United States ] ) ( JOIN ( R [ diplomatic relation ] ) [ Buck O'Neil ] ) )",
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ nationality ] ) [ Buck O'Neil ] ) )",
            "( JOIN [ diplomatic relation ] [ United States ] ) AND ( JOIN ( R [ place of death ] ) [ Buck O'Neil ] )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country of citizenship ] ) [ Buck O'Neil ] ) )"
    },
    {
        "question": "Question: { What coast is the resting place of W. Fox McKeithen? }",
        "predicted_query": [
            "( JOIN ( R [ coast ] ) ( JOIN ( R [ place of burial ] ) [ W. Fox McKeithen ] ) )",
            "( JOIN [ coast ] [ W. Fox McKeithen ] )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ place of burial ] ) [ W. Fox McKeithen ] ) )",
            "( JOIN ( R [ coastline ] ) ( JOIN ( R [ place of burial ] ) [ W. Fox McKeithen ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Mississippi ] ) ( JOIN ( R [ place of burial ] ) [ W. Fox McKeithen ] ) )"
        ],
        "gen_label": "( JOIN ( R [ located in or next to body of water ] ) ( JOIN ( R [ place of burial ] ) [ W. Fox McKeithen ] ) )"
    },
    {
        "question": "Question: { Which county seat of New York City has got diplomatic relation with Georgia? }",
        "predicted_query": [
            "( AND ( JOIN [ diplomatic relation ] [ Georgia ] ) ( JOIN ( R [ capital ] ) [ New York City ] ) )",
            "( AND ( JOIN [ diplomatic relation ] [ Georgia ] ) ( JOIN ( R [ capital ] ) [ New York City ] ) )",
            "( AND ( JOIN [ capital ] [ Tbilisi ] ) ( JOIN ( R [ diplomatic representation ] ) [ New York City ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ New York City ] ) ( JOIN ( R [ capital ] ) [ Georgia ] ) )",
            "( JOIN ( R [ capital of ] ) ( JOIN ( R [ diplomatic relations ] ) [ New York City ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ diplomatic relation ] [ Georgia ] ) ( JOIN ( R [ capital of ] ) [ New York City ] ) )"
    },
    {
        "question": "Question: { In what mountain range is Mt. Anhui located? }",
        "predicted_query": [
            "( JOIN ( R [ located in the range of ] ) ( JOIN ( R [ mountain range ] ) [ Mt. Anhui ] ) )",
            "( AND ( JOIN [ mountain range ] [ Mt. Anhui ] ) ( JOIN ( R [ located in ] ) [ Mt. Anhui ] ) )",
            "( JOIN [ located in range ] [ Mt. Anhui ] )",
            "( AND ( JOIN [ mountain range ] [ Himalayas ] ) ( JOIN ( R [ located in ] ) [ Mount Anhui ] ) )",
            "( JOIN ( R [ located in mountain range ] ) ( JOIN ( R [ located in ] ) [ Mt. Anhui ] ) )"
        ],
        "gen_label": "( JOIN ( R [ mountain range ] ) ( JOIN ( R [ highest point ] ) [ Anhui ] ) )"
    },
    {
        "question": "Question: { Which is the Unifrance person ID for Patrick Dewaere? }",
        "predicted_query": [
            "( JOIN ( R [ Unifrance person ID ] ) [ Patrick Dewaere ] )",
            "( JOIN ( R [ Unifrance person ID ] ) [ Patrick Dewaere ] )",
            "( JOIN ( R [ Unifrance Person ID ] ) [ Patrick Dewaere ] )",
            "( JOIN [ Unifrance person ID ] [ Patrick Dewaere ] )",
            "[ joined by ] [ Unifrance person ID ]"
        ],
        "gen_label": "( JOIN ( R [ Unifrance person ID ] ) [ Patrick Dewaere ] )"
    },
    {
        "question": "Question: { I need to know Northern Dancer's Czech Jockey Club horse ID. }",
        "predicted_query": [
            "( JOIN ( R [ Czech Jockey Club horse ID ] ) [ Northern Dancer ] )",
            "( AND ( JOIN [ horse ID ] [ Czech Jockey Club ] ) ( JOIN ( R [ horse ID ] ) [ Northern Dancer ] ) )",
            "( JOIN ( R [ Czech Jockey Club horse ID ] ) [ Northern Dancer ] )",
            "( AND ( JOIN [ Jockey Club horse ID ] [ Northern Dancer ] ) ( JOIN ( R [ horse ID ] ) [ Northern Dancer ] ) )",
            "( JOIN ( R [ Czech Jockey Club horse identification number ] ) [ Northern Dancer ] )"
        ],
        "gen_label": "( JOIN ( R [ Czech Jockey Club horse ID ] ) [ Northern Dancer ] )"
    },
    {
        "question": "Question: { What is  the birthplace of Harald zur Hausen, that has a partner city which is in Campo Grande? }",
        "predicted_query": [
            "( AND ( JOIN [ twinned administrative body ] [ Campo Grande ] ) ( JOIN ( R [ place of birth ] ) [ Harald zur Hausen ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Campo Grande ] ) ( JOIN ( R [ place of birth ] ) [ Harald zur Hausen ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Campus Mundi ] ) ( JOIN ( R [ place of birth ] ) [ Harald zur Hausen ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Campo Grande ] ) ( JOIN ( R [ place of birth ] ) [ Harald zur Hausen ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Campo Grande ] ) ( JOIN ( R [ place of birth ] ) [ Harald zur Hausen ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ place of birth ]0 [ Campo Grande ] ) ( JOIN ( R [ place of birth ] ) [ Harald zur Hausen ] ) )"
    },
    {
        "question": "Question: { Which  is taxonomic type of Bactrian camel ? }",
        "predicted_query": [
            "( JOIN ( R [ taxonomic type ] ) [ Bactrian camel ] )",
            "( JOIN [ taxonomic type ] [ Bactrian camel ] )",
            "( JOIN ( R [ taxon rank ] ) ( JOIN ( R [ taxon of ] ) [ Bactrian camel ] ) )",
            "( JOIN ( R [ taxonomic type ] ) [ Bactrian camel ] )",
            "( JOIN ( R [ taxon rank ] ) ( JOIN ( R [ taxon ID ] ) [ Bactrian camel ] ) )"
        ],
        "gen_label": "( JOIN [ taxonomic type ] [ Camelus bactrianus ] )"
    },
    {
        "question": "Question: { Which is the danskefilm animated film ID for Toy Story? }",
        "predicted_query": [
            "( JOIN ( R [ danskefilm animated film ID ] ) [ Toy Story ] )",
            "( JOIN ( R [ Dansk film database animated film ID ] ) [ Toy Story ] )",
            "( [ joined by ] [ danskefilm animated film ID ] [ Toy Story ] )",
            "( JOIN ( R [ danskefilm.dk animated film ID ] ) [ Toy Story ] )",
            "( AND ( JOIN [ Dansk Filminstitut animated film ID ] [ Toy Story ] ) ( JOIN ( R [ ID ] ) [ Toy Story ] ) )"
        ],
        "gen_label": "( JOIN ( R [ danskefilm animated film ID ] ) [ Toy Story ] )"
    },
    {
        "question": "Question: { WHO IS THE ADMIN HQ OF FEDERATION AERONAUTIQUE INTERNATIONALE WHOSE ADJACENT TO IS PRILLY? }",
        "predicted_query": [
            "( AND ( JOIN [ shares border with ] [ Prilly ] ) ( JOIN ( R [ headquarters location ] ) [ Federation Aéronautique Internationale ] ) )",
            "( AND ( JOIN [ shares border with ] [ Prilly ] ) ( JOIN ( R [ headquarters location ] ) [ Fédération Aéronautique Internationale ] ) )",
            "( JOIN [ adjacent to ] [ Prilly ] ) ( JOIN ( R [ headquarters location ] ) [ Federation Aéronautique Internationale ] )",
            "( AND ( JOIN [ shares border with ] [ Prily ] ) ( JOIN ( R [ headquarter location ] ) [ Federation Aéronautique Internationale ] ) )",
            "( AND ( JOIN [ shares border with ] [ Prilly ] ) ( JOIN ( R [ headquarters location ] ) [ International Aeronautical Federation ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ shares border with ] [ Prilly ] ) ( JOIN ( R [ headquarters location ] ) [ Fédération Aéronautique Internationale ] ) )"
    },
    {
        "question": "Question: { What is Theses.fr person ID for Pierre Bourdieu ? }",
        "predicted_query": [
            "[ JOIN [ th",
            "( JOIN ( R [ Theses.fr person ID ] ) [ Pierre Bourdieu ] )",
            "( JOIN ( R [ Theses.fr person ID ] ) [ Pierre Bourdieu ] )",
            "( JOIN ( R [ Thèses.fr person ID ] ) [ Pierre Bourdieu ] )",
            "( JOIN ( R [ Theses.fr ID ] ) [ Pierre Bourdieu ] )"
        ],
        "gen_label": "( JOIN ( R [ Theses.fr person ID ] ) [ Pierre Bourdieu ] )"
    },
    {
        "question": "Question: { Who influenced the author of Dancing Girls & Other Stories? }",
        "predicted_query": [
            "( JOIN ( R [ influenced by ] ) ( JOIN ( R [ author ] ) [ Dancing Girls & Other Stories ] ) )",
            "( JOIN [ influenced by ] [ Dancing Girls & Other Stories ] )",
            "( JOIN ( R [ influenced by ] ) ( JOIN ( R [ writer ] ) [ Dancing Girls and Other Stories ] ) )",
            "( AND ( JOIN [ has influence on ] [ Dancing Girls & Other Stories ] ) ( JOIN ( R [ influenced by ] ) [ Shashi Deshpande ] ) )",
            "( JOIN ( R [ influenced by ] ) ( JOIN ( R [ author ] ) [ Dancing Girls & Other Stories ] ) )"
        ],
        "gen_label": "( JOIN ( R [ influenced by ] ) ( JOIN ( R [ author ] ) [ Dancing Girls & Other Stories ] ) )"
    },
    {
        "question": "Question: { Which is replaced by Shanxi? }",
        "predicted_query": [
            "( JOIN [ replaced by ] [ Shanxi ] )",
            "( JOIN ( R [ replaced by ] ) [ Shanxi ] )",
            "( JOIN [ replaced by ] [ Shanxi ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Shanxi ] ) ( JOIN ( R [ replaced by ] ) [ Shanxi ] ) )",
            "( AND ( JOIN [ replaced by ] [ Shanxi ] ) ( JOIN ( R [ country ] ) [ Shanxi ] ) )"
        ],
        "gen_label": "( JOIN [ replaced by ] [ Shanxi ] )"
    },
    {
        "question": "Question: { What is the TMDb movie ID of The Birds? }",
        "predicted_query": [
            "( JOIN ( R [ TMDb movie ID ] ) [ The Birds ] )",
            "( JOIN ( R [ TMDb movie ID ] ) [ The Birds ] )",
            "( JOIN ( R [ TMDb movie ID ] ) [ The Birds ] )",
            "( JOIN ( R [ TMDb movie ID ] ) [ The Birds ] )",
            "( JOIN ( R [ TMDb film ID ] ) [ The Birds ] )"
        ],
        "gen_label": "( JOIN ( R [ TMDB movie ID ] ) [ The Birds ] )"
    },
    {
        "question": "Question: { Is time travel a superhuman feature or ability? }",
        "predicted_query": [
            "( JOIN ( R [ has time travel ability ] ) [ superhuman ability ] )",
            "( JOIN [ has superhuman feature or ability ] [ time travel ] )",
            "( AND ( JOIN [ has superpower or ability ] [ time travel ] ) ( JOIN ( R [ follows ] ) [ superhuman ability or feature ] ) )",
            "( JOIN [ superhuman feature or ability ] [ time travel ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Time Travel ] ) ( JOIN ( R [ has ability ] ) [ time travel ] ) )"
        ],
        "gen_label": "( JOIN [ superhuman feature or ability ] [ time travel ] )"
    },
    {
        "question": "Question: { Who is the manager/director of Heinrich Himmler? }",
        "predicted_query": [
            "[ JOIN ( R [ director ] ) ( JOIN ( R [ director ] ) [ Heinrich Himmler ] ) ]",
            "( JOIN ( R [ director or manager ] ) [ Heinrich Himmler ] )",
            "( JOIN [ director ] [ Heinrich Himmler ] )",
            "( JOIN ( R [ head of government ] ) ( JOIN ( R [ director ] ) [ Heinrich Himmler ] ) )",
            "( JOIN ( R [ director ] ) ( JOIN ( R [ child ] ) [ Heinrich Himmler ] ) )"
        ],
        "gen_label": "( JOIN [ director / manager ] [ Heinrich Himmler ] )"
    },
    {
        "question": "Question: { What are the lyrics of the track Le chant des sirènes }",
        "predicted_query": [
            "( JOIN ( R [ lyrics ] ) [ Le chant des sirènes ] )",
            "( JOIN ( R [ song lyrics ] ) ( JOIN ( R [ composer ] ) [ Le chant des sirènes ] ) )",
            "[",
            "( AND ( JOIN [ composer ] [ Jean-Baptiste Lully ] ) ( JOIN ( R [ lyrics ] ) [ Le chant des sirènes ] ) )",
            "( JOIN ( R [ lyrics ] ) ( JOIN ( R [ track ] ) [ Le chant des sirènes ] ) )"
        ],
        "gen_label": "( JOIN ( R [ lyricist ] ) ( JOIN ( R [ tracklist ] ) [ Le chant des sirènes ] ) )"
    },
    {
        "question": "Question: { Who are the crew member of Gemini 6A }",
        "predicted_query": [
            "( JOIN ( R [ crew member ] ) [ Gemini 6A ] )",
            "( JOIN [ crew member ] [ Gemini 6A ] )",
            "( JOIN ( R [ crew member ] ) [ Gemini 6A ] )",
            "( JOIN ( R [ member of crew ] ) ( JOIN ( R [ crew member ] ) [ Gemini 6A ] ) )",
            "( JOIN ( R [ crew member ] ) [ Gemini 6A ] )"
        ],
        "gen_label": "( JOIN ( R [ crew member ] ) ( JOIN ( R [ followed by ] ) [ Gemini 6A ] ) )"
    },
    {
        "question": "Question: { WHO IS INTRODUCED FROM INTERNATIONAL PRACTICAL SHOOTING CONFEDERATION }",
        "predicted_query": [
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ member of ] ) [ International Practical Shooting Confederation ] ) )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ sport ] ) [ International Practical Shooting Confederation ] ) )",
            "( JOIN [ member of ] [ International Practical Shooting Confederation ] )",
            "( [ joined ] [ International Practical Shooting Confederation ] )",
            "( JOIN ( R [ member ] ) ( JOIN ( R [ member of organization ] ) [ IPSC ] ) )"
        ],
        "gen_label": "( JOIN ( R [ inception ] ) ( JOIN ( R [ location of formation ] ) [ International Practical Shooting Confederation ] ) )"
    },
    {
        "question": "Question: { What is interaction of gravity ? }",
        "predicted_query": [
            "( JOIN [ has interaction ] [ gravity ] )",
            "( JOIN ( R [ has interaction ] ) [ gravity ] )",
            "( JOIN [ interaction of gravity ] [ gravity ] )",
            "( JOIN ( R [ has effect ] ) ( JOIN ( R [ influenced by ] ) [ gravity ] ) )",
            "( AND ( JOIN [ has effect on ] [ gravity ] ) ( JOIN ( R [ influenced by ] ) [ gravity ] ) )"
        ],
        "gen_label": "( JOIN [ interaction ] [ gravity ] )"
    },
    {
        "question": "Question: { Which is the military branch of Roland Garros? }",
        "predicted_query": [
            "( [ joined by ] [ military branch ] [ Roland Garros ] )",
            "( AND ( JOIN [ member of organization ] [ French Armed Forces ] ) ( JOIN ( R [ field of work ] ) [ Roland Garros ] ) )",
            "[ JOIN [ military branch ] [ Roland Garros ] ]",
            "( JOIN [ military branch ] [ Roland Garros ] )",
            "( JOIN ( R [ military branch ] ) [ Roland Garros ] )"
        ],
        "gen_label": "( JOIN ( R [ military branch ] ) [ Roland Garros ] )"
    },
    {
        "question": "Question: { which  candidate of John Howard? }",
        "predicted_query": [
            "[]",
            "( JOIN [ candidate ] [ John Howard ] )",
            "[ JOIN ( R [ candidate ] ) ]",
            "( JOIN ( R [ candidate ] ) [ John Howard ] )",
            "( AND ( JOIN [ political party ] [ Liberal Party of Australia ] ) ( JOIN ( R [ candidate ] ) [ John Howard ] ) )"
        ],
        "gen_label": "( JOIN [ candidate ] [ John Howard ] )"
    },
    {
        "question": "Question: { Which is the distributor for The Gold Rush? }",
        "predicted_query": [
            "( JOIN ( R [ distributor ] ) [ The Gold Rush ] )",
            "[ JOIN ] [ The Gold Rush ]",
            "( JOIN ( R [ distributor ] ) [ The Gold Rush ] )",
            "( JOIN ( R [ distributor ] ) [ The Gold Rush ] )",
            "( JOIN [ distributor ] [ The Gold Rush ] )"
        ],
        "gen_label": "( JOIN ( R [ distributed by ] ) [ The Gold Rush ] )"
    },
    {
        "question": "Question: { Who is {disciple} and {professional partner} of {Radka Kovaříková} ? }",
        "predicted_query": [
            "( JOIN ( R [ student ] ) ( JOIN ( R [ teacher ] ) [ Radka Kovaříková ] ) )",
            "( JOIN ( R [ disciple ] ) ( JOIN ( R [ professional partner ] ) [ Radka Kovaříková ] ) )",
            "( JOIN ( R [ student ] ) ( JOIN ( R [ student of ] ) [ Radka Kovaříková ] ) )",
            "( AND ( JOIN [ professional partner ] [ Radka Kovaříková ] ) ( JOIN ( R [ student ] ) [ Jan Hus ] ) )",
            "( AND ( JOIN [ teacher ] [ Radka Kovaříková ] ) ( JOIN ( R [ student ] ) [ Jan Hus ] ) )"
        ],
        "gen_label": "( JOIN ( R [ student of ] ) ( JOIN ( R [ partner in business or sport ] ) [ Radka Kovaříková ] ) )"
    },
    {
        "question": "Question: { How does Arabidopsis thaliana disperse seeds? }",
        "predicted_query": [
            "( JOIN ( R [ dispersal mechanism ] ) ( JOIN ( R [ has taxon ] ) [ Arabidopsis thaliana ] ) )",
            "( AND ( JOIN [ has dispersal mechanism ] [ seed dispersal mechanism ] ) ( JOIN ( R [ has taxon ] ) [ Arabidopsis thaliana ] ) )",
            "( JOIN ( R [ dispersal method ] ) ( JOIN ( R [ taxon ] ) [ Arabidopsis thaliana ] ) )",
            "( JOIN ( R [ method of dispersal ] ) ( JOIN ( R [ has taxon ] ) [ Arabidopsis thaliana ] ) )",
            "( JOIN [ dispersal mechanism ] [ Arabidopsis thaliana ] )"
        ],
        "gen_label": "( JOIN ( R [ seed dispersal ] ) [ Arabidopsis thaliana ] )"
    },
    {
        "question": "Question: { What manufacturer is a subsidiary of the National Aeronautics and Space Administration? }",
        "predicted_query": [
            "( JOIN ( R [ manufacturer ] ) ( JOIN ( R [ subsidiary ] ) [ National Aeronautics and Space Administration ] ) )",
            "( AND ( JOIN [ subsidiary ] [ National Aeronautics and Space Administration ] ) ( JOIN ( R [ manufacturer ] ) [ Space Shuttle ] ) )",
            "( JOIN [ subsidiary of ] [ National Aeronautics and Space Administration ] )",
            "( AND ( JOIN [ subsidiary of ] [ National Aeronautics and Space Administration ] ) ( JOIN ( R [ manufacturer ] ) [ Space Shuttle ] ) )",
            "( JOIN ( R [ parent company ] ) ( JOIN ( R [ manufacturer ] ) [ National Aeronautics and Space Administration ] ) )"
        ],
        "gen_label": "( JOIN ( R [ product, material, or service produced or provided ] ) ( JOIN ( R [ has subsidiary ] ) [ National Aeronautics and Space Administration ] ) )"
    },
    {
        "question": "Question: { What is manufactured by the superior formation of Mitsui Chemicals (Germany)? }",
        "predicted_query": [
            "( JOIN ( R [ manufactured by ] ) ( JOIN ( R [ country of formation ] ) [ Mitsui Chemicals ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Germany ] ) ( JOIN ( R [ manufacturer ] ) [ Mitsui Chemicals ] ) )",
            "( JOIN ( R [ manufacturer ] ) ( JOIN ( R [ part of ] ) [ Mitsui Chemicals ( Germany ) ] ) )",
            "( JOIN [ manufactured by ] [ Mitsui Chemicals (Germany) ] )",
            "( AND ( JOIN [ has a part of ] [ Mitsui Chemicals ] ) ( JOIN ( R [ manufacturer ] ) [ Mitsui Chemicals ( Germany ) ] ) )"
        ],
        "gen_label": "( JOIN ( R [ product, material, or service produced or provided ] ) ( JOIN ( R [ parent organization ] ) [ Mitsui Chemicals ( Germany ) ] ) )"
    },
    {
        "question": "Question: { Which is educated at the University of Stuttgart? }",
        "predicted_query": [
            "( JOIN ( R [ educated at ] ) [ University of Stuttgart ] )",
            "( JOIN [ educated at ] [ University of Stuttgart ] )",
            "[ JOIN ( R [ educated at ] ) [ University of Stuttgart ] ]",
            "( JOIN [ educated at ] [ University of Stuttgart ] )",
            "( JOIN ( R [ educated at ] ) [ University of Stuttgart ] )"
        ],
        "gen_label": "( JOIN [ educated at ] [ University of Stuttgart ] )"
    },
    {
        "question": "Question: { WHO IS THE MEMBER OF THE PARTY THAT PHILIP ROTH INFORMED? }",
        "predicted_query": [
            "( JOIN ( R [ member of political party ] ) ( JOIN ( R [ influenced by ] ) [ Philip Roth ] ) )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ influenced by ] ) [ Philip Roth ] ) )",
            "( JOIN ( R [ member of political party ] ) ( JOIN ( R [ informed of ] ) [ Philip Roth ] ) )",
            "( AND ( JOIN [ political party ] [ Philip Roth ] ) ( JOIN ( R [ member of ] ) [ Philip Roth ] ) )",
            "( JOIN [ member of political party ] [ Philip Roth ] )"
        ],
        "gen_label": "( JOIN ( R [ member of political party ] ) ( JOIN ( R [ influenced by ] ) [ Philip Roth ] ) )"
    },
    {
        "question": "Question: { What is the rank of diopside? }",
        "predicted_query": [
            "( JOIN ( R [ rank ] ) [ diopside ] )",
            "( JOIN [ rank ] [ diopside ] )",
            "( JOIN ( R [ rank ] ) [ diopside ] )",
            "( AND ( JOIN [ mineral group ] [ diopside ] ) ( JOIN ( R [ rank ] ) [ diopside ] ) )",
            "( JOIN ( R [ ranks or positions held ] ) [ diopside ] )"
        ],
        "gen_label": "( JOIN ( R [ IMA status and/or rank ] ) [ diopside ] )"
    },
    {
        "question": "Question: { Where along Kaluga Oblast did Mikhail Skobelev die? }",
        "predicted_query": [
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ place of death ] ) [ Mikhail Skobelev ] ) )",
            "( JOIN [ place of death ] [ Mikhail Skobelev ] ) AND ( JOIN ( R [ located in the administrative territorial entity ] ) [ Kaluga Oblast ] )",
            "( AND ( JOIN [ place of death ] [ Mikhail Skobelev ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Kaluga Oblast ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ place of death ] ) [ Mikhail Skobelev ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Kaluga Oblast ] ) ( JOIN ( R [ place of death ] ) [ Mikhail Skobelev ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ shares border with ] [ Kaluga Oblast ] ) ( JOIN ( R [ place of death ] ) [ Mikhail Skobelev ] ) )"
    },
    {
        "question": "Question: { Which Euring number for Long-tailed Duck ? }",
        "predicted_query": [
            "{ JOIN [ Euring number ] [ Long-tailed Duck ] }",
            "( JOIN ( R [ Euring number ] ) [ long-tailed duck ] )",
            "( JOIN [ Euring number ] [ Long-tailed Duck ] )",
            "( JOIN ( R [ EURING number ] ) [ Long-tailed Duck ] )",
            "( JOIN ( JOIN ( R [ Euring number ] ) [ Long-tailed Duck ] ) )"
        ],
        "gen_label": "( JOIN ( R [ EURING number ] ) [ Long-tailed Duck ] )"
    },
    {
        "question": "Question: { Which is the Europeana Fashion Vocabulary ID for handkerchief? }",
        "predicted_query": [
            "( JOIN ( R [ Europeana Fashion Vocabulary ID ] ) [ handkerchief ] )",
            "( JOIN ( R [ Europeana Fashion Vocabulary ID ] ) [ handkerchief ] )",
            "( JOIN [ Europeana Fashion Vocabulary ID ] [ handkerchief ] )",
            "( JOIN ( R [ Europeana Fashion Vocabulary ] ) [ handkerchief ] )",
            "( JOIN ( R [ Europeana Fashion Vocabulary ID ] ) [ handkerchief ] )"
        ],
        "gen_label": "( JOIN ( R [ Europeana Fashion Vocabulary ID ] ) [ handkerchief ] )"
    },
    {
        "question": "Question: { Which is the prize money of Venus Williams? }",
        "predicted_query": [
            "( JOIN ( R [ prize money ] ) [ Venus Williams ] )",
            "( JOIN ( R [ prize money ] ) [ Venus Williams ] )",
            "[ JOIN [ prize money ] [ Venus Williams ] ]",
            "( JOIN ( R [ prize money ] ) [ Venus Williams ] )",
            "( JOIN [ prize money ] [ Venus Williams ] )"
        ],
        "gen_label": "( JOIN ( R [ prize money ] ) [ Venus Williams ] )"
    },
    {
        "question": "Question: { What is KIT Linked Open Numbers ID for 1 ? }",
        "predicted_query": [
            "( JOIN ( R [ KIT Linked Open Numbers ID ] ) [ 1 ] )",
            "( JOIN ( R [ KIT Linked Open Numbers ID ] ) [ 1 ] )",
            "( JOIN ( R [ KIT Linked Open Numbers ID ] ) [ 1 ] )",
            "( JOIN [ KIT Linked Open Numbers ID ] [ 1 ] )",
            "( [ joined by ] [ KIT Linked Open Numbers ID ] [ 1 ] )"
        ],
        "gen_label": "( JOIN ( R [ KIT Linked Open Numbers ID ] ) [ 1 ] )"
    },
    {
        "question": "Question: { What is the Tennis Australia ID for Evonne Goolagong Cawley? }",
        "predicted_query": [
            "( JOIN ( R [ Tennis Australia player ID ] ) [ Evonne Goolagong Cawley ] )",
            "( JOIN ( R [ Tennis Australia ID ] ) [ Evonne Goolagong Cawley ] )",
            "( JOIN ( R [ Tennis Australia player ID ] ) ( JOIN ( R [ ID.com sportspeople ID ] ) [ Evonne Goolagong Cawley ] ) )",
            "( JOIN ( R [ Tennis Australia player ID ] ) [ Evonne Goolagong ] )",
            "( [ joined by ] [ Tennis Australia ID ] )"
        ],
        "gen_label": "( JOIN ( R [ Tennis Australia player ID ] ) [ Evonne Goolagong Cawley ] )"
    },
    {
        "question": "Question: { What is Jeff Foxworthy's political party, whose emblem is an elephant? }",
        "predicted_query": [
            "( AND ( JOIN [ political party ] [ Democratic Party ] ) ( JOIN ( R [ symbol ] ) [ Jeff Foxworthy ] ) )",
            "( AND ( JOIN [ emblem ] [ elephant ] ) ( JOIN ( R [ political party ] ) [ Jeff Foxworthy ] ) )",
            "( AND ( JOIN [ political party emblem ] [ elephant ] ) ( JOIN ( R [ member of political party ] ) [ Jeff Foxworthy ] ) )",
            "( AND ( JOIN [ symbol ] [ elephant ] ) ( JOIN ( R [ political party ] ) [ Jeff Foxworthy ] ) )",
            "( AND ( JOIN [ emblem ] [ elephant ] ) ( JOIN ( R [ member of political party ] ) [ Jeff Foxworthy ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ official symbol ] [ elephant ] ) ( JOIN ( R [ member of political party ] ) [ Jeff Foxworthy ] ) )"
    },
    {
        "question": "Question: { Which is encoded by L-Tyrosine? }",
        "predicted_query": [
            "( JOIN ( R [ encoded by ] ) [ L-tyrosine ] )",
            "( JOIN [ encoded by ] [ L-tyrosine ] )",
            "( JOIN ( R [ encoded in ] ) [ L-tyrosine ] )",
            "( AND ( JOIN [ encoded by ] [ L-tyrosine ] ) ( JOIN ( R [ has chemical formula ] ) [ L-tyrosine ] ) )",
            "( [ joined by ] [ L-tyrosine ] )"
        ],
        "gen_label": "( JOIN ( R [ encoded by ] ) [ L-tyrosine ] )"
    },
    {
        "question": "Question: { Which is the Bloomberg person ID for Gwyneth Paltrow? }",
        "predicted_query": [
            "( JOIN ( R [ Bloomberg person ID ] ) [ Gwyneth Paltrow ] )",
            "( JOIN ( R [ Bloomberg person ID ] ) [ Gwyneth Paltrow ] )",
            "[ JOIN [ Bloomberg person ID ] [ Gwyneth Paltrow ] ]",
            "[( JOIN ( R [ Bloomberg Person ID ] ) [ Gwyneth Paltrow ] )]",
            "( JOIN ( R [ Bloomberg person ID ] ) [ Gwyneth Paltrow ] )"
        ],
        "gen_label": "( JOIN ( R [ Bloomberg person ID ] ) [ Gwyneth Paltrow ] )"
    },
    {
        "question": "Question: { What is the OKATO id for Kaliningrad? }",
        "predicted_query": [
            "( JOIN ( R [ OKATO ID ] ) [ Kaliningrad ] )",
            "( JOIN [ OKATO ID ] [ Kaliningrad ] )",
            "( AND ( JOIN [ OKATO ] [ Kaliningrad ] ) [ Kaliningrad ] )",
            "( JOIN ( R [ OKATO ID ] ) [ Kaliningrad ] )",
            "( JOIN ( R [ OKATO ID ] ) [ Kaliningrad ] )"
        ],
        "gen_label": "( JOIN ( R [ OKATO ID ] ) [ Kaliningrad ] )"
    },
    {
        "question": "Question: { What governments operated the II-76? }",
        "predicted_query": [
            "( JOIN ( R [ government ] ) ( JOIN ( R [ operator ] ) [ II-76 ] ) )",
            "( JOIN ( R [ head of government ] ) ( JOIN ( R [ operator ] ) [ II-76 ] ) )",
            "( JOIN [ governed by ] [ II-76 ] )",
            "( JOIN [ operated by ] [ II-76 ] )",
            "( JOIN ( R [ governed by ] ) ( JOIN ( R [ manufacturer ] ) [ II-76 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ operator ] ) [ Ilyushin Il-76 ] ) )"
    },
    {
        "question": "Question: { With a top dog of Juan Manual Santos, who is the nominee for Urho Kekkonen? }",
        "predicted_query": [
            "[ { JOIN ( R [ has ] ) }, [ nominated for ] ]",
            "( AND ( JOIN [ winner ] [ Juan Manuel Santos ] ) ( JOIN ( R [ nominated for ] ) [ Urho Kekkonen ] ) )",
            "( JOIN [ nominee for ] [ Urho Kekkonen ] ) ( JOIN ( R [ has political advisor ] ) [ Juan Manuel Santos ] )",
            "( AND ( JOIN [ nominee ] [ Urho Kekkonen ] ) ( JOIN ( R [ winner ] ) [ Juan Manuel Santos ] ) )",
            "( JOIN ( R [ opponent ] ) ( JOIN ( R [ winner ] ) [ Juan Manuel Santos ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ winner ] [ Juan Manuel Santos ] ) ( JOIN ( R [ nominated for ] ) [ Urho Kekkonen ] ) )"
    },
    {
        "question": "Question: { What occupation of Douglas Nichols has the field of boxing? }",
        "predicted_query": [
            "( AND ( JOIN [ field of work ] [ boxing ] ) ( JOIN ( R [ occupation ] ) [ Douglas Nicholls ] ) )",
            "( AND ( JOIN [ occupation ] [ boxing ] ) ( JOIN ( R [ occupation ] ) [ Douglas Nicholls ] ) )",
            "( AND ( JOIN [ occupation ] [ boxing ] ) ( JOIN ( R [ field of work ] ) [ Douglas Nicholls ] ) )",
            "( JOIN [ field of work ] [ boxing ] )",
            "( AND ( JOIN [ field of work ] [ boxing ] ) ( JOIN ( R [ occupation ] ) [ Douglas Nichols ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ field of this occupation ] [ boxing ] ) ( JOIN ( R [ occupation ] ) [ Douglas Nicholls ] ) )"
    },
    {
        "question": "Question: { where is tributary  located on body of water of Nagoya ? }",
        "predicted_query": [
            "( JOIN ( R [ tributary ] ) ( JOIN ( R [ located in ] ) [ Nagoya ] ) )",
            "( JOIN [ tributary of ] [ Nagoya ] )",
            "( JOIN ( R [ tributary ] ) ( JOIN ( R [ located in body of water ] ) [ Nagoya ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Nagoya ] ) ( JOIN ( R [ tributary ] ) [ Lake Biwa ] ) )",
            "( JOIN ( R [ located in body of water ] ) ( JOIN ( R [ tributary of ] ) [ Nagoya ] ) )"
        ],
        "gen_label": "( JOIN ( R [ tributary ] ) ( JOIN ( R [ located in or next to body of water ] ) [ Nagoya ] ) )"
    },
    {
        "question": "Question: { What was presented at Gerard Schroder that was attended for the Horst Seehofer? }",
        "predicted_query": [
            "( AND ( JOIN [ attended ] [ Horst Seehofer ] ) ( JOIN ( R [ awarded to ] ) [ Gerard Schröder ] ) )",
            "{ JOIN [ attended ] [ Gerard Schröder ] }",
            "( JOIN ( R [ awarded at ] ) ( JOIN ( R [ attended by ] ) [ Horst Seehofer ] ) )",
            "( JOIN [ attended ] [ Horst Seehofer ] ) ( JOIN ( R [ awarded to ] ) [ Gerard Schröder ] )",
            "( AND ( JOIN [ attendee ] [ Horst Seehofer ] ) ( JOIN ( R [ awarded to ] ) [ Gerard Schröder ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ participant ] [ Horst Seehofer ] ) ( JOIN ( R [ participant in ] ) [ Gerhard Schröder ] ) )"
    },
    {
        "question": "Question: { What is the telephone number of Garrison in the MLB? }",
        "predicted_query": [
            "( JOIN ( R [ telephone number ] ) [ Garrison ] )",
            "( JOIN ( R [ telephone number ] ) ( JOIN ( R [ member of ] ) [ Garrison ] ) )",
            "( JOIN [ telephone number ] [ Garrison ] )",
            "( JOIN ( R [ phone number ] ) ( JOIN ( R [ member of ] ) [ Garrison ] ) )",
            "( JOIN ( R [ telephone number ] ) ( JOIN ( R [ member of ] ) [ Major League Baseball ] ) )"
        ],
        "gen_label": "( JOIN ( R [ local dialing code ] ) ( JOIN ( R [ headquarters location ] ) [ Major League Baseball ] ) )"
    },
    {
        "question": "Question: { What is the taxon is source of Carthamus tinctorius? }",
        "predicted_query": [
            "( JOIN ( R [ taxon is source ] ) [ Carthamus tinctorius ] )",
            "Question: What is the taxon is source of Carthamus tinctorius?  Join ( [ taxon is source ] ) [ Carthamus tinctorius ] ",
            "( JOIN ( R [ taxon is source ] ) [ Carthamus tinctorius ] )",
            "( JOIN [ taxon is source ] [ Carthamus tinctorius ] )",
            "( AND ( JOIN [ contains the taxon of ] [ Carthamus tinctorius ] ) ( JOIN ( R [ source of ] ) [ Carthamus tinctorius ] ) )"
        ],
        "gen_label": "( JOIN ( R [ this taxon is source of ] ) [ Carthamus tinctorius ] )"
    },
    {
        "question": "Question: { Which renter of Carrie Nation House was found guilty? }",
        "predicted_query": [
            "( JOIN ( R [ convicted of ] ) ( JOIN ( R [ tenant ] ) [ Carrie Nation House ] ) )",
            "( AND ( JOIN [ defendant ] [ Carrie Nation ] ) ( JOIN ( R [ tenant ] ) [ Carrie Nation House ] ) )",
            "( JOIN [ convicted of ] [ Carrie Nation House ] )",
            "( JOIN ( R [ convicted of ] ) ( JOIN ( R [ tenant ] ) [ Carrie Nation House ] ) )",
            "( AND ( JOIN [ convicted person ] [ Carrie Nation ] ) ( JOIN ( R [ tenant ] ) [ Carrie Nation House ] ) )"
        ],
        "gen_label": "( JOIN ( R [ convicted of ] ) ( JOIN ( R [ occupant ] ) [ Carrie Nation House ] ) )"
    },
    {
        "question": "Question: { What is the numeric value of 0? }",
        "predicted_query": [
            "( JOIN ( R [ has value ] ) ( JOIN ( R [ has the value ] ) [ 0 ] ) )",
            "( JOIN [ has numeric value ] [ 0 ] )",
            "( JOIN ( R [ number of zero ] ) [ 0 ] )",
            "( JOIN ( R [ numerical value ] ) [ 0 ] )",
            "( AND ( JOIN [ has numeric value ] [ 0 ] ) ( JOIN ( R [ has value ] ) [ 0 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ numeric value ] ) [ zero ] )"
    },
    {
        "question": "Question: { WHO IS THE FILM GENRE OF SONWRITER OF TU VUO FA L AMERICANO }",
        "predicted_query": [
            "( JOIN ( R [ film genre ] ) ( JOIN ( R [ composer ] ) [ Tu vuo fa l'Americano ] ) )",
            "(",
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ composer ] ) [ Tu vuo fa l'Americano ] ) )",
            "( JOIN [ film genre ] [ Tu vuo fa l'Americano ] )",
            "( AND ( JOIN [ genre ] [ film genre ] ) ( JOIN ( R [ composer ] ) [ Tu vuo fa l'americano ] ) )"
        ],
        "gen_label": "( JOIN ( R [ genre ] ) ( JOIN ( R [ composer ] ) [ Tu vuò fà l'americano ] ) )"
    },
    {
        "question": "Question: { Which is the French diocesan architects ID for Eugène Viollet-le-Duc? }",
        "predicted_query": [
            "( JOIN ( R [ French diocesan architects ID ] ) [ Eugène Viollet-le-Duc ] )",
            "( AND ( JOIN [ diocesan architects ID ] [ Eugène Viollet-le-Duc ] ) NOT ( JOIN ( R [ ID in Wikidata ] ) [ Eugène Viollet-le-Duc ] ) )",
            "( JOIN ( R [ French diocesan architects ID ] ) [ Eugène Viollet-le-Duc ] )",
            "( JOIN ( R [ French diocesan architects ID ] ) [ Eugene Viollet le Duc ] )",
            "( JOIN ( R [ French diocesan architects ID ] ) [ Eugène Viollet-le-Duc ] )"
        ],
        "gen_label": "( JOIN ( R [ French diocesan architects ID ] ) [ Eugène Viollet-le-Duc ] )"
    },
    {
        "question": "Question: { What is the opposite of the anti-austerity movement in Greece? }",
        "predicted_query": [
            "( AND ( JOIN [ opposite of ] [ anti-austerity movement in Greece ] ) ( JOIN ( R [ follows ] ) [ anti-austerity movement ] ) )",
            "( JOIN [ opposite of ] [ anti-austerity movement in Greece ] )",
            "( JOIN ( R [ opposite ] ) ( JOIN ( R [ political position ] ) [ anti-austerity movement in Greece ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Greece ] ) ( JOIN ( R [ opposite ] ) [ anti-austerity movement ] ) )",
            "( AND ( JOIN [ opposite to ] [ anti-austerity movement in Greece ] ) NOT ( JOIN ( R [ opposite of ] ) [ anti-austerity movement in Greece ] ) )"
        ],
        "gen_label": "( JOIN ( R [ opposite of ] ) ( JOIN ( R [ has cause ] ) [ anti-austerity movement in Greece ] ) )"
    },
    {
        "question": "Question: { What is the diplomatic relation of Lebanon, who is right and has rule of the road? }",
        "predicted_query": [
            "( AND ( JOIN [ diplomatic relation ] [ Lebanon ] ) ( JOIN ( R [ right ] ) [ road ] ) )",
            "( AND ( JOIN [ has diplomatic relation ] [ Lebanon ] ) ( JOIN ( R [ right ] ) [ road ] ) )",
            "( AND ( JOIN [ diplomatic relation ] [ Lebanon ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ road ] ) )",
            "( JOIN ( R [ diplomatic relations ] ) ( JOIN ( R [ located in ] ) [ Lebanon ] ) )",
            "( AND ( JOIN [ country of diplomatic relation ] [ Lebanon ] ) ( JOIN ( R [ right of way ] ) [ road ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ driving side ] [ right ] ) ( JOIN ( R [ diplomatic relation ] ) [ Lebanon ] ) )"
    },
    {
        "question": "Question: { Which is the scanned file on WIkimedia Commons for The Jungle Book? }",
        "predicted_query": [
            "[ JOIN ( R [ Wikimedia Commons file ID ] ) [ The Jungle Book ] ]",
            "( JOIN [ scanned file on Wikimedia Commons ] [ The Jungle Book ] )",
            "( JOIN ( R [ Wikimedia Commons image file ID ] ) [ The Jungle Book ] )",
            "( JOIN ( R [ scanned file on Wikimedia Commons ] ) [ The Jungle Book ] )",
            "( JOIN ( R [ Wikimedia Commons ID ] ) ( JOIN ( R [ depicts work ] ) [ The Jungle Book ] ) )"
        ],
        "gen_label": "( JOIN ( R [ document file on Wikimedia Commons ] ) [ The Jungle Book ] )"
    },
    {
        "question": "Question: { Which is the Yle Areena ID of Doctor Who? }",
        "predicted_query": [
            "( JOIN ( R [ Yle Areena ID ] ) [ Doctor Who ] )",
            "( JOIN ( R [ Yle Areena ID ] ) [ Doctor Who ] )",
            "( JOIN ( R [ Yle Areena ID ] ) [ Doctor Who ] )",
            "( AND ( JOIN [ ID.tv.com ID ] [ Yle Areena ID of Doctor Who ] ) ( JOIN ( R [ ID ] ) [ Doctor Who ] ) )",
            "( JOIN ( R [ Yle Areena ID ] ) [ Doctor Who ] )"
        ],
        "gen_label": "( JOIN ( R [ Yle Areena item ID ] ) [ Doctor Who ] )"
    },
    {
        "question": "Question: { Where in Boone County was Steph Davis born? }",
        "predicted_query": [
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ place of birth ] ) [ Steph Davis ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Boone County ] ) ( JOIN ( R [ place of birth ] ) [ Steph Davis ] ) )",
            "( JOIN ( R [ place of birth ] ) ( JOIN ( R [ place of death ] ) [ Steph Davis ] ) )",
            "( JOIN [ place of birth ] [ Steph Davis ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Boone County ] ) ( JOIN ( R [ place of birth ] ) [ Steph Davis ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ contains the administrative territorial entity ] [ Boone County ] ) ( JOIN ( R [ place of birth ] ) [ Steph Davis ] ) )"
    },
    {
        "question": "Question: { Which is the apparent magnitude of Antares? }",
        "predicted_query": [
            "( JOIN ( R [ apparent magnitude ] ) [ Antares ] )",
            "{ JOIN [ has apparent magnitude ] [ Antares ] }",
            "( JOIN [ apparent magnitude ] [ Antares ] )",
            "{ JOIN ( R [ apparent magnitude ] ) [ Antares ] }",
            "( JOIN ( R [ apparent magnitude ] ) [ Antares ] )"
        ],
        "gen_label": "( JOIN ( R [ apparent magnitude ] ) [ Antares ] )"
    },
    {
        "question": "Question: { Who gave the {child body} of {companion of} of {Alpha Centauri A} ? }",
        "predicted_query": [
            "( JOIN ( R [ child body ] ) ( JOIN ( R [ companion ] ) [ Alpha Centauri A ] ) )",
            "( JOIN ( R [ child of ] ) ( JOIN ( R [ companion ] ) [ Alpha Centauri A ] ) )",
            "( JOIN [ child body ] [ Alpha Centauri A ] )",
            "( JOIN ( R [ parent ] ) ( JOIN ( R [ companion ] ) [ Alpha Centauri A ] ) )",
            "( JOIN ( R [ child body ] ) ( JOIN ( R [ companion of ] ) [ Alpha Centauri A ] ) )"
        ],
        "gen_label": "( JOIN ( R [ child astronomical body ] ) ( JOIN ( R [ companion of ] ) [ Alpha Centauri A ] ) )"
    },
    {
        "question": "Question: { What time is it in the Haidian District whose time is the same as the Macau Standard Time? }",
        "predicted_query": [
            "( AND ( JOIN [ time zone ] [ Macau Standard Time ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Haidian District ] ) )",
            "( AND ( JOIN [ located in time zone ] [ Macau Standard Time ] ) ( JOIN ( R [ located in time zone ] ) [ Haidian District ] ) )",
            "( AND ( JOIN [ time zone ] [ Macau Standard Time ] ) ( JOIN ( R [ located in time zone ] ) [ Haidian District ] ) )",
            "( JOIN [ time zone ] [ Macau Standard Time ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Haidian District ] )",
            "( AND ( JOIN [ located in time zone ] [ Macau Standard Time ] ) ( JOIN ( R [ located in time zone ] ) [ Haidian District ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ said to be the same as ] [ Macau Standard Time ] ) ( JOIN ( R [ located in time zone ] ) [ Haidian District ] ) )"
    },
    {
        "question": "Question: { Which is the Flora of Australia ID for Banksia? }",
        "predicted_query": [
            "( JOIN ( R [ Flora of Australia ID ] ) [ Banksia ] )",
            "( JOIN ( R [ Flora of Australia ID ] ) [ Banksia ] )",
            "( AND ( JOIN [ FLO] [ Flora of Australia ID ] ) ( JOIN ( R [ taxon ID ] ) [ Banksia ] ) )",
            "( JOIN [ Flora of Australia ID ] [ Banksia ] )",
            "( JOIN ( R [ Flora of Australia taxon ID ] ) [ Banksia ] )"
        ],
        "gen_label": "( JOIN ( R [ Flora of Australia ID ( old ) ] ) [ Banksia ] )"
    },
    {
        "question": "Question: { Which is the SRCBB coach ID of Mike Krzyzewski? }",
        "predicted_query": [
            "( [ joined by ] [ coach ] [ Mike Krzyzewski ] )",
            "( JOIN ( R [ coach of ] ) [ Mike Krzyzewski ] )",
            "( JOIN ( R [ Sports Reference coach ID ] ) [ Mike Krzyzewski ] )",
            "[ ( joined by ) [ Sportradar Coach ID ] [ Mike Krzyzewski ] ]",
            "( JOIN ( R [ SRCBB coach ID ] ) [ Mike Krzyzewski ] )"
        ],
        "gen_label": "( JOIN ( R [ Sports-Reference.com college basketball coach ID ] ) [ Mike Krzyzewski ] )"
    },
    {
        "question": "Question: { What is the motto of Uwe Johnson's alma mater? }",
        "predicted_query": [
            "( JOIN ( R [ motto ] ) ( JOIN ( R [ alma mater ] ) [ Uwe Johnson ] ) )",
            "[]",
            "( JOIN ( R [ motto ] ) ( JOIN ( R [ university ] ) [ Uwe Johnson ] ) )",
            "( AND ( JOIN [ has motto ] [ Uwe Johnson ] ) ( JOIN ( R [ school or university attended ] ) [ Uwe Johnson ] ) )",
            "( JOIN ( R [ has motto ] ) ( JOIN ( R [ educated at ] ) [ Uwe Johnson ] ) )"
        ],
        "gen_label": "( JOIN ( R [ motto text ] ) ( JOIN ( R [ educated at ] ) [ Uwe Johnson ] ) )"
    },
    {
        "question": "Question: { Which is the InPhO ID of Giambattista Vico? }",
        "predicted_query": [
            "( JOIN ( R [ InPhO ID ] ) [ Giambattista Vico ] )",
            "( JOIN ( R [ InPhO ID ] ) [ Giambattista Vico ] )",
            "( JOIN [ InPhO ID ] [ Giambattista Vico ] )",
            "( JOIN ( R [ InPhO ID ] ) [ Giambattista Vico ] )",
            "[]"
        ],
        "gen_label": "( JOIN ( R [ InPhO ID ] ) [ Giambattista Vico ] )"
    },
    {
        "question": "Question: { Which is the number of participants for UEFA European Football Championship? }",
        "predicted_query": [
            "( JOIN ( R [ number of participants ] ) [ UEFA European Football Championship ] )",
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ participant in ] ) [ UEFA European Football Championship ] ) )",
            "( JOIN ( JOIN ( JOIN ( R JOIN [ participant ] ] ] ) [ UEFA European Football Championship ] ) )",
            "( JOIN ( R [ number of participants ] ) [ UEFA European Football Championship ] )",
            "[ JOIN ( [ participant count ] ) [ UEFA European Championship ] ]"
        ],
        "gen_label": "( JOIN ( R [ number of participants ] ) [ UEFA European Championship ] )"
    },
    {
        "question": "Question: { What is the introduction period of Siege of Leningrad? }",
        "predicted_query": [
            "( JOIN ( R [ start time ] ) ( JOIN ( R [ part of ] ) [ Siege of Leningrad ] ) )",
            "( JOIN [ introduction period ] [ Siege of Leningrad ] )",
            "( JOIN ( R [ has beginning period ] ) ( JOIN ( R [ fought in ] ) [ Siege of Leningrad ] ) )",
            "( JOIN ( R [ time period ] ) ( JOIN ( R [ fought in ] ) [ Siege of Leningrad ] ) )",
            "( JOIN ( R [ start date ] ) ( JOIN ( R [ has time period ] ) [ Siege of Leningrad ] ) )"
        ],
        "gen_label": "( JOIN ( R [ start time ] ) ( JOIN ( R [ time period ] ) [ Siege of Leningrad ] ) )"
    },
    {
        "question": "Question: { Which is the partition coefficient water/octanol of carbon tetrachloride? }",
        "predicted_query": [
            "( JOIN ( R [ partition coefficient water/octanol ] ) [ carbon tetrachloride ] )",
            "( JOIN ( R [ partition coefficient ] ) ( JOIN ( R [ has chemical formula ] ) [ carbon tetrachloride ] ) )",
            "( JOIN ( R [ partition coefficient water/octanol ] ) [ carbon tetrachloride ] )",
            "( JOIN ( R [ water/octanol partition coefficient ] ) [ carbon tetrachloride ] )",
            "( JOIN [ partition coefficient water/octanol ] [ carbon tetrachloride ] )"
        ],
        "gen_label": "( JOIN ( R [ partition coefficient water/octanol ] ) [ carbon tetrachloride ] )"
    },
    {
        "question": "Question: { When was the Sierpinski Triangle discovered? }",
        "predicted_query": [
            "( JOIN [ discovered ] [ Sierpinski triangle ] )",
            "( JOIN ( R [ discovered by ] ) ( JOIN ( R [ named after ] ) [ Sierpinski triangle ] ) )",
            "( JOIN ( R [ discovery date ] ) [ Sierpinski triangle ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Sierpinski triangle ] ) ( JOIN ( R [ discovered or invented ] ) [ Sierpinski triangle ] ) )",
            "( JOIN [ discovered ] [ Sierpinski triangle ] )"
        ],
        "gen_label": "( JOIN ( R [ time of discovery or invention ] ) [ Sierpiński triangle ] )"
    },
    {
        "question": "Question: { The body of water in Albany has what tributary? }",
        "predicted_query": [
            "( JOIN ( R [ tributary ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Albany ] ) )",
            "( JOIN [ tributary ] [ Hudson River ] )",
            "( AND ( JOIN [ has tributary ] [ Hudson River ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Albany ] ) )",
            "( JOIN ( R [ tributary ] ) ( JOIN ( R [ located in ] ) [ Albany ] ) )",
            "( AND ( JOIN [ tributary of ] [ Hudson River ] ) ( JOIN ( R [ body of water ] ) [ Albany ] ) )"
        ],
        "gen_label": "( JOIN ( R [ tributary ] ) ( JOIN ( R [ located in or next to body of water ] ) [ Albany ] ) )"
    },
    {
        "question": "Question: { flower color arabidopsis thaliana }",
        "predicted_query": [
            "( JOIN ( R [ flower color ] ) [ Arabidopsis thaliana ] )",
            "( JOIN ( R [ flower color ] ) [ Arabidopsis thaliana ] )",
            "( AND ( JOIN [ color ] [ yellow ] ) ( JOIN ( R [ color ] ) [ Arabidopsis thaliana ] ) )",
            "( JOIN [ flower color ] [ Arabidopsis thaliana ] )",
            "( JOIN ( R [ color ] ) ( JOIN ( R [ taxon ] ) [ Arabidopsis thaliana ] ) )"
        ],
        "gen_label": "( JOIN ( R [ flower color ] ) [ Arabidopsis thaliana ] )"
    },
    {
        "question": "Question: { What happened to Sverdlov-class cruiser? }",
        "predicted_query": [
            "( JOIN ( R [ has history ] ) ( JOIN ( R [ class ] ) [ Sverdlov-class cruiser ] ) )",
            "( JOIN [ event ] [ Sverdlov-class cruiser ] )",
            "( JOIN [ has history ] [ Sverdlov-class cruiser ] )",
            "( JOIN ( R [ replaced by ] ) ( JOIN ( R [ class ] ) [ Sverdlov-class cruiser ] ) )",
            "( AND ( JOIN [ class ] [ Sverdlov-class cruiser ] ) ( JOIN ( R [ affected by ] ) [ Sverdlov-class cruiser ] ) )"
        ],
        "gen_label": "( JOIN ( R [ conflict ] ) ( JOIN ( R [ operator ] ) [ Sverdlov-class cruiser ] ) )"
    },
    {
        "question": "Question: { Who is the author of No Creo and what else have they created? }",
        "predicted_query": [
            "( JOIN ( R [ author ] ) ( JOIN ( R [ creator ] ) [ No Creo ] ) )",
            "( AND ( JOIN [ has work ] [ No Creo ] ) ( JOIN ( R [ author ] ) [ No Creo ] ) )",
            "( JOIN ( R [ author ] ) ( JOIN ( R [ has work ] ) [ No creo ] ) )",
            "( AND ( JOIN [ creator ] [ No creo ] ) ( JOIN ( R [ question ] ) [ What is the author's name? ] ) )",
            "( AND ( JOIN [ work or member of ] [ No Creo ] ) ( JOIN ( R [ author ] ) [ No Creo ] ) )"
        ],
        "gen_label": "( JOIN ( R [ employer ] ) ( JOIN ( R [ lyricist ] ) [ No Creo ] ) )"
    },
    {
        "question": "Question: { What is the manufacturing of the field of action of Ekstra M? }",
        "predicted_query": [
            "( JOIN ( R [ manufacturing ] ) ( JOIN ( R [ field of work ] ) [ Ekstra M ] ) )",
            "( JOIN [ manufacturing ] [ field of action ] )",
            "( JOIN ( R [ industry ] ) ( JOIN ( R [ field of work ] ) [ Ekstra M ] ) )",
            "( JOIN ( R [ manufactured by ] ) ( JOIN ( R [ field of work ] ) [ Ekstra M ] ) )",
            "( AND ( JOIN [ field of work ] [ Ekstra M ] ) ( JOIN ( R [ manufacturer ] ) [ Ekstra M ] ) )"
        ],
        "gen_label": "( JOIN ( R [ product, material, or service produced or provided ] ) ( JOIN ( R [ industry ] ) [ Ekstra M ] ) )"
    },
    {
        "question": "Question: { Who is the marriage partner starring The Girl Can't Help It? }",
        "predicted_query": [
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ cast member ] ) [ The Girl Can't Help It ] ) )",
            "[ JOIN ( R [",
            "( JOIN ( R [ marital status ] ) ( JOIN ( R [ cast member ] ) [ The Girl Can't Help It ] ) )",
            "( JOIN ( R [ married to ] ) ( JOIN ( R [ cast ] ) [ The Girl Can't Help It ] ) )",
            "( AND ( JOIN [ cast member ] [ The Girl Can't Help It ] ) ( JOIN ( R [ spouse ] ) [ John F. Kennedy ] ) )"
        ],
        "gen_label": "( JOIN ( R [ spouse ] ) ( JOIN ( R [ cast member ] ) [ The Girl Can't Help It ] ) )"
    },
    {
        "question": "Question: { Where does the founder of NGC 4151 live? }",
        "predicted_query": [
            "( JOIN ( R [ place of birth ] ) ( JOIN ( R [ discoverer ] ) [ NGC 4151 ] ) )",
            "( AND ( JOIN [ located in administrative territorial entity ] [ NGC 4151 ] ) ( JOIN ( R [ place of death ] ) [ William Herschel ] ) )",
            "( JOIN ( R [ location ] ) ( JOIN ( R [ discoverer ] ) [ NGC 4151 ] ) )",
            "( JOIN [ place of residence ] [ NGC 4151 ] )",
            "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ place of birth ] ) [ John Herschel ] ) )"
        ],
        "gen_label": "( JOIN ( R [ residence ] ) ( JOIN ( R [ discoverer or inventor ] ) [ Q942187 ] ) )"
    },
    {
        "question": "Question: { What is pollinated by Abelmoschus esculentus? }",
        "predicted_query": [
            "( JOIN ( R [ pollinated by ] ) [ Abelmoschus esculentus ] )",
            "( JOIN [ pollinated by ] [ Abelmoschus esculentus ] )",
            "( AND ( JOIN [ has taxon ID ] [ Abelmoschus esculentus ] ) ( JOIN ( R [ pollinated by ] ) [ Abelmoschus esculentus ] ) )",
            "( JOIN ( R [ pollinated by ] ) [ Abelmoschus esculentus ] )",
            "( JOIN ( R [ pollinator ] ) ( JOIN ( R [ contains the administrative territorial entity ] ) [ Abelmoschus esculentus ] ) )"
        ],
        "gen_label": "( JOIN ( R [ is pollinated by ] ) [ Abelmoschus esculentus ] )"
    },
    {
        "question": "Question: { which sports has teams played  of Süreyya Özkefe ? }",
        "predicted_query": [
            "( JOIN ( R [ sports played ] ) ( JOIN ( R [ team played for ] ) [ Süreyya Özkefe ] ) )",
            "( JOIN ( R [ sports ] ) ( JOIN ( R [ team ] ) [ Süreyya Özkefe ] ) )",
            "( JOIN [ sports played ] [ Süreyya Özkefe ] )",
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ sports ] ) [ Süreyya Özkefe ] ) )",
            "( AND ( JOIN [ sport ] [ football ] ) ( JOIN ( R [ team played for ] ) [ Süreyya Özkefe ] ) )"
        ],
        "gen_label": "( JOIN ( R [ sport ] ) ( JOIN ( R [ member of sports team ] ) [ Süreyya Özkefe ] ) )"
    },
    {
        "question": "Question: { What's Otis Redding's Last.fm music ID. }",
        "predicted_query": [
            "( JOIN ( R [ Last.fm music ID ] ) [ Otis Redding ] )",
            "( JOIN ( R [ Last.fm artist ID ] ) [ Otis Redding ] )",
            "( JOIN ( R [ Last.fm music ID ] ) [ Otis Redding ] )",
            "[ JOIN [ last.fm music ID ] ] [ Otis Redding ]",
            "( AND ( JOIN [ last.fm artist id ] [ Otis Redding ] ) ( JOIN ( R [ ID ] ) [ Otis Redding ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Last.fm ID ] ) [ Otis Redding ] )"
    },
    {
        "question": "Question: { What genre film was the prequel to Zork II? }",
        "predicted_query": [
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ prequel ] ) [ Zork II ] ) )",
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ based on ] ) [ Zork II ] ) )",
            "( AND ( JOIN [ parent work ] [ Zork II ] ) ( JOIN ( R [ genre ] ) [ Zork II ] ) )",
            "( JOIN [ genre ] [ Zork II ] )",
            "( AND ( JOIN [ genre ] [ fantasy ] ) ( JOIN ( R [ prequel ] ) [ Zork II ] ) )"
        ],
        "gen_label": "( JOIN ( R [ genre ] ) ( JOIN ( R [ followed by ] ) [ Zork II ] ) )"
    },
    {
        "question": "Question: { What are the payment types accepted for PayPal? }",
        "predicted_query": [
            "( JOIN ( R [ payment type ] ) [ PayPal ] )",
            "( JOIN [ payment types accepted ] [ PayPal ] )",
            "( JOIN ( R [ accepts payment type ] ) [ PayPal ] )",
            "( JOIN [ accepts ] [ PayPal ] )",
            "( AND ( JOIN [ has taxon ID ] [ ICTV Taxonomy ] ) ( JOIN ( R [ payment method ] ) [ PayPal ] ) )"
        ],
        "gen_label": "( JOIN [ payment types accepted ] [ PayPal ] )"
    },
    {
        "question": "Question: { who work of painter of cultural revolution ? }",
        "predicted_query": [
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ artist ] ) [ Cultural Revolution ] ) )",
            "( JOIN ( R [ work ] ) ( JOIN ( R [ influenced by ] ) [ Cultural Revolution ] ) )",
            "( JOIN [ work of ] [ Cultural Revolution ] )",
            "( AND ( JOIN [ occupation ] [ painter ] ) ( JOIN ( R [ influenced by ] ) [ Cultural Revolution ] ) )",
            "( JOIN [ works by ] [ Cultural Revolution ] )"
        ],
        "gen_label": "( JOIN ( R [ occupation ] ) ( JOIN ( R [ creator ] ) [ Cultural Revolution ] ) )"
    },
    {
        "question": "Question: { Which player competes in Joan Miro? }",
        "predicted_query": [
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ sport ] ) [ Joan Miró ] ) )",
            "( [ joined by ] [ competitor ] ) ",
            "( JOIN ( R [ competitor ] ) ( JOIN ( R [ participant ] ) [ Joan Miró ] ) )",
            "( AND ( JOIN [ member of sports team ] [ Joan Miró ] ) ( JOIN ( R [ opponent ] ) [ Joan Miró ] ) )",
            "( AND ( JOIN [ sport ] [ tennis ] ) ( JOIN ( R [ opponent ] ) [ Joan Miró ] ) )"
        ],
        "gen_label": "( JOIN ( R [ participant ] ) ( JOIN ( R [ participant in ] ) [ Joan Miró ] ) )"
    },
    {
        "question": "Question: { Which is broadcasted by NTV? }",
        "predicted_query": [
            "( JOIN ( R [ broadcast by ] ) [ NTV ] )",
            "( JOIN ( R [ broadcaster ] ) [ NTV ] )",
            "( JOIN [ broadcasts on ] [ NTV ] )",
            "( JOIN [ broadcast by ] [ NTV ] )",
            "( AND ( JOIN [ broadcaster ] [ NTV ] ) ( JOIN ( R [ question ] ) [ What is the name of the TV series? ] ) )"
        ],
        "gen_label": "( JOIN [ broadcast by ] [ NTV ] )"
    },
    {
        "question": "Question: { What is the coat of arms of lithium's findspot? }",
        "predicted_query": [
            "( JOIN ( R [ coat of arms ] ) ( JOIN ( R [ findspot ] ) [ lithium ] ) )",
            "( JOIN ( R [ coat of arms ] ) ( JOIN ( R [ findspot ] ) [ lithium ] ) )",
            "( AND ( JOIN [ country or territory of findspot ] [ Lithuania ] ) ( JOIN ( R [ coat of arms ] ) [ lithium ] ) )",
            "( AND ( JOIN [ findspot ] [ Lithium ] ) ( JOIN ( R [ coat of arms ] ) [ Lithium ] ) )",
            "( JOIN [ coat of arms ] [ lithium's findspot ] )"
        ],
        "gen_label": "( JOIN ( R [ coat of arms ] ) ( JOIN ( R [ location of discovery ] ) [ lithium ] ) )"
    },
    {
        "question": "Question: { What is in the category of Oldboy? }",
        "predicted_query": [
            "( JOIN ( R [ category ] ) [ Oldboy ] )",
            "( JOIN [ category of ] [ Oldboy ] )",
            "( JOIN [ category of ] [ Oldboy ] )",
            "( JOIN ( R [ category of ] ) [ Oldboy ] )",
            "( AND ( JOIN [ member of ] [ Oldboy ] ) ( JOIN ( R [ category ] ) [ Oldboy ] ) )"
        ],
        "gen_label": "( JOIN ( R [ HanCinema film ID ] ) [ Oldboy ] )"
    },
    {
        "question": "Question: { Who is the voice dubber of the Futurama: The Beast with a Billion Bucks series? }",
        "predicted_query": [
            "( AND ( JOIN [ voice actor or actress ] [ Futurama: The Beast with a Billion Bucks ] ) ( JOIN ( R [ cast member ] ) [ Futurama: The Beast with a Billion Bucks ] ) )",
            "The JOIN is",
            "( JOIN ( R [ voice actor ] ) ( JOIN ( R [ part of the series ] ) [ Futurama: The Beast with a Billion Bucks ] ) )",
            "( JOIN ( R [ dubbing voice ] ) ( JOIN ( R [ part of the series ] ) [ Futurama: The Beast with a Billion Bucks ] ) )",
            "The JOIN is a cartographic term."
        ],
        "gen_label": "( JOIN ( R [ voice actor ] ) ( JOIN ( R [ part of the series ] ) [ Futurama: The Beast with a Billion Backs ] ) )"
    },
    {
        "question": "Question: { Which is the age of majority for the Philippines? }",
        "predicted_query": [
            "( JOIN ( R [ age of majority ] ) [ Philippines ] )",
            "( JOIN [ age of majority ] [ Philippines ] )",
            "[ { JOIN ( R [ age of majority ] ) [ Philippines ] } ]",
            "( JOIN [ age of majority ] [ Philippines ] )",
            "( JOIN ( R [ age of majority ] ) [ Philippines ] )"
        ],
        "gen_label": "( JOIN ( R [ age of majority ] ) [ Philippines ] )"
    },
    {
        "question": "Question: { Who is Thomas Eakins, whose students is Auguste Alleaume? }",
        "predicted_query": [
            "( AND ( JOIN [ student ] [ Auguste Alleaume ] ) ( JOIN ( R [ influenced by ] ) [ Thomas Eakins ] ) )",
            "( AND ( JOIN [ student ] [ Auguste Alleaume ] ) ( JOIN ( R [ influenced by ] ) [ Thomas Eakins ] ) )",
            "[]",
            "( AND ( JOIN [ taught by ] [ Auguste Alleaume ] ) ( JOIN ( R [ influenced by ] ) [ Thomas Eakins ] ) )",
            "( AND ( JOIN [ student ] [ Auguste Alleaume ] ) ( JOIN ( R [ taught by ] ) [ Thomas Eakins ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ student ] [ Auguste Alleaume ] ) ( JOIN ( R [ student of ] ) [ Thomas Eakins ] ) )"
    },
    {
        "question": "Question: { When was the year of death of the coined of boron? }",
        "predicted_query": [
            "( JOIN ( R [ year of death ] ) ( JOIN ( R [ discoverer ] ) [ boron ] ) )",
            "( JOIN ( R [ year of death ] ) ( JOIN ( R [ discovered by ] ) [ boron ] ) )",
            "( JOIN ( R [ year of death ] ) ( JOIN ( R [ element symbol ] ) [ boron ] ) )",
            "( JOIN [ year of death ] [ boron ] )",
            "( AND ( JOIN [ discovered by ] [ boron ] ) ( JOIN ( R [ year of death ] ) [ boron ] ) )"
        ],
        "gen_label": "( JOIN ( R [ date of death ] ) ( JOIN ( R [ discoverer or inventor ] ) [ boron ] ) )"
    },
    {
        "question": "Question: { Which is the end period for Neolithic era? }",
        "predicted_query": [
            "( JOIN ( R [ ends in the period ] ) ( JOIN ( R [ part of the series ] ) [ Neolithic ] ) )",
            "( JOIN ( R [ end period ] ) [ Neolithic ] )",
            "( JOIN [ end period ] [ Neolithic ] )",
            "( JOIN [ ends in the era of ] [ Neolithic ] )",
            "( JOIN ( R [ end period ] ) [ Neolithic era ] )"
        ],
        "gen_label": "( JOIN [ end period ] [ Neolithic ] )"
    },
    {
        "question": "Question: { What is the rank of a taxon parent of Sirenia? }",
        "predicted_query": [
            "( JOIN ( R [ rank ] ) ( JOIN ( R [ taxon parent ] ) [ sirenia ] ) )",
            "( JOIN [ rank of taxon parent ] [ sirenia ] )",
            "( AND ( JOIN [ parent taxon of ] [ Sirenia ] ) ( JOIN ( R [ rank ] ) [ Sirenia ] ) )",
            "( JOIN ( R [ taxon rank ] ) ( JOIN ( R [ parent taxon ] ) [ sirenians ] ) )",
            "( JOIN [ taxon parent ] [ sirenia ] )"
        ],
        "gen_label": "( JOIN ( R [ taxon rank ] ) ( JOIN ( R [ parent taxon ] ) [ Sirenia ] ) )"
    },
    {
        "question": "Question: { Which is the Soccerbase manager ID of José Mourinho? }",
        "predicted_query": [
            "( JOIN ( R [ Soccerbase manager ID ] ) [ José Mourinho ] )",
            "### Instruction:",
            "( JOIN ( R [ Soccerbase player manager ID ] ) [ José Mourinho ] )",
            "( JOIN ( R [ Soccerbase manager ID ] ) [ José Mourinho ] )",
            "( [ JOIN ] [ SoccerBase player manager ID ] )"
        ],
        "gen_label": "( JOIN ( R [ Soccerbase manager ID ] ) [ José Mourinho ] )"
    },
    {
        "question": "Question: { Which is the newspaper format of entertainment? }",
        "predicted_query": [
            "( JOIN ( R [ format ] ) ( JOIN ( R [ media format ] ) [ entertainment ] ) )",
            "( JOIN [ newspaper format ] [ entertainment ] )",
            "( JOIN ( R [ newspaper format ] ) [ entertainment ] )",
            "( AND ( JOIN [ has format ] [ newspaper format ] ) ( JOIN ( R [ format ] ) [ entertainment ] ) )",
            "( JOIN [ newspaper format ] [ entertainment ] )"
        ],
        "gen_label": "( JOIN [ newspaper format ] [ entertainment ] )"
    },
    {
        "question": "Question: { What is Sheryl Swoopes's Basketball-Reference.com WNBA ID? }",
        "predicted_query": [
            "( JOIN ( R [ Basketball-Reference.com WNBA ID ] ) [ Sheryl Swoopes ] )",
            "( JOIN ( R [ Basketball-Reference.com WNBA ID ] ) [ Sheryl Swoopes ] )",
            "( JOIN ( R [ Basketball-Reference.com player ID ] ) [ Sheryl Swoopes ] )",
            "( JOIN ( R [ Basketball-Reference.com WNBA ID ] ) [ Sheryl Swoopes ] )",
            "( JOIN ( R [ Basketball Reference WNBA ID ] ) [ Sheryl Swoopes ] )"
        ],
        "gen_label": "( JOIN ( R [ Basketball Reference WNBA player ID ] ) [ Sheryl Swoopes ] )"
    },
    {
        "question": "Question: { What is the employer of ASUS? }",
        "predicted_query": [
            "( JOIN ( R [ employer ] ) [ ASUS ] )",
            "( JOIN [ employer ] [ ASUS ] )",
            "( JOIN ( R [ employer ] ) ( JOIN ( R [ manufacturer ] ) [ ASUS ] ) )",
            "( JOIN [ employer ] [ ASUS ] )",
            "( JOIN ( R [ employer ] ) [ ASUS ] )"
        ],
        "gen_label": "( JOIN [ employer ] [ ASUS ] )"
    },
    {
        "question": "Question: { Which is All-Russian Mathematical Portal ID of Peter Scholze? }",
        "predicted_query": [
            "( JOIN ( R [ All-Russian Mathematical Portal ID ] ) [ Peter Scholze ] )",
            "( JOIN [ All-Russian Mathematical Portal ID ] [ Peter Scholze ] )",
            "( AND ( JOIN [ Russian Mathematical Portal ID ] [ Peter Scholze ] ) ( JOIN ( R [ ID in this organization ] ) [ Peter Scholze ] ) )",
            "( [ JOIN ] [ Peter Scholze ] )",
            "( JOIN ( R [ All-Russian Mathematical Portal ID ] ) [ Peter Scholze ] )"
        ],
        "gen_label": "( JOIN ( R [ All-Russian Mathematical Portal ID ] ) [ Peter Scholze ] )"
    },
    {
        "question": "Question: { Name the work location of Augustin-Louis Cauchy that is next to the Baldissero Torinese. }",
        "predicted_query": [
            "( JOIN [ adjacent to ] [ Baldissero Torinese ] ) ( JOIN ( R [ place of work ] ) [ Augustin-Louis Cauchy ] )",
            "( AND ( JOIN [ shares border with ] [ Baldissero Torinese ] ) ( JOIN ( R [ place of work ] ) [ Augustin-Louis Cauchy ] ) )",
            "( AND ( JOIN [ shares border with ] [ Baldissero Torinese ] ) ( JOIN ( R [ work location ] ) [ Augustin-Louis Cauchy ] ) )",
            "( AND ( JOIN [ shares border with ] [ Baldissero Torinese ] ) ( JOIN ( R [ place of work ] ) [ Augustin-Louis Cauchy ] ) )",
            "( AND ( JOIN [ shares border with ] [ Baldissero Torinese ] ) ( JOIN ( R [ place of work ] ) [ Augustin-Louis Cauchy ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ shares border with ] [ Baldissero Torinese ] ) ( JOIN ( R [ work location ] ) [ Augustin-Louis Cauchy ] ) )"
    },
    {
        "question": "Question: { Which  list of characters of War and Peace ? }",
        "predicted_query": [
            "( JOIN ( R [ character list ] ) [ War and Peace ] )",
            "( JOIN ( R [ list of characters ] ) [ War and Peace ] )",
            "( JOIN [ list of characters ] [ War and Peace ] )",
            "( JOIN ( R [ cast member ] ) [ War and Peace ] )",
            "( AND ( JOIN [ cast member ] [ War and Peace ] ) ( JOIN ( R [ character ] ) [ War and Peace ] ) )"
        ],
        "gen_label": "( JOIN ( R [ list of characters ] ) [ War and Peace ] )"
    },
    {
        "question": "Question: { Who co-founded Jack Daniel's Distillery? }",
        "predicted_query": [
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ founded by ] ) [ Jack Daniel's ] ) )",
            "( JOIN ( R [ founding member ] ) ( JOIN ( R [ founded by ] ) [ Jack Daniel's ] ) )",
            "( JOIN [ founded by ] [ Jack Daniel's ] )",
            "( AND ( JOIN [ founded by ] [ Jack Daniel's ] ) ( JOIN ( R [ founded by ] ) [ Jack Daniel's ] ) )",
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ founding member ] ) [ Jack Daniel's Distillery ] ) )"
        ],
        "gen_label": "( JOIN ( R [ founded by ] ) ( JOIN ( R [ operator ] ) [ Jack Daniel's Distillery ] ) )"
    },
    {
        "question": "Question: { What is the river mouth of Orange River's tributary? }",
        "predicted_query": [
            "( JOIN ( R [ mouth ] ) ( JOIN ( R [ tributary ] ) [ Orange River ] ) )",
            "( JOIN ( R [ mouth of river ] ) ( JOIN ( R [ tributary of ] ) [ Orange River ] ) )",
            "( JOIN ( R [ outflows to ] ) ( JOIN ( R [ tributary of ] ) [ Orange River ] ) )",
            "( AND ( JOIN [ tributary of ] [ Orange River ] ) ( JOIN ( R [ outlet ] ) [ Orange River ] ) )",
            "( JOIN [ river mouth ] [ Orange River ] )"
        ],
        "gen_label": "( JOIN ( R [ tributary ] ) ( JOIN ( R [ mouth of the watercourse ] ) [ Orange River ] ) )"
    },
    {
        "question": "Question: { what is the market capitalization of the Alibaba Group }",
        "predicted_query": [
            "( JOIN ( R [ market capitalization ] ) [ Alibaba Group ] )",
            "[ JOIN [ market capitalization ] [ Alibaba Group ] ]",
            "( JOIN ( R [ market capitalisation ( publicly traded company ) ] ) [ Alibaba Group ] )",
            "( JOIN ( R [ market capitalization ] ) [ Alibaba Group ] )",
            "( JOIN ( R [ market capitalization ] ) [ Alibaba Group ] )"
        ],
        "gen_label": "( JOIN ( R [ market capitalization ] ) [ Alibaba Group ] )"
    },
    {
        "question": "Question: { Which is Cultureel Woordenboek identifier for golden ratio? }",
        "predicted_query": [
            "( JOIN ( R [ Cultureel Woordenboek ID ] ) [ golden ratio ] )",
            "( JOIN ( R [ Cultureel Woordenboek ID ] ) [ golden ratio ] )",
            "( [ JOIN ] [ golden ratio ] )",
            "( JOIN [ Cultureel Woordenboek identifier ] [ golden ratio ] )",
            "( AND ( JOIN [ cultureel woordenboek id ] [ golden ratio ] ) ( JOIN ( R [ ID ] ) [ golden ratio ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Cultureel Woordenboek ID ] ) [ golden ratio ] )"
    },
    {
        "question": "Question: { What is the Christian name of King Arthur, which means the same as Artur? }",
        "predicted_query": [
            "( AND ( JOIN [ meaning ] [ Artur ] ) ( JOIN ( R [ given name ] ) [ King Arthur ] ) )",
            "( AND ( JOIN [ same meaning ] [ Artur ] ) ( JOIN ( R [ given name ] ) [ King Arthur ] ) )",
            "( AND ( JOIN [ means the same as ] [ Artur ] ) ( JOIN ( R [ given name ] ) [ King Arthur ] ) )",
            "( AND ( JOIN [ meaning ] [ Arthur ] ) ( JOIN ( R [ given name ] ) [ King Arthur ] ) )",
            "( AND ( JOIN [ synonym of ] [ Artur ] ) ( JOIN ( R [ given name ] ) [ King Arthur ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ said to be the same as ] [ Artur ] ) ( JOIN ( R [ given name ] ) [ King Arthur ] ) )"
    },
    {
        "question": "Question: { What is the high tax of Monopylidium austrailense? }",
        "predicted_query": [
            "( JOIN ( R [ taxon ID ] ) ( JOIN ( R [ taxon ] ) [ Monopylidium austrailense ] ) )",
            "( JOIN ( R [ tax rate ] ) ( JOIN ( R [ taxon ] ) [ Monopylidium austrailense ] ) )",
            "( JOIN ( R [ taxon ] ) ( JOIN ( R [ has taxon ] ) [ Monopylidium austrailense ] ) )",
            "( JOIN [ high taxon ] [ Monopylidium austrailense ] )",
            "( JOIN ( R [ taxon ID ] ) ( JOIN ( R [ has taxon ] ) [ Monopylidium austrailense ] ) )"
        ],
        "gen_label": "( JOIN ( R [ parent taxon ] ) ( JOIN ( R [ host ] ) [ Monopylidium australiense ] ) )"
    },
    {
        "question": "Question: { What is {to support} {participant of event} of {Kenneth Bainbridge} ? }",
        "predicted_query": [
            "( JOIN ( R [ supported by ] ) ( JOIN ( R [ participant ] ) [ Kenneth Bainbridge ] ) )",
            "( JOIN ( R [ participant of event ] ) ( JOIN ( R [ participant in ] ) [ Kenneth Bainbridge ] ) )",
            "( JOIN ( R [ supported by ] ) ( JOIN ( R [ participant in event ] ) [ Kenneth Bainbridge ] ) )",
            "( JOIN [ participant of event ] [ Kenneth Bainbridge ] )",
            "( AND ( JOIN [ participant of event ] [ Kenneth Bainbridge ] ) ( JOIN ( R [ supported by ] ) [ nuclear fusion ] ) )"
        ],
        "gen_label": "( JOIN ( R [ has goal ] ) ( JOIN ( R [ participant in ] ) [ Kenneth Bainbridge ] ) )"
    },
    {
        "question": "Question: { JPEG reads in what format? }",
        "predicted_query": [
            "( JOIN ( R [ format ] ) ( JOIN ( R [ supported by ] ) [ JPEG ] ) )",
            "( JOIN [ reads in ] [ JPEG ] )",
            "( JOIN [ format of input ] [ JPEG ] )",
            "[( JOIN ( R [ supported file format ] ) [ JPEG ] )]",
            "( JOIN ( R [ file format ] ) ( JOIN ( R [ format of ] ) [ JPEG ] ) )"
        ],
        "gen_label": "( JOIN [ readable file format ] [ JPEG ] )"
    },
    {
        "question": "Question: { Which  reservoir created for  Lake Volta ? }",
        "predicted_query": [
            "( JOIN ( R [ reservoir ] ) ( JOIN ( R [ located in ] ) [ Lake Volta ] ) )",
            "( JOIN [ reservoir created for ] [ Lake Volta ] )",
            "( JOIN ( R [ reservoir created for ] ) [ Lake Volta ] )",
            "( JOIN ( R [ water source ] ) ( JOIN ( R [ located in ] ) [ Lake Volta ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Lake Volta ] ) ( JOIN ( R [ source of water ] ) [ Lake Volta ] ) )"
        ],
        "gen_label": "( JOIN [ reservoir created ] [ Lake Volta ] )"
    },
    {
        "question": "Question: { What is the name of sideburns that is a part of the United States Army? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ United States Army ] ) ( JOIN ( R [ named after ] ) [ sideburns ] ) )",
            "( AND ( JOIN [ part of ] [ United States Army ] ) ( JOIN ( R [ named after ] ) [ sideburns ] ) )",
            "( JOIN ( R [ named after ] ) ( JOIN ( R [ part of ] ) [ United States Army ] ) )",
            "( AND ( JOIN [ part of the body ] [ sideburns ] ) ( JOIN ( R [ named after ] ) [ United States Army ] ) )",
            "( AND ( JOIN [ member of ] [ United States Army ] ) ( JOIN ( R [ part of body ] ) [ sideburns ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ military branch ] [ United States Army ] ) ( JOIN ( R [ named after ] ) [ sideburns ] ) )"
    },
    {
        "question": "Question: { Where is the Home Depot in Montego Bay located? }",
        "predicted_query": [
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ headquarters location ] ) [ Home Depot ] ) )",
            "( JOIN [ located in the administrative territorial entity ] [ Montego Bay ] )",
            "( JOIN ( R [ location ] ) ( JOIN ( R [ headquarters location ] ) [ Home Depot ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Montego Bay ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Home Depot ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ place of work ] ) [ Montego Bay ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ twinned administrative body ] [ Montego Bay ] ) ( JOIN ( R [ location of formation ] ) [ The Home Depot ] ) )"
    },
    {
        "question": "Question: { Which is the cell component for cholesterol? }",
        "predicted_query": [
            "( JOIN ( R [ cell component ] ) [ cholesterol ] )",
            "( JOIN [ cell component ] [ cholesterol ] )",
            "( JOIN ( R [ has cell component ] ) [ cholesterol ] )",
            "( JOIN [ cell component ] [ cholesterol ] )",
            "( JOIN ( R [ cell component ] ) [ cholesterol ] )"
        ],
        "gen_label": "( JOIN ( R [ cell component ] ) [ cholesterol ] )"
    },
    {
        "question": "Question: { What is the Iran statistics ID number of Fars Province? }",
        "predicted_query": [
            "( JOIN ( R [ Iran statistics ID number ] ) [ Fars Province ] )",
            "( JOIN ( R [ Iran statistics ID ] ) [ Fars Province ] )",
            "( JOIN [ Iran statistics ID number ] [ Fars Province ] )",
            "[deleted]",
            "( JOIN ( R [ Iran statistics ID number ] ) [ Fars Province ] )"
        ],
        "gen_label": "( JOIN ( R [ Iran statistics ID ] ) [ Fars Province ] )"
    },
    {
        "question": "Question: { What is John Kenneth Galbraith's Google News ID? }",
        "predicted_query": [
            "( JOIN ( R [ Google News ID ] ) [ John Kenneth Galbraith ] )",
            "( JOIN [ Google News ID ] [ John Kenneth Galbraith ] )",
            "( JOIN ( R [ Google News ID ] ) [ John Kenneth Galbraith ] )",
            "( JOIN ( R [ Google News ID ] ) [ John Kenneth Galbraith ] )",
            "( AND ( JOIN [ news aggregator ID ] [ Google News ID ] ) ( JOIN ( R [ ID ] ) [ John Kenneth Galbraith ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Google News topics ID ] ) [ John Kenneth Galbraith ] )"
    },
    {
        "question": "Question: { What is the product brand for iPhone? }",
        "predicted_query": [
            "( JOIN ( R [ product brand ] ) [ iPhone ] )",
            "( JOIN [ product brand ] [ iPhone ] )",
            "( JOIN ( R [ manufacturer or distributor ] ) ( JOIN ( R [ product or service ] ) [ iPhone ] ) )",
            "( AND ( JOIN [ product or service brand ] [ iPhone ] ) ( JOIN ( R [ manufacturer ] ) [ iPhone ] ) )",
            "( JOIN ( R [ brand ] ) [ iPhone ] )"
        ],
        "gen_label": "( JOIN [ brand ] [ iPhone ] )"
    },
    {
        "question": "Question: { Is the village of Kupang in the country of Timor? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Timor-Leste ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Kupang ] ) )",
            "( JOIN ( R [ capital ] ) ( JOIN ( R [ country ] ) [ Kupang ] ) )",
            "( JOIN [ country ] [ Timor ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Kupang ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Timor ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Kupang ] ) )",
            "( JOIN ( R [ country ] ) ( JOIN ( R [ located in ] ) [ Kupang ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ contains the administrative territorial entity ] [ South Central Timor ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Kupang ] ) )"
    },
    {
        "question": "Question: { Who is the producer of the software publisher Martial Champion }",
        "predicted_query": [
            "( JOIN ( R [ producer ] ) ( JOIN ( R [ publisher ] ) [ Martial Champion ] ) )",
            "( JOIN [ producer ] [ Martial Champion ] )",
            "( JOIN ( R [ producer ] ) [ Martial Champion ] )",
            "( JOIN ( R [ producer ] ) ( JOIN ( R [ publisher ] ) [ Martial Champion ] ) )",
            "( JOIN [ producer ] [ Martial Champion ] )"
        ],
        "gen_label": "( JOIN ( R [ product, material, or service produced or provided ] ) ( JOIN ( R [ publisher ] ) [ Martial Champion ] ) )"
    },
    {
        "question": "Question: { What is the Catalogus PRofessorum Halensis of Georg Cantor? }",
        "predicted_query": [
            "( AND ( JOIN [ cataloged in ] [ Catalogus Professorum Halensis of Georg Cantor ] ) [ cataloged in ] )",
            "( JOIN ( R [ Catalogus professorum halensis of Georg Cantor ] ) [ Catalogus professorum halensis of Georg Cantor ] )",
            "( JOIN ( R [ Catalogus Professorum Halensis ] ) [ Georg Cantor ] )",
            "( [ joined by ] [ Catalogus Professorum Halensis ] [ Georg Cantor ] )",
            "( JOIN ( R [ catalogue raisonné ] ) ( JOIN ( R [ professor of ] ) [ Georg Cantor ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Catalogus Professorum Halensis ID ] ) [ Georg Cantor ] )"
    },
    {
        "question": "Question: { What is the sister city of the birth place of Giancarlo Canetti? }",
        "predicted_query": [
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ place of birth ] ) [ Giancarlo Canètti ] ) )",
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ place of birth ] ) [ Giancarlo Canetti ] ) )",
            "( JOIN ( R [ twin town ] ) ( JOIN ( R [ place of birth ] ) [ Giancarlo Canètti ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Genoa ] ) ( JOIN ( R [ place of birth ] ) [ Giancarlo Canètti ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Giancarlo Canetti ] ) ( JOIN ( R [ place of birth ] ) [ Giancarlo Canetti ] ) )"
        ],
        "gen_label": "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ place of birth ] ) [ Giancarlo Canetti ] ) )"
    },
    {
        "question": "Question: { What is The Big Cartoon DataBase ID for Fantasia ? }",
        "predicted_query": [
            "( JOIN ( R [ Big Cartoon DataBase ID ] ) [ Fantasia ] )",
            "( JOIN ( R [ The Big Cartoon DataBase ID ] ) [ Fantasia ] )",
            "( JOIN ( R [ The Big Cartoon DataBase ID ] )",
            "( JOIN ( R [ The Big Cartoon DataBase ID ] ) [ Fantasia ] )",
            "( AND ( JOIN [ Big Cartoon DataBase ID ] [ Fantasia ] ) ( JOIN ( R [ ID ] ) [ Fantasia ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Big Cartoon Database ID ] ) [ Fantasia ] )"
    },
    {
        "question": "Question: { What is the sister of the player of Sun Ce's conquests in Jiangdong ? }",
        "predicted_query": [
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ participant ] ) [ Sun Ce's conquests in Jiangdong ] ) )",
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ participant ] ) [ Battle of Red Cliffs ] ) )",
            "( AND ( JOIN [ diplomatic relation ] [ Jiangdong ] ) ( JOIN ( R [ sibling ] ) [ Sun Ce ] ) )",
            "( AND ( JOIN [ has sibling ] [ Sun Ce's conquests in Jiangdong ] ) ( JOIN ( R [ sibling ] ) [ Sun Ce ] ) )",
            "( JOIN ( R [ sister ] ) ( JOIN ( R [ participant ] ) [ Sun Ce's conquests in Jiangdong ] ) )"
        ],
        "gen_label": "( JOIN ( R [ sibling ] ) ( JOIN ( R [ participant ] ) [ Sun Ce's conquests in Jiangdong ] ) )"
    },
    {
        "question": "Question: { Can you tell me Unicode's IBM graphic character set global ID? }",
        "predicted_query": [
            "( JOIN ( R [ Unicode character ID ] ) [ IBM Graphic Character Set ] )",
            "( AND ( JOIN [ character set ] [ IBM graphic character set ] ) ( JOIN ( R [ Unicode ID ] ) [ Unicode ] ) )",
            "( JOIN ( R [ Unicode graphic character set global ID ] ) [ IBM Graphic Character Set ] )",
            "( JOIN ( R [ Unicode's IBM graphic character set global ID ] ) [ Unicode ] )",
            "( JOIN [ Unicode's IBM graphic character set global ID ] [ Unicode ] )"
        ],
        "gen_label": "( JOIN ( R [ IBM graphic character set global ID ] ) [ Unicode ] )"
    },
    {
        "question": "Question: { Which {type of business entity} of {user} is {Orient Express} ? }",
        "predicted_query": [
            "( JOIN ( R [ type of business entity ] ) ( JOIN ( R [ owner ] ) [ Orient Express ] ) )",
            "( JOIN [ type of business entity ] [ Orient Express ] )",
            "( AND ( JOIN [ employer ] [ Orient Express ] ) ( JOIN ( R [ type of business entity ] ) [ Orient Express ] ) )",
            "( JOIN ( R [ business entity type ] ) ( JOIN ( R [ employer ] ) [ Orient Express ] ) )",
            "( JOIN ( R [ type of business entity ] ) ( JOIN ( R [ owned by ] ) [ Orient Express ] ) )"
        ],
        "gen_label": "( JOIN ( R [ legal form ] ) ( JOIN ( R [ operator ] ) [ Orient Express ] ) )"
    },
    {
        "question": "Question: { Who are the winners of the 1928 World Snooker Championship? }",
        "predicted_query": [
            "( JOIN ( R [ winner of ] ) ( JOIN ( R [ winner ] ) [ 1928",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ participant in ] ) [ 1928 World Snooker Championship ] ) )",
            "( AND ( JOIN [ sport discipline ] [ snooker ] ) ( JOIN ( R [ winner ] ) [ 1928 World Snooker Championship ] ) )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ part of the series ] ) [ 1928 World Snooker Championship ] ) )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ participant in the tournament ] ) [ 1928 World Snooker Championship ] ) )"
        ],
        "gen_label": "( JOIN ( R [ winner ] ) ( JOIN ( R [ followed by ] ) [ 1928 World Snooker Championship ] ) )"
    },
    {
        "question": "Question: { what is in the INSEE department code  of French Guiana ? }",
        "predicted_query": [
            "( JOIN ( R [ INSEE department code ] ) [ French Guiana ] )",
            "( JOIN [ INSEE department code ] [ French Guiana ] )",
            "[ JOIN [ R [ INSEE department code ] ] ]",
            "( [ JOIN ] [ INSEE department code ] )",
            "( JOIN ( R [ INSEE department code ] ) [ French Guiana ] )"
        ],
        "gen_label": "( JOIN ( R [ INSEE department code ] ) [ French Guiana ] )"
    },
    {
        "question": "Question: { Which is the category that contains the dress? }",
        "predicted_query": [
            "( JOIN ( R [ category ] ) [ dress ] )",
            "( JOIN [ category of ] [ dress ] )",
            "( JOIN [ category contains the item ] [ dress ] )",
            "( JOIN ( R [ category of item ] ) [ dress ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ dress ] ) ( JOIN ( R [ category ] ) [ dress ] ) )"
        ],
        "gen_label": "( JOIN [ category contains ] [ dress ] )"
    },
    {
        "question": "Question: { who subsidiary entities of book publisher of disney magicboard online ? }",
        "predicted_query": [
            "( JOIN ( R [ subsidiary ] ) ( JOIN ( R [ publisher ] ) [ Disney MagicBoard Online ] ) )",
            "( JOIN [ subsidiary entity of ] [ Disney MagicBoard Online ] )",
            "( JOIN ( R [ has subsidiary ] ) ( JOIN ( R [ publisher ] ) [ Disney Magicboard Online ] ) )",
            "( JOIN ( R [ publisher ] ) ( JOIN ( R [ publisher ] ) [ Disney MagicBoard Online ] ) )",
            "( AND ( JOIN [ publisher ] [ Disney MagicBoard Online ] ) ( JOIN ( R [ subsidiary of ] ) [ Disney ] ) )"
        ],
        "gen_label": "( JOIN ( R [ has subsidiary ] ) ( JOIN ( R [ publisher ] ) [ Disney Magicboard Online ] ) )"
    },
    {
        "question": "Question: { What is the name for cauchy stress tensor, that has as employment the physicists? }",
        "predicted_query": [
            "( AND ( JOIN [ occupation ] [ physicist ] ) ( JOIN ( R [ named after ] ) [ Cauchy stress tensor ] ) )",
            "( AND ( JOIN [ field of employment ] [ physicist ] ) ( JOIN ( R [ named after ] ) [ Cauchy stress tensor ] ) )",
            "( AND ( JOIN [ occupation ] [ physicists ] ) ( JOIN ( R [ named after ] ) [ cauchy stress tensor ] ) )",
            "( JOIN [ occupation ] [ physicists ] ) ( JOIN ( R [ named after ] ) [ Cauchy stress tensor ] )",
            "( AND ( JOIN [ employment ] [ physicists ] ) ( JOIN ( R [ named after ] ) [ cauchy stress tensor ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ occupation ] [ physicist ] ) ( JOIN ( R [ named after ] ) [ stress tensor ] ) )"
    },
    {
        "question": "Question: { what is casualty of  cause of death }",
        "predicted_query": [
            "( JOIN [ cause of death ] [ casualty of ] )",
            "( JOIN ( R [ cause of death ] ) ( JOIN ( R [ has cause ] ) [ casualty ] ) )",
            "( JOIN ( R [ casualty of ] ) ( JOIN ( R [ cause of death ] ) [ John Lennon ] ) )",
            "( AND ( JOIN [ cause of death ] [ cancer ] ) ( JOIN ( R [ cause of death ] ) [ John Lennon ] ) )",
            "( AND ( JOIN [ causes ] [ death ] ) ( JOIN ( R [ causes ] ) [ tuberculosis ] ) )"
        ],
        "gen_label": "( JOIN [ cause of death ] [ casualty ] )"
    },
    {
        "question": "Question: { Which is the FISA rower ID for Steve Redgrave? }",
        "predicted_query": [
            "( JOIN ( R [ FISA rower ID ] ) [ Steve Redgrave ] )",
            "( AND ( JOIN [ FISA athlete ID ] [ Steve Redgrave ] ) ( JOIN ( R [ FISA athlete ID ] ) [ Steve Redgrave ] ) )",
            "( JOIN ( R [ FISA rower ID ] ) [ Steve Redgrave ] )",
            "( JOIN ( R [ FISA athlete ID ] ) [ Steve Redgrave ] )",
            "( JOIN ( R [ FISA rowing athlete ID ] ) [ Steve Redgrave ] )"
        ],
        "gen_label": "( JOIN ( R [ World Rowing rower ID ] ) [ Steve Redgrave ] )"
    },
    {
        "question": "Question: { What is the research intervation of crop rotation? }",
        "predicted_query": [
            "( JOIN ( R [ research intervention ] ) [ crop rotation ] )",
            "( AND ( JOIN [ field of research ] [ crop rotation ] ) ( JOIN ( R [ influenced by ] ) [ crop rotation ] ) )",
            "( JOIN [ research intervention ] [ crop rotation ] )",
            "( JOIN ( R [ research intervention ] ) [ crop rotation ] )",
            "( JOIN [ research intervention ] [ crop rotation ] )"
        ],
        "gen_label": "( JOIN [ research intervention ] [ crop rotation ] )"
    },
    {
        "question": "Question: { Which means {Name Assigning Authority Number} in the {Indiana University} ? }",
        "predicted_query": [
            "[ { JOIN [ Name Assigning Authority number ] } ]",
            "( JOIN ( R [ Name Assigning Authority Number ] ) [ Indiana University ] )",
            "( AND ( JOIN [ name of authority ] [ Indiana University ] ) ( JOIN ( R [ ID ] ) [ Indiana University ] ) )",
            "( JOIN ( R [ name assigning authority number ] ) [ Indiana University ] )",
            "( JOIN ( R [ Name Assigning Authority Number ] ) [ Indiana University ] )"
        ],
        "gen_label": "( JOIN ( R [ ARK Name Assigning Authority Number ] ) [ Indiana University ] )"
    },
    {
        "question": "Question: { Is the first name of Katrina Kaif similar to Kathrine? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Kathrine ] ) ( JOIN ( R [ given name ] ) [ Katrina Kaif ] ) )",
            "( JOIN [ has the same meaning as ] [ Kathrine ] ) ( JOIN ( R [ given name ] ) [ Katrina Kaif ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Katrina Kaif ] ) ( JOIN ( R [ given name ] ) [ Katrina Kaif ] ) )",
            "( AND ( JOIN [ different name ] [ Kathrine ] ) ( JOIN ( R [ given name ] ) [ Katrina Kaif ] ) )",
            "( JOIN ( R [ has different spelling ] ) ( JOIN ( R [ given name ] ) [ Katrina Kaif ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ said to be the same as ] [ Kathrine ] ) ( JOIN ( R [ given name ] ) [ Katrina Kaif ] ) )"
    },
    {
        "question": "Question: { Who are the diplomats of the region of Michoacan? }",
        "predicted_query": [
            "( JOIN ( R [ diplomat ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Michoacán ] ) )",
            "( JOIN ( R [ diplomat ] ) ( JOIN ( R [ region ] ) [ Michoacán ] ) )",
            "( JOIN [ diplomats ] [ Michoacán ] )",
            "( JOIN ( R [ diplomatic relations ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Michoacán ] ) )",
            "( JOIN ( R [ diplomats ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Michoacán ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Michoacán ] ) )"
    },
    {
        "question": "Question: { What's the SecondHandSongs song ID of the song Johnny B. Goode? }",
        "predicted_query": [
            "( JOIN ( R [ SecondHandSongs song ID ] ) [ Johnny B. Goode ] )",
            "( JOIN ( R [ SecondHandSongs song ID ] ) [ Johnny B. Goode ] )",
            "( JOIN ( R [ SecondHandSongs song ID ] ) [ \"Johnny B. Goode\" ] )",
            "( AND ( JOIN [ secondhandsongs.com song ID ] [ Johnny B. Goode ] ) ( JOIN ( R [ question ] ) [ What's the SecondHandSongs song ID of the song Johnny B. Goode? ] ) )",
            "( JOIN ( R [ SecondHandSongs artist ID ] ) ( JOIN ( R [ question ] ) [ Johnny B. Goode ] ) )"
        ],
        "gen_label": "( JOIN ( R [ SecondHandSongs work ID ] ) [ Johnny B. Goode ] )"
    },
    {
        "question": "Question: { What is the Scottish charity number at the University of Edinburgh? }",
        "predicted_query": [
            "( JOIN ( R [ Scottish charity number ] ) [ University of Edinburgh ] )",
            "( JOIN ( R [ Scottish Charity Register number ] ) [ University of Edinburgh ] )",
            "( JOIN [ Scottish charity number ] [ University of Edinburgh ] )",
            "( AND ( JOIN [ charity number ] [ Scottish Charity Register ] ) ( JOIN ( R [ located in ] ) [ University of Edinburgh ] ) )",
            "( JOIN ( R [ Scottish charity number ] ) [ University of Edinburgh ] )"
        ],
        "gen_label": "( JOIN ( R [ Scottish Charity number ] ) [ University of Edinburgh ] )"
    },
    {
        "question": "Question: { Which is the mouth of the watercourse of Lake Superior? }",
        "predicted_query": [
            "( AND ( JOIN [ tributary of ] [ Lake Superior ] ) ( JOIN ( R [ outlet ] ) [ Lake Superior ] ) )",
            "( JOIN ( R [ mouth of watercourse ] ) [ Lake Superior ] )",
            "( JOIN [ mouth of watercourse ] [ Lake Superior ] )",
            "( JOIN ( R [ outlet ] ) ( JOIN ( R [ located in body of water ] ) [ Lake Superior ] ) )",
            "( JOIN ( R [ mouth of watercourse ] ) [ Lake Superior ] )"
        ],
        "gen_label": "( JOIN [ mouth of the watercourse ] [ Lake Superior ] )"
    },
    {
        "question": "Question: { Which is {method of murder} of {music by} {Schubert's last sonatas} ? }",
        "predicted_query": [
            "( JOIN ( R [ method of murder ] ) ( JOIN ( R [ composer ] ) [ Schubert's last sonatas ] ) )",
            "( JOIN ( R [ method of murder ] ) ( JOIN ( R [ composer ] ) [ Schubert's last sonatas ] ) )",
            "( JOIN ( R [ murder method ] ) ( JOIN ( R [ composer ] ) [ Schubert's last sonatas ] ) )",
            "[ JOIN [ method of murder ] ] [ Schubert's",
            "( AND ( JOIN [ form of death ] [ murder ] ) ( JOIN ( R [ composer ] ) [ Schubert's last sonatas ] ) )"
        ],
        "gen_label": "( JOIN ( R [ cause of death ] ) ( JOIN ( R [ composer ] ) [ Schubert's last sonatas ] ) )"
    },
    {
        "question": "Question: { What is the GenBank Assembly accession of the Peregrine Falcon? }",
        "predicted_query": [
            "( JOIN ( R [ GenBank Assembly accession ] ) [ Peregrine Falcon ] )",
            "( JOIN ( R [ GenBank Assembly accession ] ) [ Peregrine falcon ] )",
            "( JOIN ( R [ GenBank assembly accession number ] ) [ Peregrine falcon ] )",
            "( AND ( JOIN [ Accession number ] [ GenBank Assembly ] ) ( JOIN ( R [ taxon ID ] ) [ Peregrine falcon ] ) )",
            "( JOIN ( R [ GenBank assembly accession number ] ) [ Peregrine Falcon ] )"
        ],
        "gen_label": "( JOIN ( R [ GenBank assembly accession number ] ) [ Peregrine Falcon ] )"
    },
    {
        "question": "Question: { Who married the daughters of Mahaut, Countess of Artois? }",
        "predicted_query": [
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ child ] ) [ Mahaut, Countess of Artois ] ) )",
            "( JOIN [ married ] [ Mahaut, Countess of Artois ] )",
            "( AND ( JOIN [ child ] [ Mahaut, Countess of Artois ] ) ( JOIN ( R [ spouse ] ) [ Mahaut, Countess of Artois ] ) )",
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ children ] ) [ Mahaut, Countess of Artois ] ) )",
            "( JOIN ( R [ married to ] ) ( JOIN ( R [ daughter ] ) ( JOIN ( R [ parent ] ) [ Mahaut, Countess of Artois ] ) ) )"
        ],
        "gen_label": "( JOIN ( R [ spouse ] ) ( JOIN ( R [ child ] ) [ Mahaut, Countess of Artois ] ) )"
    },
    {
        "question": "Question: { What is the Parliamentary record identifier of Glenda Jackson? }",
        "predicted_query": [
            "( JOIN ( R [ Parliamentary record identifier ] ) [ Glenda Jackson ] )",
            "( JOIN [ Parliamentary record identifier ] [ Glenda Jackson ] )",
            "",
            "( JOIN ( R [ parliamentary record ID ] ) [ Glenda Jackson ] )",
            "( AND ( JOIN [ parliamentarian ID ] [ Glenda Jackson ] ) ( JOIN ( R [ ID ] ) [ Glenda Jackson ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Parliamentary record ID ] ) [ Glenda Jackson ] )"
    },
    {
        "question": "Question: { What colours are of the head office location of BBC World News? }",
        "predicted_query": [
            "( JOIN ( R [ color ] ) ( JOIN ( R [ headquarters location ] ) [ BBC World News ] ) )",
            "( JOIN ( R [ colour(s) ] ) ( JOIN ( R [ headquarters location ] ) [ BBC World News ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ BBC World News ] ) ( JOIN ( R [ color ] ) [ head office location ] ) )",
            "( JOIN [ colour ] [ head office location of BBC World News ] )",
            "( JOIN ( R [ colour ] ) ( JOIN ( R [ headquarters location ] ) [ BBC World News ] ) )"
        ],
        "gen_label": "( JOIN ( R [ color ] ) ( JOIN ( R [ headquarters location ] ) [ BBC News ] ) )"
    },
    {
        "question": "Question: { Name the endorsement sponsored by Republic of Ireland v Sweden }",
        "predicted_query": [
            "( JOIN ( R [ endorsed by ] ) [ Republic of Ireland v Sweden ] )",
            "( JOIN [ endorsed by ] [ Republic of Ireland v Sweden ] )",
            "( JOIN ( R [ sponsored by ] ) [ Republic of Ireland v Sweden ] )",
            "( JOIN ( R [ endorsed by ] ) ( JOIN ( R [ participant in ] ) [ Republic of Ireland v Sweden ] ) )",
            "( JOIN ( R [ sponsor ] ) ( JOIN ( R [ participant ] ) [ Republic of Ireland v Sweden ] ) )"
        ],
        "gen_label": "( JOIN ( R [ sponsor ] ) ( JOIN ( R [ part of the series ] ) [ Republic of Ireland v Sweden ] ) )"
    },
    {
        "question": "Question: { Who has won Ariel Rubinstein award? }",
        "predicted_query": [
            "( [ joined ] [ winner ] [ Ariel Rubinstein Award ] )",
            "[Challenge/Instruction]",
            "( AND ( JOIN [ award received ] [ Ariel Rubinstein Prize for Economics ] ) ( JOIN ( R [ winner ] ) [ Ariel Rubinstein Prize for Economics ] ) )",
            "[ JOIN ] [ winner ] [ Ariel Rubinstein Award ] ",
            "( [ joined by ] [ winner ] [ Ariel Rubinstein Award ] )"
        ],
        "gen_label": "( JOIN ( R [ winner ] ) ( JOIN ( R [ award received ] ) [ Ariel Rubinstein ] ) )"
    },
    {
        "question": "Question: { Which is the Y-DNA Haplogroup of Emmanuel Swedenborg? }",
        "predicted_query": [
            "( JOIN ( R [ Y-DNA Haplogroup ] ) [ Emmanuel Swedenborg ] )",
            "( AND ( JOIN [ Haplogroup Finder Y-DNA Haplogroup ] [ Y-DNA Haplogroup of Emmanuel Swedenborg ] ) ( JOIN ( R [ given ] ) [ Emmanuel Swedenborg ] ) )",
            "( JOIN ( R [ Y-DNA Haplogroup ] ) [ Emmanuel Swedenborg ] )",
            "( JOIN [ Y-DNA Haplogroup ] [ Emmanuel Swedenborg ] )",
            "( JOIN ( R [ Y-DNA haplogroup ] ) [ Emmanuel Swedenborg ] )"
        ],
        "gen_label": "( JOIN ( R [ Y-DNA Haplogroup ] ) [ Emmanuel Swedenborg ] )"
    },
    {
        "question": "Question: { Who gave the {produces} of {adapted from} of {Ostankino} ? }",
        "predicted_query": [
            "( JOIN ( R [ produced by ] ) ( JOIN ( R [ based on ] ) [ Ostankino ] ) )",
            "( JOIN [ produces ] [ Ostankino ] )",
            "( JOIN ( R [ produces ] ) ( JOIN ( R [ based on ] ) [ Ostankino ] ) )",
            "( JOIN ( R [ product of ] ) ( JOIN ( R [ based on ] ) [ Ostankino ] ) )",
            "( JOIN ( R [ producer ] ) ( JOIN ( R [ based on ] ) [ Ostankino ] ) )"
        ],
        "gen_label": "( JOIN ( R [ product, material, or service produced or provided ] ) ( JOIN ( R [ based on ] ) [ Ostankino ] ) )"
    },
    {
        "question": "Question: { Which is the prerequisite of a master's degree? }",
        "predicted_query": [
            "( JOIN ( R [ prerequisite ] ) [ master's degree ] )",
            "( JOIN [ prerequisite ] [ master's degree ] )",
            "( JOIN ( R [ requires ] ) ( JOIN ( R [ awarded by ] ) [ master's degree ] ) )",
            "( JOIN ( R [ prerequisite ] ) [ master's degree ] )",
            "( JOIN [ prerequisite of ] [ master's degree ] )"
        ],
        "gen_label": "( JOIN ( R [ prerequisite ] ) [ master's degree ] )"
    },
    {
        "question": "Question: { What is the key event of the sovereign state of Câlnic? }",
        "predicted_query": [
            "( JOIN ( R [ event ] ) ( JOIN ( R [ country ] ) [ Câlnic ] ) )",
            "( JOIN ( R [ key event ] ) ( JOIN ( R [ country ] ) [ Câlnic ] ) )",
            "( JOIN ( R [ significant event ] ) ( JOIN ( R [ country ] ) [ Câlnic ] ) )",
            "( JOIN [ key event ] [ Câlnic ] )",
            "( AND ( JOIN [ location of headquarters ] [ Câlnic ] ) ( JOIN ( R [ notable event ] ) [ Câlnic ] ) )"
        ],
        "gen_label": "( JOIN ( R [ significant event ] ) ( JOIN ( R [ country ] ) [ Câlnic ] ) )"
    },
    {
        "question": "Question: { Which is MyAnimeList manga ID for Death Note? }",
        "predicted_query": [
            "( JOIN ( R [ MyAnimeList manga ID ] ) [ Death Note ] )",
            "( JOIN ( R [ MyAnimeList manga ID ] ) [ Death Note ] )",
            "( JOIN ( R [ MyAnimeList manga ID ] ) [ Death Note ] )",
            "( JOIN ( R [ MyAnimeList manga ID ] ) [ Death Note ] )",
            "( JOIN ( R [ MyAnimeList manga ID ] ) [ Death Note ] )"
        ],
        "gen_label": "( JOIN ( R [ MyAnimeList manga ID ] ) [ Death Note ] )"
    },
    {
        "question": "Question: { Which is the common-law wife of dedicatee of Temple of Isthmia? }",
        "predicted_query": [
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ dedicatee ] ) [ Temple of Isthmia ] ) )",
            "( AND ( JOIN [ marital status ] [ common-law wife ] ) ( JOIN ( R [ dedicatee ] ) [ Temple of Isthmia ] ) )",
            "( JOIN ( R [ common-law wife ] ) ( JOIN ( R [ dedicatee ] ) [ Temple of Isthmia ] ) )",
            "( AND ( JOIN [ spouse ] [ common-law wife ] ) ( JOIN ( R [ dedicatee ] ) [ Temple of Isthmia ] ) )",
            "( JOIN [ common-law wife ] [ dedicatee of Temple of Isthmia ] )"
        ],
        "gen_label": "( JOIN ( R [ unmarried partner ] ) ( JOIN ( R [ dedicated to ] ) [ Poseidon Temple of Isthmia ] ) )"
    },
    {
        "question": "Question: { Which is Hornbostel-Sachs classification for bass drum? }",
        "predicted_query": [
            "( JOIN ( R [ Hornbostel-Sachs classification ] ) [ bass drum ] )",
            "[ JOIN ] [ hornbostel-sachs",
            "( JOIN ( R [ Hornbostel-Sachs classification ] ) [ bass drum ] )",
            "( AND ( JOIN [ HSDB ID ] [ Hornbostel-Sachs classification for bass drum ] ) ( JOIN ( R [ taxon ] ) [ bass drum ] ) )",
            "( JOIN ( R [ Hornbostel–Sachs instrument classification ] ) [ bass drum ] )"
        ],
        "gen_label": "( JOIN ( R [ Hornbostel-Sachs classification ] ) [ bass drum ] )"
    },
    {
        "question": "Question: { What is Stephen Curry's FIBA ID? }",
        "predicted_query": [
            "[ JOIN ] [ Stephen Curry ]",
            "( JOIN ( R [ FIBA ID ] ) [ Stephen Curry ] )",
            "( [ joined by ] [ FIBA ID ] [ Stephen Curry ] )",
            "( JOIN ( R [ FIBA player ID ] ) [ Stephen Curry ] )",
            "( AND ( JOIN [ FIBA player ID ] [ Stephen Curry ] ) ( JOIN ( R [ member of ] ) [ FIBA ] ) )"
        ],
        "gen_label": "( JOIN ( R [ FIBA.com player ID ( archived ) ] ) [ Stephen Curry ] )"
    },
    {
        "question": "Question: { Which is the gestation period for alpaca? }",
        "predicted_query": [
            "( JOIN ( R [ gestation period ] ) [ alpaca ] )",
            "( JOIN [ gestation period ] [ alpaca ] )",
            "( JOIN ( R [ gestation period ] ) [ alpaca ] )",
            "( JOIN ( R [ gestation period ] ) [ alpaca ] )",
            "( JOIN ( JOIN ( R [ gestation period ] ) [ alpaca ] ) )"
        ],
        "gen_label": "( JOIN ( R [ gestation period ] ) [ alpaca ] )"
    },
    {
        "question": "Question: { Which  is theme music for Big Bang Theory ? }",
        "predicted_query": [
            "( JOIN ( R [ composer ] ) ( JOIN ( R [ theme music ] ) [ Big Bang Theory ] ) )",
            "( JOIN ( R [ theme music ] ) [ Big Bang Theory ] )",
            "( AND ( JOIN [ composer ] [ Big Bang Theory ] ) ( JOIN ( R [ theme music ] ) [ Big Bang Theory ] ) )",
            "( JOIN [ theme music ] [ Big Bang Theory ] )",
            "( JOIN ( R [ composer ] ) ( JOIN ( R [ theme music ] ) [ Big Bang Theory ] ) )"
        ],
        "gen_label": "( JOIN ( R [ theme music ] ) [ The Big Bang Theory ] )"
    },
    {
        "question": "Question: { When the the discoverer of distillation die? }",
        "predicted_query": [
            "( JOIN ( R [ discoverer ] ) ( JOIN ( R [ discoverer of ] ) [ distillation ] ) )",
            "( JOIN ( R [ place of death ] ) ( JOIN ( R [ discoverer ] ) [ distillation ] ) )",
            "( AND ( JOIN [ location of discovery ] [ distillation ] ) ( JOIN ( R [ died ] ) [ Robert Boyle ] ) )",
            "( AND ( JOIN [ place of death ] [ distillation ] ) ( JOIN ( R [ discoverer ] ) [ distillation ] ) )",
            "( JOIN [ death date ] [ distillation ] ) JOIN ( JOIN ( R [ discoverer ] ) [ distillation ] )"
        ],
        "gen_label": "( JOIN ( R [ date of death ] ) ( JOIN ( R [ discoverer or inventor ] ) [ distillation ] ) )"
    },
    {
        "question": "Question: { What plays did the co-husband of Adéla Pollertová write? }",
        "predicted_query": [
            "( AND ( JOIN [ spouse ] [ Adéla Pollertová ] ) ( JOIN ( R [ writer ] ) [ The Good Soldier Švejk ] ) )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ spouse ] ) [ Adéla Pollertová ] ) )",
            "( JOIN ( R [ composer ] ) ( JOIN ( R [ spouse ] ) [ Adéla Pollertová ] ) )",
            "( AND ( JOIN [ spouse ] [ Adéla Pollertová ] ) ( JOIN ( R [ written by ] ) [ plays ] ) )",
            "( AND ( JOIN [ cast member ] [ Adéla Pollertová ] ) ( JOIN ( R [ based on work ] ) [ The Good Soldier Švejk ] ) )"
        ],
        "gen_label": "( JOIN ( R [ sport ] ) ( JOIN ( R [ relative ] ) [ Adéla Pollertová ] ) )"
    },
    {
        "question": "Question: { Which is the RTECS number for calcium carbonate? }",
        "predicted_query": [
            "( JOIN ( R [ RTECS number ] ) [ calcium carbonate ] )",
            "( JOIN [ RTECS number ] [ calcium carbonate ] )",
            "( JOIN ( R [ RTECS number ] ) [ calcium carbonate ] )",
            "( JOIN ( R [ RTECS number ] ) [ calcium carbonate ] )",
            "( JOIN [ RTECS number ] [ calcium carbonate ] )"
        ],
        "gen_label": "( JOIN ( R [ RTECS number ] ) [ calcium carbonate ] )"
    },
    {
        "question": "Question: { Who is the governor of the basin countries by Lake Tahoe? }",
        "predicted_query": [
            "( JOIN ( R [ governor ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Lake Tahoe ] ) )",
            "( JOIN ( R [ head of government ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Lake Tahoe ] ) )",
            "( JOIN [ governor ] [ Lake Tahoe ] )",
            "( JOIN ( R [ capital city ] ) ( JOIN ( R [ basin country ] ) [ Lake Tahoe ] ) )",
            "( AND ( JOIN [ country located in ] [ Lake Tahoe ] ) ( JOIN ( R [ governed by ] ) [ Lake Tahoe ] ) )"
        ],
        "gen_label": "( JOIN ( R [ head of government ] ) ( JOIN ( R [ basin country ] ) [ Lake Tahoe ] ) )"
    },
    {
        "question": "Question: { Who was the previous top dog of 1991 Mr. Olympia? }",
        "predicted_query": [
            "( JOIN ( R [ previous winner ] ) ( JOIN ( R [ winner ] ) [ 1991 Mr. Olympia ] ) )",
            "( AND ( JOIN [ previous winner ] [ 1991 Mr. Olympia ] ) ( JOIN ( R [ winner ] ) [ Mr. Olympia ] ) )",
            "( AND ( JOIN [ has predecessor ] [ 1991 Mr. Olympia ] ) ( JOIN ( R [ winner ] ) [ 1991 Mr. Olympia ] ) )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ participant in ] ) [ 1991 Mr. Olympia ] ) )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ winner of ] ) [ Mr. Olympia ] ) )"
        ],
        "gen_label": "( JOIN ( R [ winner ] ) ( JOIN ( R [ follows ] ) [ 1991 Mr. Olympia ] ) )"
    },
    {
        "question": "Question: { What is famous works for writers of Some Came Running ? }",
        "predicted_query": [
            "( JOIN ( R [ famous work ] ) ( JOIN ( R [ writer ] ) [ Some Came Running ] ) )",
            "( JOIN ( R [ notable work ] ) ( JOIN ( R [ author ] ) [ Some Came Running ] ) )",
            "( JOIN [ famous works ] [ Some Came Running ] )",
            "( JOIN ( R [ famous works ] ) [ Some Came Running ] )",
            "( JOIN [ famous work ] [ Some Came Running ] )"
        ],
        "gen_label": "( JOIN ( R [ notable work ] ) ( JOIN ( R [ author ] ) [ Some Came Running ] ) )"
    },
    {
        "question": "Question: { What is the cause of diesel in chisels? }",
        "predicted_query": [
            "( JOIN [ cause ] [ diesel ] )",
            "( JOIN ( R [ cause ] ) ( JOIN ( R [ material ] ) [ chisel ] ) )",
            "( AND ( JOIN [ has cause ] [ diesel ] ) ( JOIN ( R [ material ] ) [ chisel ] ) )",
            "( JOIN ( R [ cause ] ) ( JOIN ( R [ product or service provided ] ) [ chisel ] ) )",
            "( AND ( JOIN [ material or substance ] [ diesel ] ) ( JOIN ( R [ cause ] ) [ chisel ] ) )"
        ],
        "gen_label": "( JOIN ( R [ has cause ] ) ( JOIN ( R [ source of energy ] ) [ chisel ] ) )"
    },
    {
        "question": "Question: { Which is {film genre} {played by} {James Bond Theme} ? }",
        "predicted_query": [
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ composer ] ) [ James Bond Theme ] ) )",
            "( JOIN ( R [ film genre ] ) ( JOIN ( R [ performed by ] ) [ James Bond Theme ] ) )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ genre ] ) [ James Bond Theme ] ) )",
            "( JOIN [ film genre ] [ James Bond Theme ] )",
            "( AND ( JOIN [ genre ] [ play ] ) ( JOIN ( R [ composer ] ) [ James Bond Theme ] ) )"
        ],
        "gen_label": "( JOIN ( R [ genre ] ) ( JOIN ( R [ performer ] ) [ The James Bond Theme ] ) )"
    },
    {
        "question": "Question: { What is the child body of the star of Sagittarius Dwarf Elliptical Galaxy? }",
        "predicted_query": [
            "( JOIN ( R [ child body ] ) ( JOIN ( R [ parent body ] ) [ Sagittarius Dwarf Elliptical Galaxy ] ) )",
            "( JOIN [ child body ] [ Sagittarius Dwarf Elliptical Galaxy ] )",
            "( JOIN ( R [ parent body ] ) ( JOIN ( R [ parent of ] ) [ Sagittarius Dwarf Elliptical Galaxy ] ) )",
            "( JOIN ( R [ parent body ] ) [ Sagittarius Dwarf Elliptical Galaxy ] )",
            "( JOIN ( R [ child of ] ) ( JOIN ( R [ contains the administrative territorial entity ] ) [ Sagittarius Dwarf Elliptical Galaxy ] ) )"
        ],
        "gen_label": "( JOIN ( R [ child astronomical body ] ) ( JOIN ( R [ parent astronomical body ] ) [ Sagittarius Dwarf Elliptical Galaxy ] ) )"
    },
    {
        "question": "Question: { What is RHE doctor ID for Ernest Renan ? }",
        "predicted_query": [
            "( JOIN ( R [ RHE doctor ID ] ) [ Ernest Renan ] )",
            "( JOIN ( R [ doctor ID ] ) [ Ernest Renan ] )",
            "( JOIN ( R [ RHE doctor ID ] ) [ Ernest Renan ] )",
            "[ JOIN [ doctor ID ] [ Ernest Renan ] ]",
            "( AND ( JOIN [ doctor ID ] [ RHE ] ) ( JOIN ( R [ doctor ID ] ) [ Ernest Renan ] ) )"
        ],
        "gen_label": "( JOIN ( R [ RHE doctor ID ] ) [ Ernest Renan ] )"
    },
    {
        "question": "Question: { What is Yaya Toure's ESPNFC.com player ID? }",
        "predicted_query": [
            "{ JOIN [ ESPN FC player ID ] }",
            "( JOIN ( R [ ESPNFC.com player ID ] ) [ Yaya Touré ] )",
            "( JOIN ( R [ ESPN FC player ID ] ) [ Yaya Touré ] )",
            "( JOIN ( R [ ESPNFC.com player ID ] ) [ Yaya Touré ] )",
            "( AND ( JOIN [ ESPN FC player ID ] [ Yaya Touré ] ) ( JOIN ( R [ ID in this wiki ] ) [ Yaya Touré ] ) )"
        ],
        "gen_label": "( JOIN ( R [ ESPN FC player ID ] ) [ Yaya Touré ] )"
    },
    {
        "question": "Question: { Who is employed by Ernesto Zedillo, who is a member of the Ivy League? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Ivy League ] ) ( JOIN ( R [ employer ] ) [ Ernesto Zedillo ] ) )",
            "( AND ( JOIN [ member of ] [ Ivy League ] ) ( JOIN ( R [ employer ] ) [ Ernesto Zedillo ] ) )",
            "( AND ( JOIN [ member of ] [ Ivy League ] ) ( JOIN ( R [ employer ] ) [ Ernesto Zedillo ] ) )",
            "( JOIN [ member of ] [ Ivy League ] ) ( JOIN [ employer ] [ Ernesto Zedillo ] )",
            "( AND ( JOIN [ member of ] [ Ivy League ] ) ( JOIN ( R [ employee ] ) [ Ernesto Zedillo ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ member of ] [ Ivy League ] ) ( JOIN ( R [ employer ] ) [ Ernesto Zedillo ] ) )"
    },
    {
        "question": "Question: { What is Ayn Rand's Ban Q author ID? }",
        "predicted_query": [
            "( JOIN ( R [ Ban Q author ID ] ) [ Ayn Rand ] )",
            "( JOIN ( R [ Ban Q author ID ] ) [ Ayn Rand ] )",
            "### Instruction:",
            "( AND ( JOIN [ BANQ author ID ] [ Ayn Rand ] ) ( JOIN ( R [ author ] ) [ The Fountainhead ] ) )",
            "[ JOIN [ Ban Q author ID ] [ Ayn Rand ] ]"
        ],
        "gen_label": "( JOIN ( R [ BAnQ authority ID ] ) [ Ayn Rand ] )"
    },
    {
        "question": "Question: { How many people travel through the Guangzhou Metro daily? }",
        "predicted_query": [
            "( JOIN ( R [ daily passenger traffic ] ) ( JOIN ( R [ served by ] ) [ Guangzhou Metro ] ) )",
            "( JOIN ( R [ daily ridership ] ) [ Guangzhou Metro ] )",
            "( JOIN [ number of passengers ] [ Guangzhou Metro ] )",
            "( JOIN ( R [ number of passengers ] ) ( JOIN ( R [ operator ] ) [ Guangzhou Metro ] ) )",
            "( JOIN ( R [ population ] ) ( JOIN ( R [ served by ] ) [ Guangzhou Metro ] ) )"
        ],
        "gen_label": "( JOIN ( R [ daily patronage ] ) [ Guangzhou Metro ] )"
    },
    {
        "question": "Question: { What is the ITA Women's Collegiate Tennis Hall of Fame identification of Billie Jean King? }",
        "predicted_query": [
            "( JOIN ( R [ ITA Women's Collegiate Tennis Hall of Fame ID ] ) [ Billie Jean King ] )",
            "( AND ( JOIN [ Hall of Fame ID ] [ Billie Jean King ] ) ( JOIN ( R [ member of ] ) [ ITA Women's Collegiate Tennis Hall of Fame ] ) )",
            "( [ JOIN ] [ ITA Women's Collegiate Tennis Hall of Fame ID ] [ Billie Jean King ] )",
            "( JOIN ( R [ ITA Women's Collegiate Tennis Hall of Fame ID ] ) [ Billie Jean King ] )",
            "( JOIN ( R [ ITA Women's Collegiate Tennis Hall of Fame identification number ] ) ["
        ],
        "gen_label": "( JOIN ( R [ Women's Collegiate Tennis Hall of Fame ID ] ) [ Billie Jean King ] )"
    },
    {
        "question": "Question: { Please tell me Pedagogy's ESCO skill ID. }",
        "predicted_query": [
            "( JOIN ( R [ ESCO skill ID ] ) [ pedagogy ] )",
            "( JOIN ( R [ ESCO skill ID ] ) [ Pedagogy ] )",
            "( JOIN ( R [ ESCO skill ID ] ) [ pedagogy ] )",
            "( JOIN [ ESCO skill ID ] [ pedagogy ] )",
            "( AND ( JOIN [ skill ID ] [ Pedagogy ] ) ( JOIN ( R [ ID ] ) [ Pedagogy ] ) )"
        ],
        "gen_label": "( JOIN ( R [ ESCO skill ID ] ) [ pedagogy ] )"
    },
    {
        "question": "Question: { In what sport does a fencer study épée? }",
        "predicted_query": [
            "( JOIN ( R [ sport ] ) ( JOIN ( R [ practiced by ] ) [ épée ] ) )",
            "( AND ( JOIN [ practiced in ] [ fencing ] ) ( JOIN ( R [ studied ] ) [ épée ] ) )",
            "( JOIN [ sport ] [ épée ] ) ( JOIN ( R [ field of study ] ) [ fencer ] )",
            "( AND ( JOIN [ practiced in ] [ épée ] ) ( JOIN ( R [ field of study ] ) [ fencer ] ) )",
            "( AND ( JOIN [ sport ] [ fencing ] ) ( JOIN ( R [ studied by ] ) [ épée ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ practiced by ] [ fencer ] ) ( JOIN ( R [ sport ] ) [ épée ] ) )"
    },
    {
        "question": "Question: { Which is the legal form of sole proprietorship? }",
        "predicted_query": [
            "( JOIN ( R [ legal form ] ) [ sole proprietorship ] )",
            "[ JOIN [ legal form ] [ sole proprietorship ] ] ",
            "( JOIN ( R [ legal form ] ) [ sole proprietorship ] )",
            "[ JOIN ] [ joints ] ",
            "( JOIN ( R [ has legal form ] ) [ sole proprietorship ] )"
        ],
        "gen_label": "( JOIN [ legal form ] [ sole proprietorship ] )"
    },
    {
        "question": "Question: { Who is the actress in the narrative of Moses? }",
        "predicted_query": [
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ narrative ] ) [ Moses ] ) )",
            "( JOIN ( R [ narrative ] ) [ Moses ] )",
            "( JOIN ( R [ character in the narrative ] ) ( JOIN ( R [ narrative ] ) [ Moses ] ) )",
            "( JOIN [ narrative ] [ Moses ] )",
            "( AND ( JOIN [ narrative of ] [ Moses ] ) ( JOIN ( R [ cast member ] ) [ Moses ] ) )"
        ],
        "gen_label": "( JOIN ( R [ cast member ] ) ( JOIN ( R [ present in work ] ) [ Moses ] ) )"
    },
    {
        "question": "Question: { What is it? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Krasnodar Krai ] ) ( JOIN ( R [ follows ] ) [ Vladimir Lenin ] ) )",
            "( JOIN ( R [ has part ] ) ( JOIN ( R [ has material ] ) [ The Last Supper ] ) )",
            "( JOIN [ has part of ] [ what is it? ] )",
            "( JOIN ( R [ has part ] ) ( JOIN ( R [ manufacturer or distributor ] ) [ Samsung Galaxy S III ] ) )",
            "( JOIN [ has item ] [ what is it? ] )"
        ],
        "gen_label": "( AND ( JOIN [ used by ] [ evaporation ] ) ( JOIN ( R [ said to be the same as ] ) [ steam ] ) )"
    },
    {
        "question": "Question: { Dragon Dzajic is set under what government? }",
        "predicted_query": [
            "( JOIN ( R [ government ] ) [ Dragon Dzajic ] )",
            "( JOIN ( R [ government ] ) ( JOIN ( R [ set in ] ) [ Dragon Dzajic ] ) )",
            "( JOIN [ government ] [ Džajić ] )",
            "( AND ( JOIN [ located in administrative territorial entity ] [ Dzajic ] ) ( JOIN ( R [ government ] ) [ Dragon ] ) )",
            "( JOIN [ government ] [ Dragon Dzajic ] )"
        ],
        "gen_label": "( JOIN ( R [ authority ] ) ( JOIN ( R [ sport ] ) [ Dragan Džajić ] ) )"
    },
    {
        "question": "Question: { What is Elhuyar ZTH ID of diphtheria? }",
        "predicted_query": [
            "( JOIN ( R [ Elhuyar ZTH ID ] ) [ diphtheria ] )",
            "( JOIN ( R [ Elhuyar ZTH ID ] ) [ diphtheria ] )",
            "( AND ( JOIN [ Elhuyar ZT-H ID ] [ diphtheria ] ) ( JOIN ( R [ ID in Elhuyar ZT-H ] ) [ diphtheria ] ) )",
            "( JOIN ( R [ Elhuyar ZTH ID ] ) [ diphtheria ] )",
            "( JOIN [ Elhuyar ZTH ID ] [ diphtheria ] )"
        ],
        "gen_label": "( JOIN ( R [ Elhuyar ZTH ID ] ) [ diphtheria ] )"
    },
    {
        "question": "Question: { What is Jean-Paul Belmondo id for sudoc authorites? }",
        "predicted_query": [
            "( JOIN ( R [ SUDOC author ID ] ) [ Jean-Paul Belmondo ] )",
            "( JOIN ( R [ ID for Sudoc authors ] ) [ Jean-Paul Belmondo ] )",
            "[tell us about] [joint ID] [SUDOC author ID] [Jean-Paul Belmondo]",
            "( JOIN ( R [ SUDOC ID ] ) [ Jean-Paul Belmondo ] )",
            "( AND ( JOIN [ SODIC author ID ] [ Jean-Paul Belmondo ] ) ( JOIN ( R [ ID ] ) [ Jean-Paul Belmondo ] ) )"
        ],
        "gen_label": "( JOIN ( R [ IdRef ID ] ) [ Jean-Paul Belmondo ] )"
    },
    {
        "question": "Question: { Which is the encoding for L-Cysteine? }",
        "predicted_query": [
            "( JOIN ( R [ encoding ] ) [ L-cysteine ] )",
            "( JOIN [ encoding ] [ L-cysteine ] )",
            "( JOIN ( R [ encoding ] ) [ L-cysteine ] )",
            "( JOIN ( R [ encoding in IUPAC nomenclature ] ) [ L-cysteine ] )",
            "( AND ( JOIN [ chemical formula ] [ L-Cysteine ] ) ( JOIN ( R [ encoded in ] ) [ L-Cysteine ] ) )"
        ],
        "gen_label": "( JOIN [ encodes ] [ L-Cysteine ] )"
    },
    {
        "question": "Question: { What is the molecular function of DNA polymerase? }",
        "predicted_query": [
            "( JOIN [ molecular function ] [ DNA polymerase ] )",
            "( JOIN ( R [ molecular function ] ) [ DNA polymerase ] )",
            "( JOIN ( R [ molecular function ] ) [ DNA polymerase ] )",
            "( AND ( JOIN [ has molecular function ] [ DNA polymerase ] ) ( JOIN ( R [ has function ] ) [ DNA polymerase ] ) )",
            "( [ JOIN ] [ molecular function ] )"
        ],
        "gen_label": "( JOIN [ molecular function ] [ DNA polymerase ] )"
    },
    {
        "question": "Question: { In the Antofagasta Region, what is the male population? }",
        "predicted_query": [
            "( JOIN ( R [ male population ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Antofagasta Region ] ) )",
            "( JOIN ( R [ population ] ) ( JOIN ( R [ demographic characteristic ] ) [ Antofagasta Region ] ) )",
            "( AND ( JOIN [ sex or gender ] [ male ] ) ( JOIN ( R [ population ] ) [ Antofagasta Region ] ) )",
            "( AND ( JOIN [ gender ] [ male ] ) ( JOIN ( R [ population of sex ] ) [ Antofagasta Region ] ) )",
            "( JOIN ( R [ male population ] ) ( JOIN ( R [ demographic information ] ) [ Antofagasta Region ] ) )"
        ],
        "gen_label": "( JOIN ( R [ male population ] ) [ Antofagasta Region ] )"
    },
    {
        "question": "Question: { The Zamboanga Peninsula is divided into how many wards? }",
        "predicted_query": [
            "( JOIN ( R [ number of wards ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Zamboanga Peninsula ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Zamboanga Peninsula ] ) ( JOIN ( R [ divided by ] ) [ Zamboanga Peninsula ] ) )",
            "( JOIN ( R [ number of constituents ] ) ( JOIN ( R [ divided by ] ) [ Zamboanga Peninsula ] ) )",
            "( JOIN ( R [ number of administrative divisions ] ) ( JOIN ( R [ part of ] ) [ Zamboanga Peninsula ] ) )",
            "( JOIN ( R [ divided into ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Zamboanga Peninsula ] ) )"
        ],
        "gen_label": "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Zamboanga Peninsula ] ) )"
    },
    {
        "question": "Question: { Who is on the committee of the Free Software Foundation? }",
        "predicted_query": [
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ member of ] ) [ Free Software Foundation ] ) )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ member of ] ) [ Free Software Foundation ] ) )",
            "( JOIN [ member of ] [ Free Software Foundation ] )",
            "( JOIN [ committee ] [ Free Software Foundation ] )",
            "( JOIN ( R [ committee member ] ) [ Free Software Foundation ] )"
        ],
        "gen_label": "( JOIN ( R [ board member ] ) [ Free Software Foundation ] )"
    },
    {
        "question": "Question: { Who is {favorite player} of {writer} {Relativity: The Special and the General Theory} ? }",
        "predicted_query": [
            "( JOIN ( R [ favorite player ] ) ( JOIN ( R [ author ] ) [ Relativity: The Special and the General Theory ] ) )",
            "( JOIN ( R [ favorite player ] ) ( JOIN ( R [ author ] ) [ Relativity: The Special and the General Theory ] ) )",
            "( JOIN ( R [ player ] ) ( JOIN ( R [ author ] ) [ Relativity: The Special and the General Theory ] ) )",
            "( AND ( JOIN [ sport played or competed in ] [ football ] ) ( JOIN ( R [ author ] ) [ Relativity: The Special and the General Theory ] ) )",
            "( JOIN ( R [ sports played ] ) ( JOIN ( R [ writer ] ) [ Relativity: The Special and the General Theory ] ) )"
        ],
        "gen_label": "( JOIN ( R [ influenced by ] ) ( JOIN ( R [ author ] ) [ Relativity: The Special and the General Theory ] ) )"
    },
    {
        "question": "Question: { What is the Brazilian municipality code for Rio Branco? }",
        "predicted_query": [
            "( JOIN ( R [ Brazilian municipality code ] ) [ Rio Branco ] )",
            "{ JOIN [ municipality code ] [ Rio Branco ] }",
            "( JOIN ( R [ Brazilian municipality code ] ) [ Rio Branco ] )",
            "( JOIN ( R [ Brazilian municipality code ] ) [ Rio Branco ] )",
            "( AND ( JOIN [ country ] [ Brazil ] ) ( JOIN ( R [ place of death ] ) [ José de Alencar ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Brazilian municipality code ] ) [ Rio Branco ] )"
    },
    {
        "question": "Question: { What is the name of the inventor or discoverer of Messier 87 whose gender is male? }",
        "predicted_query": [
            "( AND ( JOIN [ gender ] [ male ] ) ( JOIN ( R [ discoverer or inventor ] ) [ Messier 87 ] ) )",
            "( AND ( JOIN [ sex or gender ] [ male ] ) ( JOIN ( R [ discoverer or inventor ] ) [ Messier 87 ] ) )",
            "( AND ( JOIN [ has gender ] [ male ] ) ( JOIN ( R [ discoverer or inventor ] ) [ Messier 87 ] ) )",
            "( AND ( JOIN [ sex or gender ] [ male ] ) ( JOIN ( R [ discoverer or inventor ] ) [ Messier 87 ] ) )",
            "( AND ( JOIN [ gender ] [ male ] ) ( JOIN ( R [ discoverer or inventor ] ) [ Messier 87 ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ sex or gender ] [ male ] ) ( JOIN ( R [ discoverer or inventor ] ) [ Messier 87 ] ) )"
    },
    {
        "question": "Question: { Who studied under Christ? }",
        "predicted_query": [
            "( JOIN ( R [ student ] ) ( JOIN ( R [ student of ] ) [ Christ ] ) )",
            "( JOIN [ student of ] [ Christ ] )",
            "( JOIN ( R [ student of ] ) [ Christ ] )",
            "( AND ( JOIN [ taught by ] [ Christ ] ) ( JOIN ( R [ student of ] ) [ Christ ] ) )",
            "( JOIN [ studied under ] [ Christ ] )"
        ],
        "gen_label": "( JOIN ( R [ student of ] ) ( JOIN ( R [ creator ] ) [ The Resurrected Christ ] ) )"
    },
    {
        "question": "Question: { Which is the AllMovie artist ID for Claudio Arrau? }",
        "predicted_query": [
            "( JOIN ( R [ AllMovie artist ID ] ) [ Claudio Arrau ] )",
            "( JOIN [ AllMovie artist ID ] [ Claudio Arrau ] )",
            "( JOIN ( R [ AllMovie artist ID ] ) [ Claudio Arrau ] )",
            "( JOIN ( R [ AllMovie artist ID ] ) [ Claudio Arrau ] )",
            "( JOIN ( R [ AllMovie artist ID ] ) [ Claudio Arrau ] )"
        ],
        "gen_label": "( JOIN ( R [ AllMovie person ID ] ) [ Claudio Arrau ] )"
    },
    {
        "question": "Question: { What did Karl Weierstraß's pupil do for a job? }",
        "predicted_query": [
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ student ] ) [ Karl Weierstrass ] ) )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ student ] ) [ Karl Weierstrass ] ) )",
            "( AND ( JOIN [ field of work ] [ mathematician ] ) ( JOIN ( R [ student ] ) [ Karl Weierstrass ] ) )",
            "( AND ( JOIN [ employer ] [ Karl Weierstrass ] ) ( JOIN ( R [ occupation ] ) [ Karl Weierstrass ] ) )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ pupil ] ) [ Karl Weierstrass ] ) )"
        ],
        "gen_label": "( JOIN ( R [ occupation ] ) ( JOIN ( R [ student ] ) [ Karl Weierstraß ] ) )"
    },
    {
        "question": "Question: { What is the timezone of the citizen of Erskine Caldwell? }",
        "predicted_query": [
            "( JOIN ( R [ time zone ] ) ( JOIN ( R [ place of citizenship ] ) [ Erskine Caldwell ] ) )",
            "( JOIN [ time zone ] [ Erskine Caldwell ] )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Erskine Caldwell ] ) ( JOIN ( R [ time zone ] ) [ Erskine Caldwell ] ) )",
            "( JOIN ( R [ time zone ] ) ( JOIN ( R [ place of citizenship ] ) [ Erskine Caldwell ] ) )",
            "( JOIN ( R [ time zone ] ) ( JOIN ( R [ country ] ) [ Erskine Caldwell ] ) )"
        ],
        "gen_label": "( JOIN ( R [ located in time zone ] ) ( JOIN ( R [ country of citizenship ] ) [ Erskine Caldwell ] ) )"
    },
    {
        "question": "Question: { Who is persons of Ancient Athens of Aristophanes? }",
        "predicted_query": [
            "( JOIN ( R [ person ] ) ( JOIN ( R [ place of death ] ) [ Aristophanes ] ) )",
            "( AND ( JOIN [ persons or family members ] [ Aristophanes ] ) ( JOIN ( R [ place of death ] ) [ Ancient Athens ] ) )",
            "( JOIN ( R [ persons of ] ) ( JOIN ( R [ place of death ] ) [ Aristophanes ] ) )",
            "( JOIN ( R [ people ] ) ( JOIN ( R [ location ] ) [ Aristophanes ] ) )",
            "( JOIN ( R [ person ] ) ( JOIN ( R [ place of activity ] ) [ Aristophanes ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Persons of Ancient Athens ] ) [ Aristophanes ] )"
    },
    {
        "question": "Question: { In which diocese is the Alexander Nevsky Cathedral? }",
        "predicted_query": [
            "( JOIN ( R [ diocese ] ) [ Alexander Nevsky Cathedral ] )",
            "( JOIN [ diocese ] [ Alexander Nevsky Cathedral ] )",
            "( JOIN ( R [ diocese ] ) ( JOIN ( R [ located in ] ) [ Alexander Nevsky Cathedral ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ diocese ] ) [ Alexander Nevsky Cathedral ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Diocese of Novgorod ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Alexander Nevsky Cathedral ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diocese ] ) [ Alexander Nevsky Cathedral ] )"
    },
    {
        "question": "Question: { What planetary system is a companion of Proxima Centauri b? }",
        "predicted_query": [
            "( JOIN ( R [ planetary system ] ) ( JOIN ( R [ companion ] ) [ Proxima Centauri b ] ) )",
            "( AND ( JOIN [ has planetary system ] [ Proxima Centauri b ] ) ( JOIN ( R [ has planetary system ] ) [ Proxima Centauri ] ) )",
            "( JOIN ( R [ planetary system ] ) ( JOIN ( R [ planetary system companion ] ) [ Proxima Centauri b ] ) )",
            "( JOIN ( R [ has planetary system ] ) ( JOIN ( R [ has planetary system ] ) [ Proxima Centauri ] ) )",
            "( JOIN ( R [ planetary system ] ) ( JOIN ( R [ discoverer ] ) [ Proxima Centauri b ] ) )"
        ],
        "gen_label": "( JOIN ( R [ companion of ] ) ( JOIN ( R [ parent astronomical body ] ) [ Proxima Centauri b ] ) )"
    },
    {
        "question": "Question: { What is the field of profession for Robert A. Heinlein? }",
        "predicted_query": [
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ field of work ] ) [ Robert A. Heinlein ] ) )",
            "( JOIN [ field of profession ] [ Robert A. Heinlein ] )",
            "( JOIN ( R [ field of profession ] ) [ Robert A. Heinlein ] )",
            "( JOIN ( R [ field of work ] ) ( JOIN ( R [ occupation ] ) [ Robert A. Heinlein ] ) )",
            "( AND ( JOIN [ occupation or employment ] [ science fiction author ] ) ( JOIN ( R [ field of work ] ) [ Robert A. Heinlein ] ) )"
        ],
        "gen_label": "( JOIN ( R [ field of this occupation ] ) ( JOIN ( R [ occupation ] ) [ Robert A. Heinlein ] ) )"
    },
    {
        "question": "Question: { What is the genre of Le Pont de Passy et la tour Eiffel? }",
        "predicted_query": [
            "( JOIN [ genre ] [ Le Pont de Passy et la tour Eiffel ] )",
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ located in ] ) [ Pont de Passy et la tour Eiffel ] ) )",
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ genre of work ] ) [ Le Pont de Passy et la tour Eiffel ] ) )",
            "( AND ( JOIN [ field of work ] [ genre ] ) ( JOIN ( R [ genre ] ) [ Le Pont de Passy et la tour Eiffel ] ) )",
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ location ] ) [ Pont de Passy et la tour Eiffel ] ) )"
        ],
        "gen_label": "( JOIN ( R [ genre ] ) ( JOIN ( R [ creator ] ) [ Le Pont de Passy et la Tour Eiffel ] ) )"
    },
    {
        "question": "Question: { Which is the Carnegie Hall agent ID for David Ben-Gurion? }",
        "predicted_query": [
            "( JOIN ( R [ Carnegie Hall artist ID ] ) [ David Ben-Gurion ] )",
            "[joined by][Carnegie Hall agent ID][David Ben-Gurion]",
            "( AND ( JOIN [ agent ID ] [ Carnegie Hall ] ) ( JOIN ( R [ ID ] ) [ David Ben-Gurion ] ) )",
            "( JOIN ( R [ Carnegie Hall artist ID ] ) [ David Ben-Gurion ] )",
            "( JOIN ( R [ Carnegie Hall agent ID ] ) [ David Ben-Gurion ] )"
        ],
        "gen_label": "( JOIN ( R [ Carnegie Hall agent ID ] ) [ David Ben-Gurion ] )"
    },
    {
        "question": "Question: { What is the brother of the sons of Johann Sebastian Bach? }",
        "predicted_query": [
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ child ] ) [ Johann Sebastian Bach ] ) )",
            "( AND ( JOIN [ child ] [ Johann Sebastian Bach ] ) ( JOIN ( R [ sibling ] ) [ Johann Sebastian Bach ] ) )",
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ child ] ) [ Johann Sebastian Bach ] ) )",
            "[ JOIN [ sibling ] [ Johann Sebastian Bach ] ]",
            "( JOIN [ sibling ] [ Johann Sebastian Bach ] )"
        ],
        "gen_label": "( JOIN ( R [ sibling ] ) ( JOIN ( R [ child ] ) [ Johann Sebastian Bach ] ) )"
    },
    {
        "question": "Question: { When did the the inventor of the Rosette Nebula die? }",
        "predicted_query": [
            "( JOIN ( R [ inventor ] ) ( JOIN ( R [ discoverer ] ) [ Rosette Nebula ] ) )",
            "( JOIN [ date of death ] [ Jean-Charles Perrine ] )",
            "( JOIN ( R [ invention date ] ) ( JOIN ( R [ discoverer ] ) [ Rosette Nebula ] ) )",
            "( JOIN ( R [ has inventor ] ) ( JOIN ( R [ discoverer ] ) [ Rosette Nebula ] ) )",
            "( AND ( JOIN [ place of death ] [ Rosette Nebula ] ) ( JOIN ( R [ discoverer ] ) [ Rosette Nebula ] ) )"
        ],
        "gen_label": "( JOIN ( R [ date of death ] ) ( JOIN ( R [ discoverer or inventor ] ) [ Rosette Nebula ] ) )"
    },
    {
        "question": "Question: { In the administrative region of Vancouver, what is present at this location done by Nicklas Lidstrom? }",
        "predicted_query": [
            "( AND ( JOIN [ done by ] [ Nicklas Lidstrom ] ) ( JOIN ( R [ present in the administrative territorial entity ] ) [ Vancouver ] ) )",
            "( AND ( JOIN [ present at this location ] [ Nicklas Lidstrom ] ) ( JOIN ( R [ influenced by ] ) [ Vancouver ] ) )",
            "( JOIN ( R [ present in the administrative territorial entity ] ) ( JOIN ( R [ place of work ] ) [ Nicklas Lidström ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Vancouver ] ) ( JOIN ( R [ location ] ) [ Nicklas Lidstrom ] ) )",
            "( AND ( JOIN [ performed at location ] [ Vancouver ] ) ( JOIN ( R [ influenced by ] ) [ Nicklas Lidstrom ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ located in the administrative territorial entity ] [ Vancouver ] ) ( JOIN ( R [ participant in ] ) [ Nicklas Lidström ] ) )"
    },
    {
        "question": "Question: { What is the life stance of alumni Bonnie L Oscarson? }",
        "predicted_query": [
            "( JOIN ( R [ life stance ] ) ( JOIN ( R [ alumni ] ) [ Bonnie L. Oscarson ] ) )",
            "( JOIN [ life stance ] [ Bonnie L. Oscarson ] )",
            "( JOIN ( R [ religious or philosophical belief system ] ) ( JOIN ( R [ alumni ] ) [ Bonnie L. Oscarson ] ) )",
            "( AND ( JOIN [ religion ] [ Mormonism ] ) ( JOIN ( R [ alumni ] ) [ Bonnie L. Oscarson ] ) )",
            "( JOIN ( R [ life stance ] ) ( JOIN ( R [ graduate ] ) [ Bonnie L. Oscarson ] ) )"
        ],
        "gen_label": "( JOIN ( R [ religion or worldview ] ) ( JOIN ( R [ educated at ] ) [ Bonnie L. Oscarson ] ) )"
    },
    {
        "question": "Question: { Who fought for formation of Ted Lyons? }",
        "predicted_query": [
            "( JOIN ( R [ conflict ] ) ( JOIN ( R [ participant in war ] ) [ Ted Lyons ] ) )",
            "### Logical Form Join Query",
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ conflict ] ) [ Ted Lyons ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Ted Lyons ] ) ( JOIN ( R [ participant ] ) [ World War II ] ) )",
            "{ JOIN [ fought in ] [ Ted Lyons ] }"
        ],
        "gen_label": "( JOIN ( R [ conflict ] ) ( JOIN ( R [ military branch ] ) [ Ted Lyons ] ) )"
    },
    {
        "question": "Question: { What is the literary genre composed by Suite No. 2? }",
        "predicted_query": [
            "( JOIN ( R [ literary genre ] ) ( JOIN ( R [ composer ] ) [ Suite No. 2 ] ) )",
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ composer ] ) [ Suite No. 2 ] ) )",
            "( JOIN [ literary genre ] [ Suite No. 2 ] )",
            "( JOIN ( R [ literary genre ] ) ( JOIN ( R [ composer ] ) [ Suite No. 2 ] ) )",
            "( AND ( JOIN [ genre ] [ suite ] ) ( JOIN ( R [ composer ] ) [ Suite No. 2 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ genre ] ) ( JOIN ( R [ composer ] ) [ Suite No. 2 ] ) )"
    },
    {
        "question": "Question: { Which counties are inside the Canton of Neuchatel Indian reservation? }",
        "predicted_query": [
            "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Canton of Neuchâtel Indian reservation ] ) )",
            "( JOIN [ contains the administrative territorial entity ] [ Canton of Neuchâtel Indian reservation ] )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ country of origin ] ) [ Indian reservation ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Canton of Neuchâtel ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Indian reservation ] ) )",
            "( JOIN ( R [ country ] ) ( JOIN ( R [ located in ] ) [ Canton of Neuchâtel Indian reservation ] ) )"
        ],
        "gen_label": "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Neuchâtel ] ) )"
    },
    {
        "question": "Question: { What is RERO's ID of Trukmenistan? }",
        "predicted_query": [
            "[ JOIN ( R [ RERO ID ] ) [ Trukmenistan ] ]",
            "( JOIN [ RERO ID ] [ Trukmenistan ] )",
            "( JOIN ( R [ RERO ID ] ) [ Truk ] )",
            "[",
            "( AND ( JOIN [ ID in RERO ] [ Truman, Missouri ] ) ( JOIN ( R [ ID ] ) [ Trukmenistan ] ) )"
        ],
        "gen_label": "( JOIN ( R [ RERO ID ( legacy ) ] ) [ Turkmenistan ] )"
    },
    {
        "question": "Question: { WHERE IS THE HEADQUARTERS OF INTERNATIONAL MARITIME ORGANIZATION CATEGORIZED AND ASSOCIATED BY THE PEOPLE? }",
        "predicted_query": [
            "( JOIN ( R [ headquarters location ] ) ( JOIN ( R [ member of ] ) [ International Maritime Organization ] ) )",
            "( JOIN ( R [ headquarter location ] ) ( JOIN ( R [ member of ] ) [ International Maritime Organization ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ International Maritime Organization ] ) ( JOIN ( R [ headquarter location ] ) [ International Maritime Organization ] ) )",
            "( AND ( JOIN [ member of ] [ People ] ) ( JOIN ( R [ headquarters location ] ) [ International Maritime Organization ] ) )",
            "( JOIN [ headquartered in ] [ International Maritime Organization ] ) ( JOIN ( R [ has category ] ) [ International Maritime Organization ] )"
        ],
        "gen_label": "( JOIN ( R [ category of associated people ] ) ( JOIN ( R [ headquarters location ] ) [ International Maritime Organization ] ) )"
    },
    {
        "question": "Question: { What is the Paris Faculty of Science ID for Professor Henri Poincare? }",
        "predicted_query": [
            "( JOIN ( R [ Paris Faculty of Science ID ] ) [ Henri Poincaré ] )",
            "( JOIN ( R [ Paris Faculty of Science ID ] ) [ Henri Poincaré ] )",
            "( AND ( JOIN [ faculty ID ] [ Paris Faculty of Science ] ) ( JOIN ( R [ ID ] ) [ Henri Poincaré ] ) )",
            "( JOIN ( R [ faculty ID ] ) [ Henri Poincaré ] )",
            "( JOIN ( R [ Paris Faculty of Science ID ] ) [ Henri Poincaré ] )"
        ],
        "gen_label": "( JOIN ( R [ Paris Faculty of Science professor ID ] ) [ Henri Poincaré ] )"
    },
    {
        "question": "Question: { What is the astronomic symbol image of Saturn? }",
        "predicted_query": [
            "( JOIN ( R [ astronomic symbol image ] ) [ Saturn ] )",
            "( JOIN [ astronomic symbol image ] [ Saturn ] )",
            "( AND ( JOIN [ has image ] [ astronomic symbol ] ) ( JOIN ( R [ depicts ] ) [ Saturn ] ) )",
            "( JOIN ( R [ astronomical symbol ] ) ( JOIN ( R [ depicts ] ) [ Saturn ] ) )",
            "( AND ( JOIN [ depicts ] [ astronomical symbol ] ) ( JOIN ( R [ symbol ] ) [ Saturn ] ) )"
        ],
        "gen_label": "( JOIN ( R [ astronomic symbol image ] ) [ Saturn ] )"
    },
    {
        "question": "Question: { Which is the temporal range end for Triceratops? }",
        "predicted_query": [
            "( JOIN ( R [ temporal range end ] ) [ Triceratops ] )",
            "( JOIN ( R [ end of temporal range ] ) [ Triceratops ] )",
            "( JOIN ( R [ temporal range end ] ) [ Triceratops ] )",
            "( JOIN [ temporal range end ] [ Triceratops ] )",
            "( JOIN ( R [ temporal range end ] ) [ Triceratops ] )"
        ],
        "gen_label": "( JOIN ( R [ temporal range end ] ) [ Triceratops ] )"
    },
    {
        "question": "Question: { What is the name of subsidiary company of Fawlty Towers motion picture studio ? }",
        "predicted_query": [
            "( JOIN ( R [ subsidiary ] ) ( JOIN ( R [ producer ] ) [ Fawlty Towers ] ) )",
            "( JOIN ( R [ subsidiary company ] ) ( JOIN ( R [ producer ] ) [ Fawlty Towers ] ) )",
            "( AND ( JOIN [ parent company ] [ Fawlty Towers ] ) ( JOIN ( R [ named after ] ) [ John Cleese ] ) )",
            "( JOIN ( R [ company subsidiary of ] ) ( JOIN ( R [ production company ] ) [ Fawlty Towers ] ) )",
            "( AND ( JOIN [ employer ] [ Fawlty Towers ] ) ( JOIN ( R [ subsidiary company ] ) [ Fawlty Towers ] ) )"
        ],
        "gen_label": "( JOIN ( R [ has subsidiary ] ) ( JOIN ( R [ production company ] ) [ Fawlty Towers ] ) )"
    },
    {
        "question": "Question: { Which of {this taxon is the source} {made from} {calf head} ? }",
        "predicted_query": [
            "( JOIN ( R [ taxon of ] ) ( JOIN ( R [ product of ] ) [ calf head ] ) )",
            "( JOIN ( R [ taxon is the source ] ) ( JOIN ( R [ material ] ) [ calf head ] ) )",
            "( AND ( JOIN [ made from ] [ calf head ] ) ( JOIN ( R [ taxon of ] ) [ this taxon is the source ] ) )",
            "( JOIN [ made from ] [ calf head ] )",
            "( AND ( JOIN [ product of ] [ calf head ] ) ( JOIN ( R [ taxon ] ) [ this taxon is the source ] ) )"
        ],
        "gen_label": "( JOIN ( R [ this taxon is source of ] ) ( JOIN ( R [ natural product of taxon ] ) [ head of vealt ] ) )"
    },
    {
        "question": "Question: { Which is the Latvian Address register ID of Riga? }",
        "predicted_query": [
            "( JOIN ( R [ Latvian Address Register ID ] ) [ Riga ] )",
            "( JOIN [ Latvian Address Register ID ] [ Riga ] )",
            "( JOIN ( R [ Latvian Address register ID ] ) [ Riga ] )",
            "( JOIN ( R [ Latvian Address Register ID ] ) [ Riga ] )",
            "( [ JOIN ] [ Riga ] )"
        ],
        "gen_label": "( JOIN ( R [ Latvian National Address Register ID ] ) [ Riga ] )"
    },
    {
        "question": "Question: { What are the uses of table tennis? }",
        "predicted_query": [
            "( JOIN ( R [ has use ] ) ( JOIN ( R [ sport ] ) [ table tennis ] ) )",
            "( JOIN [ uses ] [ table tennis ] )",
            "( JOIN ( R [ uses ] ) [ table tennis ] )",
            "( AND ( JOIN [ has use ] [ table tennis ] ) ( JOIN ( R [ has use ] ) [ table tennis ] ) )",
            "( AND ( JOIN [ uses ] [ table tennis ] ) ( JOIN ( R [ has sport ] ) [ table tennis ] ) )"
        ],
        "gen_label": "( JOIN ( R [ uses ] ) [ table tennis ] )"
    },
    {
        "question": "Question: { Which {Q48460} {field of this profession} is {housekeeper} ? }",
        "predicted_query": [
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ occupation ] ) [ housekeeper ] ) )",
            "( JOIN ( R [ field of this profession ] ) [ housekeeper ] )",
            "[ { JOIN ( R [ occupation ] ) [ Queen Victoria ] } ]",
            "( JOIN ( R [ profession ] ) [ housekeeper ] )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ field of this profession ] ) [ housekeeper ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Dewey Decimal Classification ] ) ( JOIN ( R [ field of this occupation ] ) [ housekeeper ] ) )"
    },
    {
        "question": "Question: { Whats the spore print color of Enikitake? }",
        "predicted_query": [
            "( JOIN ( R [ spore print color ] ) [ Enikitake ] )",
            "( JOIN [ spore print color ] [ Enikitake ] )",
            "( AND ( JOIN [ color ] [ brownish yellow ] ) ( JOIN ( R [ spore print color ] ) [ Enikitake ] ) )",
            "( JOIN ( R [ spore print color ] ) [ Enikitake ] )",
            "( JOIN ( R [ has color ] ) [ Enkaitake ] )"
        ],
        "gen_label": "( JOIN ( R [ spore print color ] ) [ enoki ] )"
    },
    {
        "question": "Question: { What is the translation of the safety classification and labelling of boron nitride? }",
        "predicted_query": [
            "( JOIN ( R [ translation of ] ) ( JOIN ( R [ safety classification and labelling ] ) [ boron nitride ] ) )",
            "( JOIN [ safety classification and labelling ] [ boron nitride ] )",
            "( AND ( JOIN [ has ] [ safety classification and labelling of boron nitride ] ) ( JOIN ( R [ translation ] ) [ boron nitride ] ) )",
            "( JOIN ( R [ safety classification and labelling ] ) [ boron nitride ] )",
            "( JOIN [ safety classification and labelling ] [ boron nitride ] )"
        ],
        "gen_label": "( JOIN ( R [ has edition or translation ] ) ( JOIN ( R [ safety classification and labelling ] ) [ boron nitride ] ) )"
    },
    {
        "question": "Question: { who is is indian reservation of indiana that have his disticts or oklahoma ? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Oklahoma ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Indian Reservation of Indiana ] ) )",
            "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Oklahoma ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Indiana ] ) )",
            "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Indian reservation in Indiana ] ) )",
            "( AND ( JOIN [ has administrative territorial entity ] [ Oklahoma ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Indian Reservation of Indiana ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ contains the administrative territorial entity ] [ Oklahoma ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Indiana ] ) )"
    },
    {
        "question": "Question: { Who are the inhabitants of the land of Molise? }",
        "predicted_query": [
            "( JOIN ( R [ inhabitant ] ) ( JOIN ( R [ country ] ) [ Molise ] ) )",
            "( JOIN [ inhabitant ] [ Molise ] )",
            "( JOIN ( R [ population ] ) ( JOIN ( R [ country ] ) [ Molise ] ) )",
            "( JOIN ( R [ inhabitant ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Molise ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Molise ] ) ( JOIN ( R [ inhabited by ] ) [ Molise ] ) )"
        ],
        "gen_label": "( JOIN ( R [ population ] ) ( JOIN ( R [ country ] ) [ Molise ] ) )"
    },
    {
        "question": "Question: { Who is the songwriter of Rule Britannia, whise son is Michael Arne? }",
        "predicted_query": [
            "( AND ( JOIN [ child ] [ Michael Arne ] ) ( JOIN ( R [ composer ] ) [ Rule, Britannia! ] ) )",
            "( AND ( JOIN [ child ] [ Michael Arne ] ) ( JOIN ( R [ composer or lyricist ] ) [ Rule, Britannia! ] ) )",
            "( AND ( JOIN [ son of ] [ Michael Arne ] ) ( JOIN ( R [ composer ] ) [ Rule, Britannia! ] ) )",
            "( AND ( JOIN [ father ] [ Michael Arne ] ) ( JOIN ( R [ writer ] ) [ Rule, Britannia ] ) )",
            "( AND ( JOIN [ father ] [ Michael Arne ] ) ( JOIN ( R [ composer ] ) [ Rule, Britannia! ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ child ] [ Michael Arne ] ) ( JOIN ( R [ composer ] ) [ Rule, Britannia! ] ) )"
    },
    {
        "question": "Question: { In what field was Artemidorus of Tralleis employed? }",
        "predicted_query": [
            "( JOIN ( R [ field of work ] ) ( JOIN ( R [ occupation ] ) [ Artemidorus of Tralles ] ) )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ field of work ] ) [ Artemidorus of Tralles ] ) )",
            "( AND ( JOIN [ occupation ] [ field of employment ] ) ( JOIN ( R [ occupation ] ) [ Artemidorus of Tralles ] ) )",
            "( JOIN [ field of employment ] [ Artemidorus of Tralles ] )",
            "( AND ( JOIN [ field of work ] [ Artemidorus of Tralles ] ) ( JOIN ( R [ occupation ] ) [ Artemidorus of Tralles ] ) )"
        ],
        "gen_label": "( JOIN ( R [ field of this occupation ] ) ( JOIN ( R [ occupation ] ) [ Artemidorus of Tralleis ] ) )"
    },
    {
        "question": "Question: { What is Dietmar Kansy's title? }",
        "predicted_query": [
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ member of ] ) [ Dietmar Kansy ] ) )",
            "( JOIN ( R [ title ] ) [ Dietmar Kansy ] )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ given name ] ) [ Dietmar Kanzler ] ) )",
            "( JOIN ( R [ title ] ) [ Dietmar Kanzler ] )",
            "( JOIN [ title ] [ Dietmar Kansy ] )"
        ],
        "gen_label": "( JOIN ( R [ participant ] ) ( JOIN ( R [ participant in ] ) [ Dietmar Kansy ] ) )"
    },
    {
        "question": "Question: { What is the higher taxon of Bornean orangutan, whose type of taxon is genus? }",
        "predicted_query": [
            "( AND ( JOIN [ taxon of ] [ genus ] ) ( JOIN ( R [ taxon of ] ) [ Bornean orangutan ] ) )",
            "( AND ( JOIN [ taxon rank ] [ genus ] ) ( JOIN ( R [ taxon of ] ) [ Bornean orangutan ] ) )",
            "( JOIN [ taxon type ] [ genus ] ) ( JOIN ( R [ taxon of ] ) [ Bornean orangutan ] )",
            "( AND ( JOIN [ taxon of ] [ genus ] ) ( JOIN ( R [ parent taxon ] ) [ orangutan ] ) )",
            "( AND ( JOIN [ contains the taxon of ] [ genus ] ) ( JOIN ( R [ taxon of ] ) [ Bornean orangutan ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ taxon rank ] [ genus ] ) ( JOIN ( R [ parent taxon ] ) [ Bornean orangutan ] ) )"
    },
    {
        "question": "Question: { Which means {OSM relation ID} in the{Canterbury Region} ? }",
        "predicted_query": [
            "( JOIN ( R [ OSM relation ID ] ) [ Canterbury Region ] )",
            "( JOIN ( R [ OSM relation ID ] ) [ Canterbury Region ] )",
            "[]",
            "( JOIN ( R [ OSM relation ID ] ) [ Canterbury region ] )",
            "( AND ( JOIN [ OSM relation ID ] [ Canterbury Region ] ) [ Canterbury Region ] )"
        ],
        "gen_label": "( JOIN ( R [ OpenStreetMap relation ID ] ) [ Canterbury Region ] )"
    },
    {
        "question": "Question: { who has kid of inspiration of papa carlo }",
        "predicted_query": [
            "( JOIN ( R [ child ] ) ( JOIN ( R [ influenced by ] ) [ Papa Carlo ] ) )",
            "( JOIN [ has child ] [ papa Carlo ] )",
            "( JOIN [ has child ] [ Papa Carlo ] )",
            "( AND ( JOIN [ parent of ] [ Papa Carlo ] ) ( JOIN ( R [ influenced by ] ) [ Papa Carlo ] ) )",
            "( AND ( JOIN [ child ] [ inspiration ] ) ( JOIN ( R [ parent ] ) [ Papa Carlo ] ) )"
        ],
        "gen_label": "( JOIN ( R [ child ] ) ( JOIN ( R [ inspired by ] ) [ Papa Carlo ] ) )"
    },
    {
        "question": "Question: { who is chief operating officer of Subhas Chandra Bose ? }",
        "predicted_query": [
            "( JOIN ( R [ chief operating officer ] ) [ Subhas Chandra Bose ] )",
            "( JOIN ( R [ head of government ] ) ( JOIN ( R [ employer ] ) [ Subhas Chandra Bose ] ) )",
            "( JOIN [ chief operating officer ] [ Subhas Chandra Bose ] )",
            "( JOIN ( R [ position held ] ) ( JOIN ( R [ employer ] ) [ Subhas Chandra Bose ] ) )",
            "( JOIN ( R [ chief executive officer ] ) ( JOIN ( R [ head of government ] ) [ Subhas Chandra Bose ] ) )"
        ],
        "gen_label": "( JOIN [ chief operating officer ] [ Subhas Chandra Bose ] )"
    },
    {
        "question": "Question: { What is the film starring of the part of series of The Daily Show, 2003? }",
        "predicted_query": [
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ part of the series ] ) [ The Daily Show ] ) )",
            "### Historical Artifact ID:",
            "( JOIN [ cast member ] [ The Daily Show ] ) ( JOIN ( R [ part of the series ] ) [ The Daily Show ] )",
            "( AND ( JOIN [ part of series ] [ The Daily Show ] ) ( JOIN ( R [ cast member ] ) [ The Daily Show ] ) )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ part of the series ] ) [ The Daily Show ] ) )"
        ],
        "gen_label": "( JOIN ( R [ cast member ] ) ( JOIN ( R [ part of the series ] ) [ The Daily Show, 2003 ] ) )"
    },
    {
        "question": "Question: { Which is the SIMBAD ID of Horsehead Nebula? }",
        "predicted_query": [
            "( JOIN ( R [ SIMBAD ID ] ) [ Horsehead Nebula ] )",
            "( JOIN ( R [ SIMBAD ID ] ) [ Horsehead Nebula ] )",
            "( JOIN ( R [ SIMBAD object ID ] ) [ Horsehead Nebula ] )",
            "( JOIN ( R [ SIMBAD ID ] ) [ Horsehead Nebula ] )",
            "[SIMBAD ID] of [Horsehead Nebula]"
        ],
        "gen_label": "( JOIN ( R [ SIMBAD ID ] ) [ Horsehead Nebula ] )"
    },
    {
        "question": "Question: { What is Iditarod musher ID for Steve Fossett? }",
        "predicted_query": [
            "( JOIN ( R [ Iditarod musher ID ] ) [ Steve Fossett ] )",
            "( [ joined by ] [ Iditarod musher ID ] [ Steve Fossett ] )",
            "[ JOIN [ has participant ID ] [ Steve Fossett ] ]",
            "( AND ( JOIN [ ID for ] [ Iditarod musher ] ) ( JOIN ( R [ ID ] ) [ Steve Fossett ] ) )",
            "( JOIN ( R [ Iditarod musher ID ] ) [ Steve Fossett ] )"
        ],
        "gen_label": "( JOIN ( R [ Iditarod musher ID ] ) [ Steve Fossett ] )"
    },
    {
        "question": "Question: { Which is the Executive Order number for Emancipation Proclamation? }",
        "predicted_query": [
            "( JOIN ( R [ Executive Order number ] ) [ Emancipation Proclamation ] )",
            "( JOIN [ Executive Order number ] [ Emancipation Proclamation ] )",
            "( JOIN ( R [ executive order ] ) [ Emancipation Proclamation ] )",
            "( [ joined by ] [ executive order number ] [ Emancipation Proclamation ] )",
            "( JOIN ( R [ executive order number ] ) [ Emancipation Proclamation ] )"
        ],
        "gen_label": "( JOIN ( R [ Executive Order number ] ) [ Emancipation Proclamation ] )"
    },
    {
        "question": "Question: { What is exclave of Sharjah Emirate? }",
        "predicted_query": [
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ country ] ) [ Sharjah ] ) )",
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ country ] ) [ Sharjah Emirate ] ) )",
            "( JOIN [ exclave of ] [ Sharjah Emirate ] )",
            "( JOIN ( R [ exclave ] ) [ Sharjah Emirate ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Sharjah Emirate ] ) ( JOIN ( R [ shares border with ] ) [ Sharjah ] ) )"
        ],
        "gen_label": "( JOIN [ exclave of ] [ Emirate of Sharjah ] )"
    },
    {
        "question": "Question: { Who are the producers of IMDb's parent agency? }",
        "predicted_query": [
            "( JOIN [ parent agency ] [ IMDb ] )",
            "( JOIN ( R [ parent agency ] ) [ IMDb ] )",
            "( JOIN ( R [ producer ] ) ( JOIN ( R [ parent agency ] ) [ IMDb ] ) )",
            "( JOIN ( R [ employer ] ) ( JOIN ( R [ parent organization ] ) [ IMDb ] ) )",
            "( AND ( JOIN [ parent agency ] [ IMDb ] ) ( JOIN ( R [ producer ] ) [ IMDb ] ) )"
        ],
        "gen_label": "( JOIN ( R [ product, material, or service produced or provided ] ) ( JOIN ( R [ parent organization ] ) [ IMDb.com, Inc. ] ) )"
    },
    {
        "question": "Question: { What type of film is significant for William McDonough? }",
        "predicted_query": [
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ notable work ] ) [ William McDonough ] ) )",
            "[ JOIN [ significant for ] [ William McDonough ] ]",
            "( JOIN ( R [ type of work ] ) ( JOIN ( R [ notable work ] ) [ William McDonough ] ) )",
            "( AND ( JOIN [ notable work ] [ film ] ) ( JOIN ( R [ notable work ] ) [ William McDonough ] ) )",
            "( JOIN [ significant for ] [ film ] )"
        ],
        "gen_label": "( JOIN ( R [ genre ] ) ( JOIN ( R [ notable work ] ) [ William McDonough ] ) )"
    },
    {
        "question": "Question: { What afflicts the ozone implies? }",
        "predicted_query": [
            "( JOIN [ affected by ] [ ozone layer ] )",
            "( JOIN ( R [ affected by ] ) ( JOIN ( R [ cause ] ) [ ozone layer ] ) )",
            "( AND ( JOIN [ has effect on ] [ ozone ] ) ( JOIN ( R [ affected by ] ) [ ozone ] ) )",
            "( JOIN [ afflicts the ozone implies ] [ ozone depletion ] )",
            "( JOIN ( R [ affected by ] ) ( JOIN ( R [ causes ] ) [ ozone depletion ] ) )"
        ],
        "gen_label": "( JOIN ( R [ afflicts ] ) ( JOIN ( R [ has effect ] ) [ ozone ] ) )"
    },
    {
        "question": "Question: { What languages do Arthur Hailey speak? }",
        "predicted_query": [
            "( JOIN ( R [ languages spoken, written or signed ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Arthur Hailey ] ) )",
            "( JOIN [ languages spoken ] [ Arthur Hailey ] )",
            "( JOIN ( R [ has linguistic feature ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Arthur Hailey ] ) )",
            "( JOIN ( R [ spoken language ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Arthur Hailey ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Arthur Hailey ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Arthur Hailey ] ) )"
        ],
        "gen_label": "( JOIN ( R [ languages spoken, written or signed ] ) [ Arthur Hailey ] )"
    },
    {
        "question": "Question: { What is the shape and effect of the hyperbolic motion? }",
        "predicted_query": [
            "( JOIN ( R [ shape and effect ] ) ( JOIN ( R [ has effect ] ) [ hyperbolic motion ] ) )",
            "( JOIN [ shape and effect ] [ hyperbolic motion ] )",
            "( AND ( JOIN [ has effect or influence ] [ hyperbolic motion ] ) ( JOIN ( R [ has physical property ] ) [ hyperbolic motion ] ) )",
            "( JOIN ( R [ has effect or action ] ) ( JOIN ( R [ has effect or action ] ) [ hyperbolic motion ] ) )",
            "( JOIN [ has effect or influence ] [ hyperbolic motion ] )"
        ],
        "gen_label": "( JOIN ( R [ shape ] ) ( JOIN ( R [ has effect ] ) [ hyperbolic motion ] ) )"
    },
    {
        "question": "Question: { Which is Christie's creator ID for Lewis Hine? }",
        "predicted_query": [
            "( JOIN ( R [ Christie's creator ID ] ) [ Lewis Hine ] )",
            "( AND ( JOIN [ creator ] [ Christie's ] ) ( JOIN ( R [ ID ] ) [ Lewis Hine ] ) )",
            "( JOIN ( R [ creator ID for Christie's ] ) [ Lewis Hine ] )",
            "[ JOIN ] [ creator ID ] [ Lewis Hine ]",
            "( JOIN ( R [ Christie's artist ID ] ) [ Lewis Hine ] )"
        ],
        "gen_label": "( JOIN ( R [ Christie's creator ID ] ) [ Lewis Hine ] )"
    },
    {
        "question": "Question: { Where does Shirley Chisholm work that is bordered by Arlington County? }",
        "predicted_query": [
            "( AND ( JOIN [ shares border with ] [ Arlington County ] ) ( JOIN ( R [ place of work ] ) [ Shirley Chisholm ] ) )",
            "( AND ( JOIN [ shares border with ] [ Arlington County ] ) ( JOIN ( R [ place of work ] ) [ Shirley Chisholm ] ) )",
            "( AND ( JOIN [ shared by ] [ Arlington County ] ) ( JOIN ( R [ place of work ] ) [ Shirley Chisholm ] ) )",
            "( AND ( JOIN [ shares border with ] [ Arlington County, Virginia ] ) ( JOIN ( R [ place of work ] ) [ Shirley Chisholm ] ) )",
            "( AND ( JOIN [ shares border with ] [ Arlington County ] ) ( JOIN ( R [ place of employment ] ) [ Shirley Chisholm ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ shares border with ] [ Arlington County ] ) ( JOIN ( R [ work location ] ) [ Shirley Chisholm ] ) )"
    },
    {
        "question": "Question: { What officially opened by Franz Beckenbauer? }",
        "predicted_query": [
            "( JOIN ( R [ opened ] ) ( JOIN ( R [ sport ] ) [ Franz Beckenbauer ] ) )",
            "( JOIN ( R [ opened by ] ) ( JOIN ( R [ sport ] ) [ Franz Beckenbauer ] ) )",
            "( JOIN [ officially opened ] [ Franz Beckenbauer ] )",
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ opened by ] ) [ Franz Beckenbauer ] ) )",
            "( AND ( JOIN [ opened by ] [ Franz Beckenbauer ] ) ( JOIN ( R [ opened by ] ) [ Franz Beckenbauer ] ) )"
        ],
        "gen_label": "( JOIN [ officially opened by ] [ Franz Beckenbauer ] )"
    },
    {
        "question": "Question: { Which is the Inventory of French sanctuaries ID for Notre-Dame de Chartres? }",
        "predicted_query": [
            "( JOIN ( R [ Inventory of French sanctuaries ID ] ) [ Notre-Dame de Chartres ] )",
            "( JOIN ( R [ Inventory of French sanctuaries ID ] ) [ Notre-Dame de Chartres ] )",
            "( JOIN ( R [ INSPIRE ID ] ) [ Notre-Dame de Chartres ] )",
            "( JOIN ( R [ Inventory of French sanctuaries ID ] ) [ Notre-Dame de Chartres ] )",
            "( JOIN ( R [ Inventaire des Sanctuaires de France ID ] ) [ Notre-Dame de Chartres ] )"
        ],
        "gen_label": "( JOIN ( R [ Inventory of French sanctuaries ID ] ) [ Notre-Dame de Chartres ] )"
    },
    {
        "question": "Question: { Who is the father of Kristina Oxenstierna's sister? }",
        "predicted_query": [
            "( JOIN ( R [ father ] ) ( JOIN ( R [ sibling ] ) [ Kristina Oxenstierna ] ) )",
            "( AND ( JOIN [ child ] [ Kristina Oxenstierna ] ) ( JOIN ( R [ parent ] ) [ Anna Oxenstierna ] ) )",
            "[ JOIN [ father ] [ Kristina Oxenstierna ] ]",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ sibling ] ) [ Kristina Oxenstierna ] ) )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ parent ] ) [ Kristina Oxenstierna ] ) )"
        ],
        "gen_label": "( JOIN ( R [ father ] ) ( JOIN ( R [ sibling ] ) [ Kristina Oxenstierna ] ) )"
    },
    {
        "question": "Question: { Who are the founders of of FERRARI? }",
        "predicted_query": [
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ founder ] ) [ Ferrari ] ) )",
            "( JOIN ( R [ founder ] ) ( JOIN ( R [ founded by ] ) [ Ferrari ] ) )",
            "( JOIN [ founded by ] [ Ferrari ] )",
            "( JOIN [ founder ] [ FERRARI ] )",
            "( JOIN ( R [ founders ] ) [ FERRARI ] )"
        ],
        "gen_label": "( JOIN ( R [ founded by ] ) ( JOIN ( R [ designed by ] ) [ Enzo Ferrari ] ) )"
    },
    {
        "question": "Question: { What is CNC film rating (Romania) for The Terminator? }",
        "predicted_query": [
            "( JOIN ( R [ CNC film rating ] ) [ The Terminator ] )",
            "( JOIN ( R [ CNC film rating ( Romania ) ] ) [ The Terminator ] )",
            "( [ joined by ] [ CNC film rating ] ) [ The Terminator ]",
            "( AND ( JOIN [ rating ] [ CNC film rating (Romania) ] ) ( JOIN ( R [ rating ] ) [ The Terminator ] ) )",
            "( JOIN [ CNC film rating (Romania) ] [ The Terminator ] )"
        ],
        "gen_label": "( JOIN ( R [ CNC film rating ( Romania ) ] ) [ The Terminator ] )"
    },
    {
        "question": "Question: { What is the tax on Cucurbita pepo va? }",
        "predicted_query": [
            "( JOIN ( R [ tax rate ] ) ( JOIN ( R [ taxon ] ) [ Cucurbita pepo var. ] ) )",
            "( JOIN [ tax ] [ Cucurbita pepo va ] )",
            "( AND ( JOIN [ taxon authority ] [ Cucurbita pepo ] ) ( JOIN ( R [ taxes ] ) [ Cucurbita pepo ] ) )",
            "( JOIN ( R [ taxon ID ] ) ( JOIN ( R [ taxon ] ) [ Cucurbita pepo var. ] ) )",
            "( JOIN ( R [ tax ] ) ( JOIN ( R [ taxon ] ) [ Cucurbita pepo var. ] ) )"
        ],
        "gen_label": "( JOIN ( R [ this taxon is source of ] ) ( JOIN ( R [ parent taxon ] ) [ Cucurbita pepo va ] ) )"
    },
    {
        "question": "Question: { What language was the Superman from work created on? }",
        "predicted_query": [
            "( JOIN ( R [ language of work ] ) ( JOIN ( R [ creator ] ) [ Superman ] ) )",
            "( JOIN ( R [ spoken language ] ) ( JOIN ( R [ work ] ) [ Superman ] ) )",
            "( JOIN [ language of work ] [ Superman ] )",
            "( AND ( JOIN [ language of work ] [ Superman ] ) ( JOIN ( R [ language of work or written work ] ) [ Superman ] ) )",
            "( AND ( JOIN [ spoken in ] [ Superman ] ) ( JOIN ( R [ language of work ] ) [ Superman ] ) )"
        ],
        "gen_label": "( JOIN ( R [ original language of film or TV show ] ) ( JOIN ( R [ present in work ] ) [ Superman ] ) )"
    },
    {
        "question": "Question: { Who competed in Doc Holliday? }",
        "predicted_query": [
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ opponent ] ) [ Doc Holliday ] ) )",
            "( JOIN ( R [ opponent ] ) ( JOIN ( R [ participant in ] ) [ Doc Holliday ] ) )",
            "( JOIN [ competitor ] [ Doc Holliday ] )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ opponent ] ) [ Doc Holliday ] ) )",
            "( AND ( JOIN [ member of ] [ Doc Holliday ] ) ( JOIN ( R [ opponent ] ) [ John Henry Holliday ] ) )"
        ],
        "gen_label": "( JOIN ( R [ participant ] ) ( JOIN ( R [ participant in ] ) [ Doc Holliday ] ) )"
    },
    {
        "question": "Question: { What is Open Food Facts food additive id for potassium hydroxide ? }",
        "predicted_query": [
            "( JOIN ( R [ Open Food Facts food additive ID ] ) [ potassium hydroxide ] )",
            "( AND ( JOIN [ food additive ID ] [ potassium hydroxide ] ) ( JOIN ( R [ question ] ) [ What is Open Food Facts food additive ID for potassium hydroxide? ] ) )",
            "( JOIN ( R [ OpenFoodFacts food additive ID ] ) [ potassium hydroxide ] )",
            "( JOIN ( R [ Open Food Facts food additive ID ] ) [ potassium hydroxide ] )",
            "( JOIN ( R [ Open Food Facts food additive ID ] ) [ potassium hydroxide ] )"
        ],
        "gen_label": "( JOIN ( R [ Open Food Facts food additive ID ] ) [ potassium hydroxide ] )"
    },
    {
        "question": "Question: { What is valid in jurisdiction of holds position of John Endecott ? }",
        "predicted_query": [
            "( JOIN [ valid in jurisdiction of holds position ] [ John Endecott ] )",
            "( JOIN ( R [ valid in jurisdiction ] ) ( JOIN ( R [ position held ] ) [ John Endecott ] ) )",
            "( JOIN ( R [ jurisdiction ] ) ( JOIN ( R [ position held ] ) [ John Endecott ] ) )",
            "( JOIN ( R [ valid in jurisdiction ] ) ( JOIN ( R [ office held ] ) [ John Endecott ] ) )",
            "( AND ( JOIN [ has jurisdiction ] [ holds position of ] ) ( JOIN ( R [ country of citizenship ] ) [ John Endecott ] ) )"
        ],
        "gen_label": "( JOIN ( R [ applies to jurisdiction ] ) ( JOIN ( R [ position held ] ) [ John Endecott ] ) )"
    },
    {
        "question": "Question: { who significant works of illustrated by of Brown Bear, Brown Bear ? }",
        "predicted_query": [
            "( JOIN [ illustrated by ] [ Brown Bear, Brown Bear ] )",
            "( JOIN ( R [ illustrator ] ) ( JOIN ( R [ notable work ] ) [ Brown Bear, Brown Bear ] ) )",
            "[challenge/rewards]",
            "( JOIN ( R [ notable work ] ) ( JOIN ( R [ artist ] ) [ Brown Bear, Brown Bear ] ) )",
            "( JOIN ( R [ artist of ] ) ( JOIN ( R [ illustrator ] ) [ Brown Bear, Brown Bear ] ) )"
        ],
        "gen_label": "( JOIN ( R [ notable work ] ) ( JOIN ( R [ illustrator ] ) [ Brown Bear, Brown Bear, What Do You See? ] ) )"
    },
    {
        "question": "Question: { Which is the official religion for Zoroastrianism? }",
        "predicted_query": [
            "( JOIN ( R [ official religion ] ) [ Zoroastrianism ] )",
            "( AND ( JOIN [ practiced in ] [ Zoroastrianism ] ) ( JOIN ( R [ official religion ] ) [ Zoroastrianism ] ) )",
            "( JOIN [ official religion ] [ Zoroastrianism ] )",
            "( JOIN ( R [ religion ] ) [ Zoroastrianism ] )",
            "( JOIN ( R [ religion ] ) [ Zoroastrianism ] )"
        ],
        "gen_label": "( JOIN [ official religion ] [ Zoroastrianism ] )"
    },
    {
        "question": "Question: { Who is the mayor of the city Johannes Eugenius Bulow Warming was born in? }",
        "predicted_query": [
            "( JOIN ( R [ mayor ] ) ( JOIN ( R [ place of birth ] ) [ Johannes Eugenius Bulow Warming ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Johannes Eugenius Bulow Warming ] ) ( JOIN ( R [ place of birth ] ) [ Johannes Eugenius Bulow Warming ] ) )",
            "( AND ( JOIN [ location of establishment ] [ Johannes Eugenius Bulow Warming ] ) ( JOIN ( R [ place of birth ] ) [ Johannes Eugenius Bulow Warming ] ) )",
            "( JOIN ( R [ capital city ] ) ( JOIN ( R [ place of birth ] ) [ Johannes Eugenius Bulow Warming ] ) )",
            "( AND ( JOIN [ place of birth ] [ Johannes Eugenius Bulow Warming ] ) ( JOIN ( R [ occupation ] ) [ Johannes Eugenius Bulow Warming ] ) )"
        ],
        "gen_label": "( JOIN ( R [ head of government ] ) ( JOIN ( R [ country of citizenship ] ) [ Eugenius Warming ] ) )"
    },
    {
        "question": "Question: { Who is in the administrative unit of the South Khorasan Province?  Who has administrative divisions in the North Khorasan Province? }",
        "predicted_query": [
            "( JOIN ( R [ has administrative divisions ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ South Khorasan Province ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ North Khorasan Province ] ) ( JOIN ( R [ follows ] ) [ South Khorasan Province ] ) )",
            "( JOIN [ has administrative divisions ] [ North Khorasan Province ] ) ( JOIN ( R [ follows ] ) [ South Khorasan Province ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ North Khorasan Province ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ South Khorasan Province ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ South Khorasan Province ] ) ( JOIN ( R [ contains the administrative territorial entity ] ) [ North Khorasan Province ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ contains the administrative territorial entity ] [ North Khorasan Province ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ South Khorasan Province ] ) )"
    },
    {
        "question": "Question: { What is the number of out of school children in Pakistan? }",
        "predicted_query": [
            "( JOIN ( R [ number of out-of-school children ] ) [ Pakistan ] )",
            "( JOIN ( R [ out-of-school children ] ) [ Pakistan ] )",
            "( JOIN [ number of out-of-school children ] [ Pakistan ] )",
            "( JOIN ( R [ number of out of school children ] ) [ Pakistan ] )",
            "( JOIN [ number of out-of-school children ] [ Pakistan ] )"
        ],
        "gen_label": "( JOIN ( R [ number of out-of-school children ] ) [ Pakistan ] )"
    },
    {
        "question": "Question: { He has three kids; Orghana,Ariq Böka, and Toqoqan. }",
        "predicted_query": [
            "( JOIN ( R [ father ] ) ( JOIN ( R [ child ] ) [ Orghana ] ) )",
            "( AND ( JOIN [ has taxon ] [ Orghana ] ) ( JOIN ( R [ child ] ) [ Ariq Böka ] ) )",
            "( AND ( JOIN [ child ] [ Orghana ] ) ( JOIN ( R [ parent ] ) [ Ariq Böka ] ) )",
            "( AND ( JOIN [ has sibling ] [ Ariq Böka ] ) ( JOIN ( R [ child ] ) [ Orghana ] ) )",
            "( AND ( JOIN [ child ] [ Orghana ] ) ( JOIN ( R [ parent of ] ) [ Toqoqan ] ) )"
        ],
        "gen_label": "( JOIN ( R [ child ] ) ( JOIN ( R [ father ] ) [ Chechiyegen ] ) )"
    },
    {
        "question": "Question: { Which is connected with the Iberian Peninsula? }",
        "predicted_query": [
            "( JOIN ( R [ connected with ] ) [ Iberian Peninsula ] )",
            "[ JOIN [ connected with ] [ Iberian Peninsula ] ]",
            "( JOIN ( R [ connected to ] ) ( JOIN ( R [ located in ] ) [ Iberian Peninsula ] ) )",
            "( AND ( JOIN [ shares border with ] [ Iberian Peninsula ] ) ( JOIN ( R [ follows from ] ) [ Iberian Peninsula ] ) )",
            "( JOIN [ connected with ] [ Iberian Peninsula ] )"
        ],
        "gen_label": "( JOIN ( R [ connects with ] ) [ Iberian Peninsula ] )"
    },
    {
        "question": "Question: { WHAT IS THE USE OF BANK }",
        "predicted_query": [
            "( JOIN ( R [ use ] ) [ bank ] )",
            "( JOIN ( R [ use ] ) [ Banco de Portugal ] )",
            "( JOIN ( R [ has use ] ) [ bank ] )",
            "( JOIN [ use ] [ bank ] )",
            "( AND ( JOIN [ function or use ] [ bank ] ) ( JOIN ( R [ uses material from ] ) [ bank ] ) )"
        ],
        "gen_label": "( JOIN ( R [ has use ] ) [ bank ] )"
    },
    {
        "question": "Question: { What is the Open Media Database ID for Joss Whedon? }",
        "predicted_query": [
            "( JOIN ( R [ Open Media Database ID ] ) [ Joss Whedon ] )",
            "( JOIN ( R [ Open Media Database ID ] ) [ Joss Whedon ] )",
            "( AND ( JOIN [ OMDb ID ] [ Joss Whedon ] ) ( JOIN ( R [ ID ] ) [ Joss Whedon ] ) )",
            "( JOIN ( R [ Open Media Database ID ] ) [ Joss Whedon ] )",
            "[ JOIN [ open media database ID ] ] [ Joss Whedon ]"
        ],
        "gen_label": "( JOIN ( R [ Open Media Database person ID ] ) [ Joss Whedon ] )"
    },
    {
        "question": "Question: { What is the Sport Australia Hall of Fame ID for Margaret Court? }",
        "predicted_query": [
            "( JOIN ( R [ Sport Australia Hall of Fame ID ] ) [ Margaret Court ] )",
            "( AND ( JOIN [ Hall of Fame ID ] [ Sport Australia Hall of Fame ID for Margaret Court ] ) [ Margaret Court ] )",
            "( JOIN ( R [ Sport Australia Hall of Fame ID ] ) [ Margaret Court ] )",
            "( JOIN ( R [ Sport Australia Hall of Fame athlete ID ] ) [ Margaret Court ] )",
            "( JOIN ( R [ Sport Australia Hall of Fame ID ] ) [ Margaret Court ] )"
        ],
        "gen_label": "( JOIN ( R [ Sport Australia Hall of Fame inductee ID ] ) [ Margaret Court ] )"
    },
    {
        "question": "Question: { Which is the flower color for pink? }",
        "predicted_query": [
            "( JOIN ( R [ flower color ] ) [ pink ] )",
            "( JOIN ( R [ flower color ] ) [ pink ] )",
            "( JOIN [ flower color ] [ pink ] )",
            "( AND ( JOIN [ color ] [ pink ] ) ( JOIN ( R [ flower ] ) [ pink ] ) )",
            "( AND ( JOIN [ color ] [ pink ] ) ( JOIN ( R [ color of flower ] ) [ pink ] ) )"
        ],
        "gen_label": "( JOIN [ flower color ] [ pink ] )"
    },
    {
        "question": "Question: { Please tell me the Teutonic Knights' chivalric order. }",
        "predicted_query": [
            "[ JOIN ( R [ chivalric order ] ) ]",
            "( JOIN ( R [ chivalric order ] ) ( JOIN ( R [ member of ] ) [ Teutonic Knights ] ) )",
            "( AND ( JOIN [ member of ] [ Teutonic Order ] ) ( JOIN ( R [ influenced by ] ) [ chivalric order ] ) )",
            "( AND ( JOIN [ member of ] [ Teutonic Order ] ) ( JOIN ( R [ follows ] ) [ chivalric order ] ) )",
            "( JOIN [ chivalric order ] [ Teutonic Knights ] )"
        ],
        "gen_label": "( JOIN [ chivalric order ] [ Teutonic Order ] )"
    },
    {
        "question": "Question: { What are the protests of the war  that uses the M-84 }",
        "predicted_query": [
            "( JOIN ( R [ protests ] ) ( JOIN ( R [ weapon system ] ) [ M-84 ] ) )",
            "( JOIN ( R [ conflict ] ) ( JOIN ( R [ participant in war ] ) [ M-84 ] ) )",
            "( AND ( JOIN [ participant in war ] [ Yugoslav Wars ] ) ( JOIN ( R [ has participant ] ) [ M-84 ] ) )",
            "( JOIN ( R [ protests ] ) ( JOIN ( R [ manufacturer ] ) [ M-84 ] ) )",
            "( JOIN [ protests of the war ] [ M-84 ] )"
        ],
        "gen_label": "( JOIN ( R [ participant ] ) ( JOIN ( R [ conflict ] ) [ M-84 ] ) )"
    },
    {
        "question": "Question: { Which is IFSC climber ID of Chris Sharma? }",
        "predicted_query": [
            "( JOIN ( R [ IFSC climber ID ] ) [ Chris Sharma ] )",
            "( JOIN [ IFSC climber ID ] [ Chris Sharma ] )",
            "[ JOIN [ joined by ] [ Chris",
            "( JOIN ( R [ International Federation of Sport Climbing climber ID ] ) [ Chris Sharma ] )",
            "[Chapter] JOIN [IFSC climber ID] [Chris Sharma]"
        ],
        "gen_label": "( JOIN ( R [ IFSC climber ID ] ) [ Chris Sharma ] )"
    },
    {
        "question": "Question: { Who in starring film High Noon has died from kidney failure? }",
        "predicted_query": [
            "( AND ( JOIN [ cause of death ] [ kidney failure ] ) ( JOIN ( R [ cast member ] ) [ High Noon ] ) )",
            "( JOIN ( R [ death cause ] ) ( JOIN ( R [ cast member ] ) [ High Noon ] ) )",
            "( AND ( JOIN [ has died from ] [ kidney failure ] ) ( JOIN ( R [ cast member ] ) [ High Noon ] ) )",
            "( JOIN ( R [ has medical condition or cause of death ] ) ( JOIN ( R [ cast member ] ) [ High Noon ] ) )",
            "( AND ( JOIN [ cause of death ] [ kidney failure ] ) ( JOIN ( R [ character ] ) [ High Noon ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ cause of death ] [ kidney failure ] ) ( JOIN ( R [ cast member ] ) [ High Noon ] ) )"
    },
    {
        "question": "Question: { What school was created by Gregor Samsa? }",
        "predicted_query": [
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ school ] ) [ Gregor Samsa ] ) )",
            "( JOIN [ founded by ] [ Gregor Samsa ] )",
            "( AND ( JOIN [ founded ] [ Gregor Samsa ] ) ( JOIN ( R [ school ] ) [ Gregor Samsa ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Gregor Samsa ] ) ( JOIN ( R [ founded by ] ) [ Gregor Samsa ] ) )",
            "( JOIN ( JOIN ( R [ founded by ] ) [ Gregor Samsa ] ) )"
        ],
        "gen_label": "( JOIN ( R [ movement ] ) ( JOIN ( R [ creator ] ) [ Gregor Samsa ] ) )"
    },
    {
        "question": "Question: { What is the prescribed drug of the murder method of Tiny Tim? }",
        "predicted_query": [
            "( JOIN ( R [ drug ] ) ( JOIN ( R [ method of death ] ) [ Tiny Tim ] ) )",
            "( JOIN ( R [ prescribed drug ] ) ( JOIN ( R [ method of death ] ) [ Tiny Tim ] ) )",
            "( JOIN [ prescribed drug ] [ Tiny Tim ] )",
            "( JOIN ( R [ drug used for treatment ] ) ( JOIN ( R [ cause of death ] ) [ Tiny Tim ] ) )",
            "( AND ( JOIN [ drug or therapy used ] [ Tiny Tim ] ) ( JOIN ( R [ cause of death ] ) [ Tiny Tim ] ) )"
        ],
        "gen_label": "( JOIN ( R [ drug or therapy used for treatment ] ) ( JOIN ( R [ cause of death ] ) [ Tiny Tim ] ) )"
    },
    {
        "question": "Question: { Which is {twin city} of {head office location} of {Mystery Studio} ? }",
        "predicted_query": [
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ headquarters location ] ) [ Mystery Studio ] ) )",
            "( JOIN ( R [ twin city ] ) ( JOIN ( R [ headquarters location ] ) [ Mystery Studio ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Mystery Studio ] ) ( JOIN ( R [ headquarters location ] ) [ Mystery Studio ] ) )",
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ headquarters location ] ) [ Mystery Studio ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ City of Moscow ] ) ( JOIN ( R [ headquarters location ] ) [ Mystery Studio ] ) )"
        ],
        "gen_label": "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ headquarters location ] ) [ Mystery Studio ] ) )"
    },
    {
        "question": "Question: { What is manufactured NEC PC-9800 series whose sector is electronics? }",
        "predicted_query": [
            "( AND ( JOIN [ industry ] [ electronics ] ) ( JOIN ( R [ manufactured by ] ) [ NEC PC-9800 series ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ electronics ] ) ( JOIN ( R [ manufactured by ] ) [ NEC PC-9800 series ] ) )",
            "( AND ( JOIN [ sector ] [ electronics ] ) ( JOIN ( R [ manufacturer ] ) [ NEC PC-9800 series ] ) )",
            "( AND ( JOIN [ sector of the economy ] [ electronics ] ) ( JOIN ( R [ manufacturer ] ) [ NEC PC-9800 series ] ) )",
            "( JOIN ( R [ industry ] ) ( JOIN ( R [ manufacturer ] ) [ NEC PC-9800 series ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ industry ] [ electronics ] ) ( JOIN ( R [ manufacturer ] ) [ NEC PC-9800 series ] ) )"
    },
    {
        "question": "Question: { which fields is actor of Frequency ? }",
        "predicted_query": [
            "( JOIN ( R [ field of work ] ) ( JOIN ( R [ cast member ] ) [ Frequency ] ) )",
            "( JOIN ( R [ fields ] ) ( JOIN ( R [ cast member ] ) [ Frequency ] ) )",
            "( JOIN [ fields ] [ frequency ] )",
            "( JOIN ( R [ actor ] ) [ Frequency ] )",
            "( JOIN ( R [ field of work ] ) [ Frequency ] )"
        ],
        "gen_label": "( JOIN ( R [ field of work ] ) ( JOIN ( R [ cast member ] ) [ Frequency ] ) )"
    },
    {
        "question": "Question: { What is  Canadian Register of Historic Places ID  for Chambly Canal }",
        "predicted_query": [
            "( JOIN ( R [ Canadian Register of Historic Places ID ] ) [ Chambly Canal ] )",
            "( JOIN [ Canadian Register of Historic Places ID ] [ Chambly Canal ] )",
            "( JOIN ( R [ Canadian Register of Historic Places ID ] ) [ Chambly Canal ] )",
            "( JOIN ( R [ Canadian Register of Historic Places ID ] ) [ Chambly Canal ] )",
            "( JOIN ( R [ Canadian Register of Historic Places ID ] ) [ Chambly Canal ] )"
        ],
        "gen_label": "( JOIN ( R [ Canadian Register of Historic Places ID ] ) [ Chambly Canal ] )"
    },
    {
        "question": "Question: { What is Luc Montagnier's Encyclopaedia Universalis author ID? }",
        "predicted_query": [
            "( JOIN ( R [ Encyclopaedia Universalis author ID ] ) [ Luc Montagnier ] )",
            "[ JOIN",
            "( AND ( JOIN [ Encyclopædia Universalis author ID ] [ Luc Montagnier ] ) ( JOIN ( R [ ID ] ) [ Luc Montagnier ] ) )",
            "[ JOIN ( R [ author of ] ) [ Luc Montagnier ] ]",
            "( JOIN ( R [ Encyclopaedia Universalis author ID ] ) [ Luc Montagnier ] )"
        ],
        "gen_label": "( JOIN ( R [ Encyclopædia Universalis author ID ] ) [ Luc Montagnier ] )"
    },
    {
        "question": "Question: { Which is the Twitter username for Snapchat? }",
        "predicted_query": [
            "[deleted]",
            "( JOIN ( R [ Twitter username ] ) [ Snapchat ] )",
            "( JOIN [ Twitter username ] [ Snapchat ] )",
            "( [ joined by ] [ Twitter handle ] )",
            "( AND ( JOIN [ twibbon URL ] [ snapchat.com ] ) ( JOIN ( R [ Twitter username ] ) [ Snapchat ] ) )"
        ],
        "gen_label": "( JOIN ( R [ X ( Twitter ) username ] ) [ Snapchat ] )"
    },
    {
        "question": "Question: { \"Which is {plays} of {ice skate}, that has {has proponent} is {goaltender} ?\" }",
        "predicted_query": [
            "( AND ( JOIN [ has proponent ] [ goaltender ] ) ( JOIN ( R [ sport ] ) [ ice skating ] ) )",
            "( AND ( JOIN [ sport ] [ ice hockey ] ) ( JOIN ( R [ has participant ] ) [ ice skating ] ) )",
            "( JOIN [ has proponent ] [ goaltender ] ) ( JOIN ( R [ sport ] ) [ ice skating ] )",
            "( AND ( JOIN [ has proponent ] [ goaltender ] ) ( JOIN ( R [ sports played ] ) [ ice skating ] ) )",
            "( AND ( JOIN [ sports played ] [ ice skating ] ) ( JOIN ( R [ influenced by ] ) [ goaltender ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ practiced by ] [ goaltender ] ) ( JOIN ( R [ sport ] ) [ ice skate ] ) )"
    },
    {
        "question": "Question: { What is Messier 22's radial velocity? }",
        "predicted_query": [
            "( JOIN ( R [ has velocity ] ) [ Messier 22 ] )",
            "( JOIN [ radial velocity ] [ Messier 22 ] )",
            "( JOIN ( R [ radial velocity ] ) [ Messier 22 ] )",
            "( JOIN ( R [ radial velocity ] ) [ Messier 22 ] )",
            "( JOIN ( R [ velocity ] ) ( JOIN ( R [ discoverer of Messier 22 ] ) ) )"
        ],
        "gen_label": "( JOIN ( R [ radial velocity ] ) [ Messier 22 ] )"
    },
    {
        "question": "Question: { Which literary genre was derived from Útlaginn? }",
        "predicted_query": [
            "( JOIN ( R [ literary genre ] ) ( JOIN ( R [ derived from ] ) [ Útlaginn ] ) )",
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ derived from ] ) [ Útlaginn ] ) )",
            "( JOIN [ literary genre ] [ Útlaginn ] )",
            "( AND ( JOIN [ derived from ] [ Útlaginn ] ) ( JOIN ( R [ genre ] ) [ Útlaginn ] ) )",
            "( JOIN [ literary genre ] [ Útlaginn ] )"
        ],
        "gen_label": "( JOIN ( R [ genre ] ) ( JOIN ( R [ based on ] ) [ Útlaginn ] ) )"
    },
    {
        "question": "Question: { Which is the authority of FINA? }",
        "predicted_query": [
            "( JOIN ( R [ authority ] ) [ FINA ] )",
            "( JOIN [ authority ] [ FINA ] )",
            "### Instruction:",
            "( JOIN [ authority of ] [ FINA ] )",
            "( JOIN ( R [ authority ] ) ( JOIN ( R [ member of ] ) [ FINA ] ) )"
        ],
        "gen_label": "( JOIN [ authority ] [ World Aquatics ] )"
    },
    {
        "question": "Question: { Who is the champion of Frederick Sumner McKay? }",
        "predicted_query": [
            "( JOIN ( R [ champion ] ) [ Frederick Sumner McKay ] )",
            "( JOIN [ champion ] [ Frederick Sumner McKay ] )",
            "( JOIN ( R [ champion ] ) ( JOIN ( R [ sport ] ) [ Frederick Sumner McKay ] ) )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ student of ] ) [ Frederick Sumner McKay ] ) )",
            "( JOIN ( R [ champion ] ) [ Frederick Sumner McKay ] )"
        ],
        "gen_label": "( JOIN ( R [ winner ] ) ( JOIN ( R [ award received ] ) [ Frederick Sumner McKay ] ) )"
    },
    {
        "question": "Question: { What is the diplomatic relation of the place of origin of Kafka on the SHore? }",
        "predicted_query": [
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ place of origin ] ) [ Kafka on the Shore ] ) )",
            "[ JOIN ( R [ diplomatic relations ] ) ( JOIN ( R [ country of origin ] ) [ Kafka on the Shore ] ) ]",
            "( AND ( JOIN [ diplomatic relation ] [ diplomatic relation of the place of origin of Kafka on the SHore ] ) ( JOIN ( R [ place of origin ] ) [ Kafka on the Shore ] ) )",
            "( JOIN [ diplomatic relation ] [ Kafka on the Shore ] )",
            "( AND ( JOIN [ diplomatic relation ] [ Kafka on the Shore ] ) ( JOIN ( R [ place of origin ] ) [ Kafka on the Shore ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country of origin ] ) [ Kafka on the Shore ] ) )"
    },
    {
        "question": "Question: { What is the FIPS 6-4 code in the city of Richmond? }",
        "predicted_query": [
            "( JOIN ( R [ FIPS place code ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Richmond, Virginia ] ) )",
            "( AND ( JOIN [ FIPS place code ] [ FIPS 6-4 code for Richmond, Virginia ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Richmond, Virginia ] ) )",
            "( JOIN ( R [ FIPS 6-4 code ] ) [ Richmond ] )",
            "( JOIN ( R [ FIPS place code ] ) [ Richmond ] )",
            "( JOIN ( R [ FIPS 6-4 code ] ) [ Richmond, Virginia ] )"
        ],
        "gen_label": "( JOIN ( R [ FIPS 6-4 ] ) [ Richmond ] )"
    },
    {
        "question": "Question: { What are the greatest accomplishments of William Henry Bragg? }",
        "predicted_query": [
            "( JOIN ( R [ greatest achievement ] ) ( JOIN ( R [ discoverer ] ) [ William Henry Bragg ] ) )",
            "( JOIN ( R [ greatest accomplishment ] ) [ William Henry Bragg ] )",
            "( JOIN [ greatest accomplishment ] [ William Henry Bragg ] )",
            "( AND ( JOIN [ has winner ] [ William Henry Bragg ] ) ( JOIN ( R [ notable work ] ) [ William Henry Bragg ] ) )",
            "( JOIN ( R [ notable achievements ] ) ( JOIN ( R [ father ] ) [ William Henry Bragg ] ) )"
        ],
        "gen_label": "( JOIN ( R [ winner ] ) ( JOIN ( R [ award received ] ) [ William Henry Bragg ] ) )"
    },
    {
        "question": "Question: { What are the Coen brothers' member occupations in the film making profession's field? }",
        "predicted_query": [
            "( AND ( JOIN [ field of work ] [ film making profession ] ) ( JOIN ( R [ member of ] ) [ Coen brothers ] ) )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ member of ] ) [ Coen brothers ] ) )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ field ] ) [ Coen brothers ] ) )",
            "###",
            "( AND ( JOIN [ field of employment ] [ film making profession ] ) ( JOIN ( R [ member of ] ) [ Coen brothers ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ field of this occupation ] [ filmmaking ] ) ( JOIN ( R [ members have occupation ] ) [ Coen brothers ] ) )"
    },
    {
        "question": "Question: { What is it? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Krasnodar Krai ] ) ( JOIN ( R [ follows ] ) [ Vladimir Lenin ] ) )",
            "( JOIN ( R [ has part ] ) ( JOIN ( R [ has material ] ) [ The Last Supper ] ) )",
            "( JOIN [ has part of ] [ what is it? ] )",
            "( JOIN ( R [ has part ] ) ( JOIN ( R [ manufacturer or distributor ] ) [ Samsung Galaxy S III ] ) )",
            "( JOIN [ has item ] [ what is it? ] )"
        ],
        "gen_label": "( AND ( JOIN [ located in or next to body of water ] [ Spree ] ) ( JOIN ( R [ work location ] ) [ Eduard Bernstein ] ) )"
    },
    {
        "question": "Question: { Who is the parent agency of the maker of Novo Nordisk (United States)? }",
        "predicted_query": [
            "( JOIN ( R [ parent agency ] ) ( JOIN ( R [ manufacturer ] ) [ Novo Nordisk ] ) )",
            "( AND ( JOIN [ child of ] [ Novo Nordisk ] ) ( JOIN ( R [ headquarter location ] ) [ Novo Nordisk ] ) )",
            "( JOIN ( R [ headquarter location ] ) ( JOIN ( R [ manufacturer ] ) [ Novo Nordisk ] ) )",
            "( JOIN ( R [ subsidiary of ] ) ( JOIN ( R [ manufacturer ] ) [ Novo Nordisk ( United States ) ] ) )",
            "( JOIN ( R [ parent agency ] ) ( JOIN ( R [ producer ] ) [ Novo Nordisk ] ) )"
        ],
        "gen_label": "( JOIN ( R [ product, material, or service produced or provided ] ) ( JOIN ( R [ parent organization ] ) [ Novo Nordisk ( United States ) ] ) )"
    },
    {
        "question": "Question: { Who lives in this area? }",
        "predicted_query": [
            "( JOIN ( R [ inhabitant ] ) ( JOIN ( R [ located in ] ) [ Tajikistan ] ) )",
            "( JOIN [ inhabits ] [ area ] )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) [ Krasnodar Krai ] )",
            "( JOIN [ located in the administrative territorial entity ] [ area ] )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ country of citizenship ] ) [ John Lennon ] ) )"
        ],
        "gen_label": "( JOIN ( R [ owned by ] ) ( JOIN ( R [ location of formation ] ) [ Republica ] ) )"
    },
    {
        "question": "Question: { who used money of comes from of I Love lwhoucy ? }",
        "predicted_query": [
            "( JOIN ( R [ currency ] ) ( JOIN ( R [ place of work ] ) [ I Love lwhoucy ] ) )",
            "( JOIN ( R [ monetary unit ] ) ( JOIN ( R [ country of origin ] ) [ I Love lwhoucy ] ) )",
            "( AND ( JOIN [ location of headquarters ] [ I Love LWHoucy ] ) ( JOIN ( R [ currency ] ) [ I Love LWHoucy ] ) )",
            "( JOIN ( R [ currency ] ) ( JOIN ( R [ country of origin ] ) [ I Love Lucy ] ) )",
            "( JOIN [ uses money of ] [ I Love lwhoucy ] )"
        ],
        "gen_label": "( JOIN ( R [ currency ] ) ( JOIN ( R [ country of origin ] ) [ I Love Lucy ] ) )"
    },
    {
        "question": "Question: { What is PDB ligand ID for biotin} ? }",
        "predicted_query": [
            "( JOIN ( R [ PDB ligand ID ] ) [ biotin ] )",
            "( JOIN [ PDB ligand ID ] [ biotin ] )",
            "( AND ( JOIN [ PDB ligand ID ] [ biotin ] ) [ protein ] )",
            "( JOIN ( R [ PDB ligand ID ] ) [ biotin ] )",
            "### Supplementary Intake Description:"
        ],
        "gen_label": "( JOIN ( R [ PDB ligand ID ] ) [ biotin ] )"
    },
    {
        "question": "Question: { Who heads the Library of Congress, who is also of African American ethnicity? }",
        "predicted_query": [
            "( AND ( JOIN [ ethnicity ] [ African American ] ) ( JOIN ( R [ head ] ) [ Library of Congress ] ) )",
            "( AND ( JOIN [ ethnicity ] [ African American ] ) ( JOIN ( R [ head ] ) [ Library of Congress ] ) )",
            "( AND ( JOIN [ race or ethnicity ] [ African American ] ) ( JOIN ( R [ head ] ) [ Library of Congress ] ) )",
            "( AND ( JOIN [ ethnic group ] [ African American ] ) ( JOIN ( R [ head of government ] ) [ Library of Congress ] ) )",
            "( AND ( JOIN [ race or ethnicity ] [ African American ] ) ( JOIN ( R [ head of government ] ) [ Library of Congress ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ ethnic group ] [ African Americans ] ) ( JOIN ( R [ chairperson ] ) [ Library of Congress ] ) )"
    },
    {
        "question": "Question: { What was the manner of death of Mstislav Rostropovich? }",
        "predicted_query": [
            "( JOIN ( R [ cause of death ] ) ( JOIN ( R [ occupation ] ) [ Mstislav Rostropovich ] ) )",
            "( JOIN ( R [ manner of death ] ) ( JOIN ( R [ place of death ] ) [ Mstislav Rostropovich ] ) )",
            "( AND ( JOIN [ form of death ] [ manner of death ] ) ( JOIN ( R [ place of death ] ) [ Mstislav Rostropovich ] ) )",
            "( JOIN [ manner of death ] [ Mstislav Rostropovich ] )",
            "( JOIN ( R [ cause of death ] ) ( JOIN ( R [ occupation ] ) [ Mstislav Rostropovich ] ) )"
        ],
        "gen_label": "( JOIN ( R [ manner of death ] ) [ Mstislav Rostropovich ] )"
    },
    {
        "question": "Question: { What is Emporis building ID for CN Tower ? }",
        "predicted_query": [
            "( JOIN ( R [ Emporis building ID ] ) [ CN Tower ] )",
            "( JOIN [ Emporis building ID ] [ CN Tower ] )",
            "( JOIN ( R [ Emporis building ID ] ) [ CN Tower ] )",
            "[ JOIN [ Emporis building ID",
            "( JOIN ( R [ Emporis building ID ] ) [ CN Tower ] )"
        ],
        "gen_label": "( JOIN ( R [ Emporis building ID ] ) [ CN Tower ] )"
    },
    {
        "question": "Question: { Which is valid in place of Trentino-South Tyrol? }",
        "predicted_query": [
            "( JOIN ( R [ valid in place of ] ) [ Trentino-South Tyrol ] )",
            "( JOIN [ valid in place of ] [ Trentino-South Tyrol ] )",
            "( JOIN ( R [ has administrative status ] ) ( JOIN ( R [ country ] ) [ Trentino-South Tyrol ] ) )",
            "( AND ( JOIN [ capital ] [ Trento ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Trentino-South Tyrol ] ) )",
            "( JOIN ( R [ valid in place of ] ) [ Trentino-South Tyrol ] )"
        ],
        "gen_label": "( JOIN [ valid in place ] [ Trentino-South Tyrol ] )"
    },
    {
        "question": "Question: { What is the time of the continent of the Timurid Empire? }",
        "predicted_query": [
            "( JOIN ( R [ time zone ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Timurid Empire ] ) )",
            "( JOIN [ time zone ] [ Timurid Empire ] )",
            "( JOIN ( R [ time zone ] ) ( JOIN ( R [ continent ] ) [ Timurid Empire ] ) )",
            "( JOIN ( R [ located in time zone ] ) ( JOIN ( R [ located in ] ) [ Timurid Empire ] ) )",
            "( AND ( JOIN [ continent ] [ Asia ] ) ( JOIN ( R [ time period ] ) [ Timurid Empire ] ) )"
        ],
        "gen_label": "( JOIN ( R [ located in time zone ] ) ( JOIN ( R [ continent ] ) [ Timurid Empire ] ) )"
    },
    {
        "question": "Question: { What is the derived from of the from work of Detective Lemieux? }",
        "predicted_query": [
            "( JOIN [ derived from ] [ Detective Lemieux ] )",
            "( JOIN ( R [ derived from ] ) ( JOIN ( R [ work ] ) [ Detective Lemieux ] ) )",
            "( AND ( JOIN [ occupation ] [ detective ] ) ( JOIN ( R [ based on work ] ) [ Detective Lemieux ] ) )",
            "( JOIN ( R [ derived from ] ) ( JOIN ( R [ creator ] ) [ Detective Lemieux ] ) )",
            "( AND ( JOIN [ work or member of ] [ Detective Lemieux ] ) ( JOIN ( R [ derived from ] ) [ Detective Lemieux ] ) )"
        ],
        "gen_label": "( JOIN ( R [ based on ] ) ( JOIN ( R [ based on ]1 ) [ Detective Lemieux ] ) )"
    },
    {
        "question": "Question: { Who gave the {has son} of {has son of} of {Mary Stewart} ? }",
        "predicted_query": [
            "( JOIN ( R [ child ] ) ( JOIN ( R [ parent ] ) [ Mary Stewart ] ) )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ child ] ) [ Mary Stewart ] ) )",
            "( JOIN ( R [ child of ] ) ( JOIN ( R [ parent of ] ) [ Mary Stewart ] ) )",
            "( JOIN ( R [ has son ] ) ( JOIN ( R [ child ] ) [ Mary Stewart ] ) )",
            "( AND ( JOIN [ parent of ] [ has son ] ) ( JOIN ( R [ child of ] ) [ Mary Stewart ] ) )"
        ],
        "gen_label": "( JOIN ( R [ child ] ) ( JOIN ( R [ father ] ) [ Mary Stewart ] ) )"
    },
    {
        "question": "Question: { What is CNC film rating France for Fight Club }",
        "predicted_query": [
            "( JOIN ( R [ CNC film rating ] ) [ Fight Club ] )",
            "( JOIN [ CNC film rating ] [ Fight Club ] )",
            "{ JOIN [ has CNC film rating ] [ Fight Club ] }",
            "( AND ( JOIN [ IGN rating ] [ CNC film rating France ] ) ( JOIN ( R [ question ] ) [ Fight Club ] ) )",
            "( JOIN ( JOIN ( R [ CNC film rating ] ) [ Fight Club ] ) )"
        ],
        "gen_label": "( JOIN ( R [ CNC film rating ( France ) ] ) [ Fight Club ] )"
    },
    {
        "question": "Question: { How much mauna loa volcano monitored by indian reserve? }",
        "predicted_query": [
            "( AND ( JOIN [ administered by ] [ Indian Reserve ] ) ( JOIN ( R [ monitored by ] ) [ Mauna Loa ] ) )",
            "( JOIN ( R [ monitored by ] ) ( JOIN ( R [ located in ] ) [ Mauna Loa ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Indian Reserve ] ) ( JOIN ( R [ monitored by ] ) [ Mauna Loa ] ) )",
            "( JOIN ( R [ monitors ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Mauna Loa ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Indian Reserve ] ) ( JOIN ( R [ monitored by ] ) [ Mauna Loa ] ) )"
        ],
        "gen_label": "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ volcano observatory ] ) [ Mauna Loa ] ) )"
    },
    {
        "question": "Question: { Is the name Peter Thomas the same as Peder? }",
        "predicted_query": [
            "( AND ( JOIN [ different name ] [ Peder ] ) ( JOIN ( R [ given name ] ) [ Peter Thomas ] ) )",
            "( JOIN [ name ] [ Peder ] )",
            "( JOIN ( R [ has different name ] ) ( JOIN ( R [ given name ] ) [ Peter Thomas ] ) )",
            "( AND ( JOIN [ name of this person ] [ Peder ] ) ( JOIN ( R [ different name ] ) [ Peter Thomas ] ) )",
            "( AND ( JOIN [ given name ] [ Peter ] ) ( JOIN ( R [ different name ] ) [ Peder ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ said to be the same as ] [ Peder ] ) ( JOIN ( R [ given name ] ) [ Peter Thomas ] ) )"
    },
    {
        "question": "Question: { What is studied at the parent company of Harvard Business School, G. Stanley Hall? }",
        "predicted_query": [
            "( JOIN ( R [ field of study ] ) ( JOIN ( R [ parent company ] ) [ G. Stanley Hall ] ) )",
            "( AND ( JOIN [ studied at ] [ G. Stanley Hall ] ) ( JOIN ( R [ parent organization ] ) [ Harvard Business School ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ G. Stanley Hall ] ) ( JOIN ( R [ field of study ] ) [ Harvard Business School ] ) )",
            "( AND ( JOIN [ studied at ] [ G. Stanley Hall ] ) ( JOIN ( R [ field of work ] ) [ Harvard Business School ] ) )",
            "( [ joined ] [ field of study ] ) "
        ],
        "gen_label": "( AND ( JOIN [ has subsidiary ] [ Harvard Business School ] ) ( JOIN ( R [ educated at ] ) [ G. Stanley Hall ] ) )"
    },
    {
        "question": "Question: { Which is the treatment that treats the medical condition of gold? }",
        "predicted_query": [
            "( JOIN ( R [ medical condition treated ] ) ( JOIN ( R [ treatment ] ) [ gold ] ) )",
            "( JOIN ( R [ treatment for ] ) ( JOIN ( R [ medical condition ] ) [ gold ] ) )",
            "( JOIN [ treatment for ] [ gold ] )",
            "( AND ( JOIN [ treated for ] [ gold ] ) ( JOIN ( R [ medical condition ] ) [ gold ] ) )",
            "( JOIN [ medical condition treated ] [ gold ] )"
        ],
        "gen_label": "( JOIN ( R [ drug or therapy used for treatment ] ) ( JOIN ( R [ medical condition treated ] ) [ gold ] ) )"
    },
    {
        "question": "Question: { For what reason is the brain stem in the anatomical location that it is? }",
        "predicted_query": [
            "( JOIN ( R [ has anatomical location ] ) ( JOIN ( R [ location ] ) [ brain stem ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ United States ] ) ( JOIN ( R [ location ] ) [ brain stem ] ) )",
            "( AND ( JOIN [ location of anatomical structure ] [ brain stem ] ) ( JOIN ( R [ reason for location ] ) [ brain stem ] ) )",
            "( JOIN [ anatomical location ] [ brain stem ] )",
            "( AND ( JOIN [ anatomical location ] [ brain stem ] ) ( JOIN ( R [ reason for location ] ) [ brain stem ] ) )"
        ],
        "gen_label": "( JOIN ( R [ has cause ] ) ( JOIN ( R [ anatomical location ] ) [ brain stem ] ) )"
    },
    {
        "question": "Question: { What is relative of Manisha Koirala ? }",
        "predicted_query": [
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ child ] ) [ Manisha Koirala ] ) )",
            "( JOIN [ relative of ] [ Manisha Koirala ] )",
            "( JOIN ( R [ relative ] ) [ Manisha Koirala ] )",
            "( JOIN ( R [ sibling ] ) [ Manisha Koirala ] )",
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ sibling ] ) [ Manisha Koirala ] ) )"
        ],
        "gen_label": "( JOIN ( R [ relative ] ) [ Manisha Koirala ] )"
    },
    {
        "question": "Question: { Which is The Peerage person ID for Coco Chanel? }",
        "predicted_query": [
            "( JOIN ( R [ The Peerage person ID ] ) [ Coco Chanel ] )",
            "( AND ( JOIN [ person ID ] [ The Peerage ] ) [ Coco Chanel ] )",
            "( JOIN ( R [ The Peerage person ID ] ) [ Coco Chanel ] )",
            "( JOIN ( R [ ThePeerage.com person ID ] ) [ Coco Chanel ] )",
            "( JOIN ( R [ The Peerage person ID ] ) [ Coco Chanel ] )"
        ],
        "gen_label": "( JOIN ( R [ The Peerage person ID ] ) [ Coco Chanel ] )"
    },
    {
        "question": "Question: { Which is the location of the final assembly of mozzarella? }",
        "predicted_query": [
            "( JOIN ( R [ location of final assembly ] ) [ mozzarella ] )",
            "( JOIN ( R [ place of manufacture ] ) ( JOIN ( R [ product or service ] ) [ mozzarella ] ) )",
            "( AND ( JOIN [ capital ] [ Rome ] ) ( JOIN ( R [ place of manufacture ] ) [ mozzarella ] ) )",
            "( JOIN [ location of final assembly ] [ mozzarella ] )",
            "( JOIN ( R [ location of final assembly ] ) [ mozzarella ] )"
        ],
        "gen_label": "( JOIN ( R [ location of creation ] ) [ mozzarella ] )"
    },
    {
        "question": "Question: { Who is {TV host} of {part of series} of {Dancing with the Stars, season 15} ? }",
        "predicted_query": [
            "( JOIN ( R [ presenter ] ) ( JOIN ( R [ part of the series ] ) [ Dancing with the Stars (season 15) ] ) )",
            "( JOIN ( R [ host ] ) ( JOIN ( R [ part of the series ] ) [ Dancing with the Stars (season 15) ] ) )",
            "( AND ( JOIN [ part of series ] [ Dancing with the Stars, season 15 ] ) ( JOIN ( R [ presenter ] ) [ Dancing with the Stars ] ) )",
            "[ JOIN ( R [ presenter ] ) ( JOIN ( R [ part of the series ] ) [ Dancing with the Stars, season 15 ] ) ]",
            "( JOIN [ part of series ] [ Dancing with the Stars, season 15 ] )"
        ],
        "gen_label": "( JOIN ( R [ presenter ] ) ( JOIN ( R [ part of the series ] ) [ Dancing with the Stars, season 15 ] ) )"
    },
    {
        "question": "Question: { What nomination was received by Kurt Weill, but won by Ray Heindorf? }",
        "predicted_query": [
            "( AND ( JOIN [ winner ] [ Ray Heindorf ] ) ( JOIN ( R [ nominated for ] ) [ Kurt Weill ] ) )",
            "( AND ( JOIN [ award received ] [ Ray Heindorf ] ) ( JOIN ( R [ nomination received ] ) [ Kurt Weill ] ) )",
            "( AND ( JOIN [ won by ] [ Ray Heindorf ] ) ( JOIN ( R [ nominated for ] ) [ Kurt Weill ] ) )",
            "( AND ( JOIN [ winner ] [ Ray Heindorf ] ) ( JOIN ( R [ nomination received ] ) [ Kurt Weill ] ) )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ nominated for ] ) [ Kurt Weill ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ winner ] [ Ray Heindorf ] ) ( JOIN ( R [ nominated for ] ) [ Kurt Weill ] ) )"
    },
    {
        "question": "Question: { what is capital city of kingdom of gohemia that have subdivided into in mordrany }",
        "predicted_query": [
            "( AND ( JOIN [ capital of ] [ Gohemia ] ) ( JOIN ( R [ divided into ] ) [ Mordrany ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Mordania ] ) ( JOIN ( R [ capital ] ) [ Kingdom of Gohemia ] ) )",
            "( JOIN ( R [ capital city ] ) ( JOIN ( R [ divided into ] ) [ Mordrany ] ) )",
            "( AND ( JOIN [ country subdivision ] [ Mordania ] ) ( JOIN ( R [ capital ] ) [ Kingdom of Gohemia ] ) )",
            "( JOIN ( R [ capital ] ) ( JOIN ( R [ country ] ) [ Gohemia ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ contains the administrative territorial entity ] [ Modřany ] ) ( JOIN ( R [ capital ] ) [ Kingdom of Bohemia ] ) )"
    },
    {
        "question": "Question: { Which is the atomic number of cobalt? }",
        "predicted_query": [
            "( JOIN ( R [ atomic number ] ) [ cobalt ] )",
            "[]",
            "( JOIN [ atomic number ] [ cobalt ] )",
            "( JOIN [ atomic number ] [ cobalt ] )",
            "( JOIN ( R [ atomic number ] ) [ cobalt ] )"
        ],
        "gen_label": "( JOIN ( R [ atomic number ] ) [ cobalt ] )"
    },
    {
        "question": "Question: { Who gave the {chancellor} of {place of work} of {Bernie Sanders} ? }",
        "predicted_query": [
            "( JOIN ( R [ head of government ] ) ( JOIN ( R [ place of work ] ) [ Bernie Sanders ] ) )",
            "( JOIN ( R [ head of government ] ) ( JOIN ( R [ employer ] ) [ Bernie Sanders ] ) )",
            "( JOIN [ place of work ] [ Bernie Sanders ] ) ( JOIN ( R [ given name ] ) [ Chancellor of Austria ] )",
            "( JOIN ( R [ chair ] ) ( JOIN ( R [ place of work ] ) [ Bernie Sanders ] ) )",
            "( JOIN ( R [ chairman ] ) ( JOIN ( R [ place of work ] ) [ Bernie Sanders ] ) )"
        ],
        "gen_label": "( JOIN ( R [ head of government ] ) ( JOIN ( R [ work location ] ) [ Bernie Sanders ] ) )"
    },
    {
        "question": "Question: { Who is the child of Svatopluk II's sister? }",
        "predicted_query": [
            "( JOIN ( R [ child ] ) ( JOIN ( R [ sibling ] ) [ Svatopluk II ] ) )",
            "[ JOIN [ father ] ]",
            "( JOIN [ child ] [ Svatopluk II ] )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ sibling ] ) [ Svatopluk II ] ) )",
            "( AND ( JOIN [ parent of ] [ Svatopluk II ] ) ( JOIN ( R [ child ] ) [ Svatopluk II ] ) )"
        ],
        "gen_label": "( JOIN ( R [ father ] ) ( JOIN ( R [ sibling ] ) [ Svatopluk II ] ) )"
    },
    {
        "question": "Question: { What is ERA Journal ID of Astronomy and Astrophysics ? }",
        "predicted_query": [
            "( JOIN ( R [ ERA Journal ID ] ) [ Astronomy and Astrophysics ] )",
            "{ JOIN [ eras.org ID ] [ Astronomy and Ast",
            "[ JOIN ] [ ERA Journal ID ]",
            "( [ JOIN ] [ ERA journal ID ] [ Astronomy and Astrophysics ] )",
            "( JOIN ( R [ ERA Journal ID ] ) [ Astronomy & Astrophysics ] )"
        ],
        "gen_label": "( JOIN ( R [ ERA Journal ID ] ) [ Astronomy and Astrophysics ] )"
    },
    {
        "question": "Question: { What is the source of Penicillium clavigerum? }",
        "predicted_query": [
            "( JOIN ( R [ source of information ] ) [ Penicillium clavigerum ] )",
            "( JOIN ( R [ source of Penicillium clavigerum ] ) [ taxon ] )",
            "( JOIN ( R [ has source ] ) ( JOIN ( R [ taxon ] ) [ Penicillium clavigerum ] ) )",
            "( JOIN [ source of ] [ Penicillium clavigerum ] )",
            "( JOIN [ source of ] [ Penicillium clavigerum ] )"
        ],
        "gen_label": "( JOIN ( R [ this taxon is source of ] ) ( JOIN ( R [ parent taxon ] ) [ Penicillium clavigerum ] ) )"
    },
    {
        "question": "Question: { Who gave the{has wards} of {died in} of {Faina Ranevskaya} ? }",
        "predicted_query": [
            "( JOIN ( R [ has ward ] ) ( JOIN ( R [ died in ] ) [ Faina Ranevskaya ] ) )",
            "( JOIN [ has wards ] [ Faina Ranevskaya ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Faina Ranevskaya ] ) ( JOIN ( R [ died in ] ) [ Faina Ranevskaya ] ) )",
            "( AND ( JOIN [ diplomatic consort ] [ Faina Ranevskaya ] ) ( JOIN ( R [ died in ] ) [ Faina Ranevskaya ] ) )",
            "( JOIN ( R [ has wards ] ) ( JOIN ( R [ place of death ] ) [ Faina Ranevskaya ] ) )"
        ],
        "gen_label": "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ place of death ] ) [ Faina Ranevskaya ] ) )"
    },
    {
        "question": "Question: { What is LNB ID of Ray Kurzweil ? }",
        "predicted_query": [
            "( JOIN ( R [ LNB ID ] ) [ Ray Kurzweil ] )",
            "( JOIN ( R [ Logical Form question ] ) ( JOIN ( R [ LNB ID ] ) [ Ray Kurzweil ] ) )",
            "( JOIN [ LNB ID ] [ Ray Kurzweil ] )",
            "( JOIN ( R [ LNB ID ] ) [ Ray Kurzweil ] )",
            "( JOIN ( R [ LNB ID ] ) [ Ray Kurzweil ] )"
        ],
        "gen_label": "( JOIN ( R [ National Library of Latvia ID ] ) [ Raymond Kurzweil ] )"
    },
    {
        "question": "Question: { Who is the sibling of Christiaan Huygens? }",
        "predicted_query": [
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ child ] ) [ Christiaan Huygens ] ) )",
            "( JOIN [ sibling ] [ Christiaan Huygens ] )",
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ student ] ) [ Christiaan Huygens ] ) )",
            "( JOIN [ sibling ] [ Christiaan Huygens ] )",
            "( JOIN ( R [ sibling ] ) [ Christiaan Huygens ] )"
        ],
        "gen_label": "( JOIN ( R [ sibling ] ) [ Christiaan Huygens ] )"
    },
    {
        "question": "Question: { What is the librettist of Die Walküre? }",
        "predicted_query": [
            "( JOIN ( R [ librettist ] ) [ Die Walküre ] )",
            "[ JOIN ( R [ librettist ] ) [ Die Walküre ] ]",
            "( JOIN [ librettist ] [ Die Walküre ] )",
            "( JOIN ( R [ libretto writer ] ) ( JOIN ( R [ composer ] ) [ Die Walküre ] ) )",
            "( JOIN ( R [ composer or lyricist ] ) ( JOIN ( R [ composer ] ) [ Die Walküre ] ) )"
        ],
        "gen_label": "( JOIN ( R [ librettist ] ) [ Die Walküre ] )"
    },
    {
        "question": "Question: { What house has a child in Sri Indraditya? }",
        "predicted_query": [
            "( JOIN ( R [ child ] ) ( JOIN ( R [ parent of ] ) [ Sri Indraditya ] ) )",
            "( AND ( JOIN [ parent of ] [ Sri Indraditya ] ) ( JOIN ( R [ child ] ) [ Sri Indraditya ] ) )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ place of work ] ) [ Sri Indraditya ] ) )",
            "( JOIN [ has child ] [ Sri Indraditya ] )",
            "( AND ( JOIN [ parent of ] [ Sri Indraditya ] ) ( JOIN ( R [ place of death ] ) [ Sri Indraditya ] ) )"
        ],
        "gen_label": "( JOIN ( R [ family ] ) ( JOIN ( R [ child ] ) [ Sri Indraditya ] ) )"
    },
    {
        "question": "Question: { Where did Buddhism first originate? }",
        "predicted_query": [
            "( JOIN ( R [ place of origin ] ) [ Buddhism ] )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Buddhism ] ) ( JOIN ( R [ place of origin ] ) [ Buddhism ] ) )",
            "( JOIN [ place of origin ] [ Buddhism ] )",
            "( JOIN ( R [ location ] ) ( JOIN ( R [ originated in ] ) [ Buddhism ] ) )",
            "( JOIN ( R [ place of origin ] ) [ Buddhism ] )"
        ],
        "gen_label": "( JOIN ( R [ postal code ] ) ( JOIN ( R [ location of formation ] ) [ Buddhism ] ) )"
    },
    {
        "question": "Question: { What is the CESI conservation information for Banff National Park? }",
        "predicted_query": [
            "( JOIN ( R [ CESI conservation information ] ) [ Banff National Park ] )",
            "( AND ( JOIN [ conservation status ] [ protected area ] ) ( JOIN ( R [ contains the administrative territorial entity ] ) [ Banff National Park ] ) )",
            "( JOIN [ CESI conservation information ] [ Banff National Park ] )",
            "( JOIN ( R [ CESI conservation information ID ] ) [ Banff National Park ] )",
            "( JOIN ( R [ conservation information ] ) [ Banff National Park ] )"
        ],
        "gen_label": "( JOIN ( R [ Canadian Environmental Sustainability Indicators ID ( Protected areas ) ] ) [ Banff National Park ] )"
    },
    {
        "question": "Question: { What is the administrative territorial entity of Pune? }",
        "predicted_query": [
            "( JOIN [ administrative territorial entity ] [ Pune ] )",
            "( JOIN ( R [ administrative territorial entity ] ) [ Pune ] )",
            "( JOIN ( R [ contains the administrative territorial entity of ] ) [ Pune ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Pune ] ) ( JOIN ( R [ contains the administrative territorial entity ] ) [ Pune ] ) )",
            "( JOIN ( R [ capital of ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Pune ] ) )"
        ],
        "gen_label": "( JOIN ( R [ contains the administrative territorial entity ] ) [ Pune ] )"
    },
    {
        "question": "Question: { What is the subsidiary entities of the developed by Windows XP ? }",
        "predicted_query": [
            "( JOIN ( R [ subsidiary ] ) ( JOIN ( R [ developer ] ) [ Windows XP ] ) )",
            "( JOIN [ subsidiary ] [ Windows XP ] )",
            "( JOIN ( R [ subsidiary ] ) ( JOIN ( R [ developed by ] ) [ Windows XP ] ) )",
            "( JOIN ( R [ developer ] ) ( JOIN ( R [ has subsidiary ] ) [ Windows XP ] ) )",
            "( AND ( JOIN [ parent entity ] [ Windows XP ] ) ( JOIN ( R [ developer ] ) [ Windows XP ] ) )"
        ],
        "gen_label": "( JOIN ( R [ has subsidiary ] ) ( JOIN ( R [ developer ] ) [ Windows XP ] ) )"
    },
    {
        "question": "Question: { What is part of Kansas history that has towns in Geary County? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Geary County ] ) ( JOIN ( R [ part of history ] ) [ Kansas history ] ) )",
            "( AND ( JOIN [ part of history ] [ Kansas history ] ) ( JOIN ( R [ contains the administrative territorial entity ] ) [ Geary County ] ) )",
            "( And JOIN ( R [ part of history ] ) ( JOIN ( R [ located in ] ) [ Geary County ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Geary County ] ) ( JOIN ( R [ part of history ] ) [ Kansas ] ) )",
            "( AND ( JOIN [ has towns ] [ Geary County ] ) ( JOIN ( R [ part of history ] ) [ Kansas ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ contains the administrative territorial entity ] [ Geary County ] ) ( JOIN ( R [ facet of ] ) [ history of Kansas ] ) )"
    },
    {
        "question": "Question: { Which is the patent number of the mouse? }",
        "predicted_query": [
            "( JOIN ( R [ patent number ] ) [ mouse ] )",
            "( JOIN [ patent number ] [ mouse ] )",
            "( [ joined by ] [ patent number ] [ mouse ] )",
            "( JOIN ( R [ patent number ] ) [ mouse ] )",
            "( JOIN [ patent number ] [ mouse ] )"
        ],
        "gen_label": "( JOIN ( R [ patent number ] ) [ computer mouse ] )"
    },
    {
        "question": "Question: { What is the Christian name of Henry IV of England, that is the same as Harald? }",
        "predicted_query": [
            "( AND ( JOIN [ given name ] [ Harald ] ) ( JOIN ( R [ given name ] ) [ Henry IV of England ] ) )",
            "( AND ( JOIN [ different name ] [ Harald ] ) ( JOIN ( R [ given name ] ) [ Henry IV of England ] ) )",
            "( AND ( JOIN [ person ] [ Harald ] ) ( JOIN ( R [ given name ] ) [ Henry IV of England ] ) )",
            "( AND ( JOIN [ name of person ] [ Harald ] ) ( JOIN ( R [ given name ] ) [ Henry IV of England ] ) )",
            "( AND ( JOIN [ same as ] [ Harald ] ) ( JOIN ( R [ given name ] ) [ Henry IV of England ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ said to be the same as ] [ Harald ] ) ( JOIN ( R [ given name ] ) [ Henry IV of England ] ) )"
    },
    {
        "question": "Question: { Where is the location of the landing from the Caribbean Sea? }",
        "predicted_query": [
            "( JOIN ( R [ location of landing ] ) ( JOIN ( R [ located in body of water ] ) [ Caribbean Sea ] ) )",
            "( JOIN ( R [ location of landing ] ) [ Caribbean Sea ] )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ body of water ] ) [ Caribbean Sea ] ) )",
            "( JOIN [ location of landing ] [ Caribbean Sea ] )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Caribbean Sea ] ) ( JOIN ( R [ place of death ] ) [ Juan de la Cosa ] ) )"
        ],
        "gen_label": "( JOIN [ location of landing ] [ Caribbean Sea ] )"
    },
    {
        "question": "Question: { Who is named after the Pauli exclusion principle whose middle name if Wolfgang? }",
        "predicted_query": [
            "( AND ( JOIN [ given name ] [ Wolfgang ] ) ( JOIN ( R [ named after ] ) [ Pauli exclusion principle ] ) )",
            "( AND ( JOIN [ given name ] [ Wolfgang ] ) ( JOIN ( R [ named after ] ) [ Pauli exclusion principle ] ) )",
            "( AND ( JOIN [ name ] [ Wolfgang Pauli ] ) ( JOIN ( R [ named after ] ) [ Pauli exclusion principle ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Wolfgang Pauli ] ) ( JOIN ( R [ named after ] ) [ Pauli exclusion principle ] ) )",
            "( JOIN ( R [ given name ] ) ( JOIN ( R [ named after ] ) [ Pauli exclusion principle ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ given name ] [ Wolfgang ] ) ( JOIN ( R [ named after ] ) [ Pauli exclusion principle ] ) )"
    },
    {
        "question": "Question: { Who is the discoverer of proton and is doctoral student of Norman Alexander ? }",
        "predicted_query": [
            "( AND ( JOIN [ doctoral advisor ] [ Norman Alexander ] ) ( JOIN ( R [ discoverer ] ) [ proton ] ) )",
            "( AND ( JOIN [ student of ] [ Norman Alexander ] ) ( JOIN ( R [ discoverer ] ) [ proton ] ) )",
            "( JOIN ( R [ discoverer ] ) ( JOIN ( R [ doctoral student ] ) [ Norman Alexander ] ) )",
            "( JOIN [ doctoral student ] [ Norman Alexander ] ) ( JOIN ( R [ discoverer ] ) [ proton ] )",
            "( AND ( JOIN [ doctoral student ] [ Norman Alexander ] ) ( JOIN ( R [ discoverer ] ) [ proton ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ doctoral student ] [ Norman Alexander ] ) ( JOIN ( R [ discoverer or inventor ] ) [ proton ] ) )"
    },
    {
        "question": "Question: { What date were the subsidiary entities of the University of Strasbourg created? }",
        "predicted_query": [
            "( AND ( JOIN [ located in the administrative territorial entity ] [ University of Strasbourg ] ) ( JOIN ( R [ founded ] ) [ University of Strasbourg ] ) )",
            "( JOIN ( R [ founded ] ) ( JOIN ( R [ subsidiary of ] ) [ University of Strasbourg ] ) )",
            "( JOIN ( R [ date of establishment ] ) ( JOIN ( R [ subsidiary of ] ) [ University of Strasbourg ] ) )",
            "( JOIN [ founded ] [ University of Strasbourg ] )",
            "( JOIN ( R [ founded ] ) ( JOIN ( R [ subsidiary ] ) [ University of Strasbourg ] ) )"
        ],
        "gen_label": "( JOIN ( R [ inception ] ) ( JOIN ( R [ has subsidiary ] ) [ University of Strasbourg ] ) )"
    },
    {
        "question": "Question: { Which is the user manual link of sextant? }",
        "predicted_query": [
            "( JOIN ( R [ user manual ] ) [ sextant ] )",
            "( JOIN ( R [ user manual link ] ) [ sextant ] )",
            "( AND ( JOIN [ has user manual ] [ sextant ] ) ( JOIN ( R [ has a material medium ] ) [ sextant ] ) )",
            "[ JOIN ] [ URL ] [ se",
            "( JOIN [ user manual link ] [ sextant ] )"
        ],
        "gen_label": "( JOIN ( R [ user manual URL ] ) [ sextant ] )"
    },
    {
        "question": "Question: { What is the namesake of nobelium used by the daughter of Karolina Andriette Ahlsell? }",
        "predicted_query": [
            "( AND ( JOIN [ child ] [ Karolina Andriette Ahlsell ] ) ( JOIN ( R [ named after ] ) [ nobelium ] ) )",
            "( JOIN [ namesake of ] [ nobelium ] ) ( JOIN ( R [ given name ] ) [ Karolina Andriette Ahlsell ] )",
            "( AND ( JOIN [ named after ] [ Karolina Andriette Ahlsell ] ) ( JOIN ( R [ given name ] ) [ daughter ] ) )",
            "( JOIN ( R [ namesake of ] ) ( JOIN ( R [ child ] ) [ Karolina Andriette Ahlsell ] ) )",
            "( AND ( JOIN [ child ] [ Karolina Andriette Ahlsell ] ) ( JOIN ( R [ named after ] ) [ nobelium ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ mother ] [ Karolina Andriette Ahlsell ] ) ( JOIN ( R [ named after ] ) [ nobelium ] ) )"
    },
    {
        "question": "Question: { What is the main subject of the detective fiction? }",
        "predicted_query": [
            "( JOIN ( R [ main subject ] ) [ detective fiction ] )",
            "( JOIN ( R [ main subject ] ) [ detective fiction ] )",
            "( JOIN [ main subject ] [ detective fiction ] )",
            "( JOIN ( R [ subject ] ) ( JOIN ( R [ genre ] ) [ detective fiction ] ) )",
            "( JOIN [ main subject ] [ detective fiction ] )"
        ],
        "gen_label": "( JOIN ( R [ main subject ] ) [ detective fiction ] )"
    },
    {
        "question": "Question: { Which is played by simplified Chinese characters using the legacy Hanzi? }",
        "predicted_query": [
            "( JOIN [ written in ] [ simplified Chinese characters ] )",
            "( JOIN ( R [ written in ] ) ( JOIN ( R [ written in language ] ) [ simplified Chinese characters ] ) )",
            "( AND ( JOIN [ uses ] [ simplified Chinese characters ] ) ( JOIN ( R [ written in ] ) [ Hanzi ] ) )",
            "( JOIN [ uses simplified Chinese characters ] [ Hanzi ] )",
            "( AND ( JOIN [ language of writing ] [ simplified Chinese characters ] ) ( JOIN ( R [ written in ] ) [ Hanzi ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ uses ] [ legacy Chinese character ] ) ( JOIN ( R [ used by ] ) [ simplified Chinese characters ] ) )"
    },
    {
        "question": "Question: { Which is the conviction for Sirhan Sirhan? }",
        "predicted_query": [
            "( JOIN ( R [ conviction ] ) [ Sirhan Sirhan ] )",
            "( JOIN [ conviction ] [ Sirhan Sirhan ] )",
            "( JOIN ( R [ convicted of ] ) [ Sirhan Sirhan ] )",
            "( JOIN [ conviction for ] [ Sirhan Sirhan ] )",
            "( JOIN ( R [ convicted of ] ) [ Sirhan Sirhan ] )"
        ],
        "gen_label": "( JOIN ( R [ convicted of ] ) [ Sirhan Sirhan ] )"
    },
    {
        "question": "Question: { What's the LombardiaBeniCulturali artwork ID of The Last Supper? }",
        "predicted_query": [
            "( JOIN ( R [ LombardiaBeniCulturali artwork ID ] ) [ The Last Supper ] )",
            "( JOIN ( R [ LombardiaBeniCulturali artwork ID ] ) [ The Last Supper ] )",
            "( JOIN ( R [ Lombardia Beni Culturali ID ] ) [ The Last Supper ] )",
            "( AND ( JOIN [ Lombardia Beni Culturali ID ] [ The Last Supper ] ) ( JOIN ( R [ question ] ) [ Leonardo da Vinci ] ) )",
            "( JOIN ( R [ LombardiaBeniCulturali artwork ID ] ) [ The Last Supper ] )"
        ],
        "gen_label": "( JOIN ( R [ LombardiaBeniCulturali artwork ID ] ) [ The Last Supper ] )"
    },
    {
        "question": "Question: { What sports includes the long jump? }",
        "predicted_query": [
            "( JOIN ( R [ sport ] ) ( JOIN ( R [ participant in ] ) [ long jump ] ) )",
            "( JOIN ( R [ sports ] ) [ long jump ] )",
            "( JOIN [ sport ] [ long jump ] )",
            "( JOIN [ sports ] [ long jump ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ long jump ] ) ( JOIN ( R [ sport ] ) [ long jump ] ) )"
        ],
        "gen_label": "( JOIN [ field of work ] [ long jump ] )"
    },
    {
        "question": "Question: { What is the FloraBase ID of Fagopyrum esculentum? }",
        "predicted_query": [
            "( JOIN ( R [ FloraBase ID ] ) [ Fagopyrum esculentum ] )",
            "( JOIN ( R [ FloraBase taxon ID ] ) [ Fagopyrum esculentum ] )",
            "( JOIN ( R [ FloraBase ID ] ) [ Fagopyrum esculentum ] )",
            "( JOIN ( R [ FloraBase taxon ID ] ) [ Fagopyrum esculentum ] )",
            "( AND ( JOIN [ Fagopyrum esculentum ] ) ( JOIN ( R [ FloraBase taxon ID ] ) [ Fagopyrum esculentum ] ) )"
        ],
        "gen_label": "( JOIN ( R [ FloraBase ID ] ) [ Fagopyrum esculentum ] )"
    },
    {
        "question": "Question: { What is the name of the \"sister city\" tied to Kansas City, which is located in the county of Seville Province? }",
        "predicted_query": [
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Seville Province ] ) ( JOIN ( R [ twinned administrative body ] ) [ Kansas City, Missouri ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Seville Province ] ) ( JOIN ( R [ twinned administrative body ] ) [ Kansas City, Missouri ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Seville Province ] ) ( JOIN ( R [ named after ] ) [ Kansas City, Missouri ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Province of Seville ] ) ( JOIN ( R [ named after ] ) [ Kansas City, Missouri ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Seville Province ] ) ( JOIN ( R [ twinned administrative body ] ) [ Kansas City ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ capital of ] [ Seville Province ] ) ( JOIN ( R [ twinned administrative body ] ) [ Kansas City ] ) )"
    },
    {
        "question": "Question: { who county seat of of birth location of Jivaka kumar bhaccha ? }",
        "predicted_query": [
            "( JOIN ( R [ capital ] ) ( JOIN ( R [ place of birth ] ) [ Jivaka Kumar Bhaccha ] ) )",
            "( JOIN ( R [ capital of ] ) ( JOIN ( R [ place of birth ] ) [ Jivaka Kumar Bhaccha ] ) )",
            "( AND ( JOIN [ seat ] [ Jivaka Kumar Bhaccha ] ) ( JOIN ( R [ place of birth ] ) [ Jivaka Kumar Bhaccha ] ) )",
            "( AND ( JOIN [ administrative body ] [ County of Jivaka Kumar Bhaccha ] ) ( JOIN ( R [ place of birth ] ) [ Jivaka Kumar Bhaccha ] ) )",
            "( JOIN ( R [ capital city ] ) ( JOIN ( R [ place of birth ] ) [ Jivaka kumar bhaccha ] ) )"
        ],
        "gen_label": "( JOIN ( R [ capital of ] ) ( JOIN ( R [ place of birth ] ) [ Jivaka Kumar Bhaccha ] ) )"
    },
    {
        "question": "Question: { Which is the elevation above sea level for Anaheim? }",
        "predicted_query": [
            "( JOIN ( R [ elevation above sea level ] ) [ Anaheim ] )",
            "( JOIN [ elevation above sea level ] [ Anaheim ] )",
            "( JOIN ( R [ elevation above sea level ] ) [ Anaheim ] )",
            "( JOIN [ elevation above sea level ] [ Anaheim ] )",
            "( JOIN ( R [ elevation above sea level ] ) [ Anaheim, California ] )"
        ],
        "gen_label": "( JOIN ( R [ elevation above sea level ] ) [ Anaheim ] )"
    },
    {
        "question": "Question: { Who composed Symphony No. 5, and who is the pianist? }",
        "predicted_query": [
            "( JOIN ( R [ composer ] ) ( JOIN ( R [ performer ] ) [ Symphony No. 5 ] ) )",
            "( AND ( JOIN [ composer ] [ Symphony No. 5 ] ) ( JOIN ( R [ performer ] ) [ Symphony No. 5 ] ) )",
            "( AND ( JOIN [ performer ] [ pianist ] ) ( JOIN ( R [ composer ] ) [ Symphony No. 5 ] ) )",
            "( AND ( JOIN [ performer ] [ pianist ] ) ( JOIN ( R [ composer ] ) [ Symphony No. 5 ] ) )",
            "( JOIN ( R [ composer ] ) ( JOIN ( R [ performer ] ) [ Symphony No. 5 ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ occupation ] [ pianist ] ) ( JOIN ( R [ composer ] ) [ Symphony No. 5 ] ) )"
    },
    {
        "question": "Question: { Who is the founder of the provenance of Levi's? }",
        "predicted_query": [
            "( JOIN ( R [ founding date ] ) ( JOIN ( R [ place of origin ] ) [ Levi's ] ) )",
            "( JOIN ( R [ founder ] ) ( JOIN ( R [ place of origin ] ) [ Levi's ] ) )",
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ place of origin ] ) [ Levi's ] ) )",
            "( JOIN [ founder ] [ Levi's ] )",
            "( AND ( JOIN [ founded by ] [ Levi Strauss ] ) ( JOIN ( R [ place of origin ] ) [ Levi's ] ) )"
        ],
        "gen_label": "( JOIN ( R [ founded by ] ) ( JOIN ( R [ owned by ] ) [ Levi's ] ) )"
    },
    {
        "question": "Question: { What is hometown of {Sylvia Browne}, that has {partner city} is {Metz} ? }",
        "predicted_query": [
            "( AND ( JOIN [ twinned administrative body ] [ Metz ] ) ( JOIN ( R [ place of birth ] ) [ Sylvia Browne ] ) )",
            "",
            "( JOIN [ twinned administrative body ] [ Metz ] ) ( JOIN [ place of birth ] [ Sylvia Browne ] )",
            "( AND ( JOIN [ twinned administrative body ] [ Metz ] ) ( JOIN ( R [ place of work ] ) [ Sylvia Browne ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Metz ] ) ( JOIN ( R [ birth place ] ) [ Sylvia Browne ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ place of birth ]0 [ Metz ] ) ( JOIN ( R [ place of birth ] ) [ Sylvia Browne ] ) )"
    },
    {
        "question": "Question: { What is Horsetelex ID for Man o' War ? }",
        "predicted_query": [
            "[ JOIN [ JOIN [ Horsetelex ID ] ] [ Man o' War ] ]",
            "( JOIN ( R [ Horsetelex ID ] ) [ Man o' War ] )",
            "( JOIN ( R [ HorseTechlex ID ] ) [ Man o' War ] )",
            "( JOIN [ Horsetelex ID ] [ Man o' War ] )",
            "( JOIN ( R [ Horsetelex ID ] ) [ Man o' War ] )"
        ],
        "gen_label": "( JOIN ( R [ Horsetelex ID ] ) [ Man o' War ] )"
    },
    {
        "question": "Question: { Who gave the {location of work} of {proprietor} of {Mein Kampf} ? }",
        "predicted_query": [
            "( JOIN ( R [ location of work ] ) ( JOIN ( R [ employer ] ) [ Mein Kampf ] ) )",
            "[ JOIN [ located in ] ] [ employ",
            "( JOIN [ location of work ] [ Mein Kampf ] )",
            "( JOIN ( R [ place of work ] ) ( JOIN ( R [ author ] ) [ Mein Kampf ] ) )",
            "( JOIN ( R [ location ] ) ( JOIN ( R [ employer ] ) [ Mein Kampf ] ) )"
        ],
        "gen_label": "( JOIN ( R [ work location ] ) ( JOIN ( R [ copyright holder ] ) [ Mein Kampf ] ) )"
    },
    {
        "question": "Question: { What is U.S. Gymnastics Hall of Fame athlete ID of Olga Korbut ? }",
        "predicted_query": [
            "( JOIN ( R [ U.S. Gymnastics Hall of Fame athlete ID ] ) [ Olga Korbut ] )",
            "( JOIN ( R [ U.S. Gymnastics Hall of Fame athlete ID ] ) [ Olga Korbut ] )",
            "( JOIN ( R [ United States Gymnastics Hall of Fame athlete ID ] ) [ Olga Korbut ] )",
            "( AND ( JOIN [ U.S. Gymnastics Hall of Fame athlete ID ] [ Olga Korbut ] ) NOT ( JOIN ( R [ member of ] ) [ U.S. Gymnastics Hall of Fame ] ) )",
            "( JOIN ( R [ USGHOF athlete ID ] ) [ Olga Korbut ] )"
        ],
        "gen_label": "( JOIN ( R [ U.S. Gymnastics Hall of Fame athlete ID ] ) [ Olga Korbut ] )"
    },
    {
        "question": "Question: { What was founded next to Krafwerk? }",
        "predicted_query": [
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Krafwerk ] ) )",
            "( JOIN [ founded next to ] [ Kraftwerk ] )",
            "( JOIN ( R [ founded in the same country ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Kraftwerk ] ) )",
            "( JOIN [ founded next to ] [ Kraftwerk ] )",
            "( AND ( JOIN [ located in administrative territorial entity ] [ Krafwerk ] ) ( JOIN ( R [ founded by ] ) [ Krafwerk ] ) )"
        ],
        "gen_label": "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ location of formation ] ) [ Kraftwerk ] ) )"
    },
    {
        "question": "Question: { which is maximal incubation period in humans of typhoid fever ? }",
        "predicted_query": [
            "( JOIN ( R [ maximum incubation period ] ) [ typhoid fever ] )",
            "( JOIN ( R [ incubation period ] ) [ typhoid fever ] )",
            "( JOIN [ maximum incubation period ] [ typhoid fever ] )",
            "( JOIN ( R [ maximum incubation period ] ) [ typhoid fever ] )",
            "( JOIN ( R [ incubation period ] ) ( JOIN ( R [ cause ] ) [ typhoid fever ] ) )"
        ],
        "gen_label": "( JOIN ( R [ maximal incubation period in humans ] ) [ typhoid fever ] )"
    },
    {
        "question": "Question: { Which is a main food source of Physeter macrocephalus? }",
        "predicted_query": [
            "( JOIN ( R [ food source ] ) [ Physeter macrocephalus ] )",
            "( JOIN [ main food source ] [ Physeter macrocephalus ] )",
            "( JOIN ( R [ main food source ] ) [ Physeter macrocephalus ] )",
            "( JOIN [ main food source ] [ Physeter macrocephalus ] )",
            "( JOIN ( R [ food web ] ) ( JOIN ( R [ prey ] ) [ Physeter macrocephalus ] ) )"
        ],
        "gen_label": "( JOIN ( R [ main food source ] ) [ sperm whale ] )"
    },
    {
        "question": "Question: { Who is the relative of Mahatma Gandhi? }",
        "predicted_query": [
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ child ] ) [ Mahatma Gandhi ] ) )",
            "( JOIN ( R [ relative ] ) [ Mahatma Gandhi ] )",
            "( JOIN [ relative of ] [ Mahatma Gandhi ] )",
            "( JOIN [ relative ] [ Mahatma Gandhi ] )",
            "[ JOIN [ sibling ] [ Mahatma Gandhi ] ]"
        ],
        "gen_label": "( JOIN [ relative ] [ Mahatma Gandhi ] )"
    },
    {
        "question": "Question: { What's the legal form of University of Paris VI: Pierre-and-Marie-Curie University? }",
        "predicted_query": [
            "( JOIN ( R [ legal form ] ) ( JOIN ( R [ parent institution ] ) [ University of Paris VI: Pierre-and-Marie-Curie University ] ) )",
            "( JOIN [ legal form ] [ University of Paris VI: Pierre-and-Marie-Curie University ] )",
            "( AND ( JOIN [ has legal form ] [ University of Paris VI: Pierre-and-Marie-Curie University ] ) ( JOIN ( R [ has part of ] ) [ University of Paris VI: Pierre-and-Marie-Curie University ] ) )",
            "( JOIN ( R [ legal form ] ) ( JOIN ( R [ institution ] ) [ University of Paris VI: Pierre-and-Marie-Curie University ] ) )",
            "( JOIN ( R [ legal form ] ) ( JOIN ( R [ university ] ) [ University of Paris VI: Pierre-and-Marie-Curie University ] ) )"
        ],
        "gen_label": "( JOIN ( R [ legal form ] ) [ Pierre and Marie Curie University ] )"
    },
    {
        "question": "Question: { Who won the 1971 Wimbledon Women's Singles Championship? }",
        "predicted_query": [
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ champion ] ) [ Wimbledon Women's Singles ] ) )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ winner of ] ) [ Wimbledon Women's Singles ] ) )",
            "The following JOIN query is presented below.",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ participant in ] ) [ Wimbledon Women's Singles ] ) )",
            "( JOIN ( R [ champion ] ) ( JOIN ( R [ winner ] ) [ 1971 Wimbledon Women's Singles ] ) )"
        ],
        "gen_label": "( JOIN ( R [ winner ] ) ( JOIN ( R [ follows ] ) [ 1971 Wimbledon Championships – Women's singles ] ) )"
    },
    {
        "question": "Question: { \"Where is {home town} of {Mata Hari}, which has {partner town} is {Bordeaux} ?\" }",
        "predicted_query": [
            "( AND ( JOIN [ twinned administrative body ] [ Bordeaux ] ) ( JOIN ( R [ place of birth ] ) [ Mata Hari ] ) )",
            "[ JOIN ( R [ twinned administrative body ] ) ] JOIN ( R [ place of work ] ) [ Mata Hari ] ]",
            "( AND ( JOIN [ twinned administrative body ] [ Bordeaux ] ) ( JOIN ( R [ birth place ] ) [ Mata Hari ] ) )",
            "( JOIN [ twinned administrative body ] [ Bordeaux ] ) ( JOIN [ place of birth ] [ Mata Hari ] )",
            "( AND ( JOIN [ twinned administrative body ] [ Bordeaux ] ) ( JOIN ( R [ place of birth ] ) [ Mata Hari ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ twinned administrative body ] [ Bordeaux ] ) ( JOIN ( R [ residence ] ) [ Mata Hari ] ) )"
    },
    {
        "question": "Question: { Who is the team manager of the team Chavdar Atanasov? }",
        "predicted_query": [
            "( JOIN ( R [ team manager ] ) [ Chavdar Atanasov ] )",
            "( JOIN [ team manager ] [ Chavdar Atanasov ] )",
            "( JOIN ( R [ team manager ] ) ( JOIN ( R [ member of sports team ] ) [ Chavdar Atanasov ] ) )",
            "( JOIN ( R [ coach ] ) ( JOIN ( R [ member of ] ) [ Chavdar Atanasov ] ) )",
            "( JOIN ( R [ member of sports team ] ) ( JOIN ( R [ coach ] ) [ Chavdar Atanasov ] ) )"
        ],
        "gen_label": "( JOIN ( R [ head coach ] ) ( JOIN ( R [ member of sports team ] ) [ Chavdar Atanasov ] ) )"
    },
    {
        "question": "Question: { What is interesting in the history of America? }",
        "predicted_query": [
            "( JOIN ( R [ notable event ] ) ( JOIN ( R [ located in ] ) [ United States ] ) )",
            "( AND ( JOIN [ notable for ] [ history of the United States ] ) ( JOIN ( R [ notable for ] ) [ history of the United States ] ) )",
            "( JOIN ( R [ notable event ] ) ( JOIN ( R [ history ] ) [ United States ] ) )",
            "( AND ( JOIN [ field of work ] [ history ] ) ( JOIN ( R [ notable event or accomplishment ] ) [ United States ] ) )",
            "( JOIN [ interesting in history ] [ United States ] )"
        ],
        "gen_label": "( JOIN [ interested in ] [ history of the Americas ] )"
    },
    {
        "question": "Question: { Is Ania the equivalent of the forename of Anna Atkins? }",
        "predicted_query": [
            "( AND ( JOIN [ given name ] [ Anna ] ) ( JOIN ( R [ equivalent of ] ) [ Ania ] ) )",
            "( JOIN ( R [ has the same meaning as ] ) ( JOIN ( R [ given name ] ) [ Anna Atkins ] ) )",
            "( JOIN ( R [ person ] ) ( JOIN ( R [ given name ] ) [ Anna Atkins ] ) )",
            "( AND ( JOIN [ name of person ] [ Anna Atkins ] ) ( JOIN ( R [ equivalent name ] ) [ Ania ] ) )",
            "( JOIN ( R [ alternate name ] ) ( JOIN ( R [ given name ] ) [ Anna Atkins ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ said to be the same as ] [ Ania ] ) ( JOIN ( R [ given name ] ) [ Anna Atkins ] ) )"
    },
    {
        "question": "Question: { From which historic era does Lucius Aurelius Priscus come? }",
        "predicted_query": [
            "( JOIN ( R [ from ] ) ( JOIN ( R [ era ] ) [ Lucius Aurelius Priscus ] ) )",
            "( JOIN ( R [ era ] ) ( JOIN ( R [ place of death ] ) [ Lucius Aurelius Priscus ] ) )",
            "( JOIN ( R [ historic era ] ) ( JOIN ( R [ place of birth ] ) [ Lucius Aurelius Priscus ] ) )",
            "( AND ( JOIN [ follows from ] [ Roman era ] ) ( JOIN ( R [ contemporary of ] ) [ Lucius Aurelius Priscus ] ) )",
            "( JOIN [ historic era ] [ Lucius Aurelius Priscus ] )"
        ],
        "gen_label": "( JOIN ( R [ time period ] ) ( JOIN ( R [ gens ] ) [ Lucius Aurelius Priscus ] ) )"
    },
    {
        "question": "Question: { What is the number of representatives in an organization of the Christian Democratic Union? }",
        "predicted_query": [
            "( JOIN [ number of representatives ] [ Christian Democratic Union ] )",
            "( JOIN ( R [ number of representatives ] ) ( JOIN ( R [ member of ] ) [ Christian Democratic Union ] ) )",
            "( AND ( JOIN [ members ] [ Christian Democratic Union ] ) ( JOIN ( R [ number of members ] ) [ Christian Democratic Union ] ) )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ political party ] ) [ Christian Democratic Union ] ) )",
            "( JOIN ( R [ number of members ] ) ( JOIN ( R [ member of ] ) [ Christian Democratic Union ] ) )"
        ],
        "gen_label": "( JOIN ( R [ number of seats in assembly ] ) [ Christian Democratic Union ] )"
    },
    {
        "question": "Question: { who is the teacher of nikolay yegorovich Zhukovshy, the member of Russian Academy of sciences? }",
        "predicted_query": [
            "( AND ( JOIN [ member of ] [ Russian Academy of Sciences ] ) ( JOIN ( R [ teacher ] ) [ Nikolay Yegorovich Zhukovsky ] ) )",
            "( JOIN ( R [ faculty member ] ) ( JOIN ( R [ member of ] ) [ Nikolay Yegorovich Zhukovsky ] ) )",
            "( JOIN ( R [ faculty member ] ) ( JOIN ( R [ member of ] ) [ Nikolay Yegorovich Zhukovsky ] ) )",
            "( AND ( JOIN [ member of ] [ Russian Academy of Sciences ] ) ( JOIN ( R [ taught by ] ) [ Nikolay Yegorovich Zhukovsky ] ) )",
            "( JOIN ( R [ student ] ) ( JOIN ( R [ member of ] ) [ Nikolay Yegorovich Zhukovsky ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ member of ] [ Russian Academy of Sciences ] ) ( JOIN ( R [ student ] ) [ Nikolay Zhukovsky ] ) )"
    },
    {
        "question": "Question: { The Art of Painting is located in which museum collection? }",
        "predicted_query": [
            "( JOIN ( R [ collection ] ) ( JOIN ( R [ located in ] ) [ The Art of Painting ] ) )",
            "( AND ( JOIN [ location of work ] [ The Art of Painting ] ) ( JOIN ( R [ collection of ] ) [ The Art of Painting ] ) )",
            "( JOIN [ museum collection ] [ The Art of Painting ] )",
            "( JOIN ( R [ collection ] ) ( JOIN ( R [ located in ] ) [ The Art of Painting ] ) )",
            "( JOIN ( R [ located in ] ) ( JOIN ( R [ collection ] ) [ The Art of Painting ] ) )"
        ],
        "gen_label": "( JOIN ( R [ location ] ) ( JOIN ( R [ collection ] ) [ The Art of Painting ] ) )"
    },
    {
        "question": "Question: { Which is the Pro Football Hall of Fame ID of Barry Sanders? }",
        "predicted_query": [
            "( JOIN ( R [ Pro Football Hall of Fame ID ] ) [ Barry Sanders ] )",
            "[R JOIN [Pro Football Hall of Fame ID] [Barry Sanders]]",
            "{ JOIN [ has Pro Football Hall of Fame ID ] [ Barry Sanders ] }",
            "( JOIN ( R [ Pro Football Hall of Fame ID ] ) [ Barry Sanders ] )",
            "( JOIN ( R [ Pro Football Hall of Fame player ID ] ) [ Barry Sanders ] )"
        ],
        "gen_label": "( JOIN ( R [ Pro Football Hall of Fame ID ( old ) ] ) [ Barry Sanders ] )"
    },
    {
        "question": "Question: { Which is the subcellular localization of codes for SRC? }",
        "predicted_query": [
            "( JOIN ( R [ subcellular localization ] ) [ SRC ] )",
            "[]",
            "( JOIN [ subcellular localization ] [ SRC ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ SRC ] ) ( JOIN ( R [ cellular location ] ) [ SRC ] ) )",
            "( JOIN ( R [ subcellular localization ] ) ( JOIN ( R [ codes for ] ) [ SRC ] ) )"
        ],
        "gen_label": "( JOIN ( R [ cell component ] ) ( JOIN ( R [ encodes ] ) [ SRC ] ) )"
    },
    {
        "question": "Question: { Which is the Kindred Britain ID of William Cavendish-Bentinck, 3rd Duke of Portland? }",
        "predicted_query": [
            "( JOIN ( R [ Kindred Britain ID ] ) [ William Cavendish-Bentinck, 3rd Duke of Portland ] )",
            "( JOIN ( R [ Kindred Britain ID ] ) [ William Cavendish-Bentinck, 3rd Duke of Portland ] )",
            "( JOIN ( R [ Kindred Britain ID ] ) [ William Bentinck, 3rd Duke of Portland ] )",
            "( JOIN ( R [ KindredBritain ID ] ) [ William Cavendish-Bentinck, 3rd Duke of Portland ] )",
            "( AND ( JOIN [ KINDRED Britain ID ] [ William Cavendish-Bentinck, 3rd Duke of Portland ] ) NOT ( JOIN ( R [ member of ] ) [ William Cavendish-Bentinck, 3rd Duke of Portland ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Kindred Britain ID ] ) [ William Cavendish-Bentinck, 3rd Duke of Portland ] )"
    },
    {
        "question": "Question: { WHAT IS  DIFFERENT FROM OF SEA ICE }",
        "predicted_query": [
            "( JOIN [ different from ] [ sea ice ] )",
            "( JOIN ( R [ different from ] ) ( JOIN ( R [ type of ] ) [ sea ice ] ) )",
            "( JOIN ( R [ different from ] ) [ sea ice ] )",
            "( JOIN [ different from ] [ sea ice ] )",
            "( AND ( JOIN [ differs from ] [ sea ice ] ) ( JOIN ( R [ different from ] ) [ sea ice ] ) )"
        ],
        "gen_label": "( JOIN ( R [ different from ] ) [ sea ice ] )"
    },
    {
        "question": "Question: { What is the NHL Player ID of Jaromír Jágr on HHOF.com? }",
        "predicted_query": [
            "( JOIN ( R [ Hockey Hall of Fame player ID ] ) [ Jaromír Jágr ] )",
            "[R JOIN [NHL Player ID] [Jaromír Jágr]]",
            "( JOIN ( R [ Hockey Hall of Fame ID ] ) ( JOIN ( R [ NHL player ID ] ) [ Jaromír Jágr ] ) )",
            "[R JOIN [NHL Player ID] [Jaromír Jágr]]",
            "( JOIN ( R [ Hockey Hall of Fame player ID ] ) [ Jaromír Jágr ] )"
        ],
        "gen_label": "( JOIN ( R [ HHOF.com NHL player ID ] ) [ Jaromír Jágr ] )"
    },
    {
        "question": "Question: { WHO IS PRECEDED BY THE PUBLIC LOCATION OF DECLARATION OF THE RIGHTS OF MAN AND OF THE CITIZEN }",
        "predicted_query": [
            "( JOIN ( R [ preceded by ] ) ( JOIN ( R [ place of declaration ] ) [ Declaration of the Rights of Man and of the Citizen ] ) )",
            "[ JOIN [ has predecessor ] [ place of declaration ] [ Declaration of",
            "( JOIN ( R [ located in ] ) ( JOIN ( R [ preceded by ] ) [ Declaration of the Rights of Man and of the Citizen ] ) )",
            "( JOIN ( R [ preceded by ] ) ( JOIN ( R [ place of declaration ] ) [ Declaration of the Rights of Man and of the Citizen ] ) )",
            "( JOIN [ preceded by ] [ Declaration of the Rights of Man and of the Citizen ] )"
        ],
        "gen_label": "( JOIN ( R [ replaces ] ) ( JOIN ( R [ place of publication ] ) [ Declaration of the Rights of Man and of the Citizen ] ) )"
    },
    {
        "question": "Question: { Who is the mother of Ashurbanipal? }",
        "predicted_query": [
            "( JOIN [ mother ] [ Ashurbanipal ] )",
            "( JOIN ( R [ mother ] ) [ Ashurbanipal ] )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ parent of ] ) [ Ashurbanipal ] ) )",
            "( JOIN ( R [ father ] ) [ Ashurbanipal ] )",
            "( JOIN [ mother ] [ Ashurbanipal ] )"
        ],
        "gen_label": "( JOIN ( R [ mother ] ) [ Ashurbanipal ] )"
    },
    {
        "question": "Question: { good }",
        "predicted_query": [
            "[ JOIN ( R [ good ] ) ]",
            "( JOIN [ good ] [ The Good Place ] )",
            "( JOIN ( R [ good for ] ) [ 1984 ] )",
            "( AND ( JOIN [ has good or services provided ] [ good ] ) ( JOIN ( R [ has a physical location ] ) [ good ] ) )",
            "[ JOIN ( R [ good ] ) [ 1984 ] ]"
        ],
        "gen_label": "( AND ( JOIN [ twinned administrative body ] [ Pyongyang ] ) ( JOIN ( R [ place of death ] ) [ Feodor III of Russia ] ) )"
    },
    {
        "question": "Question: { Mention the year of establishment of Chiropractic }",
        "predicted_query": [
            "( JOIN ( R [ founded ] ) ( JOIN ( R [ practiced by ] ) [ chiropractic ] ) )",
            "( JOIN [ year of establishment ] [ chiropractic ] )",
            "( JOIN ( R [ founded by ] ) [ chiropractic ] )",
            "( JOIN ( R [ year of establishment ] ) [ chiropractic ] )",
            "( JOIN [ year of establishment ] [ chiropractic ] )"
        ],
        "gen_label": "( JOIN ( R [ date of birth ] ) ( JOIN ( R [ founded by ] ) [ chiropractic ] ) )"
    },
    {
        "question": "Question: { Which is the Unz Review author identifier for Sherwood Anderson? }",
        "predicted_query": [
            "( JOIN ( R [ Unz Review author ID ] ) [ Sherwood Anderson ] )",
            "( JOIN ( R [ Unz Review author identifier ] ) [ Sherwood Anderson ] )",
            "[join] [has [Unz Review author identifier]] [Sherwood Anderson]",
            "[Répertoire des auteurs de la Bibliothèque nationale de France]",
            "( JOIN ( R [ Unz.org author ID ] ) [ Sherwood Anderson ] )"
        ],
        "gen_label": "( JOIN ( R [ Unz Review author ID ] ) [ Sherwood Anderson ] )"
    },
    {
        "question": "Question: { Singin' in the Rain has what Discogs master ID? }",
        "predicted_query": [
            "( JOIN ( R [ Discogs master ID ] ) [ Singin' in the Rain ] )",
            "( AND ( JOIN [ Discogs artist ID ] [ Singin' in the Rain ] ) ( JOIN ( R [ ID ] ) [ Singin' in the Rain ] ) )",
            "( AND ( JOIN [ Discog master ID ] [ Singin' in the Rain ] ) ( JOIN ( R [ ID ] ) [ Singin' in the Rain ] ) )",
            "( JOIN ( R [ Discogs master ID ] ) [ Singin' in the Rain ] )",
            "( JOIN ( R [ Discogs master artist ID ] ) [ Singin' in the Rain ] )"
        ],
        "gen_label": "( JOIN ( R [ Discogs master ID ] ) [ Singin' in the Rain ] )"
    },
    {
        "question": "Question: { What is the vaccine for Influenza? }",
        "predicted_query": [
            "( JOIN ( R [ vaccine ] ) [ influenza ] )",
            "( JOIN [ vaccine for ] [ influenza ] )",
            "( JOIN [ vaccine ] [ influenza ] )",
            "( JOIN ( R [ drug or therapy used for treatment ] ) ( JOIN ( R [ drug or therapy used for treatment ] ) [ influenza ] ) )",
            "( JOIN ( R [ vaccine ] ) [ Influenza ] )"
        ],
        "gen_label": "( JOIN ( R [ vaccine for ] ) [ influenza vaccine ] )"
    },
    {
        "question": "Question: { Where does the diplomat of Weekly Shonen Jump come from? }",
        "predicted_query": [
            "( JOIN ( R [ diplomat ] ) ( JOIN ( R [ place of work ] ) [ Weekly Shonen Jump ] ) )",
            "( AND ( JOIN [ diplomatic relations ] [ Weekly Shonen Jump ] ) ( JOIN ( R [ place of work ] ) [ Weekly Shonen Jump ] ) )",
            "( JOIN [ diplomat ] [ Weekly Shonen Jump ] ) AND ( JOIN ( R [ located in the administrative territorial entity ] ) [ Weekly Shonen Jump ] )",
            "( JOIN ( R [ diplomat ] ) ( JOIN ( R [ publisher ] ) [ Weekly Shonen Jump ] ) )",
            "( AND ( JOIN [ location of headquarters ] [ Weekly Shōnen Jump ] ) ( JOIN ( R [ diplomat ] ) [ Weekly Shōnen Jump ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country of origin ] ) [ Weekly Shōnen Jump ] ) )"
    },
    {
        "question": "Question: { What is the symbol for pi? }",
        "predicted_query": [
            "( JOIN [ symbol ] [ pi ] )",
            "( JOIN ( R [ symbol ] ) [ pi ] )",
            "( JOIN ( R [ symbol ] ) [ π ] )",
            "( JOIN ( R [ chemical formula ] ) [ pi ] )",
            "( AND ( JOIN [ symbol or sign ] [ π ] ) ( JOIN ( R [ follows ] ) [ pi ] ) )"
        ],
        "gen_label": "( JOIN [ symbolizes ] [ pi ] )"
    },
    {
        "question": "Question: { What is the Nickel-Strunz \"Tenth Edition\" review (of the Ninth Edition/ 2009 update) of the epidote? }",
        "predicted_query": [
            "( JOIN ( R [ Nickel Strunz review of the Ninth Edition/ 2009 update ] ) [ epidote ] )",
            "( AND ( JOIN [ updated version ] [ Ninth Edition/2009 update ] ) ( JOIN ( R [ reviewed by ] ) [ Nickel-Strunz 10th Edition ] ) )",
            "( JOIN ( R [ Nickel-Strunz \"Tenth Edition\" review ] ) [ epidote ] )",
            "( AND ( JOIN [ reviewed by ] [ Nickel-Strunz Tenth Edition ] ) ( JOIN ( R [ updated ] ) [ epidote ] ) )",
            "( JOIN ( R [ Nickel-Strunz review ( 10th edition ) ] ) [ epidote ] )"
        ],
        "gen_label": "( JOIN ( R [ Nickel-Strunz '10th ed', review of ( 9th ed/ 2009 update ) ] ) [ epidote ] )"
    },
    {
        "question": "Question: { Which disease is cured by Folic acid? }",
        "predicted_query": [
            "( JOIN ( R [ cured disease ] ) [ folic acid ] )",
            "( JOIN ( R [ disease treated by ] ) ( JOIN ( R [ drug ] ) [ folic acid ] ) )",
            "( AND ( JOIN [ treated for ] [ folic acid ] ) ( JOIN ( R [ disease or medical condition ] ) [ folic acid ] ) )",
            "( JOIN [ cured by ] [ folic acid ] )",
            "( JOIN [ disease cured by ] [ folic acid ] )"
        ],
        "gen_label": "( JOIN ( R [ health specialty ] ) ( JOIN ( R [ medical condition treated ] ) [ folic acid ] ) )"
    },
    {
        "question": "Question: { Which is the DSSTOX substance identifier for magnesium chloride anhydrous? }",
        "predicted_query": [
            "( JOIN ( R [ DSSTOX substance identifier ] ) [ magnesium chloride anhydrous ] )",
            "( AND ( JOIN [ ChemSpider substance ID ] [ magnesium chloride anhydrous ] ) ( JOIN ( R [ DSSTOX substance ID ] ) [ magnesium chloride anhydrous ] ) )",
            "( JOIN ( R [ DSSTOX substance ID ] ) [ magnesium chloride anhydrous ] )",
            "( JOIN [ DSSTOX substance identifier ] [ magnesium chloride anhydrous ] )",
            "( JOIN ( R [ DSSTOX substance identifier ] ) [ magnesium chloride anhydrous ] )"
        ],
        "gen_label": "( JOIN ( R [ DSSTox substance ID ] ) [ magnesium chloride ] )"
    },
    {
        "question": "Question: { Who are the children in the painting of Venus de' Medici? }",
        "predicted_query": [
            "( JOIN ( R [ child ] ) ( JOIN ( R [ depicts ] ) [ Venus de' Medici ] ) )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ artist ] ) [ Venus de' Medici ] ) )",
            "( JOIN ( R [ has child ] ) ( JOIN ( R [ depicts ] ) [ Venus de' Medici ] ) )",
            "( JOIN ( R [ parent of ] ) ( JOIN ( R [ depicts ] ) [ Venus de' Medici ] ) )",
            "( AND ( JOIN [ parent of ] [ Venus de' Medici ] ) ( JOIN ( R [ child ] ) [ Venus de' Medici ] ) )"
        ],
        "gen_label": "( JOIN ( R [ child ] ) ( JOIN ( R [ depicts ] ) [ Venus de' Medici ] ) )"
    },
    {
        "question": "Question: { What is the faculty of Harvard Art Museum that has the subsidiary Jamie Dimon? }",
        "predicted_query": [
            "( AND ( JOIN [ subsidiary ] [ Jamie Dimon ] ) ( JOIN ( R [ faculty member ] ) [ Harvard Art Museums ] ) )",
            "( AND ( JOIN [ subsidiary ] [ JPMorgan Chase ] ) ( JOIN ( R [ faculty member ] ) [ Harvard Art Museums ] ) )",
            "( AND ( JOIN [ faculty ] [ Jamie Dimon ] ) ( JOIN ( R [ located in ] ) [ Harvard Art Museums ] ) )",
            "( AND ( JOIN [ parent faculty or institution ] [ J. P. Morgan Chase ] ) ( JOIN ( R [ faculty member ] ) [ Jamie Dimon ] ) )",
            "( AND ( JOIN [ subsidiary of ] [ Jamie Dimon ] ) ( JOIN ( R [ faculty member ] ) [ Harvard Art Museums ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ has subsidiary ] [ Harvard Art Museums ] ) ( JOIN ( R [ educated at ] ) [ Jamie Dimon ] ) )"
    },
    {
        "question": "Question: { What is the temperature of Triton? }",
        "predicted_query": [
            "( JOIN ( R [ temperature ] ) [ Triton ] )",
            "( JOIN ( R [ temperature ] ) [ Triton ] )",
            "( JOIN [ temperature ] [ Triton ] )",
            "[]",
            "( [ joined by ] [ temperature ] )"
        ],
        "gen_label": "( JOIN ( R [ temperature ] ) [ Triton ] )"
    },
    {
        "question": "Question: { Which {category of associated people} of {sister city} of {Zhuhai} ? }",
        "predicted_query": [
            "( JOIN ( R [ category of associated people ] ) ( JOIN ( R [ twinned administrative body ] ) [ Zhuhai ] ) )",
            "( AND ( JOIN [ sister city ] [ Zhuhai ] ) ( JOIN ( R [ category of this person ] ) [ Zhuhai ] ) )",
            "( JOIN [ category of associated people ] [ Zhuhai ] )",
            "( JOIN ( R [ category of associated people ] ) ( JOIN ( R [ twinned administrative body ] ) [ Zhuhai ] ) )",
            "( JOIN ( R [ category of associated people ] ) ( JOIN ( R [ twinned administrative body ] ) [ Zhuhai ] ) )"
        ],
        "gen_label": "( JOIN ( R [ category of associated people ] ) ( JOIN ( R [ twinned administrative body ] ) [ Zhuhai ] ) )"
    },
    {
        "question": "Question: { What is Gordon Brown's Journalist ID? }",
        "predicted_query": [
            "( JOIN ( R [ Journalist ID ] ) [ Gordon Brown ] )",
            "[Historical Logical Form Query]",
            "[ JOIN ] [ Journalist ID ] [ Gordon Brown ]",
            "( AND ( JOIN [ journalist ID ] [ Gordon Brown ] ) ( JOIN ( R [ ID ] ) [ Gordon Brown ] ) )",
            "( JOIN [ Journalist ID ] [ Gordon Brown ] )"
        ],
        "gen_label": "( JOIN ( R [ Journalisted ID ] ) [ Gordon Brown ] )"
    },
    {
        "question": "Question: { What is the local dialing code for Panjin? }",
        "predicted_query": [
            "( JOIN ( R [ local dialing code ] ) [ Panjin ] )",
            "( JOIN ( R [ country calling code ] ) ( JOIN ( R [ country ] ) [ Panjin ] ) )",
            "( JOIN [ local dialing code ] [ Panjin ] )",
            "[what is the local dialing code for Panjin]",
            "( JOIN ( R [ telephone dialling plan code ] ) [ Panjin ] )"
        ],
        "gen_label": "( JOIN ( R [ local dialing code ] ) [ Panjin ] )"
    },
    {
        "question": "Question: { Karisma Kapoor is considered top dog in which of the medals of Rakhee Gulzar? }",
        "predicted_query": [
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ awarded to ] ) [ Karisma Kapoor ] ) )",
            "( AND ( JOIN [ winner ] [ Rakhee Gulzar ] ) ( JOIN ( R [ award received ] ) [ Karisma Kapoor ] ) )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ contains the medal ] ) [ Rakhee Gulzar ] ) )",
            "( AND ( JOIN [ award received ] [ Rakhee Gulzar ] ) ( JOIN ( R [ award received ] ) [ Karisma Kapoor ] ) )",
            "( JOIN [ winner ] [ Rakhee Gulzar ] ) ( JOIN ( R [ award received ] ) [ Karisma Kapoor ] )"
        ],
        "gen_label": "( AND ( JOIN [ winner ] [ Karisma Kapoor ] ) ( JOIN ( R [ award received ] ) [ Rakhee Gulzar ] ) )"
    },
    {
        "question": "Question: { Which is the ESPN.com NFL player ID for Kurt Warner? }",
        "predicted_query": [
            "[ JOIN ( R [ ESPN.com NFL player ID ] ) ]",
            "The SQL query that joins the NFL player ID from ESPN.com, is: ",
            "( JOIN ( R [ ESPN.com NFL player ID ] ) [ Kurt Warner ] )",
            "( JOIN ( R [ ESPN.com NFL player ID ] ) [ Kurt Warner ] )",
            "( JOIN ( R [ ESPN NFL Player ID ] ) [ Kurt Warner ] )"
        ],
        "gen_label": "( JOIN ( R [ ESPN.com NFL player ID ] ) [ Kurt Warner ] )"
    },
    {
        "question": "Question: { What is representative of those active in Harry Potter? }",
        "predicted_query": [
            "( AND ( JOIN [ occupation ] [ actor ] ) ( JOIN ( R [ notable work ] ) [ Harry Potter ] ) )",
            "[ JOIN [ representative of ] [ Harry Potter ] ]",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ notable work ] ) [ Harry Potter ] ) )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ genre ] ) [ Harry Potter ] ) )",
            "( JOIN [ member of ] [ Harry Potter ] )"
        ],
        "gen_label": "( JOIN ( R [ depicts ] ) ( JOIN ( R [ work location ] ) [ Harry Potter ] ) )"
    },
    {
        "question": "Question: { Cathedral of Christ the Saviour was replaced by what structure? }",
        "predicted_query": [
            "( JOIN [ replaced by structure ] [ Cathedral of Christ the Saviour ] )",
            "( JOIN ( R [ replaced by ] ) ( JOIN ( R [ architect ] ) [ Cathedral of Christ the Saviour ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Moscow ] ) ( JOIN ( R [ replaced by ] ) [ Cathedral of Christ the Saviour ] ) )",
            "( JOIN ( R [ replaced by structure ] ) ( JOIN ( R [ architect ] ) [ Cathedral of Christ the Saviour ] ) )",
            "( AND ( JOIN [ replaced by ] [ Cathedral of Christ the Saviour ] ) ( JOIN ( R [ replaced by ] ) [ Cathedral of Christ the Saviour ] ) )"
        ],
        "gen_label": "( JOIN [ structure replaces ] [ Cathedral of Christ the Saviour ] )"
    },
    {
        "question": "Question: { Who is in voivodership of Asyut Governorate, that has diplomatic relations in Russia? }",
        "predicted_query": [
            "( AND ( JOIN [ diplomatic relations ] [ Russia ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Asyut Governorate ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Asyut Governorate ] ) ( JOIN ( R [ diplomatic relations ] ) [ Russia ] ) )",
            "( AND ( JOIN [ has diplomatic relations ] [ Russia ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Asyut Governorate ] ) )",
            "( AND ( JOIN [ diplomatic relation ] [ Russia ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Asyut Governorate ] ) )",
            "( AND ( JOIN [ has diplomatic relations ] [ Russia ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Asyut Governorate ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ diplomatic relation ] [ Russia ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Asyut Governorate ] ) )"
    },
    {
        "question": "Question: { What is the municipal council of diplomatic relations for the Turkish Republic of Northern Cyprus? }",
        "predicted_query": [
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ diplomatic relations ] ) [ Turkish Republic of Northern Cyprus ] ) )",
            "( JOIN [ diplomatic relations ] [ Turkish Republic of Northern Cyprus ] )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ diplomatic relations ] ) [ Turkish Republic of Northern Cyprus ] ) )",
            "( AND ( JOIN [ diplomatic relations ] [ Turkish Republic of Northern Cyprus ] ) ( JOIN ( R [ member of ] ) [ Turkish Republic of Northern Cyprus ] ) )",
            "( AND ( JOIN [ diplomatic relations ] [ Turkish Republic of Northern Cyprus ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ North Cyprus ] ) )"
        ],
        "gen_label": "( JOIN ( R [ legislative body ] ) ( JOIN ( R [ diplomatic relation ] ) [ Northern Cyprus ] ) )"
    },
    {
        "question": "Question: { What nation was made by WWE Raw? }",
        "predicted_query": [
            "( JOIN ( R [ country ] ) ( JOIN ( R [ home country ] ) [ WWE Raw ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ WWE Raw ] ) ( JOIN ( R [ country of origin ] ) [ WWE Raw ] ) )",
            "( JOIN [ country of origin ] [ WWE Raw ] )",
            "( AND ( JOIN [ member of ] [ WWE Raw ] ) ( JOIN ( R [ country ] ) [ WWE Raw ] ) )",
            "( JOIN [ located in the administrative territorial entity ] [ WWE Raw ] )"
        ],
        "gen_label": "( JOIN ( R [ country of citizenship ] ) ( JOIN ( R [ creator ] ) [ WWE Raw ] ) )"
    },
    {
        "question": "Question: { Who curated the museum collection of Fez? }",
        "predicted_query": [
            "( JOIN ( R [ curator ] ) ( JOIN ( R [ collection ] ) [ Fez ] ) )",
            "( JOIN [ curated by ] [ Fez ] )",
            "( JOIN ( R [ curated by ] ) [ Fez ] )",
            "( JOIN ( R [ collection curated by ] ) [ Fez ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Fez ] ) ( JOIN ( R [ curator ] ) [ Museum of Fez ] ) )"
        ],
        "gen_label": "( JOIN ( R [ creator ] ) ( JOIN ( R [ collection ] ) [ Fez ] ) )"
    },
    {
        "question": "Question: { What does Lion of Venice manufacture that is not brass? }",
        "predicted_query": [
            "( AND ( JOIN [ product or service ] [ brass ] ) ( JOIN ( R [ manufacturer ] ) [ Lion of Venice ] ) )",
            "( AND ( JOIN [ material ] [ brass ] ) ( JOIN ( R [ manufacturer or distributor ] ) [ Lion of Venice ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Venice ] ) ( JOIN ( R [ manufacturer ] ) [ Lion ] ) )",
            "( AND ( JOIN [ product or service provided ] [ brass ] ) ( JOIN ( R [ manufacturer ] ) [ Lion of Venice ] ) )",
            "( JOIN [ manufactured from material ] [ brass ] ) ( JOIN ( R [ manufacturer ] ) [ Lion of Venice ] )"
        ],
        "gen_label": "( AND ( JOIN [ different from ] [ brass ] ) ( JOIN ( R [ made from material ] ) [ Lion of Venice ] ) )"
    },
    {
        "question": "Question: { WHICH IS THE OFFERES VIEW FOR SIERRA NEVADA }",
        "predicted_query": [
            "[ JOIN ( R [ offers view ] ) ]",
            "[ JOIN [ offerer's view ] ] [ Sierra Nevada ] ",
            "{ JOIN [ offers view ] [ Sierra Nevada ] }",
            "( [ has offerer ] [ Sierra Nevada ] )",
            "( JOIN ( R [ offerer view ] ) [ Sierra Nevada ] )"
        ],
        "gen_label": "( JOIN [ offers view on ] [ Sierra Nevada ] )"
    },
    {
        "question": "Question: { Which is the New York City Landmarks Preservation Commission ID for Chrysler Building? }",
        "predicted_query": [
            "( JOIN ( R [ New York City Landmarks Preservation Commission ID ] ) [ Chrysler Building ] )",
            "( JOIN ( R [ New York City Landmarks Preservation Commission ID ] ) [ Chrysler Building ] )",
            "( JOIN ( R [ New York City Landmarks Preservation Commission identification number ] ) [ Chrysler Building ] )",
            "( JOIN ( R [ New York City Landmarks Preservation Commission ID ] ) [ Chrysler Building ] )",
            "( JOIN ( R [ New York City Landmarks Preservation Commission ID ] ) [ Chrysler Building ] )"
        ],
        "gen_label": "( JOIN ( R [ New York City Landmarks Preservation Commission ID ] ) [ Chrysler Building ] )"
    },
    {
        "question": "Question: { who member  of graduated from of regna darnell? }",
        "predicted_query": [
            "( JOIN [ graduated from ] [ Regna Darnell ] )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ graduated from ] ) [ Regna Darnell ] ) )",
            "( JOIN ( R [ graduate of ] ) ( JOIN ( R [ member of ] ) [ Regna Darnell ] ) )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ graduate of ] ) [ Regna Darnell ] ) )",
            "( AND ( JOIN [ graduated from ] [ Regna Darnell ] ) ( JOIN ( R [ member of ] ) [ Regna Darnell ] ) )"
        ],
        "gen_label": "( JOIN ( R [ member of ] ) ( JOIN ( R [ educated at ] ) [ Regna Darnell ] ) )"
    },
    {
        "question": "Question: { What is the diplomatic relation of the birthplace of Over the Rainbow? }",
        "predicted_query": [
            "( JOIN [ diplomatic relation ] [ Over the Rainbow ] )",
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ place of birth ] ) [ Over the Rainbow ] ) )",
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country of origin ] ) [ Over the Rainbow ] ) )",
            "( AND ( JOIN [ diplomatic relations ] [ diplomatic relations of the United States ] ) ( JOIN ( R [ place of birth ] ) [ Over the Rainbow ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Over the Rainbow ] ) ( JOIN ( R [ diplomatic relation ] ) [ birthplace ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country of origin ] ) [ Over the Rainbow ] ) )"
    },
    {
        "question": "Question: { Where is the birthplace of Urban VI which is adjacent to San Giorgio a Crremano? }",
        "predicted_query": [
            "( AND ( JOIN [ shares border with ] [ San Giorgio a Cremano ] ) ( JOIN ( R [ place of birth ] ) [ Urban VI ] ) )",
            "( JOIN ( R [ shares border with ] ) ( JOIN [ question ] [ Where is the birthplace of Urban VI? ] ) )",
            "( AND ( JOIN [ shares border with ] [ San Giorgio a Cremano ] ) ( JOIN ( R [ place of death ] ) [ Pope Urban VI ] ) )",
            "( AND ( JOIN [ shares border with ] [ San Giorgio a Cremano ] ) ( JOIN ( R [ place of birth ] ) [ Urban VI ] ) )",
            "( AND ( JOIN [ shares border with ] [ San Giorgio a Cremano ] ) ( JOIN ( R [ location ] ) [ Urban VI ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ shares border with ] [ San Giorgio a Cremano ] ) ( JOIN ( R [ place of birth ] ) [ Urban VI ] ) )"
    },
    {
        "question": "Question: { Who is {partners} of {contestant} {Devar} ? }",
        "predicted_query": [
            "( JOIN ( R [ partner ] ) ( JOIN ( R [ participant ] ) [ Devar ] ) )",
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ participant ] ) [ Devar ] ) )",
            "( JOIN ( R [ partner ] ) ( JOIN ( R [ contestant ] ) [ Devar ] ) )",
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ winner ] ) [ Devil's Advocate ] ) )",
            "( AND ( JOIN [ contestant ] [ Devar ] ) ( JOIN ( R [ partner ] ) [ Siddhartha Gautama ] ) )"
        ],
        "gen_label": "( JOIN ( R [ spouse ] ) ( JOIN ( R [ cast member ] ) [ Devar ] ) )"
    },
    {
        "question": "Question: { What university did the children of Paul Ernest attend? }",
        "predicted_query": [
            "( JOIN ( R [ university ] ) ( JOIN ( R [ parent ] ) [ Paul Ernest ] ) )",
            "( JOIN [ attended by ] [ Paul Ernest ] )",
            "( JOIN ( R [ institution ] ) ( JOIN ( R [ student of ] ) [ Paul Ernest ] ) )",
            "( AND ( JOIN [ student of ] [ Paul Ernest ] ) ( JOIN ( R [ place of death ] ) [ Paul Ernest ] ) )",
            "( JOIN [ university attended ] [ Paul Ernest ] )"
        ],
        "gen_label": "( JOIN ( R [ educated at ] ) ( JOIN ( R [ child ] ) [ Paul Ernest ] ) )"
    },
    {
        "question": "Question: { What   is agent in   action of James C. Marshall ? }",
        "predicted_query": [
            "( JOIN ( R [ agent ] ) ( JOIN ( R [ participant ] ) [ James C. Marshall ] ) )",
            "[ JOIN ( R [ participant in work ] ) ]",
            "( JOIN [ agent in ] [ action of ] )",
            "( JOIN ( R [ agent ] ) ( JOIN ( R [ participant in work ] ) [ James C. Marshall ] ) )",
            "( JOIN ( R [ has participant ] ) ( JOIN ( R [ occupation ] ) [ James C. Marshall ] ) )"
        ],
        "gen_label": "( JOIN ( R [ participant ] ) ( JOIN ( R [ conflict ] ) [ James C. Marshall ] ) )"
    },
    {
        "question": "Question: { What is the NAIF ID for Titania? }",
        "predicted_query": [
            "( JOIN ( R [ NAIF ID ] ) [ Titania ] )",
            "[Challenge/Question History]",
            "### Historical Logical Form Query Cardinality Added:",
            "( JOIN ( R [ NAIF ID ] ) [ Titania ] )",
            "( AND ( JOIN [ NAIF catalog ID ] [ Titania ] ) ( JOIN ( R [ ID ] ) [ Titania ] ) )"
        ],
        "gen_label": "( JOIN ( R [ NAIF ID ] ) [ Titania ] )"
    },
    {
        "question": "Question: { Which carries scientific instrument for Wide-field Infrared Survey Explorer? }",
        "predicted_query": [
            "( JOIN ( R [ carries scientific instrument ] ) [ Wide-field Infrared Survey Explorer ] )",
            "( JOIN ( R [ has scientific instrument ] ) ( JOIN ( R [ discoverer ] ) [ Wide-field Infrared Survey Explorer ] ) )",
            "( JOIN [ carries scientific instrument ] [ Wide-field Infrared Survey Explorer ] )",
            "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ manufacturer ] ) [ Wide-field Infrared Survey Explorer ] ) )",
            "( AND ( JOIN [ carries ] [ Wide-field Infrared Survey Explorer ] ) ( JOIN ( R [ manufactured by ] ) [ Wide-field Infrared Survey Explorer ] ) )"
        ],
        "gen_label": "( JOIN ( R [ carries scientific instrument ] ) [ Wide-field Infrared Survey Explorer ] )"
    },
    {
        "question": "Question: { Walt Disney is apart of what production company? }",
        "predicted_query": [
            "( JOIN ( R [ employer ] ) ( JOIN ( R [ producer ] ) [ Walt Disney ] ) )",
            "( JOIN ( R [ company ] ) ( JOIN ( R [ employer ] ) [ Walt Disney ] ) )",
            "( AND ( JOIN [ member of ] [ Walt Disney Animation Studios ] ) ( JOIN ( R [ founded by ] ) [ Walt Disney Animation Studios ] ) )",
            "( JOIN [ part of ] [ Walt Disney Company ] )",
            "( JOIN [ company ] [ Walt Disney ] )"
        ],
        "gen_label": "( JOIN [ production company ] [ The Walt Disney Company ] )"
    },
    {
        "question": "Question: { I need to know Tom Hiddleston's Elonet ID. }",
        "predicted_query": [
            "( JOIN ( R [ Elonet ID ] ) [ Tom Hiddleston ] )",
            "[ JOIN ( R [ Elonet ID ] ) ]",
            "( AND ( JOIN [ ID.br ] [ Tom Hiddleston ] ) ( JOIN ( R [ Elonet ID ] ) [ Tom Hiddleston ] ) )",
            "( AND ( JOIN [ Elonet ID ] [ Tom Hiddleston ] ) ( JOIN ( R [ ID.net ID ] ) [ Tom Hiddleston ] ) )",
            "( JOIN ( R [ Elonet ID ] ) [ Tom Hiddleston ] )"
        ],
        "gen_label": "( JOIN ( R [ Elonet person ID ] ) [ Tom Hiddleston ] )"
    },
    {
        "question": "Question: { What actress played Marie Schrader? }",
        "predicted_query": [
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ character ] ) [ Marie Schrader ] ) )",
            "( JOIN ( R [ cast member ] ) [ Marie Schrader ] )",
            "( AND ( JOIN [ occupation ] [ actress ] ) ( JOIN ( R [ portrayed by ] ) [ Marie Schrader ] ) )",
            "[ ( JOIN ( R [ performed by ] ) [ Marie",
            "( JOIN ( JOIN ( R [ cast member ] ) [ Marie Schrader ] ) )"
        ],
        "gen_label": "( JOIN ( R [ cast member ] ) ( JOIN ( R [ present in work ] ) [ Marie Schrader ] ) )"
    },
    {
        "question": "Question: { What is the Deezer ID for the album \"Kind of Blue\"? }",
        "predicted_query": [
            "( JOIN ( R [ Deezer artist ID ] ) [ Kind of Blue ] )",
            "( JOIN ( R [ Deezer artist ID ] ) [ Kind of Blue ] )",
            "( [ JOIN ] [ Kind of Blue ] )",
            "( JOIN ( R [ Deezer ID ] ) [ Kind of Blue ] )",
            "( AND ( JOIN [ Discogs artist ID ] [ Kind of Blue ] ) ( JOIN ( R [ Deezer artist ID ] ) [ Kind of Blue ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Deezer album ID ] ) [ Kind of Blue ] )"
    },
    {
        "question": "Question: { What is Engelbert Humperdinck's NE.se ID? }",
        "predicted_query": [
            "[ JOIN [ NE.se ID ] ] [ Engelbert Humperdinck ]",
            "( JOIN ( R [ NE.se ID ] ) [ Engelbert Humperdinck ] )",
            "( JOIN ( R [ Engelbert Humperdinck's NE.se ID ] ) [ Engelbert Humperdinck ] )",
            "( AND ( JOIN [ National Education Service ( SE) ID ] [ Engelbert Humperdinck ] ) [ National Education Service ( SE) ID ] )",
            "( JOIN [ NE.se ID ] [ Engelbert Humperdinck ] )"
        ],
        "gen_label": "( JOIN ( R [ NE.se ID ] ) [ Engelbert Humperdinck ] )"
    },
    {
        "question": "Question: { What is arterial supply of aorta ? }",
        "predicted_query": [
            "( JOIN [ arterial supply ] [ aorta ] )",
            "( JOIN ( R [ arterial supply ] ) [ aorta ] )",
            "( JOIN ( R [ has arterial supply ] ) [ aorta ] )",
            "( JOIN [ arterial supply ] [ aorta ] )",
            "( JOIN ( R [ arterial supply ] ) [ aorta ] )"
        ],
        "gen_label": "( JOIN [ arterial supply ] [ aorta ] )"
    },
    {
        "question": "Question: { Who developed Space Invaders? }",
        "predicted_query": [
            "( JOIN ( R [ developed by ] ) ( JOIN ( R [ developer ] ) [ Space Invaders ] ) )",
            "( JOIN [ developed by ] [ Space Invaders ] )",
            "( JOIN ( R [ developer ] ) [ Space Invaders ] )",
            "( JOIN ( R [ developed by ] ) [ Space Invaders ] )",
            "( JOIN [ developed ] [ Space Invaders ] )"
        ],
        "gen_label": "( JOIN ( R [ inception ] ) ( JOIN ( R [ developer ] ) [ Space Invaders ] ) )"
    },
    {
        "question": "Question: { What is the nationality of Katharine Hayhoe? }",
        "predicted_query": [
            "( JOIN ( R [ nationality ] ) ( JOIN ( R [ place of birth ] ) [ Katharine Hayhoe ] ) )",
            "( JOIN [ nationality ] [ Katharine Hayhoe ] )",
            "( JOIN ( R [ country of citizenship ] ) [ Katharine Hayhoe ] )",
            "( JOIN ( R [ nationality ] ) [ Katharine Hayhoe ] )",
            "( JOIN ( R [ nationality ] ) ( JOIN ( R [ spouse ] ) [ Katharine Hayhoe ] ) )"
        ],
        "gen_label": "( JOIN ( R [ population ] ) ( JOIN ( R [ country of citizenship ] ) [ Katharine Hayhoe ] ) )"
    },
    {
        "question": "Question: { What country was Erin Andrews a citizen of? }",
        "predicted_query": [
            "( JOIN [ country of citizenship ] [ Erin Andrews ] )",
            "( JOIN ( R [ country of citizenship ] ) ( JOIN ( R [ place of birth ] ) [ Erin Andrews ] ) )",
            "( JOIN ( R [ country of citizenship ] ) ( JOIN ( R [ sport ] ) [ Erin Andrews ] ) )",
            "( AND ( JOIN [ diplomatic representation ] [ United States ] ) ( JOIN ( R [ country of citizenship ] ) [ Erin Andrews ] ) )",
            "( JOIN ( R [ country of citizenship ] ) [ Erin Andrews ] )"
        ],
        "gen_label": "( JOIN ( R [ population ] ) ( JOIN ( R [ country of citizenship ] ) [ Erin Andrews ] ) )"
    },
    {
        "question": "Question: { Which is the measured physical quantity for luminous flux? }",
        "predicted_query": [
            "( JOIN [ measured physical quantity ] [ luminous flux ] )",
            "( JOIN ( R [ measured physical quantity ] ) [ luminous flux ] )",
            "( JOIN ( R [ physical quantity ] ) [ luminous flux ] )",
            "( JOIN ( R [ measured physical quantity ] ) [ luminous flux ] )",
            "( JOIN [ measured physical quantity ] [ luminous flux ] )"
        ],
        "gen_label": "( JOIN [ measured physical quantity ] [ luminous flux ] )"
    },
    {
        "question": "Question: { Who is the male lead actor in the movie \"Brokeback Mountain?\" }",
        "predicted_query": [
            "( JOIN ( R [ male lead actor ] ) [ Brokeback Mountain ] )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ based on work ] ) [ Brokeback Mountain ] ) )",
            "( JOIN [ male lead actor ] [ Brokeback Mountain ] )",
            "( AND ( JOIN [ cast member ] [ Heath Ledger ] ) ( JOIN ( R [ based on work ] ) [ Brokeback Mountain ] ) )",
            "( JOIN ( R [ lead actor ] ) [ Brokeback Mountain ] )"
        ],
        "gen_label": "( AND ( JOIN [ sex or gender ] [ male ] ) ( JOIN ( R [ cast member ] ) [ Brokeback Mountain ] ) )"
    },
    {
        "question": "Question: { What is {diplomatic relation} of {Seychelles}, that has {subdivided into}  {Tianjin} ?\" }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Tianjin ] ) ( JOIN ( R [ diplomatic relation ] ) [ Seychelles ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Tianjin ] ) ( JOIN ( R [ diplomatic relations ] ) [ Seychelles ] ) )",
            "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ diplomatic relation ] ) [ Seychelles ] ) )",
            "( JOIN [ diplomatic relation ] [ Tianjin ] ) ( JOIN ( R [ country ] ) [ Seychelles ] )",
            "( AND ( JOIN [ has administrative territorial entity ] [ Tianjin ] ) ( JOIN ( R [ diplomatic relation ] ) [ Seychelles ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ contains the administrative territorial entity ] [ Tianjin ] ) ( JOIN ( R [ diplomatic relation ] ) [ Seychelles ] ) )"
    },
    {
        "question": "Question: { Which is the total production of Airbus A380? }",
        "predicted_query": [
            "( JOIN ( R [ total production ] ) [ Airbus A380 ] )",
            "( JOIN ( R [ production quantity ] ) ( JOIN ( R [ manufacturer ] ) [ Airbus A380 ] ) )",
            "( JOIN [ total production ] [ Airbus A380 ] )",
            "( JOIN ( R [ production ] ) ( JOIN ( R [ produced by ] ) [ Airbus A380 ] ) )",
            "[ JOIN ( [ produced by ] ) [ Airbus A380 ] ]"
        ],
        "gen_label": "( JOIN ( R [ total produced ] ) [ Airbus A380 ] )"
    },
    {
        "question": "Question: { What is in the category of Tonga? }",
        "predicted_query": [
            "( JOIN [ category of ] [ Tonga ] )",
            "( JOIN ( R [ category ] ) [ Tonga ] )",
            "( JOIN ( R [ category of ] ) [ Tonga ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Tonga ] ) ( JOIN ( R [ category ] ) [ Tonga ] ) )",
            "( JOIN [ category of ] [ Tonga ] )"
        ],
        "gen_label": "( JOIN ( R [ mobile country code ] ) [ Tonga ] )"
    },
    {
        "question": "Question: { Who is the grandfather of the film director of The Don Knotts Show? }",
        "predicted_query": [
            "( JOIN ( R [ child ] ) ( JOIN ( R [ director ] ) [ The Don Knotts Show ] ) )",
            "( JOIN [ grandfather ] [ The Don Knotts Show ] )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ cast member ] ) [ The Don Knotts Show ] ) )",
            "( AND ( JOIN [ child ] [ The Don Knotts Show ] ) ( JOIN ( R [ father ] ) [ Don Knotts ] ) )",
            "( AND ( JOIN [ parent of ] [ The Don Knotts Show ] ) ( JOIN ( R [ father ] ) [ Don Knotts ] ) )"
        ],
        "gen_label": "( JOIN ( R [ relative ] ) ( JOIN ( R [ director ] ) [ The Don Knotts Show ] ) )"
    },
    {
        "question": "Question: { What is played by the the extended form of the generalized linear model? }",
        "predicted_query": [
            "( JOIN [ played by ] [ generalized linear model ] )",
            "( JOIN ( R [ player ] ) ( JOIN ( R [ form ] ) [ generalized linear model ] ) )",
            "( JOIN ( R [ has generalization ] ) ( JOIN ( R [ has form of ] ) [ generalized linear model ] ) )",
            "( JOIN ( R [ has form ] ) ( JOIN ( R [ has generalization ] ) [ generalized linear model ] ) )",
            "( AND ( JOIN [ uses ] [ generalized linear model ] ) ( JOIN ( R [ has part of ] ) [ piano ] ) )"
        ],
        "gen_label": "( JOIN ( R [ used by ] ) ( JOIN ( R [ based on ] ) [ generalized linear model ] ) )"
    },
    {
        "question": "Question: { What genre is the score of Inazuma Eleven GO vs. Danbōru Senki W in? }",
        "predicted_query": [
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ composer ] ) [ Inazuma Eleven GO vs. Danbōru Senki W ] ) )",
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ soundtrack composer ] ) [ Inazuma Eleven GO vs. Danbōru Senki W ] ) )",
            "( JOIN ( R JOIN ( R [ genre ] ) [ Inazuma Eleven GO vs. Danbōru Senki W ] ) )",
            "( AND ( JOIN [ composer or performer ] [ Inazuma Eleven GO vs. Danbōru Senki W ] ) ( JOIN ( R [ genre ] ) [ Inazuma Eleven GO vs. Danbōru Senki W ] ) )",
            "[ JOIN ( R [ genre ] ) ( JOIN ( R [ composer ] ) [ Inazuma Eleven GO vs. Danbōru Senki W"
        ],
        "gen_label": "( JOIN ( R [ genre ] ) ( JOIN ( R [ composer ] ) [ Inazuma Eleven GO vs. Danbōru Senki W ] ) )"
    },
    {
        "question": "Question: { What is Siggy Flickers Field of work? }",
        "predicted_query": [
            "( JOIN ( R [ field of work ] ) [ Siggy Flickers ] )",
            "( JOIN [ field of work ] [ Siggy Flickers ] )",
            "( AND ( JOIN [ occupation ] [ Siggy Flickers ] ) ( JOIN ( R [ field of work ] ) [ Siggy Flickers ] ) )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ field of work ] ) [ Siggy Flickers ] ) )",
            "( JOIN [ field of work or area of activity ] [ Siggy Flickers ] )"
        ],
        "gen_label": "( JOIN ( R [ field of this occupation ] ) ( JOIN ( R [ occupation ] ) [ Siggy Flicker ] ) )"
    },
    {
        "question": "Question: { What is the diplomatic relation to citizenship according to Carl Bernstein? }",
        "predicted_query": [
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country of citizenship ] ) [ Carl Bernstein ] ) )",
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country of citizenship ] ) [ Carl Bernstein ] ) )",
            "( JOIN [ diplomatic relation to citizenship ] [ Carl Bernstein ] )",
            "( AND ( JOIN [ diplomatic relation ] [ citizenship ] ) ( JOIN ( R [ diplomatic relation ] ) [ Carl Bernstein ] ) )",
            "( AND ( JOIN [ has diplomatic relation ] [ citizenship ] ) ( JOIN ( R [ diplomatic relation ] ) [ Carl Bernstein ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country of citizenship ] ) [ Carl Bernstein ] ) )"
    },
    {
        "question": "Question: { What is the partner city of Antalya that is in the principal area of Omsk Governorate? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Omsk Oblast ] ) ( JOIN ( R [ twinned administrative body ] ) [ Antalya ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Omsk Oblast ] ) ( JOIN ( R [ twinned administrative body ] ) [ Antalya ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Omsk Oblast ] ) ( JOIN ( R [ twinned administrative body ] ) [ Antalya ] ) )",
            "( AND ( JOIN [ country ] [ Omsk Oblast ] ) ( JOIN ( R [ twinned administrative body ] ) [ Antalya ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Omsk Oblast ] ) ( JOIN ( R [ twinned administrative body ] ) [ Antalya ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ located in the administrative territorial entity ] [ Omsk Governorate ] ) ( JOIN ( R [ twinned administrative body ] ) [ Antalya ] ) )"
    },
    {
        "question": "Question: { What are the feminine/masculine forms in the expressive language of Georg Solti? }",
        "predicted_query": [
            "( AND ( JOIN [ grammatical gender ] [ masculine ] ) ( JOIN ( R [ language of work ] ) [ Georg Solti ] ) )",
            "( AND ( JOIN [ gender ] [ male ] ) ( JOIN ( R [ language of expression ] ) [ Georg Solti ] ) )",
            "( JOIN ( R [ feminine/masculine form ] ) ( JOIN ( R [ language of expression ] ) [ Georg Solti ] ) )",
            "( AND ( JOIN [ grammatical gender ] [ feminine/masculine ] ) ( JOIN ( R [ language of work ] ) [ Georg Solti ] ) )",
            "( JOIN ( R [ feminine/masculine form ] ) ( JOIN ( R [ language of work or name ] ) [ Georg Solti ] ) )"
        ],
        "gen_label": "( JOIN ( R [ has grammatical gender ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Georg Solti ] ) )"
    },
    {
        "question": "Question: { What is the sports league of the team that Willie Williams played for? }",
        "predicted_query": [
            "( JOIN [ sports league ] [ Willie Williams ] )",
            "( JOIN ( R [ sports league ] ) ( JOIN ( R [ team member ] ) [ Willie Williams ] ) )",
            "( JOIN ( R [ member of sports league ] ) ( JOIN ( R [ team member ] ) [ Willie Williams ] ) )",
            "( JOIN ( R [ sports league ] ) ( JOIN ( R [ player ] ) [ Willie Williams ] ) )",
            "( AND ( JOIN [ member of sports league ] [ Willie Williams ] ) ( JOIN ( R [ sport ] ) [ Willie Williams ] ) )"
        ],
        "gen_label": "( JOIN ( R [ league or competition ] ) ( JOIN ( R [ member of sports team ] ) [ Willie Williams ] ) )"
    },
    {
        "question": "Question: { What Amphibian classification is the Goliath frog? }",
        "predicted_query": [
            "( JOIN ( R [ AmphibiaWeb taxon ID ] ) [ Goliath frog ] )",
            "( JOIN ( R [ taxon rank ] ) ( JOIN ( R [ taxon ] ) [ Goliath frog ] ) )",
            "( AND ( JOIN [ taxon author ] [ Jean Pauwels ] ) ( JOIN ( R [ taxon rank ] ) [ Goliath frog ] ) )",
            "( JOIN [ AmphibiaWeb taxonomy ID ] [ Goliath frog ] )",
            "( JOIN ( R [ AmphibianWeb taxonomy ] ) ( JOIN ( R [ taxon of ] ) [ Goliath frog ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Amphibian Species of the World ID ] ) [ Goliath frog ] )"
    },
    {
        "question": "Question: { What is John Bunyan's Surman ID? }",
        "predicted_query": [
            "( JOIN ( R [ Surman ID ] ) [ John Bunyan ] )",
            "( JOIN [ Surman ID ] [ John Bunyan ] )",
            "( JOIN ( R [ Surman ID ] ) [ John Bunyan ] )",
            "( JOIN ( R [ SurMan ID ] ) [ John Bunyan ] )",
            "( AND ( JOIN [ Surman ID ] [ John Bunyan ] ) [ The History of Parliament ] )"
        ],
        "gen_label": "( JOIN ( R [ Surman ID ] ) [ John Bunyan ] )"
    },
    {
        "question": "Question: { Who is the founder of Scientology? who died at Creston? }",
        "predicted_query": [
            "( AND ( JOIN [ place of death ] [ Creston ] ) ( JOIN ( R [ founded by ] ) [ Scientology ] ) )",
            "( JOIN ( R [ founder ] ) ( JOIN ( R [ place of death ] ) [ Creston ] ) )",
            "( JOIN [ place of death ] [ Creston ] ) ( JOIN ( R [ founded by ] ) [ Scientology ] )",
            "( AND ( JOIN [ location of death ] [ Creston ] ) ( JOIN ( R [ founder ] ) [ Scientology ] ) )",
            "( AND ( JOIN [ place of death ] [ Creston, British Columbia ] ) ( JOIN ( R [ founded by ] ) [ Scientology ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ place of death ] [ Creston ] ) ( JOIN ( R [ founded by ] ) [ Scientology ] ) )"
    },
    {
        "question": "Question: { Which is the Amazon author page for Oprah Winfrey? }",
        "predicted_query": [
            "( JOIN ( R [ Amazon author page ] ) [ Oprah Winfrey ] )",
            "( JOIN ( R [ Amazon author page ID ] ) [ Oprah Winfrey ] )",
            "### Instruction:",
            "( JOIN [ Amazon author page ] [ Oprah Winfrey ] )",
            "### Instruction:"
        ],
        "gen_label": "( JOIN ( R [ Amazon author ID ] ) [ Oprah Winfrey ] )"
    },
    {
        "question": "Question: { In what fictional universe does the entity Stone Table exist? }",
        "predicted_query": [
            "( JOIN ( R [ fictional universe ] ) ( JOIN ( R [ location ] ) [ Stone Table ] ) )",
            "[ JOIN ] [ fictional universe ] [ Stone Table ]",
            "( AND ( JOIN [ fictional work ] [ Stone Table ] ) ( JOIN ( R [ located in ] ) [ Stone Table ] ) )",
            "( AND ( JOIN [ fiction universe ] [ Stone Table ] ) ( JOIN ( R [ located in ] ) [ Stone Table ] ) )",
            "( JOIN ( R [ fictional universe ] ) ( JOIN ( R [ located in ] ) [ Stone Table ] ) )"
        ],
        "gen_label": "( JOIN ( R [ fictional universe described in ] ) ( JOIN ( R [ from narrative universe ] ) [ Stone Table ] ) )"
    },
    {
        "question": "Question: { What was the alma mater of the author of \"Schizophrenia is not associated with DRD4 48-base-pair-repeat length or individual alleles: results of a meta-analysis.\" }",
        "predicted_query": [
            "( JOIN ( R [ alma mater ] ) ( JOIN ( R [ author ] ) [ Schizophrenia is not associated with DRD4 48-base-pair-repeat length or individual alleles: results of a meta-analysis. ] ) )",
            "( AND ( JOIN [ institution ] [ University of California, San Diego ] ) ( JOIN ( R [ author ] ) [ Schizophrenia is not associated with DRD4 48-base-pair-repeat length or individual alleles: results of a meta-analysis. ] ) ) ",
            "( JOIN [ alma mater ] [ Schizophrenia is not associated with DRD4 48-base-pair-repeat length or individual alleles: results of a meta-analysis. ] )",
            "( AND ( JOIN [ university or college attended ] [ University of California, San Diego ] ) ( JOIN ( R [ author ] ) [ Schizophrenia is not associated with DRD4 48-base-pair-repeat length or individual alleles: results of a meta-analysis. ] ) ) ",
            "( JOIN ( R [ educated at ] ) [ Schizophrenia is not associated"
        ],
        "gen_label": "( JOIN ( R [ educated at ] ) ( JOIN ( R [ author ] ) [ Schizophrenia is not associated with DRD4 48-base-pair-repeat length or individual alleles: results of a meta-analysis ] ) )"
    },
    {
        "question": "Question: { Where in the continent of the Antarctic Peninsula is the discoverer Fabian Gottlieb von Bellingshausen? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Antarctic Peninsula ] ) ( JOIN ( R [ discoverer ] ) [ Fabian Gottlieb von Bellingshausen ] ) )",
            "[ JOIN ( R [ located in the continent ] ) [ Fabian Gottlieb von Bellingsh",
            "( AND ( JOIN [ continent ] [ Antarctic Peninsula ] ) ( JOIN ( R [ discoverer ] ) [ Fabian Gottlieb von Bellingshausen ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ discoverer ] ) [ Antarctic Peninsula ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Antarctic Peninsula ] ) ( JOIN ( R [ place of discovery ] ) [ Fabian Gottlieb von Bellingshausen ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ discoverer or inventor ] [ Fabian Gottlieb von Bellingshausen ] ) ( JOIN ( R [ continent ] ) [ Antarctic Peninsula ] ) )"
    },
    {
        "question": "Question: { Which is the cause of destruction for Colossus of Rhodes? }",
        "predicted_query": [
            "( JOIN [ cause of destruction ] [ Colossus of Rhodes ] )",
            "( JOIN ( R [ cause of destruction ] ) ( JOIN ( R [ location ] ) [ Colossus of Rhodes ] ) )",
            "( JOIN ( R [ causes the death of ] ) ( JOIN ( R [ destroyed by ] ) [ Colossus of Rhodes ] ) )",
            "( JOIN ( R [ cause of destruction ] ) [ Colossus of Rhodes ] )",
            "( JOIN [ cause of destruction ] [ Colossus of Rhodes ] )"
        ],
        "gen_label": "( JOIN ( R [ cause of destruction ] ) [ Colossus of Rhodes ] )"
    },
    {
        "question": "Question: { What items are used in the Amateur Athletic Association of England plays? }",
        "predicted_query": [
            "( JOIN ( R [ items used ] ) ( JOIN ( R [ sport ] ) [ Amateur Athletic Association of England ] ) )",
            "( JOIN [ items used ] [ Amateur Athletic Association of England ] )",
            "( JOIN ( R [ item used ] ) ( JOIN ( R [ participant ] ) [ Amateur Athletic Association of England ] ) )",
            "( AND ( JOIN [ uses ] [ Amateur Athletic Association of England ] ) ( JOIN ( R [ sport ] ) [ rugby union ] ) )",
            "( JOIN ( R [ has item ] ) ( JOIN ( R [ participant in ] ) [ Amateur Athletic Association of England ] ) )"
        ],
        "gen_label": "( JOIN ( R [ uses ] ) ( JOIN ( R [ sport ] ) [ Amateur Athletic Association of England ] ) )"
    },
    {
        "question": "Question: { What is endtime for battle of Harvey Williams Cushing ? }",
        "predicted_query": [
            "( JOIN ( R [ end time ] ) ( JOIN ( R [ participant in war ] ) [ Harvey Williams Cushing ] ) )",
            "( JOIN ( R [ end time ] ) ( JOIN ( R [ participant ] ) [ Battle of Harvey Williams Cushing ] ) )",
            "( AND ( JOIN [ start time of war ] [ Battle of Harvey Williams Cushing ] ) ( JOIN ( R [ notable event ] ) [ Harvey Cushing ] ) )",
            "( JOIN [ end time ] [ Battle of Harvey Williams Cushing ] )",
            "( JOIN ( R [ start time ] ) ( JOIN ( R [ fought in ] ) [ Harvey Cushing ] ) )"
        ],
        "gen_label": "( JOIN ( R [ end time ] ) ( JOIN ( R [ conflict ] ) [ Harvey Williams Cushing ] ) )"
    },
    {
        "question": "Question: { Which is next crossing upstream of Banpo Bridge? }",
        "predicted_query": [
            "( JOIN ( R [ next crossing upstream ] ) [ Banpo Bridge ] )",
            "( JOIN [ next crossing upstream ] [ Banpo Bridge ] )",
            "( JOIN ( R [ next crossing upstream ] ) [ Banpo Bridge ] )",
            "( JOIN ( R [ next crossing upstream ] ) [ Banpo Bridge ] )",
            "( AND ( JOIN [ tributary ] [ Han River ] ) ( JOIN ( R [ located on the administrative territorial entity ] ) [ Banpo Bridge ] ) )"
        ],
        "gen_label": "( JOIN [ next crossing upstream ] [ Banpo Bridge ] )"
    },
    {
        "question": "Question: { What is the Banglapedia ID for organic agriculture? }",
        "predicted_query": [
            "( JOIN ( R [ Banglapedia ID ] ) [ organic agriculture ] )",
            "[ JOIN ( R [ Banglap",
            "( JOIN [ Banglapedia ID ] [ organic agriculture ] )",
            "( AND ( JOIN [ BnF authority ID ] [ Banglapedia ID for organic agriculture ] ) [ organic agriculture ] )",
            "( JOIN ( R [ Banglapedia ID ] ) [ organic agriculture ] )"
        ],
        "gen_label": "( JOIN ( R [ Banglapedia ID ( English ) ] ) [ organic agriculture ] )"
    },
    {
        "question": "Question: { What is the implementation  of Hypertext Transfer Protocol? }",
        "predicted_query": [
            "( JOIN ( R [ has implementation ] ) [ Hypertext Transfer Protocol ] )",
            "( JOIN ( R [ implemented by ] ) ( JOIN ( R [ protocol used ] ) [ Hypertext Transfer Protocol ] ) )",
            "( JOIN [ implementation ] [ Hypertext Transfer Protocol ] )",
            "( AND ( JOIN [ uses ] [ Hypertext Transfer Protocol ] ) ( JOIN ( R [ follows ] ) [ HTTP ] ) )",
            "( JOIN [ uses ] [ Hypertext Transfer Protocol ] )"
        ],
        "gen_label": "( JOIN [ implementation of ] [ HTTP ] )"
    },
    {
        "question": "Question: { What land are alumni of Francis from? }",
        "predicted_query": [
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ alumni ] ) [ Francis ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Francis ] ) ( JOIN ( R [ place of death ] ) [ Francis of Assisi ] ) )",
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ country of origin ] ) [ Francis ] ) )",
            "( JOIN [ land area ] [ Francis ] )",
            "( JOIN [ located in the administrative territorial entity ] [ Francis ] )"
        ],
        "gen_label": "( JOIN ( R [ country ] ) ( JOIN ( R [ educated at ] ) [ Pope Francis ] ) )"
    },
    {
        "question": "Question: { The writers of The Large Scale Structure of Space-Time hold what specialty? }",
        "predicted_query": [
            "( JOIN ( R [ field of study ] ) ( JOIN ( R [ author ] ) [ The Large Scale Structure of Space-Time ] ) )",
            "[LOGFOR] JOIN [ field of specialty ] [ The Large Scale Structure of Space-Time ]",
            "( JOIN ( R [ specialty ] ) ( JOIN ( R [ author ] ) [ The Large Scale Structure of Space-Time ] ) )",
            "( JOIN ( R [ field of work ] ) ( JOIN ( R [ author ] ) [ The Large-Scale Structure of Space-Time ] ) )",
            "( AND ( JOIN [ faculty of ] [ The Large Scale Structure of Space-Time ] ) ( JOIN ( R [ field of study ] ) [ The Large Scale Structure of Space-Time ] ) )"
        ],
        "gen_label": "( JOIN ( R [ field of work ] ) ( JOIN ( R [ author ] ) [ The Large Scale Structure of Space-Time ] ) )"
    },
    {
        "question": "Question: { what is in the Unified Astronomy Thesaurus ID of winter solstice ? }",
        "predicted_query": [
            "( JOIN ( R [ Unified Astronomy Thesaurus ID ] ) [ winter solstice ] )",
            "( [ joined by ] [ Unified Astronomy Thesaurus ID ] [ winter solstice ] )",
            "( AND ( JOIN [ UAT ID ] [ winter solstice ] ) ( JOIN ( R [ has ID ] ) [ winter solstice ] ) )",
            "( JOIN [ Unified Astronomy Thesaurus ID ] [ winter solstice ] )",
            "( JOIN ( R [ Unified Astronomy Thesaurus ID ] ) [ winter solstice ] )"
        ],
        "gen_label": "( JOIN ( R [ Unified Astronomy Thesaurus ID ] ) [ winter solstice ] )"
    },
    {
        "question": "Question: { Which is the Panthéon des sports du Québec ID of Maurice Richard? }",
        "predicted_query": [
            "( JOIN ( R [ Panthéon des sports du Québec ID ] ) [ Maurice Richard ] )",
            "( JOIN ( R [ Panthéon des sports du Québec ID ] ) [ Maurice Richard ] )",
            "( AND ( JOIN [ Pantheon des sports du Québec ID ] ) ( JOIN ( R [ sport ] ) ) )",
            "( JOIN ( R [ Panthéon des sports du Québec ID ] ) [ Maurice Richard ] )",
            "( JOIN ( R [ Panthéon des sports du Québec ID ] ) [ Maurice Richard ] )"
        ],
        "gen_label": "( JOIN ( R [ Quebec Sports Hall of Fame ID ] ) [ Maurice Richard ] )"
    },
    {
        "question": "Question: { Who are the founders of Onyanko Club that speak native Japanese? }",
        "predicted_query": [
            "( AND ( JOIN [ native language ] [ Japanese ] ) ( JOIN ( R [ founded by ] ) [ Onyanko Club ] ) )",
            "( AND ( JOIN [ language spoken, written or signed ] [ native Japanese ] ) ( JOIN ( R [ founded by ] ) [ Onyanko Club ] ) )",
            "( JOIN ( R [ native language ] ) ( JOIN ( R [ founded by ] ) [ Onyanko Club ] ) )",
            "( JOIN [ native language ] [ Japanese ] ) ( JOIN ( R [ founded by ] ) [ Onyanko Club ] )",
            "( AND ( JOIN [ has native language ] [ Japanese ] ) ( JOIN ( R [ founded by ] ) [ Onyanko Club ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ native language ] [ Japanese ] ) ( JOIN ( R [ founded by ] ) [ Onyanko Club ] ) )"
    },
    {
        "question": "Question: { What is the Christian name of Ben Daniels that is the equivalent of Benedicto? }",
        "predicted_query": [
            "( AND ( JOIN [ given name ] [ Benedicto ] ) ( JOIN ( R [ given name ] ) [ Ben Daniels ] ) )",
            "( AND ( JOIN [ name of equivalent ] [ Benedicto ] ) ( JOIN ( R [ given name ] ) [ Ben Daniels ] ) )",
            "( AND ( JOIN [ person or thing with the same name as ] [ Benedicto ] ) ( JOIN ( R [ given name ] ) [ Ben Daniels ] ) )",
            "( AND ( JOIN [ equivalent of ] [ Benedictus ] ) ( JOIN ( R [ given name ] ) [ Ben Daniels ] ) )",
            "( AND ( JOIN [ given name ] [ Benedicto ] ) ( JOIN ( R [ different name ] ) [ Benedict ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ said to be the same as ] [ Benedicto ] ) ( JOIN ( R [ given name ] ) [ Ben Daniels ] ) )"
    },
    {
        "question": "Question: { Which is the label in sign language for university? }",
        "predicted_query": [
            "( JOIN ( R [ sign language ] ) [ university ] )",
            "( JOIN [ sign language ] [ university ] )",
            "( JOIN ( R [ language of instruction ] ) [ sign language ] )",
            "( JOIN [ sign language label ] [ university ] )",
            "( AND ( JOIN [ language spoken or written ] [ sign language ] ) ( JOIN ( R [ named after ] ) [ university ] ) )"
        ],
        "gen_label": "( JOIN ( R [ label in sign language ] ) [ university ] )"
    },
    {
        "question": "Question: { Which ideology is followed by the political party of Christian Emil Stoud Platou? }",
        "predicted_query": [
            "( JOIN ( R [ ideology ] ) ( JOIN ( R [ political party ] ) [ Christian Emil Stoud Platou ] ) )",
            "( AND ( JOIN [ followed by ] [ Christian Emil Stoud Platou ] ) ( JOIN ( R [ ideology ] ) [ Christian Emil Stoud Platou ] ) )",
            "( JOIN [ political party of ] [ Christian Emil Stoud Platou ] )",
            "( JOIN ( R [ political party of ] ) ( JOIN ( R [ ideology ] ) [ Christian Emil Stoud Platou ] ) )",
            "( JOIN ( R [ ideology ] ) ( JOIN ( R [ member of political party ] ) [ Christian Emil Stoud Platou ] ) )"
        ],
        "gen_label": "( JOIN ( R [ political ideology ] ) ( JOIN ( R [ member of political party ] ) [ Christian Emil Stoud Platou ] ) )"
    },
    {
        "question": "Question: { Which battle is for the son of Uday Hussein? }",
        "predicted_query": [
            "( JOIN ( R [ battle ] ) ( JOIN ( R [ father ] ) [ Uday Hussein ] ) )",
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ child ] ) [ Uday Hussein ] ) )",
            "( AND ( JOIN [ father ] [ Uday Hussein ] ) ( JOIN ( R [ participant ] ) [ Battle of Baghdad ] ) )",
            "( JOIN [ battle ] [ son of ] ) AND ( JOIN ( R [ father ] ) [ Uday Hussein ] )",
            "( AND ( JOIN [ child ] [ Uday Hussein ] ) ( JOIN ( R [ fought in ] ) [ Uday Hussein ] ) )"
        ],
        "gen_label": "( JOIN ( R [ conflict ] ) ( JOIN ( R [ father ] ) [ Uday Hussein ] ) )"
    },
    {
        "question": "Question: { What is Peakbagger area ID for Mascarene Islands? }",
        "predicted_query": [
            "( JOIN ( R [ Peakbagger area ID ] ) [ Mascarene Islands ] )",
            "( JOIN ( R [ peakbagger.com mountain range ID ] ) [ Mascarene Islands ] )",
            "( JOIN ( R [ Peakbagger ID ] ) [ Mascarene Islands ] )",
            "( JOIN ( R [ peakbagger.com area ID ] ) [ Mascarene Islands ] )",
            "( AND ( JOIN [ peakbagger.com mountain ID ] [ Mascarene Islands ] ) ( JOIN ( R [ mountain range ] ) [ Mascarene Islands ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Peakbagger area ID ] ) [ Mascarene Islands ] )"
    },
    {
        "question": "Question: { \"What is {name after} of {Maxwell's equations}, which has {craft} is {university teacher} ?\" }",
        "predicted_query": [
            "( AND ( JOIN [ occupation ] [ university teacher ] ) ( JOIN ( R [ named after ] ) [ Maxwell's equations ] ) )",
            "( AND ( JOIN [ occupational field ] [ university teacher ] ) ( JOIN ( R [ named after ] ) [ Maxwell's equations ] ) )",
            "[Maxwell's equations]",
            "( JOIN [ craft ] [ university teacher ] ) ( JOIN ( R [ named after ] ) [ Maxwell's equations ] )",
            "( AND ( JOIN [ occupation ] [ university lecturer ] ) ( JOIN ( R [ named after ] ) [ Maxwell's equations ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ occupation ] [ university teacher ] ) ( JOIN ( R [ named after ] ) [ Maxwell's equations ] ) )"
    },
    {
        "question": "Question: { Which is the NOC Occupation Code for truck driver? }",
        "predicted_query": [
            "( JOIN ( R [ NOC Occupation Code ] ) [ truck driver ] )",
            "( JOIN [ NOC Occupation Code ] [ truck driver ] )",
            "( JOIN ( R [ NOC occupation code ] ) [ truck driver ] )",
            "( JOIN ( R [ NOC Occupation Code ] ) [ truck driver ] )",
            "( JOIN ( R [ NOC Occupation Code ] ) [ truck driver ] )"
        ],
        "gen_label": "( JOIN ( R [ NOC Occupation Code ] ) [ truck driver ] )"
    },
    {
        "question": "Question: { who co-founder of working place of Joseph armstrong ? }",
        "predicted_query": [
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ place of work ] ) [ Joseph Armstrong ] ) )",
            "( JOIN [ founded by ] [ Joseph Armstrong ] )",
            "( JOIN ( R [ founder ] ) ( JOIN ( R [ place of work ] ) [ Joseph Armstrong ] ) )",
            "( JOIN ( R [ founding member ] ) ( JOIN ( R [ place of work ] ) [ Joseph Armstrong ] ) )",
            "( AND ( JOIN [ employer ] [ Joseph Armstrong ] ) ( JOIN ( R [ place of work ] ) [ Joseph Armstrong ] ) )"
        ],
        "gen_label": "( JOIN ( R [ founded by ] ) ( JOIN ( R [ employer ] ) [ Joseph Armstrong ] ) )"
    },
    {
        "question": "Question: { What is the fate of starring in Mezi námi zloději? }",
        "predicted_query": [
            "( JOIN ( R [ death date ] ) ( JOIN ( R [ cast member ] ) [ Mezi námi zloději ] ) )",
            "( JOIN [ fate of starring in ] [ Mezi námi zloději ] )",
            "( JOIN ( R [ fate ] ) ( JOIN ( R [ cast member ] ) [ Mezi námi zloději ] ) )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ notable work ] ) [ Mezi námi zloději ] ) )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ present in work ] ) [ Mezi námi zloději ] ) )"
        ],
        "gen_label": "( JOIN ( R [ significant event ] ) ( JOIN ( R [ cast member ] ) [ Mezi námi zloději ] ) )"
    },
    {
        "question": "Question: { Which is the boundary of the asteroid belt? }",
        "predicted_query": [
            "( JOIN ( R [ border ] ) [ asteroid belt ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ asteroid belt ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ asteroid belt ] ) )",
            "( JOIN ( R [ shares border with ] ) [ asteroid belt ] )",
            "( JOIN ( R [ border ] ) [ asteroid belt ] )",
            "( JOIN ( R [ bordering body ] ) [ asteroid belt ] )"
        ],
        "gen_label": "( JOIN [ has boundary ] [ asteroid belt ] )"
    },
    {
        "question": "Question: { Which is the FEI ID of Mark Todd? }",
        "predicted_query": [
            "( JOIN ( R [ FEI athlete ID ] ) [ Mark Todd ] )",
            "( JOIN ( R [ FEI ID ] ) [ Mark Todd ] )",
            "( JOIN ( R [ FEI athlete ID ] ) [ Mark Todd ] )",
            "( JOIN [ FEI ID ] [ Mark Todd ] )",
            "( JOIN ( R [ FEI ID ] ) [ Mark Todd ] )"
        ],
        "gen_label": "( JOIN ( R [ FEI athlete ID ] ) [ Mark Todd ] )"
    },
    {
        "question": "Question: { What is the Quebec cultural heritage directory ID for the Ottawa River? }",
        "predicted_query": [
            "( JOIN ( R [ Quebec cultural heritage directory ID ] ) [ Ottawa River ] )",
            "( JOIN ( R [ Quebec Cultural Heritage Directory ID ] ) [ Ottawa River ] )",
            "( JOIN ( R [ Quebec Cultural Heritage Directory ID ] ) [ Ottawa River ] )",
            "( JOIN ( R [ Quebec cultural heritage directory ID ] ) [ Ottawa River ] )",
            "( AND ( JOIN [ Quebec cultural heritage directory ID ] [ Ottawa River ] ) ( JOIN ( R [ ID ] ) [ Ottawa River ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Quebec cultural heritage directory ID ] ) [ Ottawa River ] )"
    },
    {
        "question": "Question: { Which is the unemployment rate for Jordan? }",
        "predicted_query": [
            "[ { JOIN [ employment rate ] [ Jordan ] } ]",
            "( JOIN ( R [ unemployment rate ] ) [ Jordan ] )",
            "( JOIN [ unemployment rate ] [ Jordan ] )",
            "( JOIN ( R [ unemployment rate ] ) [ Jordan ] )",
            "( JOIN [ unemployment rate ] [ Jordan ] )"
        ],
        "gen_label": "( JOIN ( R [ unemployment rate ] ) [ Jordan ] )"
    },
    {
        "question": "Question: { What is the language used by Esther Bubley that has a feminine grammatical gender? }",
        "predicted_query": [
            "( AND ( JOIN [ grammatical gender ] [ feminine ] ) ( JOIN ( R [ language spoken, written or signed ] ) [ Esther Bubley ] ) )",
            "( AND ( JOIN [ feminine grammatical gender ] [ feminine ] ) ( JOIN ( R [ language spoken, written or signed ] ) [ Esther Bubley ] ) )",
            "( AND ( JOIN [ has grammatical gender ] [ feminine ] ) ( JOIN ( R [ language spoken, written or signed ] ) [ Esther Bubley ] ) )",
            "( AND ( JOIN [ grammatical gender ] [ feminine ] ) ( JOIN ( R [ language of work ] ) [ Esther Bubley ] ) )",
            "( JOIN ( R [ grammatical gender ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Esther Bubley ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ has grammatical gender ] [ feminine ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Esther Bubley ] ) )"
    },
    {
        "question": "Question: { Who is {candidate} {took part} for {Yuri Trofimov} ? }",
        "predicted_query": [
            "( JOIN ( R [ candidate ] ) ( JOIN ( R [ participant ] ) [ Yuri Trofimov ] ) )",
            "",
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ participant in ] ) [ Yuri Trofimov ] ) )",
            "( AND ( JOIN [ participant ] [ Yuri Trofimov ] ) ( JOIN ( R [ influenced by ] ) [ Yuri Trofimov ] ) )",
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ member of ] ) [ Yuri Trofimov ] ) )"
        ],
        "gen_label": "( JOIN ( R [ participant ] ) ( JOIN ( R [ participant in ] ) [ Yuri Trofimov ] ) )"
    },
    {
        "question": "Question: { What is the county seat of Atlanta called? }",
        "predicted_query": [
            "( JOIN ( R [ capital ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Atlanta ] ) )",
            "( JOIN [ capital of ] [ Atlanta ] ) ( JOIN ( R [ capital of ] ) [ Atlanta ] )",
            "( JOIN ( R [ capital of ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Atlanta ] ) )",
            "( JOIN ( R [ capital city ] ) ( JOIN ( R [ country ] ) [ Atlanta ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Atlanta ] ) ( JOIN ( R [ capital ] ) [ Fulton County ] ) )"
        ],
        "gen_label": "( JOIN ( R [ native label ] ) ( JOIN ( R [ capital of ] ) [ Atlanta ] ) )"
    },
    {
        "question": "Question: { What is godparent of Wilhelm II? }",
        "predicted_query": [
            "( JOIN ( R [ parent ] ) ( JOIN ( R [ sibling ] ) [ Wilhelm II, German Emperor ] ) )",
            "( JOIN ( R [ godparent ] ) [ Wilhelm II ] )",
            "( JOIN ( R [ godparent ] ) [ Wilhelm II ] )",
            "( JOIN [ godparent ] [ Wilhelm II ] )",
            "( AND ( JOIN [ child ] [ Wilhelm II ] ) ( JOIN ( R [ parent ] ) [ Wilhelm II ] ) )"
        ],
        "gen_label": "( JOIN [ godparent ] [ Wilhelm II ] )"
    },
    {
        "question": "Question: { Which is the interaction for proton? }",
        "predicted_query": [
            "( JOIN ( R [ interaction ] ) [ proton ] )",
            "( JOIN [ interaction ] [ proton ] )",
            "( JOIN [ has interaction ] [ proton ] )",
            "( JOIN ( R [ has interaction ] ) ( JOIN ( R [ reactant ] ) [ proton ] ) )",
            "( AND ( JOIN [ participant in interaction ] [ proton ] ) ( JOIN ( R [ has participant in interaction ] ) [ proton ] ) )"
        ],
        "gen_label": "( JOIN ( R [ interaction ] ) [ proton ] )"
    },
    {
        "question": "Question: { Wood Buffalo National Park is located in which overlap? }",
        "predicted_query": [
            "( JOIN ( R [ overlaps ] ) [ Wood Buffalo National Park ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Wood Buffalo National Park ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Wood Buffalo National Park ] ) )",
            "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ located in ] ) [ Wood Buffalo National Park ] ) )",
            "( JOIN [ overlaps ] [ Wood Buffalo National Park ] )",
            "( AND ( JOIN [ overlaps ] [ Wood Buffalo National Park ] ) ( JOIN ( R [ located in ] ) [ Wood Buffalo National Park ] ) )"
        ],
        "gen_label": "( JOIN [ territory overlaps ] [ Wood Buffalo National Park ] )"
    },
    {
        "question": "Question: { Which Haumea star has a satellite of 418220 Kestutis? }",
        "predicted_query": [
            "( AND ( JOIN [ has satellite ] [ 418220 Kestutis ] ) ( JOIN ( R [ has the same orbital characteristics ] ) [ Haumea ] ) )",
            "( JOIN ( R [ Haumea ] ) ( JOIN ( R [ has satellite ] ) [ 418220 Kestutis ] ) )",
            "( AND ( JOIN [ satellite of ] [ 418220 Kestutis ] ) ( JOIN ( R [ follows ] ) [ Haumea ] ) )",
            "( AND ( JOIN [ child of ] [ Kestutis ] ) ( JOIN ( R [ has satellite ] ) [ Haumea ] ) )",
            "( AND ( JOIN [ has satellite ] [ 418220 Kestutis ] ) ( JOIN ( R [ discoverer ] ) [ Haumea ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ child astronomical body ] [ 418220 Kestutis ] ) ( JOIN ( R [ parent astronomical body ] ) [ Haumea ] ) )"
    },
    {
        "question": "Question: { Which  is Biodiversity Repository ID of Natural History Museum of London ? }",
        "predicted_query": [
            "[ { JOIN [ Biodiversity Repository ID ] } ]",
            "( JOIN ( R [ Biodiversity Heritage Library ID ] ) [ Natural History Museum, London ] )",
            "( JOIN ( R [ Biodiversity Heritage Library taxon ID ] ) [ Natural History Museum, London ] )",
            "( JOIN [ Biodiversity Repository ID ] [ Natural History Museum of London ] )",
            "( JOIN ( R [ Biodiversity Repository ID ] ) [ Natural History Museum of London ] )"
        ],
        "gen_label": "( JOIN ( R [ Biodiversity Repository ID ] ) [ Natural History Museum, London ] )"
    },
    {
        "question": "Question: { Where is {personnel} of {product of} {Boeing 777} ? }",
        "predicted_query": [
            "( JOIN ( R [ personnel ] ) ( JOIN ( R [ product ] ) [ Boeing 777 ] ) )",
            "( JOIN ( R [ work location ] ) ( JOIN ( R [ product or service ] ) [ Boeing 777 ] ) )",
            "( JOIN [ personnel ] [ Boeing 777 ] )",
            "( JOIN ( R [ personnel ] ) ( JOIN ( R [ manufacturer ] ) [ Boeing 777 ] ) )",
            "( JOIN ( R [ staff member ] ) ( JOIN ( R [ manufacturer ] ) [ Boeing 777 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ employees ] ) ( JOIN ( R [ manufacturer ] ) [ Boeing 777 ] ) )"
    },
    {
        "question": "Question: { What is Opera Vivra singer ID for Marian Anderson ? }",
        "predicted_query": [
            "( JOIN ( R [ Opera Vivra singer ID ] ) [ Marian Anderson ] )",
            "( JOIN ( R [ Opera Vivra singer ID ] ) [ Marian Anderson ] )",
            "( JOIN [ Opera Vivra singer ID ] [ Marian Anderson ] )",
            "[ jointed by ] [ Marian Anderson ]",
            "( AND ( JOIN [ Vivace opera database singer ID ] [ Marian Anderson ] ) ( JOIN ( R [ ID in Vivace opera database ] ) [ Marian Anderson ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Opera Vivra singer ID ] ) [ Marian Anderson ] )"
    },
    {
        "question": "Question: { What is the official language of the Government of India? }",
        "predicted_query": [
            "( JOIN ( R [ official language ] ) [ Government of India ] )",
            "( JOIN ( R [ official language ] ) ( JOIN ( R [ country ] ) [ Government of India ] ) )",
            "( JOIN [ official language ] [ Government of India ] )",
            "( AND ( JOIN [ has official language ] ) ( JOIN ( R [ official language ] ) [ Government of India ] ) )",
            "### Formerly:"
        ],
        "gen_label": "( JOIN ( R [ official language ] ) ( JOIN ( R [ has subsidiary ] ) [ Government of India ] ) )"
    },
    {
        "question": "Question: { Which is the category which is related to the list of Kassite dynasty? }",
        "predicted_query": [
            "( JOIN ( R [ category ] ) ( JOIN ( R [ contains the administrative territorial entity ] ) [ Kassite dynasty ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Kassite dynasty ] ) ( JOIN ( R [ category ] ) [ Kassite dynasty ] ) )",
            "( JOIN [ category ] [ Kassite dynasty ] )",
            "( JOIN [ category of ] [ Kassite dynasty ] )",
            "( AND ( JOIN [ category of ] [ list of Kassite dynasty ] ) ( JOIN ( R [ follows ] ) [ Kassite dynasty ] ) )"
        ],
        "gen_label": "( JOIN ( R [ category related to list ] ) [ Kassites ] )"
    },
    {
        "question": "Question: { What is the STD code of the chief lieutenant of the Great Seljuq Empire? }",
        "predicted_query": [
            "( JOIN ( R [ STD code ] ) ( JOIN ( R [ military rank ] ) [ Great Seljuq Empire ] ) )",
            "( AND ( JOIN [ diplomatic representation ] [ chief lieutenant ] ) ( JOIN ( R [ diplomatic representation ] ) [ Great Seljuq Empire ] ) )",
            "( JOIN ( R [ STD code ] ) ( JOIN ( R [ chief lieutenant ] ) [ Great Seljuq Empire ] ) )",
            "( AND ( JOIN [ headquarters location ] [ Seljuk Empire ] ) ( JOIN ( R [ diplomatic representation ] ) [ Turkey ] ) )",
            "( JOIN ( R [ STD country code ] ) ( JOIN ( R [ chief lieutenant ] ) [ Great Seljuq Empire ] ) )"
        ],
        "gen_label": "( JOIN ( R [ local dialing code ] ) ( JOIN ( R [ capital ] ) [ Seljuk Empire ] ) )"
    },
    {
        "question": "Question: { Where did the Battle of Yarmouk take place ? What continent and neighbor did this take place? }",
        "predicted_query": [
            "( AND ( JOIN [ shares border with ] [ continent ] ) ( JOIN ( R [ location ] ) [ Battle of Yarmouk ] ) )",
            "( AND ( JOIN [ shares border with ] [ Africa ] ) ( JOIN ( R [ location ] ) [ Battle of Yarmouk ] ) )",
            "( AND ( JOIN [ continent or region ] [ neighbor ] ) ( JOIN ( R [ place of occurrence ] ) [ Battle of Yarmouk ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ country of battle ] ) [ Battle of Yarmouk ] ) )",
            "( AND ( JOIN [ shares border with ] [ Asia ] ) ( JOIN ( R [ location ] ) [ Battle of Yarmouk ] ) )"
        ],
        "gen_label": "( JOIN ( R [ continent ] ) ( JOIN ( R [ location ] ) [ Battle of Yarmouk ] ) )"
    },
    {
        "question": "Question: { Who is the singer who performs Break it to Me Gently? }",
        "predicted_query": [
            "( JOIN ( R [ performer ] ) ( JOIN ( R [ composer ] ) [ Break It to Me Gently ] ) )",
            "( JOIN [ performer ] [ Break It to Me Gently ] )",
            "( JOIN ( R [ performer ] ) [ Break It to Me Gently ] )",
            "( JOIN ( R [ performer ] ) ( JOIN ( R [ performer ] ) [ Break It to Me Gently ] ) )",
            "( AND ( JOIN [ performed by ] [ Break It to Me Gently ] ) ( JOIN ( R [ performer ] ) [ Break It to Me Gently ] ) )"
        ],
        "gen_label": "( JOIN ( R [ influenced by ] ) ( JOIN ( R [ performer ] ) [ Break It to Me Gently ] ) )"
    },
    {
        "question": "Question: { What is Noam Chomsky's Quora username? }",
        "predicted_query": [
            "( JOIN ( R [ Quora user name ] ) [ Noam Chomsky ] )",
            "( JOIN ( R [ Quora username ] ) [ Noam Chomsky ] )",
            "( JOIN [ Quora username ] [ Noam Chomsky ] )",
            "( JOIN ( R [ Quora username ] ) [ Noam Chomsky ] )",
            "( AND ( JOIN [ has user page on ] [ Quora ] ) ( JOIN ( R [ user name ] ) [ Noam Chomsky ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Quora username ] ) [ Noam Chomsky ] )"
    },
    {
        "question": "Question: { Which geographical locale is under Patagonia, whose appointed representatives form the cabinet of Chile? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Patagonia ] ) ( JOIN ( R [ head of government ] ) [ Chile ] ) )",
            "( AND ( JOIN [ member of ] [ cabinet of Chile ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Patagonia ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Patagonia ] ) ( JOIN ( R [ member of cabinet ] ) [ Chile ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Patagonia ] ) ( JOIN ( R [ head of government ] ) [ Chile ] ) )",
            "( AND ( JOIN [ member of ] [ cabinet of Chile ] ) ( JOIN ( R [ located in ] ) [ Patagonia ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ executive body ] [ Cabinet of Chile ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Patagonia ] ) )"
    },
    {
        "question": "Question: { What field of career is Frédéric Bolley career? }",
        "predicted_query": [
            "( JOIN ( R [ field of career ] ) ( JOIN ( R [ occupation ] ) [ Frédéric Bolley ] ) )",
            "( JOIN ( R [ field of work ] ) ( JOIN ( R [ occupation ] ) [ Frédéric Bolley ] ) )",
            "( JOIN [ field of career ] [ Frédéric Bolley ] )",
            "( JOIN ( R [ field of work ] ) ( JOIN ( R [ occupation ] ) [ Frédéric Bolley ] ) )",
            "( AND ( JOIN [ occupation ] [ career ] ) ( JOIN ( R [ field of work ] ) [ Frédéric Bolley ] ) )"
        ],
        "gen_label": "( JOIN ( R [ field of this occupation ] ) ( JOIN ( R [ occupation ] ) [ Frédéric Bolley ] ) )"
    },
    {
        "question": "Question: { What is the wingspan of a Airbus A340? }",
        "predicted_query": [
            "( JOIN ( R [ wingspan ] ) [ Airbus A340 ] )",
            "( JOIN [ wingspan ] [ Airbus A340 ] )",
            "( JOIN ( R [ wing span ] ) [ Airbus A340 ] )",
            "( JOIN ( R [ wingspan ] ) ( JOIN ( R [ manufacturer ] ) [ Airbus A340 ] ) )",
            "( JOIN ( R [ wing area ] ) ( JOIN ( R [ has wing area ] ) [ Airbus A340 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ wingspan ] ) [ Airbus A340 ] )"
    },
    {
        "question": "Question: { Which follows Rhineland-Palatinate? }",
        "predicted_query": [
            "( JOIN ( R [ follows ] ) [ Rhineland-Palatinate ] )",
            "( JOIN [ follows ] [ Rhineland-Palatinate ] )",
            "( JOIN ( R [ follows ] ) [ Rhineland-Palatinate ] )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Rhineland-Palatinate ] ) ( JOIN ( R [ follows ] ) [ Rhineland-Palatinate ] ) )",
            "( JOIN ( R [ follows ] ) [ Rhineland-Palatinate ] )"
        ],
        "gen_label": "( JOIN ( R [ follows ] ) [ Rhineland-Palatinate ] )"
    },
    {
        "question": "Question: { What is World Heritage Site ID for Taj Mahal? }",
        "predicted_query": [
            "( JOIN [ World Heritage Site ID ] [ Taj Mahal ] )",
            "( JOIN ( R [ World Heritage Site ID ] ) [ Taj Mahal ] )",
            "( JOIN ( R [ World Heritage Site ID ] ) [ Taj Mahal ] )",
            "( JOIN ( R [ UNESCO World Heritage Site ID ] ) [ Taj Mahal ] )",
            "( JOIN ( R [ World Heritage Site ID ] ) [ Taj Mahal ] )"
        ],
        "gen_label": "( JOIN ( R [ World Heritage Site ID ] ) [ Taj Mahal ] )"
    },
    {
        "question": "Question: { \"Who is {famous for} of {Andrea Bocelli}, which has {music genre} is {pop music} ?\" }",
        "predicted_query": [
            "( AND ( JOIN [ genre ] [ pop music ] ) ( JOIN ( R [ notable work ] ) [ Andrea Bocelli ] ) )",
            "( AND ( JOIN [ genre ] [ pop music ] ) ( JOIN ( R [ famous for ] ) [ Andrea Bocelli ] ) )",
            "[ JOIN ( R [ genre ] ) ] [ Andrea Bocelli ]",
            "( AND ( JOIN [ music genre ] [ pop music ] ) ( JOIN ( R [ famous for ] ) [ Andrea Bocelli ] ) )",
            "( AND ( JOIN [ musical genre ] [ pop music ] ) ( JOIN ( R [ notable work ] ) [ Andrea Bocelli ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ genre ] [ pop music ] ) ( JOIN ( R [ notable work ] ) [ Andrea Bocelli ] ) )"
    },
    {
        "question": "Question: { What is Biographical Directory of Federal ID for John Jay? }",
        "predicted_query": [
            "[ JOIN [ R [ Biographical Directory of Federal Judges ID ] ] [ John Jay ] ]",
            "( JOIN ( R [ Biographical Directory of Federal Judges ID ] ) [ John Jay ] )",
            "( JOIN [ Biographical Directory of Federal ID ] [ John Jay ] )",
            "[]",
            "( AND ( JOIN [ Federal ID number ] [ Biographical Directory of the United States Congress ID for John Jay ] ) ( JOIN ( R [ given name ] ) [ John Jay ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Biographical Directory of Federal Judges alpha ID ] ) [ John Jay ] )"
    },
    {
        "question": "Question: { When is Q48460 going to land? }",
        "predicted_query": [
            "( JOIN ( R [ time of arrival ] ) ( JOIN ( R [ location of death ] ) [ Q48460 ] ) )",
            "( JOIN [ time of arrival ] [ Q48460 ] )",
            "( JOIN ( R [ date of landing ] ) [ Q48460 ] )",
            "( AND ( JOIN [ location of discovery ] [ Q48460 ] ) ( JOIN ( R [ time of discovery ] ) [ Q48460 ] ) )",
            "( JOIN ( R [ landed on ] ) ( JOIN ( R [ country of manufacture ] ) [ Q48460 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Dewey Decimal Classification ] ) ( JOIN ( R [ has cause ] ) [ free fall ] ) )"
    },
    {
        "question": "Question: { Which is the ROME Occupation Code (v3) of the prosecutor? }",
        "predicted_query": [
            "( JOIN ( R [ ROME Occupation Code (v3) ] ) [ prosecutor ] )",
            "( JOIN ( R [ ROME Occupation Code ( v3 ) ] ) [ prosecutor ] )",
            "( JOIN [ ROME Occupation Code (v3) ] [ prosecutor ] )",
            "( JOIN ( R [ ROME Occupation Code (v3) ] ) [ prosecutor ] )",
            "( JOIN ( R [ ROME occupation code (v3 ) ] ) [ prosecutor ] )"
        ],
        "gen_label": "( JOIN ( R [ ROME Occupation Code ] ) [ prosecutor ] )"
    },
    {
        "question": "Question: { What is the form of a carrot that has been played and is Dandelin spheres? }",
        "predicted_query": [
            "( AND ( JOIN [ has part ] [ Dandelin sphere ] ) ( JOIN ( R [ shape ] ) [ carrot ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Dandelin spheres ] ) ( JOIN ( R [ shape ] ) [ carrot ] ) )",
            "( AND ( JOIN [ uses ] [ Dandelin sphere ] ) ( JOIN ( R [ shape ] ) [ carrot ] ) )",
            "( AND ( JOIN [ has part ] [ Dandelin sphere ] ) ( JOIN ( R [ form of ] ) [ carrot ] ) )",
            "( AND ( JOIN [ has Dandelin sphere ] ) ( JOIN ( R [ shape ] ) [ carrot ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ used by ] [ Dandelin spheres ] ) ( JOIN ( R [ shape ] ) [ carrot ] ) )"
    },
    {
        "question": "Question: { what is rector of fee university of berlin that has craft is university teacher }",
        "predicted_query": [
            "( JOIN ( R [ faculty member ] ) ( JOIN ( R [ university ] ) [ University of Berlin ] ) )",
            "( AND ( JOIN [ occupation ] [ university teacher ] ) ( JOIN ( R [ faculty member ] ) [ University of Berlin ] ) )",
            "( JOIN ( R [ faculty member ] ) ( JOIN ( R [ field of work ] ) [ University of Berlin ] ) )",
            "( AND ( JOIN [ occupation ] [ teacher ] ) ( JOIN ( R [ faculty member ] ) [ University of Berlin ] ) )",
            "( JOIN [ university teacher ] [ craft ] ) ( JOIN ( R [ faculty member ] ) [ University of Berlin ] )"
        ],
        "gen_label": "( AND ( JOIN [ occupation ] [ university teacher ] ) ( JOIN ( R [ rector ] ) [ Free University Berlin ] ) )"
    },
    {
        "question": "Question: { Which are the primary destinations for Hachinohe? }",
        "predicted_query": [
            "( JOIN ( R [ primary destination ] ) [ Hachinohe ] )",
            "( JOIN [ primary destination ] [ Hachinohe ] )",
            "( JOIN ( R [ primary destination ] ) [ Hachinohe ] )",
            "( JOIN ( R [ primary destination ] ) ( JOIN ( R [ located in ] ) [ Hachinohe ] ) )",
            "( JOIN ( R [ destination ] ) ( JOIN ( R [ served by ] ) [ Hachinohe ] ) )"
        ],
        "gen_label": "( JOIN [ primary destinations ] [ Hachinohe ] )"
    },
    {
        "question": "Question: { What is ISO 639-2 cod for vietnamese }",
        "predicted_query": [
            "( JOIN ( R [ ISO 639-2 code ] ) [ Vietnamese ] )",
            "( JOIN [ ISO 639-2 code ] [ Vietnamese ] )",
            "( [ JOIN ] [ ISO 639-2 code ] )",
            "( JOIN ( R [ IATA airport code ] ) [ Vietnam ] )",
            "( JOIN ( R [ ISO 639-2 code ] ) [ Vietnamese ] )"
        ],
        "gen_label": "( JOIN ( R [ ISO 639-2 code ] ) [ Vietnamese ] )"
    },
    {
        "question": "Question: { Who is the diplomatic relation to the United States of America whose Chief of State is Mswati III? }",
        "predicted_query": [
            "( AND ( JOIN [ diplomatic relation ] [ United States ] ) ( JOIN ( R [ head of state ] ) [ Mswati III ] ) )",
            "( AND ( JOIN [ has diplomatic relations with ] [ United States of America ] ) ( JOIN ( R [ head of state ] ) [ Mswati III ] ) )",
            "( JOIN ( R [ diplomatic relation ] ) [ United States ] )",
            "( AND ( JOIN [ diplomatic relation ] [ United States of America ] ) ( JOIN ( R [ head of state ] ) [ Mswati III ] ) )",
            "( AND ( JOIN [ diplomatic relation to ] [ United States ] ) ( JOIN ( R [ head of state ] ) [ Mswati III ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ head of state ] [ Mswati III ] ) ( JOIN ( R [ diplomatic relation ] ) [ United States ] ) )"
    },
    {
        "question": "Question: { Which is the UNESCO language status for Finnish? }",
        "predicted_query": [
            "( JOIN ( R [ UNESCO language status ] ) [ Finnish ] )",
            "( JOIN [ UNESCO language status ] [ Finnish ] )",
            "( [ joined by ] [ UNESCO language status ] [ Finnish ] )",
            "( AND ( JOIN [ language status ] [ UNESCO language status for Finnish ] ) ( JOIN ( R [ spoken in ] ) [ Finnish ] ) )",
            "( JOIN ( R [ UNESCO language status ] ) [ Finnish ] )"
        ],
        "gen_label": "( JOIN ( R [ UNESCO language status ] ) [ Finnish ] )"
    },
    {
        "question": "Question: { is Rene Maggritte the personal ID of Saint louis Art museum? }",
        "predicted_query": [
            "( JOIN ( R [ ID ] ) ( JOIN ( R [ artist ] ) [ Saint Louis Art Museum ] ) )",
            "( AND ( JOIN [ person ID ] [ Saint Louis Art Museum ] ) ( JOIN ( R [ question ] ) [ René Magritte ] ) )",
            "( AND ( JOIN [ ID.com ID ] [ René Magritte ] ) ( JOIN ( R [ located in ] ) [ Saint Louis Art Museum ] ) )",
            "( JOIN ( R [ personal ID ] ) ( JOIN ( R [ located in ] ) [ Saint Louis Art Museum ] ) )",
            "( JOIN ( R [ personal ID ] ) [ Saint Louis Art Museum ] )"
        ],
        "gen_label": "( JOIN ( R [ Saint Louis Art Museum person ID ] ) [ René Magritte ] )"
    },
    {
        "question": "Question: { What is the Library of Congress JukeBox ID for Joseph Haydn? }",
        "predicted_query": [
            "( JOIN ( R [ Library of Congress Jukebox ID ] ) [ Joseph Haydn ] )",
            "( JOIN ( R [ Library of Congress JukeBox ID ] ) [ Joseph Haydn ] )",
            "( JOIN ( R [ Jukebox ID ] ) [ Joseph Haydn ] )",
            "( AND ( JOIN [ Jukebox: ID ] [ Joseph Haydn ] ) ( JOIN ( R [ question ] ) [ Joseph Haydn ] ) )",
            "( JOIN ( R [ Library of Congress Jukebox ID ] ) [ Joseph Haydn ] )"
        ],
        "gen_label": "( JOIN ( R [ Library of Congress JukeBox ID ( former scheme ) ] ) [ Joseph Haydn ] )"
    },
    {
        "question": "Question: { What is {split from} of {historic period} of {Sword handle-MA 1748} ? }",
        "predicted_query": [
            "( JOIN ( R [ divided from ] ) ( JOIN ( R [ part of ] ) [ Sword handle-MA 1748 ] ) )",
            "( JOIN ( R [ part of the series ] ) ( JOIN ( R [ part of the series ] ) [ Sword handle-MA 1748 ] ) )",
            "( JOIN [ historic period ] [ Sword handle-MA 1748 ] )",
            "( AND ( JOIN [ follows ] [ Sword handle-MA 1748 ] ) ( JOIN ( R [ follows ] ) [ Sword ] ) )",
            "( JOIN ( R [ separated from ] ) ( JOIN ( R [ historical period ] ) [ sword handle-MA 1748 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ follows ] ) ( JOIN ( R [ time period ] ) [ Sword handle-MA 1748 ] ) )"
    },
    {
        "question": "Question: { Which is the consecrator of Pimen I of Moscow? }",
        "predicted_query": [
            "( JOIN ( R [ consecrator ] ) ( JOIN ( R [ bishop ] ) [ Pimen I of Moscow ] ) )",
            "( JOIN ( R [ consecrator ] ) [ Pimen I of Moscow ] )",
            "( JOIN ( R [ consecrated by ] ) ( JOIN ( R [ bishop ] ) [ Pimen I of Moscow ] ) )",
            "( JOIN [ consecrator ] [ Pimen I of Moscow ] )",
            "( AND ( JOIN [ has consecrator ] [ Pimen I of Moscow ] ) ( JOIN ( R [ follows ] ) [ Pimen I of Moscow ] ) )"
        ],
        "gen_label": "( JOIN ( R [ consecrator ] ) [ Pimen I of Moscow ] )"
    },
    {
        "question": "Question: { What is SRCFB ID for Mike Ditka? }",
        "predicted_query": [
            "( JOIN ( R [ SRCFB ID ] ) [ Mike Ditka ] )",
            "( JOIN ( R [ SRCFB ID ] ) [ Mike Ditka ] )",
            "[ JOIN ] [ SRCFB ID ] [ Mike Ditka ] ",
            "[ joint ] [ question joined ] [ Mike Ditka ] ]",
            "( JOIN ( R [ Sports Reference player ID ] ) [ Mike Ditka ] )"
        ],
        "gen_label": "( JOIN ( R [ Sports Reference college football player ID ] ) [ Mike Ditka ] )"
    },
    {
        "question": "Question: { Whose job is it to depict Grazing Sheeps? }",
        "predicted_query": [
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ depicted ] ) [ Grazing Sheep ] ) )",
            "( AND ( JOIN [ depicts ] [ Grazing Sheep ] ) ( JOIN ( R [ occupation ] ) [ Grazing Sheep ] ) )",
            "( JOIN [ depicts ] [ Grazing Sheep ] )",
            "( JOIN [ occupation ] [ depicts ] ) ( JOIN ( R [ employer ] ) [ Grazing Sheep ] )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ depicts ] ) [ Grazing Sheep ] ) )"
        ],
        "gen_label": "( JOIN ( R [ field of this occupation ] ) ( JOIN ( R [ depicts ] ) [ Grazing Sheeps ] ) )"
    },
    {
        "question": "Question: { Who died in Pachacutec, the twin city of Krakow? }",
        "predicted_query": [
            "( AND ( JOIN [ twinned administrative body ] [ Kraków ] ) ( JOIN ( R [ place of death ] ) [ Pachacutec ] ) )",
            "[LOGFOR] { [ twinned administrative body ] JOIN [ Pachacutec ]",
            "( JOIN ( R [ twin city ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Kraków ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Kraków ] ) ( JOIN ( R [ death place ] ) [ Pachacutec ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Kraków ] ) ( JOIN ( R [ died ] ) [ Pachacutec ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ twinned administrative body ] [ Kraków ] ) ( JOIN ( R [ place of death ] ) [ Pachacútec ] ) )"
    },
    {
        "question": "Question: { Who wrote the book 'Pinocchio'? }",
        "predicted_query": [
            "( JOIN ( R [ author ] ) [ Pinocchio ] )",
            "( JOIN ( R [ author ] ) ( JOIN ( R [ writer ] ) [ Pinocchio ] ) )",
            "( JOIN ( R [ writer or artist ] ) ( JOIN ( R [ author ] ) [ Pinocchio ] ) )",
            "( JOIN [ written by ] [ Pinocchio ] )",
            "( JOIN [ author ] [ Pinocchio ] )"
        ],
        "gen_label": "( AND ( JOIN [ occupation ] [ novelist ] ) ( JOIN ( R [ creator ] ) [ Pinocchio ] ) )"
    },
    {
        "question": "Question: { Forename of Sean O'Casey is said to be the same as Johannes? }",
        "predicted_query": [
            "( AND ( JOIN [ given name ] [ Johannes ] ) ( JOIN ( R [ given name ] ) [ Seán O'Casey ] ) )",
            "( AND ( JOIN [ given name ] [ Johannes ] ) ( JOIN ( R [ given name ] ) [ Sean O'Casey ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Johannes ] ) ( JOIN ( R [ given name ] ) [ Seán O'Casey ] ) )",
            "( JOIN ( R [ different name ] ) ( JOIN ( R [ given name ] ) [ Seán O'Casey ] ) )",
            "( JOIN ( R [ name ] ) ( JOIN ( R [ given name ] ) [ Johannes O'Kane ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ said to be the same as ] [ Jóhannes ] ) ( JOIN ( R [ given name ] ) [ Seán O'Casey ] ) )"
    },
    {
        "question": "Question: { What is the history of and what type of music is Living Next Door to the God of Love? }",
        "predicted_query": [
            "( JOIN ( R [ history of ] ) ( JOIN ( R [ genre ] ) [ Living Next Door to the God of Love ] ) )",
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ composer ] ) [ Living Next Door to the God of Love ] ) )",
            "( AND ( JOIN [ musical genre ] [ pop music ] ) ( JOIN ( R [ history of ] ) [ Living Next Door to the God of Love ] ) )",
            "( AND ( JOIN [ genre ] [ pop music ] ) ( JOIN ( R [ influenced by ] ) [ Living Next Door to the God of Love ] ) )",
            "( JOIN ( R [ type of music ] ) ( JOIN ( R [ genre ] ) [ Living Next Door to the God of Love ] ) )"
        ],
        "gen_label": "( JOIN ( R [ history of topic ] ) ( JOIN ( R [ genre ] ) [ Living Next Door to the God of Love ] ) )"
    },
    {
        "question": "Question: { Which is CESAR person ID for Pierre Choderlos de Laclos? }",
        "predicted_query": [
            "( JOIN ( R [ CESAR person ID ] ) [ Pierre Choderlos de Laclos ] )",
            "[ JOIN ( R [ CESAR person ID ] ) ] ",
            "( JOIN [ CESAR person ID ] [ Pierre Choderlos de Laclos ] )",
            "( JOIN ( R [ Cesar person ID ] ) [ Pierre Choderlos de Laclos ] )",
            "( JOIN ( R [ CESAR person ID ] ) [ Pierre Choderlos de Laclos ] )"
        ],
        "gen_label": "( JOIN ( R [ CESAR person ID ] ) [ Pierre Choderlos de Laclos ] )"
    },
    {
        "question": "Question: { Where does Haridwar reside? }",
        "predicted_query": [
            "( JOIN [ resident in ] [ Haridwar ] )",
            "( JOIN ( R [ capital ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Haridwar ] ) )",
            "( JOIN [ residence ] [ Haridwar ] )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ country of citizenship ] ) [ Haridwar ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Haridwar ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Haridwar ] ) )"
        ],
        "gen_label": "( JOIN [ residence ] [ Haridwar ] )"
    },
    {
        "question": "Question: { Which is the Rolling Stone artist ID of blink-182? }",
        "predicted_query": [
            "( JOIN ( R [ Rolling Stone artist ID ] ) [ blink-182 ] )",
            "( [ JOIN ] [ Rolling Stone artist ID ] )",
            "( JOIN ( R [ Rolling Stone artist ID ] ) [ blink-182 ] )",
            "( JOIN ( R [ Rolling Stone artist ID ] ) [ Blink 182 ] )",
            "( JOIN ( R [ Rolling Stone Artist ID ] ) [ blink-182 ] )"
        ],
        "gen_label": "( JOIN ( R [ Rolling Stone artist ID ] ) [ Blink-182 ] )"
    },
    {
        "question": "Question: { Which is the category of associated people for Nógrád County? }",
        "predicted_query": [
            "( JOIN ( R [ category of associated people ] ) [ Nógrád County ] )",
            "( JOIN [ category of associated people ] [ Nógrád County ] )",
            "( JOIN ( R [ category ] ) ( JOIN ( R [ people associated with ] ) [ Nógrád County ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Nógrád County ] ) ( JOIN ( R [ category ] ) [ Nógrád County ] ) )",
            "( JOIN ( R [ category of associated people ] ) [ Nógrád County ] )"
        ],
        "gen_label": "( JOIN ( R [ category of associated people ] ) [ Nógrád County ] )"
    },
    {
        "question": "Question: { What has influenced the sculptors of Man in Shower in Beverly Hills? }",
        "predicted_query": [
            "( JOIN ( R [ influenced by ] ) ( JOIN ( R [ sculptor ] ) [ Man in Shower in Beverly Hills ] ) )",
            "( AND ( JOIN [ influenced by ] [ Man in Shower in Beverly Hills ] ) ( JOIN ( R [ influenced by ] ) [ sculptor ] ) )",
            "( JOIN ( R [ influenced by ] ) ( JOIN ( R [ artist ] ) [ Man in Shower in Beverly Hills ] ) )",
            "( AND ( JOIN [ has influenced ] [ Sculptors of Man in Shower in Beverly Hills ] ) ( JOIN ( R [ influenced by ] ) [ Man in Shower in Beverly Hills ] ) )",
            "[ JOIN ] [ influenced by ] [ Man in Shower in Beverly Hills ]"
        ],
        "gen_label": "( JOIN ( R [ influenced by ] ) ( JOIN ( R [ creator ] ) [ Man in Shower in Beverly Hills ] ) )"
    },
    {
        "question": "Question: { What is ChemSpider ID of tungsten carbide ? }",
        "predicted_query": [
            "( JOIN ( R [ ChemSpider ID ] ) [ tungsten carbide ] )",
            "( JOIN ( R [ ChemSpider ID ] ) [ tungsten carbide ] )",
            "[ JOIN [ ChemSpider ID ] ] [ tungsten carbide ]",
            "( [ joined by ] [ tungsten carbide ] )",
            "( JOIN [ ChemSpider ID ] [ tungsten carbide ] )"
        ],
        "gen_label": "( JOIN ( R [ ChemSpider ID ] ) [ tungsten carbide ] )"
    },
    {
        "question": "Question: { What's the Library ID of The Coptic Library? }",
        "predicted_query": [
            "( JOIN ( R [ Library ID ] ) [ Coptic Library ] )",
            "( JOIN ( R [ Library ID ] ) [ The Coptic Library ] )",
            "( JOIN ( R [ LibraryThing ID ] ) [ The Coptic Library ] )",
            "[ JOIN [ library ID ] ] [ The Coptic Library",
            "( JOIN [ Library ID ] [ The Coptic Library ] )"
        ],
        "gen_label": "( JOIN ( R [ The Coptic Library ID ] ) [ Coptic ] )"
    },
    {
        "question": "Question: { What are the characters that appear in Nastes? }",
        "predicted_query": [
            "( JOIN ( R [ character ] ) ( JOIN ( R [ present in work ] ) [ Nastes ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Nastes ] ) ( JOIN ( R [ character ] ) [ Nastes ] ) )",
            "( JOIN ( R [ characters ] ) [ Nastes ] )",
            "( JOIN [ characters appear in ] [ Nastes ] )",
            "( JOIN ( R [ character(s) ] ) ( JOIN ( R [ present in work ] ) [ Nastes ] ) )"
        ],
        "gen_label": "( JOIN ( R [ characters ] ) ( JOIN ( R [ present in work ] ) [ Nastes ] ) )"
    },
    {
        "question": "Question: { what is live journal ID for mikhail prokhorov? }",
        "predicted_query": [
            "( JOIN ( R [ LiveJournal ID ] ) [ Mikhail Prokhorov ] )",
            "( JOIN ( R [ LiveJournal ID ] ) [ Mikhail Prokhorov ] )",
            "( AND ( JOIN [ Journal ID ] [ Mikhail Prokhorov ] ) ( JOIN ( R [ ID ] ) [ Mikhail Prokhorov ] ) )",
            "( JOIN ( R [ LiveJournal user ID ] ) [ Mikhail Prokhorov ] )",
            "( [ joined by ] [ Mikhail Prokhorov ] )"
        ],
        "gen_label": "( JOIN ( R [ LiveJournal ID ] ) [ Mikhail Prokhorov ] )"
    },
    {
        "question": "Question: { Which is {twin cities} of {location} {Subh-i-Azal} ? }",
        "predicted_query": [
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Subh-i-Azal ] ) )",
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ location ] ) [ Subh-i-Azal ] ) )",
            "( JOIN ( R [ twin city ] ) ( JOIN ( R [ location ] ) [ Subh-i-Azal ] ) )",
            "( JOIN ( R [ twin city ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Subh-i-Azal ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Subh-i-Azal ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Subh-i-Azal ] ) )"
        ],
        "gen_label": "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ place of birth ] ) [ Subh-i-Azal ] ) )"
    },
    {
        "question": "Question: { Where is the location of Bombing of Guernica? }",
        "predicted_query": [
            "( JOIN ( R [ location ] ) ( JOIN ( R [ location of ] ) [ Bombing of Guernica ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ location ] ) [ Bombing of Guernica ] ) )",
            "( JOIN [ location of ] [ Bombing of Guernica ] )",
            "( JOIN [ located in the administrative territorial entity ] [ Bombing of Guernica ] )",
            "( JOIN ( R [ place of death ] ) ( JOIN ( R [ location of ] ) [ Bombing of Guernica ] ) )"
        ],
        "gen_label": "( JOIN ( R [ location ] ) [ Bombing of Guernica ] )"
    },
    {
        "question": "Question: { Which is the New Zealand Organisms Register ID of Punica granatum? }",
        "predicted_query": [
            "( JOIN ( R [ New Zealand Organisms Register ID ] ) [ pomegranate ] )",
            "( JOIN ( R [ New Zealand Organisms Register ID ] ) [ Punica granatum ] )",
            "( AND ( JOIN [ NZOR taxon ID ] [ Punica granatum ] ) ( JOIN ( R [ question ] ) [ What is the New Zealand Organisms Register taxon ID of Punica granatum? ] ) )",
            "( JOIN ( R [ New Zealand Organisms Register ID ] ) [ Punica granatum ] )",
            "( JOIN ( R [ New Zealand Organisms Register taxon ID ] ) [ Punica granatum ] )"
        ],
        "gen_label": "( JOIN ( R [ New Zealand Organisms Register ID ] ) [ pomegranate ] )"
    },
    {
        "question": "Question: { What is the domain of Scandinavian literature whose working is Swedish? }",
        "predicted_query": [
            "( AND ( JOIN [ field of work ] [ Swedish ] ) ( JOIN ( R [ field of study ] ) [ Scandinavian literature ] ) )",
            "( AND ( JOIN [ working country ] [ Sweden ] ) ( JOIN ( R [ field of work ] ) [ Scandinavian literature ] ) )",
            "( AND ( JOIN [ occupation ] [ writer ] ) ( JOIN ( R [ field of work ] ) [ Scandinavian literature ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Scandinavian literature ] ) ( JOIN ( R [ field of work ] ) [ Swedish ] ) )",
            "( JOIN ( R [ field of work ] ) ( JOIN ( R [ field of work ] ) [ Swedish ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ is the study of ] [ Swedish ] ) ( JOIN ( R [ studied in ] ) [ Scandinavian literature ] ) )"
    },
    {
        "question": "Question: { What body of water borders B-29 Serial No. 45-21847? }",
        "predicted_query": [
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ manufacturer ] ) [ B-29 Serial No. 45-21847 ] ) )",
            "( JOIN ( R [ bordering body of water ] ) ( JOIN ( R [ manufacturer ] ) [ B-29 Serial No. 45-21847 ] ) )",
            "( AND ( JOIN [ shares body of water ] [ Lake Biwa ] ) ( JOIN ( R [ manufacturer ] ) [ Boeing B-29 Superfortress ] ) )",
            "( JOIN [ shares border with ] [ B-29 Serial No. 45-21847 ] )",
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ manufactured by ] ) [ B-29 Serial No. 45-21847 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ dam ] ) ( JOIN ( R [ located in or next to body of water ] ) [ B-29 Serial No. 45-21847 ] ) )"
    },
    {
        "question": "Question: { The ISOCAT id of morpheme is? }",
        "predicted_query": [
            "( JOIN ( R [ ISOCAT ID ] ) [ morpheme ] )",
            "( JOIN ( R [ ISOCAT ID ] ) [ morpheme ] )",
            "( JOIN [ ISOCAT ID ] [ morpheme ] )",
            "( JOIN ( R [ ISONCAT ID ] ) [ morpheme ] )",
            "( AND ( JOIN [ International Organization for Standardization Concept and Terminology ] [ morpheme ] ) ( JOIN ( R [ ID ] ) [ International Organization for Standardization Concept and Terminology ] ) )"
        ],
        "gen_label": "( JOIN ( R [ ISOCAT ID ] ) [ morpheme ] )"
    },
    {
        "question": "Question: { Which is Kvikmyndir person ID for Shonda Rhimes? }",
        "predicted_query": [
            "( JOIN ( R [ Kvikmyndir person ID ] ) [ Shonda Rhimes ] )",
            "( JOIN ( R [ Kvikmyndir person ID ] ) [ Shonda Rhimes ] )",
            "( AND ( JOIN [ person ID ] [ Kvikmyndir ] ) ( JOIN ( R [ ID ] ) [ Shonda Rhimes ] ) )",
            "( JOIN ( R [ Kvikmyndir person ID ] ) [ Shonda Rhimes ] )",
            "( JOIN ( R [ Kvikmyndir person ID ] ) [ Shonda Rhimes ] )"
        ],
        "gen_label": "( JOIN ( R [ Kvikmyndir person ID ] ) [ Shonda Rhimes ] )"
    },
    {
        "question": "Question: { who accused of took part of Homare Sawa ? }",
        "predicted_query": [
            "( JOIN [ accused of ] [ Homare Sawa ] )",
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ participant in ] ) [ Homare Sawa ] ) )",
            "( JOIN ( R [ accused of ] ) [ Homare Sawa ] )",
            "( AND ( JOIN [ participant of ] [ Homare Sawa ] ) ( JOIN ( R [ influenced by ] ) [ women's association football ] ) )",
            "( JOIN ( R [ accused of ] ) ( JOIN ( R [ participant ] ) [ Homare Sawa ] ) )"
        ],
        "gen_label": "( JOIN ( R [ participant ] ) ( JOIN ( R [ participant in ] ) [ Homare Sawa ] ) )"
    },
    {
        "question": "Question: { What is faith of musician of Shatter Me ? }",
        "predicted_query": [
            "( JOIN ( R [ religion ] ) ( JOIN ( R [ genre ] ) [ Shatter Me ] ) )",
            "( JOIN [ faith ] [ Shatter Me ] )",
            "( JOIN ( R [ faith ] ) ( JOIN ( R [ composer ] ) [ Shatter Me ] ) )",
            "( JOIN [ religion or worldview ] [ Shatter Me ] )",
            "( JOIN ( R [ religious or philosophical belief system ] ) ( JOIN ( R [ genre ] ) [ Shatter Me ] ) )"
        ],
        "gen_label": "( JOIN ( R [ religion or worldview ] ) ( JOIN ( R [ performer ] ) [ Shatter Me ] ) )"
    },
    {
        "question": "Question: { The Quality of Mercy is a work written by who? }",
        "predicted_query": [
            "( JOIN ( R [ author ] ) ( JOIN ( R [ work ] ) [ The Quality of Mercy ] ) )",
            "( JOIN [ written by ] [ The Quality of Mercy ] )",
            "( JOIN ( R [ work written by ] ) ( JOIN ( R [ author ] ) [ The Quality of Mercy ] ) )",
            "( AND ( JOIN [ written by ] [ The Quality of Mercy ] ) ( JOIN ( R [ author ] ) [ The Quality of Mercy ] ) )",
            "( JOIN ( R [ writer ] ) ( JOIN ( R [ part of the work ] ) [ The Quality of Mercy ] ) )"
        ],
        "gen_label": "( JOIN ( R [ notable work ] ) ( JOIN ( R [ author ] ) [ The Quality of Mercy ] ) )"
    },
    {
        "question": "Question: { Which is the surface of the headquarters of the South Asian Association for Regional Cooperation? }",
        "predicted_query": [
            "( JOIN ( R [ surface area ] ) ( JOIN ( R [ headquarters location ] ) [ South Asian Association for Regional Cooperation ] ) )",
            "( AND ( JOIN [ shares border with ] [ South Asia ] ) ( JOIN ( R [ headquarters location ] ) [ South Asian Association for Regional Cooperation ] ) )",
            "( JOIN ( R [ surface material ] ) ( JOIN ( R [ headquarters location ] ) [ South Asian Association for Regional Cooperation ] ) )",
            "( JOIN ( R [ area ] ) ( JOIN ( R [ headquarters location ] ) [ South Asian Association for Regional Cooperation ] ) )",
            "( JOIN [ surface of the headquarters ] [ South Asian Association for Regional Cooperation ] )"
        ],
        "gen_label": "( JOIN ( R [ area ] ) ( JOIN ( R [ headquarters location ] ) [ South Asian Association for Regional Cooperation ] ) )"
    },
    {
        "question": "Question: { What position does Jacques Chirac hold? }",
        "predicted_query": [
            "( JOIN ( R [ position held ] ) [ Jacques Chirac ] )",
            "( JOIN [ position held ] [ Jacques Chirac ] )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ member of ] ) [ Jacques Chirac ] ) )",
            "( AND ( JOIN [ occupies position ] [ Jacques Chirac ] ) ( JOIN ( R [ occupation ] ) [ Jacques Chirac ] ) )",
            "( JOIN [ occupation ] [ Jacques Chirac ] )"
        ],
        "gen_label": "( JOIN ( R [ applies to jurisdiction ] ) ( JOIN ( R [ position held ] ) [ Jacques Chirac ] ) )"
    },
    {
        "question": "Question: { Which is the SABR ID of Babe Ruth? }",
        "predicted_query": [
            "( JOIN ( R [ SABR ID ] ) [ Babe Ruth ] )",
            "( JOIN ( R [ SABR ID ] ) [ Babe Ruth ] )",
            "( JOIN ( R [ SABR ID ] ) [ Babe Ruth ] )",
            "( JOIN [ SABR ID ] [ Babe Ruth ] )",
            "( JOIN ( R [ SABR player ID ] ) [ Babe Ruth ] )"
        ],
        "gen_label": "( JOIN ( R [ SABR person ID ] ) [ Babe Ruth ] )"
    },
    {
        "question": "Question: { \"Where has arrondissements called Acre and toponym is Joaquim Francisco de Assis Brasil?\" }",
        "predicted_query": [
            "( AND ( JOIN [ toponym ] [ Joaquim Francisco de Assis Brasil ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Acre ] ) )",
            "( AND ( JOIN [ named after ] [ Joaquim Francisco de Assis Brasil ] ) ( JOIN ( R [ administrative territorial entity ] ) [ Acre ] ) )",
            "( AND ( JOIN [ place of establishment ] [ Acre ] ) ( JOIN ( R [ named after ] ) [ Joaquim Francisco de Assis Brasil ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Acre ] ) ( JOIN ( R [ named after ] ) [ Joaquim Francisco de Assis Brasil ] ) )",
            "( AND ( JOIN [ toponym ] [ Joaquim Francisco de Assis Brasil ] ) ( JOIN ( R [ contains the administrative territorial entity ] ) [ Acre ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ named after ] [ Joaquim Francisco de Assis Brasil ] ) ( JOIN ( R [ contains the administrative territorial entity ] ) [ Acre ] ) )"
    },
    {
        "question": "Question: { Which is impounded by the remake of Toshka Lakes? }",
        "predicted_query": [
            "( JOIN ( R [ impounded by ] ) ( JOIN ( R [ remakes ] ) [ Toshka Lakes ] ) )",
            "( JOIN ( R [ impounds ] ) ( JOIN ( R [ remakes ] ) [ Toshka Lakes ] ) )",
            "( JOIN [ impounded by ] [ Toshka Lakes ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Toshka Lakes ] ) ( JOIN ( R [ remakes ] ) [ Toshka Lakes ] ) )",
            "( JOIN ( R [ dammed by ] ) ( JOIN ( R [ remakes of ] ) [ Toshka Lakes ] ) )"
        ],
        "gen_label": "( JOIN ( R [ dam ] ) ( JOIN ( R [ based on ] ) [ Toshka Depression ] ) )"
    },
    {
        "question": "Question: { What is the field of this employment of employment of George Bellew-Bryan, 4th Baron Bellew ? }",
        "predicted_query": [
            "( JOIN ( R [ field of this employment ] ) ( JOIN ( R [ employment ] ) [ George Bellew-Bryan, 4th Baron Bellew ] ) )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ employer ] ) [ George Bellew-Bryan, 4th Baron Bellew ] ) )",
            "( JOIN ( R [ field of employment ] ) ( JOIN ( R [ employer ] ) [ George Bellew-Bryan, 4th Baron Bellew ] ) )",
            "( JOIN [ field of employment ] [ George Bellew-Bryan, 4th Baron Bellew ] )",
            "( JOIN ( R [ field of work ] ) ( JOIN ( R [ employer ] ) [ George Bellew-Bryan, 4th Baron Bellew ] ) )"
        ],
        "gen_label": "( JOIN ( R [ field of this occupation ] ) ( JOIN ( R [ occupation ] ) [ George Bellew-Bryan, 4th Baron Bellew ] ) )"
    },
    {
        "question": "Question: { Which is the diplomatic relation for Liberia? }",
        "predicted_query": [
            "( JOIN ( R [ diplomatic relation ] ) [ Liberia ] )",
            "( JOIN [ diplomatic relation ] [ Liberia ] )",
            "( JOIN ( R [ diplomatic relation ] ) [ Liberia ] )",
            "( JOIN [ diplomatic relation ] [ Liberia ] )",
            "( AND ( JOIN [ diplomatic relation ] [ Liberia ] ) ( JOIN ( R [ diplomatic relation ] ) [ Liberia ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) [ Liberia ] )"
    },
    {
        "question": "Question: { Which is the designed to carry of Sciuridae? }",
        "predicted_query": [
            "( JOIN ( R [ designed to carry ] ) [ Sciuridae ] )",
            "[ JOIN [ designed to carry ] [ Sciuridae ] ]",
            "( AND ( JOIN [ carrier ] [ Sciuridae ] ) ( JOIN ( R [ has taxon ] ) [ Sciuridae ] ) )",
            "( JOIN ( R [ designed for ] ) ( JOIN ( R [ taxon ] ) [ Sciuridae ] ) )",
            "( JOIN [ designed to carry ] [ Sciuridae ] )"
        ],
        "gen_label": "( JOIN [ designed to carry ] [ squirrel ] )"
    },
    {
        "question": "Question: { which is the notable books written by  hiveswap? }",
        "predicted_query": [
            "( JOIN ( R [ notable work ] ) ( JOIN ( R [ author ] ) [ Hiveswap ] ) )",
            "( JOIN ( R [ notable book ] ) [ Hiveswap ] )",
            "( JOIN [ notable books ] [ Hiveswap ] )",
            "( JOIN ( R [ notable work ] ) [ Hiveswap ] )",
            "( AND ( JOIN [ notable work ] [ Hiveswap ] ) ( JOIN ( R [ author ] ) [ Hiveswap ] ) )"
        ],
        "gen_label": "( JOIN ( R [ notable work ] ) ( JOIN ( R [ screenwriter ] ) [ Hiveswap: Act 1 ] ) )"
    },
    {
        "question": "Question: { Who {has kid} of {songwriter} of {The Gold Rush} ? }",
        "predicted_query": [
            "( JOIN ( R [ child ] ) ( JOIN ( R [ composer ] ) [ The Gold Rush ] ) )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ composer ] ) [ The Gold Rush ] ) )",
            "( AND ( JOIN [ parent of ] [ The Gold Rush ] ) ( JOIN ( R [ composer ] ) [ The Gold Rush ] ) )",
            "( AND ( JOIN [ parent of ] [ songwriter ] ) ( JOIN ( R [ child ] ) [ The Gold Rush ] ) )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ songwriter ] ) [ The Gold Rush ] ) )"
        ],
        "gen_label": "( JOIN ( R [ child ] ) ( JOIN ( R [ composer ] ) [ The Gold Rush ] ) )"
    },
    {
        "question": "Question: { What is the Musopen composer ID for Arvo Pärt? }",
        "predicted_query": [
            "( JOIN ( R [ Musopen composer ID ] ) [ Arvo Pärt ] )",
            "( JOIN ( R [ Musopen composer ID ] ) [ Arvo Pärt ] )",
            "( JOIN ( R [ Musopen composer ID ] ) [ Arvo Pärt ] )",
            "( AND ( JOIN [ composer ID ] [ Musopen ] ) ( JOIN ( R [ question ] ) [ Arvo Pärt ] ) )",
            "( JOIN ( R [ Musopen composer ID ] ) [ Arvo Pärt ] )"
        ],
        "gen_label": "( JOIN ( R [ Musopen composer ID ] ) [ Arvo Pärt ] )"
    },
    {
        "question": "Question: { The name for a female advocate? }",
        "predicted_query": [
            "[]",
            "( JOIN ( R [ female advocate ] ) [ advocate ] )",
            "( AND ( JOIN [ feminine form ] [ advocate ] ) ( JOIN ( R [ given name ] ) [ John Marshall ] ) )",
            "( JOIN ( R [ gender ] ) ( JOIN ( R [ advocate ] ) [ The Name for a Female Advocate ] ) )",
            "( AND ( JOIN [ gender ] [ female ] ) ( JOIN ( R [ given name ] ) [ John Adams ] ) )"
        ],
        "gen_label": "( JOIN ( R [ female form of label ] ) [ advocate ] )"
    },
    {
        "question": "Question: { What language does Tite Kubo speak? }",
        "predicted_query": [
            "( JOIN ( R [ language spoken, written or signed ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Tite Kubo ] ) )",
            "( JOIN ( R [ language spoken ] ) [ Tite Kubo ] )",
            "( JOIN ( R [ spoken language ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Tite Kubo ] ) )",
            "( JOIN [ spoken language ] [ Tite Kubo ] )",
            "( AND ( JOIN [ language of literary work ] [ Tite Kubo ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Tite Kubo ] ) )"
        ],
        "gen_label": "( JOIN ( R [ native label ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Tite Kubo ] ) )"
    },
    {
        "question": "Question: { Which is the academic major for law? }",
        "predicted_query": [
            "( JOIN ( R [ academic major ] ) [ law ] )",
            "",
            "( JOIN [ academic major ] [ law ] )",
            "( AND ( JOIN [ field of study ] [ law ] ) ( JOIN ( R [ major field of study ] ) [ law ] ) )",
            "( JOIN [ academic major ] [ law ] )"
        ],
        "gen_label": "( JOIN [ academic major ] [ law ] )"
    },
    {
        "question": "Question: { Where is the location of the wheelchair access in the Louvre Museum? }",
        "predicted_query": [
            "( JOIN ( R [ location of wheelchair access ] ) [ Louvre Museum ] )",
            "( JOIN ( R [ wheelchair access ] ) ( JOIN ( R [ located in ] ) [ Louvre Museum ] ) )",
            "( JOIN ( R [ wheelchair accessibility ] ) ( JOIN ( R [ located in ] ) [ Louvre Museum ] ) )",
            "( JOIN [ wheelchair access ] [ Louvre Museum ] )",
            "( AND ( JOIN [ has accessibility ] [ wheelchair access ] ) ( JOIN ( R [ located in ] ) [ Louvre Museum ] ) )"
        ],
        "gen_label": "( JOIN ( R [ disabled accessibility ] ) [ Louvre Museum ] )"
    },
    {
        "question": "Question: { Which is the term length of office for United Nations Secretary-General? }",
        "predicted_query": [
            "( JOIN ( R [ term length of office ] ) [ United Nations Secretary-General ] )",
            "( JOIN [ term length of office ] [ United Nations Secretary-General ] )",
            "( JOIN ( R [ term of office ] ) [ United Nations Secretary-General ] )",
            "( [ JOIN ] [ term length of office ] [ United Nations Secretary-General ] )",
            "( [ JOIN ] [ term length of office ] )"
        ],
        "gen_label": "( JOIN ( R [ term length of position ] ) [ United Nations Secretary-General ] )"
    },
    {
        "question": "Question: { Who are between the Battle of Actium with a profession of military personnel? }",
        "predicted_query": [
            "( AND ( JOIN [ occupation ] [ military personnel ] ) ( JOIN ( R [ participant ] ) [ Battle of Actium ] ) )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ participant ] ) [ Battle of Actium ] ) )",
            "( AND ( JOIN [ field of work ] [ military personnel ] ) ( JOIN ( R [ participant in the Battle of Actium ] ) [ military personnel ] ) )",
            "( AND ( JOIN [ occupation ] [ military personnel ] ) ( JOIN ( R [ fought in ] ) [ Battle of Actium ] ) )",
            "( JOIN [ occupation ] [ military personnel ] ) ( JOIN [ fought in ] [ Battle of Actium ] )"
        ],
        "gen_label": "( AND ( JOIN [ occupation ] [ military personnel ] ) ( JOIN ( R [ participant ] ) [ Battle of Actium ] ) )"
    },
    {
        "question": "Question: { Which is Mountain Bike Hall of Fame inductee ID for Anne-Caroline Chausson? }",
        "predicted_query": [
            "( JOIN ( R [ Mountain Bike Hall of Fame inductee ID ] ) [ Anne-Caroline Chausson ] )",
            "( AND ( JOIN [ Hall of Fame ID ] [ Mountain Bike Hall of Fame ] ) ( JOIN ( R [ ID ] ) [ Anne-Caroline Chausson ] ) )",
            "( AND ( JOIN [ Inducted into Hall of Fame ] [ Mountain Bike Hall of Fame ] ) ( JOIN ( R [ ID ] ) [ Anne-Caroline Chausson ] ) )",
            "( JOIN ( R [ has inductee of ] ) [ Anne-Caroline Chausson ] )",
            "( JOIN ( R [ Mountain Bike Hall of Fame ID ] ) [ Anne-Caroline Chausson ] )"
        ],
        "gen_label": "( JOIN ( R [ Mountain Bike Hall of Fame inductee ID ] ) [ Anne-Caroline Chausson ] )"
    },
    {
        "question": "Question: { Which {twin town} of  {Salalah} {has towns}? }",
        "predicted_query": [
            "( AND ( JOIN [ twinned administrative body ] [ Salalah ] ) ( JOIN ( R [ twinned administrative body ] ) [ Tbilisi ] ) )",
            "( JOIN ( R [ twin town ] ) ( JOIN ( R [ has town ] ) [ Salalah ] ) )",
            "( JOIN ( R [ twin town ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Salalah ] ) )",
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ twinned administrative body ] ) [ Sana'a ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Salalah ] ) ( JOIN ( R [ twinned administrative body ] ) [ Kuwait City ] ) )"
        ],
        "gen_label": "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ twinned administrative body ] ) [ Salalah ] ) )"
    },
    {
        "question": "Question: { What instrument does the record producer play in Get your Gunn }",
        "predicted_query": [
            "( JOIN ( R [ instrument played ] ) ( JOIN ( R [ record producer ] ) [ Get Your Gunn ] ) )",
            "( JOIN ( R [ instrument ] ) ( JOIN ( R [ record producer ] ) [ Get Your Gunn ] ) )",
            "( JOIN [ instrument played ] [ Get Your Gunn ] )",
            "( JOIN [ instrument ] [ Get Your Gunn ] )",
            "( JOIN ( R [ performer or director ] ) ( JOIN ( R [ record label ] ) [ Get Your Gunn ] ) )"
        ],
        "gen_label": "( JOIN ( R [ instrument ] ) ( JOIN ( R [ producer ] ) [ Get Your Gunn ] ) )"
    },
    {
        "question": "Question: { What is the cathedral of Notre-Dame de Chartres? }",
        "predicted_query": [
            "( JOIN ( R [ cathedral ] ) [ Notre-Dame de Chartres ] )",
            "( JOIN ( R [ cathedral ] ) ( JOIN ( R [ located in ] ) [ Notre-Dame de Chartres ] ) )",
            "( JOIN [ cathedral of ] [ Notre-Dame de Chartres ] )",
            "( JOIN ( R [ cathedral of ] ) [ Notre-Dame de Chartres ] )",
            "( JOIN ( R [ seat of cathedral ] ) [ Notre-Dame de Chartres ] )"
        ],
        "gen_label": "( JOIN [ cathedral ] [ Notre-Dame de Chartres ] )"
    },
    {
        "question": "Question: { What university did Max Marcuse attend? }",
        "predicted_query": [
            "( JOIN ( R [ university ] ) ( JOIN ( R [ student ] ) [ Max Marcuse ] ) )",
            "( JOIN [ attended by ] [ Max Marcuse ] )",
            "( JOIN ( R [ university or college ] ) [ Max Marcuse ] )",
            "( JOIN ( R [ institution ] ) ( JOIN ( R [ educated at ] ) [ Max Marcuse ] ) )",
            "( AND ( JOIN [ affiliated with ] [ Max Marcuse ] ) ( JOIN ( R [ educated at ] ) [ Max Marcuse ] ) )"
        ],
        "gen_label": "( JOIN ( R [ rector ] ) ( JOIN ( R [ educated at ] ) [ Max Marcuse ] ) )"
    },
    {
        "question": "Question: { Who is the child of Wanyan Ningji's sister? }",
        "predicted_query": [
            "( JOIN ( R [ child ] ) ( JOIN ( R [ sibling ] ) [ Wanyan Ningji ] ) )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ sibling ] ) [ Wanyan Ningji ] ) )",
            "( AND ( JOIN [ parent of ] [ Wanyan Ningji ] ) ( JOIN ( R [ child ] ) [ Wanyan Ningji ] ) )",
            "( JOIN [ child ] [ Wanyan Ningji ] )",
            "[ JOIN ( [ child ] ) ( JOIN ( [ sibling ] ) [ Wanyan Ningji ] ) ]"
        ],
        "gen_label": "( JOIN ( R [ father ] ) ( JOIN ( R [ sibling ] ) [ Wanyan Ningji ] ) )"
    },
    {
        "question": "Question: { Whose motion picture studio is a part of series of The Stolen Eagle? }",
        "predicted_query": [
            "( JOIN ( R [ motion picture studio ] ) ( JOIN ( R [ part of the series ] ) [ The Stolen Eagle ] ) )",
            "( JOIN ( R [ part of the series ] ) ( JOIN ( R [ film studio ] ) [ The Stolen Eagle ] ) )",
            "[ JOIN",
            "( AND ( JOIN [ parent company ] [ The Stolen Eagle ] ) ( JOIN ( R [ part of the series ] ) [ The Stolen Eagle ] ) )",
            "( JOIN [ part of series ] [ The Stolen Eagle ] )"
        ],
        "gen_label": "( JOIN ( R [ production company ] ) ( JOIN ( R [ part of the series ] ) [ The Stolen Eagle ] ) )"
    },
    {
        "question": "Question: { Which is the number of subscribers of HBO? }",
        "predicted_query": [
            "( JOIN ( R [ number of subscribers ] ) [ HBO ] )",
            "( [ joined by ] [ number of subscribers ] [ HBO ] )",
            "( JOIN ( R [ subscriber count ] ) [ HBO ] )",
            "( JOIN [ number of subscribers ] [ HBO ] )",
            "( JOIN [ subscriber ] [ HBO ] )"
        ],
        "gen_label": "( JOIN ( R [ number of subscribers ] ) [ HBO ] )"
    },
    {
        "question": "Question: { What is the Christian name of Jean Rhys, which is the same as Jane? }",
        "predicted_query": [
            "( AND ( JOIN [ given name ] [ Jane ] ) ( JOIN ( R [ given name ] ) [ Jean Rhys ] ) )",
            "( AND ( JOIN [ same as ] [ Jane ] ) ( JOIN ( R [ given name ] ) [ Jean Rhys ] ) )",
            "( AND ( JOIN [ different name ] [ Jane ] ) ( JOIN ( R [ given name ] ) [ Jean Rhys ] ) )",
            "( AND ( JOIN [ name of person ] [ Jane ] ) ( JOIN ( R [ given name ] ) [ Jean Rhys ] ) )",
            "( JOIN ( R [ different name ] ) ( JOIN ( R [ given name ] ) [ Jean Rhys ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ said to be the same as ] [ Jane ] ) ( JOIN ( R [ given name ] ) [ Jean Rhys ] ) )"
    },
    {
        "question": "Question: { What is the ISCO work code of Daniel Shays' work? }",
        "predicted_query": [
            "( JOIN ( R [ ISCO work code ] ) [ Daniel Shays ] )",
            "( JOIN [ ISCO work code ] [ Daniel Shays ] )",
            "( AND ( JOIN [ occupation ] [ ISCO work code ] ) ( JOIN ( R [ occupation ] ) [ Daniel Shays ] ) )",
            "( JOIN ( R [ ISCO Work Classification ] ) ( JOIN ( R [ occupation ] ) [ Daniel Shays ] ) )",
            "( JOIN ( R [ ISCO work code ] ) [ Daniel Shays ] )"
        ],
        "gen_label": "( JOIN ( R [ ISCO-88 occupation class ] ) ( JOIN ( R [ occupation ] ) [ Daniel Shays ] ) )"
    },
    {
        "question": "Question: { What is discharge of Paraná ? }",
        "predicted_query": [
            "( JOIN [ discharge of ] [ Paraná ] )",
            "( JOIN ( R [ outflows ] ) [ Paraná ] )",
            "( JOIN ( R [ discharge location ] ) ( JOIN ( R [ tributary of ] ) [ Paraná ] ) )",
            "( JOIN ( R [ discharges into ] ) ( JOIN ( R [ tributary of ] ) [ Paraná ] ) )",
            "( AND ( JOIN [ outlet of the basin ] [ Paraná ] ) ( JOIN ( R [ has discharge ] ) [ Paraná ] ) )"
        ],
        "gen_label": "( JOIN ( R [ discharge ] ) [ Paraná River ] )"
    },
    {
        "question": "Question: { What is the grammatical gender of the language Andrei Tupolev? }",
        "predicted_query": [
            "( JOIN ( R [ grammatical gender ] ) ( JOIN ( R [ language of work ] ) [ Andrei Tupolev ] ) )",
            "( JOIN ( R [ grammatical gender ] ) ( JOIN ( R [ language spoken, written or signed ] ) [ Andrei Tupolev ] ) )",
            "( JOIN [ grammatical gender ] [ Andrei Tupolev ] )",
            "( AND ( JOIN [ gender ] [ masculine ] ) ( JOIN ( R [ language of work ] ) [ Andrei Tupolev ] ) )",
            "( JOIN ( R [ grammatical gender ] ) ( JOIN ( R [ spoken language ] ) [ Andrei Tupolev ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ has grammatical gender ] [ feminine ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Andrei Tupolev ] ) )"
    },
    {
        "question": "Question: { What did Albus Dumbledore die from in the story cycle of Harry Potter universe? }",
        "predicted_query": [
            "( AND ( JOIN [ story cycle ] [ Harry Potter universe ] ) ( JOIN ( R [ cause of death ] ) [ Albus Dumbledore ] ) )",
            "( JOIN ( R [ death cause ] ) ( JOIN ( R [ story cycle ] ) [ Albus Dumbledore ] ) )",
            "( AND ( JOIN [ part of series ] [ Harry Potter universe ] ) ( JOIN ( R [ cause of death ] ) [ Albus Dumbledore ] ) )",
            "( AND ( JOIN [ cycle ] [ Harry Potter universe ] ) ( JOIN ( R [ cause of death ] ) [ Albus Dumbledore ] ) )",
            "( JOIN ( R [ character death cause ] ) ( JOIN ( R [ story cycle ] ) [ Albus Dumbledore ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ from narrative universe ] [ Harry Potter universe ] ) ( JOIN ( R [ cause of death ] ) [ Albus Dumbledore ] ) )"
    },
    {
        "question": "Question: { What is the diplomatic relation of the sovereign state of Lake Ontario? }",
        "predicted_query": [
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country ] ) [ Lake Ontario ] ) )",
            "( JOIN [ diplomatic relation ] [ sovereign state of Lake Ontario ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Lake Ontario ] ) ( JOIN ( R [ diplomatic relation ] ) [ Canada ] ) )",
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Lake Ontario ] ) )",
            "( JOIN ( R [ diplomatic relations ] ) ( JOIN ( R [ country ] ) [ Lake Ontario ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country ] ) [ Lake Ontario ] ) )"
    },
    {
        "question": "Question: { Who is the nominee for Andrew Carnegie, but has a prizewinner of Grameen Bank? }",
        "predicted_query": [
            "( AND ( JOIN [ award received ] [ Grameen Bank Prize for Social Business ] ) ( JOIN ( R [ nominated for ] ) [ Andrew Carnegie ] ) )",
            "( AND ( JOIN [ winner ] [ Grameen Bank ] ) ( JOIN ( R [ nominated for ] ) [ Andrew Carnegie ] ) )",
            "( AND ( JOIN [ winner ] [ Grameen Bank ] ) ( JOIN ( R [ nominee ] ) [ Andrew Carnegie ] ) )",
            "( AND ( JOIN [ prize won ] [ Grameen Bank ] ) ( JOIN ( R [ nominated for ] ) [ Andrew Carnegie ] ) )",
            "( AND ( Winner [ Grameen Bank ] ) ( JOIN [ nominee ] [ Andrew Carnegie ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ winner ] [ Grameen Bank ] ) ( JOIN ( R [ nominated for ] ) [ Andrew Carnegie ] ) )"
    },
    {
        "question": "Question: { Which items are necessary to play Kilhoù Koz Bro Bagan ? }",
        "predicted_query": [
            "( JOIN ( R [ requires ] ) ( JOIN ( R [ sport ] ) [ Kilhou Koz Bro Bagan ] ) )",
            "( JOIN [ necessary to play ] [ Kilhou Koz Bro Bagan ] )",
            "( JOIN ( R [ requires ] ) ( JOIN ( R [ sport ] ) [ Kilhoù Koz Bro Bagan ] ) )",
            "( JOIN ( R [ necessary condition ] ) ( JOIN ( R [ sports played ] ) [ Kilhoù Koz Bro Bagan ] ) )",
            "( JOIN ( R [ has item ] ) ( JOIN ( R [ player ] ) [ Kilhoù Koz Bro Bagan ] ) )"
        ],
        "gen_label": "( JOIN ( R [ sport ] ) ( JOIN ( R [ uses ] ) [ Kilhoù Koz Bro Bagan ] ) )"
    },
    {
        "question": "Question: { what is the higher taxon of motif of fantastic bird MG 17727 }",
        "predicted_query": [
            "( JOIN ( R [ taxon rank ] ) ( JOIN ( R [ taxon ] ) [ Motif of fantastic bird MG 17727 ] ) )",
            "( AND ( JOIN [ taxon of higher taxon ] [ motif of fantastic bird MG 17727 ] ) ( JOIN ( R [ taxon ] ) [ motif of fantastic bird MG 17727 ] ) )",
            "( JOIN ( R [ higher taxon ] ) [ motif of fantastic bird MG 17727 ] )",
            "( JOIN [ higher taxon ] [ motif of fantastic bird MG 17727 ] )",
            "( JOIN ( R [ taxon of ] ) ( JOIN ( R [ motif of ] ) [ MG 17727 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ parent taxon ] ) ( JOIN ( R [ depicts ] ) [ Fantastic bird-MG 17727 ] ) )"
    },
    {
        "question": "Question: { What comes from Hole, whose twin city is Mumbai? }",
        "predicted_query": [
            "( AND ( JOIN [ twinned administrative body ] [ Mumbai ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Hole ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Mumbai ] ) ( JOIN ( R [ has twin city ] ) [ Hole, Norway ] ) )",
            "( AND ( JOIN [ twin city ] [ Mumbai ] ) ( JOIN ( R [ place of manufacture ] ) [ Hole ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Mumbai ] ) ( JOIN ( R [ twinned administrative body ] ) [ Hole ] ) )",
            "( AND ( JOIN [ twin town ] [ Mumbai ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Hole ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ twinned administrative body ] [ Mumbai ] ) ( JOIN ( R [ location of formation ] ) [ Hole ] ) )"
    },
    {
        "question": "Question: { Who is the President of Marcos Liorente's team? }",
        "predicted_query": [
            "( JOIN ( R [ head of state ] ) ( JOIN ( R [ member of ] ) [ Marcos Liorente ] ) )",
            "( JOIN ( R [ head of government ] ) ( JOIN ( R [ team member ] ) [ Marcos Liorente ] ) )",
            "( JOIN [ head coach ] [ Marcos Liorente ] )",
            "[ ( JOIN ( R [ member of sports team ] ) [ Marcos Liorente ] ) ]",
            "( JOIN ( R [ president ] ) ( JOIN ( R [ team member ] ) [ Marcos Liorente ] ) )"
        ],
        "gen_label": "( JOIN ( R [ chairperson ] ) ( JOIN ( R [ member of sports team ] ) [ Marcos Llorente ] ) )"
    },
    {
        "question": "Question: { What is the main topic of  the Greek alphabet, that has the cases which is an accusative case? }",
        "predicted_query": [
            "( AND ( JOIN [ has grammatical case ] [ accusative case ] ) ( JOIN ( R [ topic ] ) [ Greek alphabet ] ) )",
            "( AND ( JOIN [ cases ] [ accusative case ] ) ( JOIN ( R [ topic ] ) [ Greek alphabet ] ) )",
            "( JOIN ( R [ topic ] ) ( JOIN [ cases ] [ accusative case ] ) )",
            "( AND ( JOIN [ grammatical case ] [ accusative case ] ) ( JOIN ( R [ topic ] ) [ Greek alphabet ] ) )",
            "( AND ( JOIN [ inflectional category ] [ accusative ] ) ( JOIN ( R [ topic ] ) [ Greek alphabet ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ has grammatical case ] [ accusative case ] ) ( JOIN ( R [ facet of ] ) [ Greek alphabet ] ) )"
    },
    {
        "question": "Question: { Java Man is the taxon parent of what time? }",
        "predicted_query": [
            "( JOIN ( R [ taxon parent ] ) [ Java Man ] )",
            "( JOIN ( R [ taxon parent ] ) [ Java Man ] )",
            "( JOIN [ taxon parent ] [ Java Man ] )",
            "( AND ( JOIN [ parent taxon ] [ Java Man ] ) ( JOIN ( R [ follows ] ) [ time ] ) )",
            "( AND ( JOIN [ time period ] [ Java Man ] ) ( JOIN ( R [ taxon parent ] ) [ Java Man ] ) )"
        ],
        "gen_label": "( JOIN ( R [ start time ] ) ( JOIN ( R [ parent taxon ] ) [ Java Man ] ) )"
    },
    {
        "question": "Question: { Which is the Mérimée ID of the Eiffel tower? }",
        "predicted_query": [
            "( JOIN ( R [ Mérimée ID ] ) [ Eiffel Tower ] )",
            "( JOIN ( R [ Mérimée ID ] ) [ Eiffel Tower ] )",
            "( JOIN ( R [ Mérimée ID ] ) [ Eiffel Tower ] )",
            "( JOIN [ Mérimée ID ] [ Eiffel Tower ] )",
            "( JOIN ( R [ Mérimée ID ] ) [ Eiffel Tower ] )"
        ],
        "gen_label": "( JOIN ( R [ Mérimée ID ] ) [ Eiffel Tower ] )"
    },
    {
        "question": "Question: { Who is brother of musician of Duchess? }",
        "predicted_query": [
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ musician ] ) [ Duchess ] ) )",
            "{ JOIN ( [ sibling ] ) ( JOIN ( [ composer ] ) [ Duchess ] ) }",
            "( JOIN [ sibling ] [ musician ] ) [ Duchess ]",
            "( AND ( JOIN [ sibling ] [ Duchess ] ) ( JOIN ( R [ occupation ] ) [ musician ] ) )",
            "( JOIN [ sibling ] [ Duchess ] )"
        ],
        "gen_label": "( JOIN ( R [ sibling ] ) ( JOIN ( R [ performer ] ) [ Duchess ] ) )"
    },
    {
        "question": "Question: { Who is the (lyricist) of (Der Rosenkavalier), with the (Christian name) of (Hugo)? }",
        "predicted_query": [
            "( AND ( JOIN [ given name ] [ Hugo ] ) ( JOIN ( R [ composer ] ) [ Der Rosenkavalier ] ) )",
            "[ JOIN ( R [ composer or lyricist ] ) ( JOIN ( R [ given name ] ) [ Hugo von Hofmannsthal ] ) ]",
            "( AND ( JOIN [ given name ] [ Hugo ] ) ( JOIN ( R [ lyricist ] ) [ Der Rosenkavalier ] ) )",
            "( JOIN ( R [ composer ] ) ( JOIN ( R [ given name ] ) [ Hugo ] ) )",
            "( JOIN ( R [ composer ] ) ( JOIN ( R [ given name ] ) [ Hugo von Hofmannsthal ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ given name ] [ Hugo ] ) ( JOIN ( R [ lyricist ] ) [ Der Rosenkavalier ] ) )"
    },
    {
        "question": "Question: { What is the TGN ID for Penang? }",
        "predicted_query": [
            "( JOIN ( R [ TGN ID ] ) [ Penang ] )",
            "[Chapter] JOIN [TGN ID] [Penang] ",
            "[ JOIN [ TGN ID ] [ Penang ] ]",
            "( JOIN ( R [ TGN ID ] ) [ Penang ] )",
            "( AND ( JOIN [ Transnational GNIS ID ] [ Penang ] ) ( JOIN ( R [ ID ] ) [ Penang ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Getty Thesaurus of Geographic Names ID ] ) [ Penang ] )"
    },
    {
        "question": "Question: { Which is Lakde ID of Sweden for Vättern? }",
        "predicted_query": [
            "( JOIN ( R [ Lakde ID ] ) [ Vättern ] )",
            "( JOIN ( R [ Lakde ID ] ) [ Vättern ] )",
            "( JOIN [ Lakde ID ] [ Vättern ] )",
            "( JOIN ( R [ Lakes of Sweden ] ) [ Vättern ] )",
            "( AND ( JOIN [ LakeD Info ID ] [ Vättern ] ) ( JOIN ( R [ ID ] ) [ Vättern ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Lake ID ( Sweden ) ] ) [ Vättern ] )"
    },
    {
        "question": "Question: { Which is the collection for Saint Catherine's Monastery? }",
        "predicted_query": [
            "( JOIN ( R [ collection ] ) [ Saint Catherine's Monastery ] )",
            "( JOIN [ collection ] [ Saint Catherine's Monastery ] )",
            "( JOIN ( R [ collection ] ) [ Saint Catherine's Monastery ] )",
            "( [ joined by ] [ collection ] [ Saint Catherine's Monastery ] )",
            "( JOIN [ collection for ] [ Saint Catherine's Monastery ] )"
        ],
        "gen_label": "( JOIN [ collection ] [ Saint Catherine Monastery ] )"
    },
    {
        "question": "Question: { Which is the drainage basin for Tarim Basin? }",
        "predicted_query": [
            "( JOIN ( R [ drainage basin ] ) [ Tarim Basin ] )",
            "( JOIN ( R [ drains into ] ) ( JOIN ( R [ located in the drainage basin of ] ) [ Tarim Basin ] ) )",
            "( JOIN [ drainage basin ] [ Tarim Basin ] )",
            "( JOIN ( R [ drainage basin ] ) [ Tarim Basin ] )",
            "( AND ( JOIN [ has drainage basin ] [ Tarim Basin ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Tarim Basin ] ) )"
        ],
        "gen_label": "( JOIN [ drainage basin ] [ Tarim Basin ] )"
    },
    {
        "question": "Question: { What is the depiction of the narrative of Thomas Buddenbrook? }",
        "predicted_query": [
            "( JOIN ( R [ depiction of the narrative ] ) [ Thomas Buddenbrook ] )",
            "( JOIN ( R [ narrative ] ) ( JOIN ( R [ depicted in ] ) [ Thomas Buddenbrook ] ) )",
            "( JOIN [ narrative ] [ Thomas Buddenbrook ] )",
            "( AND ( JOIN [ narrative of ] [ Thomas Buddenbrook ] ) ( JOIN ( R [ depicted in ] ) [ Thomas Buddenbrook ] ) )",
            "( JOIN ( R [ depicts ] ) ( JOIN ( R [ narrative ] ) [ Thomas Buddenbrook ] ) )"
        ],
        "gen_label": "( JOIN ( R [ depicts ] ) ( JOIN ( R [ present in work ] ) [ Thomas Buddenbrook ] ) )"
    },
    {
        "question": "Question: { What is a license made out of? }",
        "predicted_query": [
            "( JOIN ( R [ material ] ) ( JOIN ( R [ made from material ] ) [ license ] ) )",
            "( JOIN [ made out of material ] [ license ] )",
            "( JOIN [ material ] [ license ] )",
            "( AND ( JOIN [ made out of ] [ license ] ) ( JOIN ( R [ material ] ) [ pencil ] ) )",
            "( JOIN ( R [ material ] ) ( JOIN ( R [ licensed by ] ) [ The Lord of the Rings ] ) )"
        ],
        "gen_label": "( JOIN ( R [ copyright license ] ) ( JOIN ( R [ platform ] ) [ Portal ] ) )"
    },
    {
        "question": "Question: { Which is the DocCheck Flexikon En ID for diabetes mellitus? }",
        "predicted_query": [
            "( JOIN ( R [ DocCheck Flexikon En ID ] ) [ diabetes mellitus ] )",
            "( JOIN ( R [ DocCheck Flexikon En ID ] ) [ diabetes mellitus ] )",
            "( JOIN ( R [ DocCheck Flexikon en ID ] ) [ diabetes mellitus ] )",
            "( AND ( JOIN [ ID.DocCheck Flexikon En ] ) ( JOIN ( R [ disease or medical condition ] ) [ diabetes mellitus ] ) )",
            "( JOIN ( R [ DocCheck Flexikon ID ] ) [ diabetes mellitus ] )"
        ],
        "gen_label": "( JOIN ( R [ DocCheck Flexikon En ID ] ) [ diabetes ] )"
    },
    {
        "question": "Question: { What is William Harrison Ainsworth's CERLD ID? }",
        "predicted_query": [
            "[ JOIN [ R [ CERL ID ] ] [ William Harrison Ainsworth ] ]",
            "[ JOIN ( [ CERL Thesaurus ID ] ) [ William Harrison Ainsworth ] ]",
            "( [ JOIN ] [ CERLD ID ] [ William Harrison Ainsworth ] )",
            "( AND ( JOIN [ Cerl ID ] [ William Harrison Ainsworth ] ) ( JOIN ( R [ question ] ) [ William Harrison Ainsworth ] ) )",
            "( JOIN ( R [ CERL Thesaurus ID ] ) [ William Harrison Ainsworth ] )"
        ],
        "gen_label": "( JOIN ( R [ CERL Thesaurus ID ] ) [ William Harrison Ainsworth ] )"
    },
    {
        "question": "Question: { What is {informed by} {supervisor} of {Robert C. Merton} ? }",
        "predicted_query": [
            "( JOIN ( R [ influenced by ] ) ( JOIN ( R [ student ] ) [ Robert C. Merton ] ) )",
            "( JOIN [ informed by ] [ Robert C. Merton ] )",
            "( JOIN ( R [ informed by ] ) ( JOIN ( R [ teacher ] ) [ Robert C. Merton ] ) )",
            "( AND ( JOIN [ employer ] [ Robert C. Merton ] ) ( JOIN ( R [ influenced by ] ) [ Robert C. Merton ] ) )",
            "( JOIN ( R [ influenced by ] ) ( JOIN ( R [ supervisor ] ) [ Robert C. Merton ] ) )"
        ],
        "gen_label": "( JOIN ( R [ influenced by ] ) ( JOIN ( R [ doctoral advisor ] ) [ Robert C. Merton ] ) )"
    },
    {
        "question": "Question: { What is in the department on street of convento de las Clarisas? }",
        "predicted_query": [
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Convent of the Clarisses ] ) )",
            "( JOIN ( R [ department ] ) ( JOIN ( R [ located in ] ) [ Convento de las Clarisas ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Convento de las Clarisas ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ convento de las Clarisas ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ convento de las Clarisas ] ) )",
            "( JOIN ( R [ located in ] ) ( JOIN ( R [ field of work ] ) [ Convent of the Clarisses ] ) )"
        ],
        "gen_label": "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ located on street ] ) [ Convent of the Poor Clares ] ) )"
    },
    {
        "question": "Question: { \"What member of the G20, is the \"History of Germany\" a subtopic of?\" }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ History of Germany ] ) ( JOIN ( R [ member of ] ) [ G20 ] ) )",
            "( AND ( JOIN [ field of work ] [ history ] ) ( JOIN ( R [ member of ] ) [ G20 ] ) )",
            "( AND ( JOIN [ topic of ] [ History of Germany ] ) ( JOIN ( R [ member of ] ) [ G20 ] ) )",
            "( AND ( JOIN [ member of ] [ G20 ] ) ( JOIN ( R [ topic of ] ) [ History of Germany ] ) )",
            "( AND ( JOIN [ topic ] [ History of Germany ] ) ( JOIN ( R [ member of ] ) [ G20 ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ member of ] [ G20 ] ) ( JOIN ( R [ facet of ] ) [ history of Germany ] ) )"
    },
    {
        "question": "Question: { Which is designed by Dragon Quest? }",
        "predicted_query": [
            "( JOIN ( R [ designed by ] ) [ Dragon Quest ] )",
            "( JOIN ( R [ designed by ] ) [ Dragon Quest ] )",
            "( JOIN [ designed by ] [ Dragon Quest ] )",
            "( AND ( JOIN [ designer ] [ Dragon Quest ] ) ( JOIN ( R [ influenced by ] ) [ Dragon Quest ] ) )",
            "( JOIN [ designed by ] [ Dragon Quest ] )"
        ],
        "gen_label": "( JOIN ( R [ designed by ] ) [ Dragon Quest ] )"
    },
    {
        "question": "Question: { Who died in Bartolomeo Scappi which borders Gallicano nel Lazio? }",
        "predicted_query": [
            "( AND ( JOIN [ shares border with ] [ Gallicano nel Lazio ] ) ( JOIN ( R [ place of death ] ) [ Bartolomeo Scappi ] ) )",
            "( AND ( JOIN [ shares border with ] [ Gallicano nel Lazio ] ) ( JOIN ( R [ place of death ] ) [ Bartolomeo Scappi ] ) )",
            "( AND ( JOIN [ shares border with ] [ Gallicano nel Lazio ] ) ( JOIN ( R [ death place ] ) [ Bartolomeo Scappi ] ) )",
            "( AND ( JOIN [ shares border with ] [ Gallicano nel Lazio ] ) ( JOIN ( R [ died ] ) [ Bartolomeo Scappi ] ) )",
            "( AND ( JOIN [ shared border ] [ Gallicano nel Lazio ] ) ( JOIN ( R [ place of death ] ) [ Bartolomeo Scappi ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ shares border with ] [ Gallicano nel Lazio ] ) ( JOIN ( R [ place of death ] ) [ Bartolomeo Scappi ] ) )"
    },
    {
        "question": "Question: { Which {TV presenter} {theme} is {international versions of Wheel of Fortune} ? }",
        "predicted_query": [
            "( JOIN ( R [ presenter ] ) ( JOIN ( R [ based on ] ) [ Wheel of Fortune ] ) )",
            "( AND ( JOIN [ presenter ] [ Wheel of Fortune ] ) ( JOIN ( R [ based on ] ) [ Wheel of Fortune ] ) )",
            "[ JOIN [ present in ] ] [ presenter ] [",
            "( JOIN ( R [ host ] ) ( JOIN ( R [ presenter ] ) [ Wheel of Fortune ] ) )",
            "( AND ( JOIN [ presenter ] [ Wheel of Fortune ] ) ( JOIN ( R [ present in work ] ) [ Wheel of Fortune ] ) )"
        ],
        "gen_label": "( JOIN ( R [ presenter ] ) ( JOIN ( R [ based on ] ) [ Wheel of Fortune ] ) )"
    },
    {
        "question": "Question: { Which is the electronegativity of helium? }",
        "predicted_query": [
            "( JOIN ( R [ electronegativity ] ) [ helium ] )",
            "( JOIN [ electronegativity ] [ helium ] )",
            "### Optimization Description:",
            "( JOIN ( R [ electron affinity ] ) [ helium ] )",
            "( AND ( JOIN [ has isotope ] [ helium ] ) ( JOIN ( R [ electronegativity ] ) [ helium ] ) )"
        ],
        "gen_label": "( JOIN ( R [ electronegativity ] ) [ helium ] )"
    },
    {
        "question": "Question: { Who is the godparent of François Fénelon? }",
        "predicted_query": [
            "( JOIN [ godparent ] [ François Fénelon ] )",
            "( JOIN ( R [ parent ] ) ( JOIN ( R [ sibling ] ) [ François Fénelon ] ) )",
            "( JOIN ( R [ godparent ] ) ( JOIN ( R [ parent ] ) [ François Fénelon ] ) )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ parent ] ) [ François Fénelon ] ) )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ has relation ] ) [ François Fénelon ] ) )"
        ],
        "gen_label": "( JOIN ( R [ godparent ] ) [ François Fénelon ] )"
    },
    {
        "question": "Question: { I want to know at what took part of Ralf Schumann? }",
        "predicted_query": [
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ participant in ] ) [ Ralf Schumann ] ) )",
            "( JOIN [ participant ] [ Ralf Schumann ] )",
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ sport ] ) [ Ralf Schumann ] ) )",
            "( AND ( JOIN [ location ] [ Berlin ] ) ( JOIN ( R [ participant ] ) [ Ralf Schumann ] ) )",
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ participant ] ) [ Ralf Schumann ] ) )"
        ],
        "gen_label": "( JOIN ( R [ point in time ] ) ( JOIN ( R [ participant in ] ) [ Ralf Schumann ] ) )"
    },
    {
        "question": "Question: { What is calcium chloride used to treat? }",
        "predicted_query": [
            "( JOIN ( R [ treated with ] ) ( JOIN ( R [ uses ] ) [ calcium chloride ] ) )",
            "( JOIN [ treated for ] [ calcium chloride ] )",
            "( AND ( JOIN [ treated for ] [ calcium chloride ] ) ( JOIN ( R [ used for treatment of ] ) [ calcium chloride ] ) )",
            "( [ joined by ] [ treated with ] [ calcium chloride ] )",
            "( JOIN ( R [ has treatment for ] ) ( JOIN ( R [ used in the manufacturing of ] ) [ calcium chloride ] ) )"
        ],
        "gen_label": "( JOIN [ drug or therapy used for treatment ] [ calcium chloride ] )"
    },
    {
        "question": "Question: { What is the equivalent of a 120 cell that has a vertex figure of icosahedron? }",
        "predicted_query": [
            "( AND ( JOIN [ vertex figure ] [ icosahedron ] ) ( JOIN ( R [ equivalent of ] ) [ 120-cell ] ) )",
            "( JOIN [ has vertex figure of ] [ icosahedron ] )",
            "( AND ( JOIN [ polyhedral formula ] [ icosahedron ] ) ( JOIN ( R [ equivalent of ] ) [ 120-cell ] ) )",
            "( AND ( JOIN [ Schläfli symbol ] [ icosahedron ] ) ( JOIN ( R [ equivalent to ] ) [ 120-cell ] ) )",
            "( AND ( JOIN [ facet of ] [ icosahedron ] ) ( JOIN ( R [ equivalent of ] ) [ 120-cell ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ has vertex figure ] [ icosahedron ] ) ( JOIN ( R [ dual to ] ) [ 120-cell ] ) )"
    },
    {
        "question": "Question: { Is the county seat of Canton of Lourdes-Ouest in the town of Sanctuary of Our Lady Lourdes? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Canton of Lourdes-Ouest ] ) ( JOIN ( R [ capital ] ) [ Sanctuary of Our Lady of Lourdes ] ) )",
            "[ { JOIN ( R [ contains the administrative territorial entity ] ) }, { of [ canton ] } ]",
            "[ JOIN ( R [ capital ] ) ] [ JOIN ( R [ located in the administrative territorial entity ] ) [ Sanctu",
            "( JOIN ( R [ capital of ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Sanctuary of Our Lady of Lourdes ] ) )",
            "( AND ( JOIN [ admin. region ] [ Canton of Lourdes-Ouest ] ) ( JOIN ( R [ capital ] ) [ Sanctuary of Our Lady of Lourdes ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ capital of ] [ canton of Lourdes-Ouest ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Sanctuary of Our Lady of Lourdes ] ) )"
    },
    {
        "question": "Question: { Was James's Cook's last name spelled Cook or Cooke? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Cook County ] ) ( JOIN ( R [ spelling variation ] ) [ James Cook ] ) )",
            "( AND ( JOIN [ spelled with ] [ Cook ] ) ( JOIN ( R [ given name ] ) [ James Cook ] ) )",
            "( AND ( JOIN [ has variant ] [ Cook or Cooke ] ) ( JOIN ( R [ given name ] ) [ James Cook ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Cook County ] ) ( JOIN ( R [ given name ] ) [ James Cook ] ) )",
            "( JOIN ( R [ pronunciation ] ) ( JOIN ( R [ given name ] ) [ James Cook ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ said to be the same as ] [ Cooke ] ) ( JOIN ( R [ family name ] ) [ James Cook ] ) )"
    },
    {
        "question": "Question: { Which is the FloraCatalana ID of Citrus ×aurantium? }",
        "predicted_query": [
            "( JOIN ( R [ FloraCatalana ID ] ) [ Citrus × aurantium ] )",
            "( JOIN ( R [ has FloraCatalana ID ] ) [ Citrus × aurantium ] )",
            "( JOIN ( R [ Flora Catalana ID ] ) [ Citrus × aurantium ] )",
            "( JOIN [ FloraCatalana ID ] [ Citrus ×aurantium ] )",
            "( JOIN ( R [ FloraCat ID ] ) [ Citrus × aurantium ] )"
        ],
        "gen_label": "( JOIN ( R [ FloraCatalana ID ] ) [ Citrus × aurantium ] )"
    },
    {
        "question": "Question: { Which is the signature for Andrei Mironov? }",
        "predicted_query": [
            "( JOIN ( R [ signature ] ) [ Andrei Mironov ] )",
            "( [ joined by ] [ signature ] [ Andrei Mironov ] )",
            "( JOIN ( R [ has signature ] ) [ Andrei Mironov ] )",
            "( AND ( JOIN [ diplomatic representation ] [ Andrei Mironov ] ) ( JOIN ( R [ given name ] ) [ Andrei Mironov ] ) )",
            "( [ joined by ] [ signature ] [ Andrei Mironov ] )"
        ],
        "gen_label": "( JOIN ( R [ signature ] ) [ Andrei Mironov ] )"
    },
    {
        "question": "Question: { Which is the teaching method for Montessori education? }",
        "predicted_query": [
            "( JOIN ( R [ teaching method ] ) [ Montessori education ] )",
            "( JOIN [ teaching method ] [ Montessori education ] )",
            "[{\"joint\":[\"teaching method\"],\"answer\":\"Montessori education\"}]",
            "( JOIN ( R [ learning method ] ) [ Montessori ] )",
            "[ ( joined by ) [ teaching method ] [ Montessori education ] ]"
        ],
        "gen_label": "( JOIN [ teaching method ] [ Montessori education ] )"
    },
    {
        "question": "Question: { Which is the Songkick venue ID for Louvre Museum? }",
        "predicted_query": [
            "( JOIN ( R [ Songkick venue ID ] ) [ Louvre Museum ] )",
            "( JOIN ( R [ Songkick venue ID ] ) [ Louvre ] )",
            "( JOIN ( R [ Songkick venue ID ] ) [ Musée du Louvre ] )",
            "( JOIN ( R [ Songkick venue ID ] ) [ Louvre Museum ] )",
            "( JOIN ( R [ Songkick venue ID ] ) [ Louvre ] )"
        ],
        "gen_label": "( JOIN ( R [ Songkick venue ID ] ) [ Louvre Museum ] )"
    },
    {
        "question": "Question: { What is the study of epistemology? }",
        "predicted_query": [
            "( JOIN ( R [ field of study ] ) ( JOIN ( R [ studied by ] ) [ epistemology ] ) )",
            "( JOIN [ field of study ] [ epistemology ] )",
            "( JOIN [ study of ] [ epistemology ] )",
            "( AND ( JOIN [ studied at ] [ epistemology ] ) ( JOIN ( R [ field of study ] ) [ epistemology ] ) )",
            "( JOIN ( R [ field of study ] ) ( JOIN ( R [ follows ] ) [ epistemology ] ) )"
        ],
        "gen_label": "( JOIN [ studied in ] [ epistemology ] )"
    },
    {
        "question": "Question: { What is George Clooney known for? }",
        "predicted_query": [
            "### Historical Optimization:",
            "( JOIN ( R JOINS ) [ George Clooney ] )",
            "( JOIN ( R [ notable work ] ) ( JOIN ( R [ occupation ] ) [ George Clooney ] ) )",
            "( [ joined by ] [ known for ] [ George Clooney ] )",
            "( AND ( JOIN [ field of work ] [ actor ] ) ( JOIN ( R [ notable work ] ) [ George Clooney ] ) )"
        ],
        "gen_label": "( JOIN ( R [ founded by ] ) ( JOIN ( R [ member of ] ) [ George Clooney ] ) )"
    },
    {
        "question": "Question: { What is the positive therapeutic predictor of aspirin? }",
        "predicted_query": [
            "( JOIN ( R [ positive therapeutic predictor ] ) [ aspirin ] )",
            "( JOIN [ positive therapeutic predictor ] [ aspirin ] )",
            "( JOIN ( R [ therapeutic predictor ] ) ( JOIN ( R [ drug ] ) [ aspirin ] ) )",
            "( JOIN ( R [ has positive therapeutic effect ] ) ( JOIN ( R [ drug ] ) [ aspirin ] ) )",
            "( AND ( JOIN [ drug ] [ aspirin ] ) ( JOIN ( R [ therapeutic effect ] ) [ aspirin ] ) )"
        ],
        "gen_label": "( JOIN [ positive therapeutic predictor for ] [ aspirin ] )"
    },
    {
        "question": "Question: { Is James Baldwin in the KLfG Critical Dictionary of foreign contemporary literature. }",
        "predicted_query": [
            "( JOIN ( R [ author ] ) ( JOIN ( R [ publisher ] ) [ Critical Dictionary of Foreign Contemporary Literature ] ) )",
            "( JOIN ( R [ KLfG Critical Dictionary of foreign contemporary literature ] ) [ James Baldwin ] )",
            "( JOIN [ KLfG Critical Dictionary of foreign contemporary literature ] [ James Baldwin ] )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ author ] ) [ KLfG Critical Dictionary of foreign contemporary literature ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ KLfG Critical Dictionary of foreign contemporary literature ] ) ( JOIN ( R [ author ] ) [ James Baldwin ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Kritisches Lexikon zur fremdsprachigen Gegenwartsliteratur ID ] ) [ James Baldwin ] )"
    },
    {
        "question": "Question: { What region did Maria Kryuchkova die from? }",
        "predicted_query": [
            "( JOIN [ place of death ] [ Maria Kryuchkova ] )",
            "( JOIN ( R [ region of death ] ) ( JOIN ( R [ place of death ] ) [ Maria Kryuchkova ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ place of death ] ) [ Maria Kryuchkova ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Kryuchkova ] ) ( JOIN ( R [ place of death ] ) [ Maria Kryuchkova ] ) )",
            "[join the history of the question for taxon that is the administrative territorial entity of the place of death]"
        ],
        "gen_label": "( JOIN ( R [ location ] ) ( JOIN ( R [ cause of death ] ) [ Maria Kryuchkova ] ) )"
    },
    {
        "question": "Question: { who is writers of featured in work Ulrich ? }",
        "predicted_query": [
            "( JOIN ( R [ writer ] ) ( JOIN ( R [ featured in work ] ) [ Ulrich ] ) )",
            "( JOIN [ writer ] [ Ulrich ] )",
            "( JOIN ( R [ author ] ) ( JOIN ( R [ subject of ] ) [ Ulrich ] ) )",
            "( JOIN ( R [ writer ] ) ( JOIN ( R [ cast member ] ) [ Ulrich ] ) )",
            "( JOIN ( R [ author ] ) ( JOIN ( R [ based on work ] ) [ Ulrich ] ) )"
        ],
        "gen_label": "( JOIN ( R [ author ] ) ( JOIN ( R [ present in work ] ) [ Ulrich ] ) )"
    },
    {
        "question": "Question: { What Marama Teururai brother is married to Pōmare V? }",
        "predicted_query": [
            "( AND ( JOIN [ spouse ] [ Pōmare V ] ) ( JOIN ( R [ sibling ] ) [ Marama Teururai ] ) )",
            "( AND ( JOIN [ spouse ] [ Pōmare V ] ) ( JOIN ( R [ sibling ] ) [ Marama Teururai ] ) )",
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ spouse ] ) [ Pōmare V ] ) )",
            "( AND ( JOIN [ spouse ] [ Pomare V ] ) ( JOIN ( R [ sibling ] ) [ Marama Teururai ] ) )",
            "( JOIN [ spouse ] [ Pōmare V ] ) ( JOIN ( R [ sibling ] ) [ Marama Teururai ] )"
        ],
        "gen_label": "( AND ( JOIN [ sibling ] [ Marama Teururai ] ) ( JOIN ( R [ spouse ] ) [ Pōmare V ] ) )"
    },
    {
        "question": "Question: { Which is the WWE.com superstar ID of Arnold Schwarzenegger? }",
        "predicted_query": [
            "( JOIN ( R [ WWE.com superstar ID ] ) [ Arnold Schwarzenegger ] )",
            "( JOIN ( R [ WWE.com superstar ID ] ) [ Arnold Schwarzenegger ] )",
            "( JOIN ( R [ Wrestling Database ID ] ) ( JOIN ( R [ WWE.com superstar ID ] ) [ Arnold Schwarzenegger ] ) )",
            "( JOIN ( R [ WWE Superstar ID ] ) [ Arnold Schwarzenegger ] )",
            "( JOIN ( R [ WWE.com superstar ID ] ) [ Arnold Schwarzenegger ] )"
        ],
        "gen_label": "( JOIN ( R [ WWE superstar ID ] ) [ Arnold Schwarzenegger ] )"
    },
    {
        "question": "Question: { What is made from a source of Triticum spelta? }",
        "predicted_query": [
            "( JOIN ( R [ made from ] ) ( JOIN ( R [ source of ] ) [ Triticum spelta ] ) )",
            "( JOIN [ made from ] [ Triticum spelta ] )",
            "( JOIN ( R [ product of ] ) ( JOIN ( R [ taxon ] ) [ Triticum spelta ] ) )",
            "( JOIN ( R [ material ] ) ( JOIN ( R [ source of ] ) [ Triticum spelta ] ) )",
            "( AND ( JOIN [ contains material made from ] [ wheat ] ) ( JOIN ( R [ source of ] ) [ Triticum spelta ] ) )"
        ],
        "gen_label": "( JOIN ( R [ natural product of taxon ] ) ( JOIN ( R [ this taxon is source of ] ) [ Triticum spelta ] ) )"
    },
    {
        "question": "Question: { Who is the succesor of Allan in Wonderland? }",
        "predicted_query": [
            "( JOIN ( R [ successor ] ) ( JOIN ( R [ character ] ) [ Allan in Wonderland ] ) )",
            "[ JOIN ] [ Allan in Wonderland ]",
            "( AND ( JOIN [ child of ] [ Allan ] ) ( JOIN ( R [ successor ] ) [ Alice in Wonderland ] ) )",
            "( JOIN ( R [ successor ] ) ( JOIN ( R [ character in work ] ) [ Allan in Wonderland ] ) )",
            "( JOIN ( R [ successor ] ) ( JOIN ( R [ author ] ) [ Alice in Wonderland ] ) )"
        ],
        "gen_label": "( JOIN ( R [ performer ] ) ( JOIN ( R [ follows ] ) [ Allan in Wonderland ] ) )"
    },
    {
        "question": "Question: { Who are the children of the husbands of Philip II of France? }",
        "predicted_query": [
            "( JOIN ( R [ child ] ) ( JOIN ( R [ spouse ] ) [ Philip II of France ] ) )",
            "( JOIN ( R [ father of ] ) ( JOIN ( R [ spouse ] ) [ Philip II of France ] ) )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ spouse ] ) [ Philip II of France ] ) )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ spouse ] ) [ Philip II, Duke of Burgundy ] ) )",
            "( JOIN [ child ] [ Philip II of France ] )"
        ],
        "gen_label": "( JOIN ( R [ child ] ) ( JOIN ( R [ spouse ] ) [ Philip II of France ] ) )"
    },
    {
        "question": "Question: { Which is the Glottolog code for Vietnamese? }",
        "predicted_query": [
            "( JOIN ( R [ Glottolog language code ] ) [ Vietnamese ] )",
            "( JOIN ( R [ Glottolog code ] ) [ Vietnamese ] )",
            "( JOIN [ Glottolog code ] [ Vietnamese ] )",
            "( JOIN ( R [ Glottolog language code ] ) [ Vietnamese ] )",
            "( AND ( JOIN [ Glottolog ID ] [ Vietnamese ] ) ( JOIN ( R [ language code ] ) [ Vietnamese ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Glottolog code ] ) [ Vietnamese ] )"
    },
    {
        "question": "Question: { Who is the mayor of the Fred Ott's Sneeze? }",
        "predicted_query": [
            "( JOIN ( R [ mayor ] ) ( JOIN ( R [ location ] ) [ Fred Ott's Sneeze ] ) )",
            "( JOIN ( R [ mayor ] ) ( JOIN ( R [ place of occurrence ] ) [ Fred Ott's Sneeze ] ) )",
            "( JOIN [ mayor ] [ Fred Ott's Sneeze ] )",
            "( JOIN ( R [ mayor ] ) [ Fred Ott's Sneeze ] )",
            "( JOIN ( R [ head of government ] ) ( JOIN ( R [ place of death ] ) [ Fred Ott's Sneeze ] ) )"
        ],
        "gen_label": "( JOIN ( R [ head of government ] ) ( JOIN ( R [ filming location ] ) [ Fred Ott's Sneeze ] ) )"
    },
    {
        "question": "Question: { WHICH IS THE PCA TOUR ID FOR PHIL   MICKELSON }",
        "predicted_query": [
            "[ JOIN ( R [ joined by ] ) [ PGA Tour ID ] ]",
            "[joins]",
            "[ JOIN [ PGA Tour ID ] [ Phil Mickelson ] ]",
            "[ ( JOIN ( R [ professional chess association tournament ID ] ) [ Phil Mickelson ] ) ]",
            "( JOIN ( R [ PCA Tour ID ] ) [ Phil Mickelson ] )"
        ],
        "gen_label": "( JOIN ( R [ PGA Tour golf player ID ] ) [ Phil Mickelson ] )"
    },
    {
        "question": "Question: { Which is the main building contractor of Suleiman the Magnificent? }",
        "predicted_query": [
            "( JOIN ( R [ main building contractor ] ) [ Suleiman the Magnificent ] )",
            "( JOIN ( R [ main contractor ] ) [ Suleiman the Magnificent ] )",
            "( AND ( JOIN [ employer ] [ Süleyman the Magnificent ] ) ( JOIN ( R [ architect ] ) [ Süleyman the Magnificent ] ) )",
            "[ JOIN ] [ main building contractor ] [ Suleiman the Magnificent ]",
            "( JOIN ( R [ contractor ] ) ( JOIN ( R [ architect ] ) [ Suleiman the Magnificent ] ) )"
        ],
        "gen_label": "( JOIN [ main building contractor ] [ Suleiman the Magnificent ] )"
    },
    {
        "question": "Question: { Which is the SIPCA code for Basilica of Our Lady of the Pillar? }",
        "predicted_query": [
            "( JOIN ( R [ SIPCA code ] ) [ Basilica of Our Lady of the Pillar ] )",
            "( JOIN [ SIPCA code ] [ Basilica of Our Lady of the Pillar ] )",
            "( JOIN ( R [ SIPCA code ] ) [ Basilica of Our Lady of the Pillar ] )",
            "( JOIN ( R [ SIPCA code ] ) [ Basilica of Our Lady of the Pillar ] )",
            "( JOIN ( R [ SIKART artist ID ] ) [ Basilica of Our Lady of the Pillar ] )"
        ],
        "gen_label": "( JOIN ( R [ SIPCA code ] ) [ Basilica of Our Lady of the Pillar ] )"
    },
    {
        "question": "Question: { What is the sports season of the Chirripo National Park mountain range? }",
        "predicted_query": [
            "( JOIN ( R [ sports season ] ) ( JOIN ( R [ located in ] ) [ Chirripo National Park ] ) )",
            "( AND ( JOIN [ season ] [ winter ] ) ( JOIN ( R [ located in ] ) [ Chirripo National Park ] ) )",
            "( JOIN ( R [ sports season ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Chirripo National Park ] ) )",
            "( JOIN ( R [ sport ] ) ( JOIN ( R [ located in ] ) [ Chirripo National Park ] ) )",
            "( JOIN ( R [ sports season ] ) ( JOIN ( R [ part of ] ) [ Chirripó National Park ] ) )"
        ],
        "gen_label": "( JOIN ( R [ time period ] ) ( JOIN ( R [ mountain range ] ) [ Chirripó National Park ] ) )"
    },
    {
        "question": "Question: { Who is the composer for Jerry Goldsmith? }",
        "predicted_query": [
            "( JOIN [ composer ] [ Jerry Goldsmith ] )",
            "( JOIN ( R [ composer ] ) [ Jerry Goldsmith ] )",
            "( JOIN ( R [ composer ] ) ( JOIN ( R [ composer of ] ) [ Jerry Goldsmith ] ) )",
            "( JOIN ( R [ composer ] ) [ Jerry Goldsmith ] )",
            "{ JOIN [ composer ] [ Jerry Goldsmith ] }"
        ],
        "gen_label": "( JOIN [ composer ] [ Jerry Goldsmith ] )"
    },
    {
        "question": "Question: { Who gave the {date of the end} of {mentor} of {Muslim ibn al-Hajjaj} ? }",
        "predicted_query": [
            "( JOIN ( R [ date of end ] ) ( JOIN ( R [ student ] ) [ Muslim ibn al-Hajjaj ] ) )",
            "( JOIN ( R [ end date ] ) ( JOIN ( R [ student ] ) [ Muslim ibn al-Hajjaj ] ) )",
            "( AND ( JOIN [ follows field ] [ date of the end ] ) ( JOIN ( R [ student ] ) [ Muslim ibn al-Hajjaj ] ) )",
            "( JOIN ( R [ date of the end ] ) ( JOIN ( R [ student ] ) [ Muslim ibn al-Hajjaj ] ) )",
            "( JOIN [ date of the end ] [ mentor of Muslim ibn al-Hajjaj ] )"
        ],
        "gen_label": "( JOIN ( R [ date of death ] ) ( JOIN ( R [ student of ] ) [ Muslim ibn al-Ḥajjāj ] ) )"
    },
    {
        "question": "Question: { What is the Patrimonio Inmueble de Andalucía ID for Alhambra? }",
        "predicted_query": [
            "[ JOIN [ property of ] [ Alhambra ] ]",
            "( JOIN ( R [ Patrimonio Inmueble de Andalucía ID ] ) [ Alhambra ] )",
            "( JOIN ( R [ Patrimonio Inmueble de Andalucía ID ] ) [ Alhambra ] )",
            "( JOIN ( R [ Patrimonium Inmueble de Andalucía ID ] ) [ Alhambra ] )",
            "( JOIN ( R [ Patrimonio Inmueble de Andalucía ID ] ) [ Alhambra ] )"
        ],
        "gen_label": "( JOIN ( R [ Guía Digital del Patrimonio Cultural de Andalucía ID ] ) [ Alhambra ] )"
    },
    {
        "question": "Question: { Which is the ICAA rating for Brokeback Mountain? }",
        "predicted_query": [
            "( JOIN ( R [ ICAA rating ] ) [ Brokeback Mountain ] )",
            "### Instruction",
            "( JOIN [ ICAA rating ] [ Brokeback Mountain ] )",
            "( JOIN ( R [ ICAA rating ] ) [ Brokeback Mountain ] )",
            "[ JOIN ] [ ICAA rating ] [ question ] "
        ],
        "gen_label": "( JOIN ( R [ ICAA rating ] ) [ Brokeback Mountain ] )"
    },
    {
        "question": "Question: { Which is the Theaterlexikon der Schweiz online ID for Antichrist? }",
        "predicted_query": [
            "( JOIN ( R [ Theaterlexikon der Schweiz online ID ] ) [ Antichrist ] )",
            "( JOIN ( R [ Theaterlexikon der Schweiz online ID ] ) [ Antichrist ] )",
            "[ JOIN",
            "( AND ( JOIN [ Theaterlexikon.ch ID ] [ Antichrist ] ) ( JOIN ( R [ ID in this field ] ) [ Antichrist ] ) )",
            "( [ joined by ] [ Theatrelexikon der Schweiz online ID ] [ Antichrist ] )"
        ],
        "gen_label": "( JOIN ( R [ Theaterlexikon der Schweiz ID ] ) [ Antichrist ] )"
    },
    {
        "question": "Question: { Who are the members of the subitem of the history of Argentina? }",
        "predicted_query": [
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ history ] ) [ Argentina ] ) )",
            "( JOIN [ member of ] [ history of Argentina ] )",
            "( JOIN [ member of the subitem of history of ] [ Argentina ] )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ part of history ] ) [ Argentina ] ) )",
            "( JOIN ( R [ member ] ) ( JOIN ( R [ part of history ] ) [ Argentina ] ) )"
        ],
        "gen_label": "( JOIN ( R [ member of ] ) ( JOIN ( R [ facet of ] ) [ history of Argentina ] ) )"
    },
    {
        "question": "Question: { Which is the genre for news? }",
        "predicted_query": [
            "( JOIN ( R [ genre ] ) [ news ] )",
            "( JOIN [ genre ] [ news ] )",
            "( JOIN ( R [ genre ] ) [ news ] )",
            "( JOIN ( R [ genre ] ) [ news ] )",
            "( AND ( JOIN [ field of work ] [ news ] ) ( JOIN ( R [ genre ] ) [ news ] ) )"
        ],
        "gen_label": "( JOIN [ genre ] [ news ] )"
    },
    {
        "question": "Question: { What is the birth place of James Lind, which has the partner city of Aalborg? }",
        "predicted_query": [
            "( AND ( JOIN [ twinned administrative body ] [ Aalborg ] ) ( JOIN ( R [ place of birth ] ) [ James Lind ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Aalborg ] ) ( JOIN ( R [ place of birth ] ) [ James Lind ] ) )",
            "( AND ( JOIN [ twin town ] [ Aalborg ] ) ( JOIN ( R [ place of birth ] ) [ James Lind ] ) )",
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ place of birth ] ) [ James Lind ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Aalborg ] ) ( JOIN ( R [ location ] ) [ James Lind ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ place of birth ]0 [ Aalborg ] ) ( JOIN ( R [ place of birth ] ) [ James Lind ] ) )"
    },
    {
        "question": "Question: { What country is next to Tim Conway? }",
        "predicted_query": [
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ country of citizenship ] ) [ Tim Conway ] ) )",
            "( JOIN [ shares border with ] [ United States ] )",
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ country ] ) [ Tim Conway ] ) )",
            "( JOIN [ shares border with ] [ Tim Conway ] )",
            "( AND ( JOIN [ shares border with ] [ United States ] ) ( JOIN ( R [ country ] ) [ Tim Conway ] ) )"
        ],
        "gen_label": "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ country of citizenship ] ) [ Tim Conway ] ) )"
    },
    {
        "question": "Question: { Where is the birth city of Guo Qiru located in the People's Republic of China? }",
        "predicted_query": [
            "( JOIN [ located in the administrative territorial entity ] [ People's Republic of China ] ) ( JOIN ( R [ place of birth ] ) [ Guo Qiru ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ People's Republic of China ] ) ( JOIN ( R [ place of birth ] ) [ Guo Qiru ] ) )",
            "( JOIN ( R [ capital ] ) ( JOIN ( R [ country ] ) [ Guo Qiru ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ People's Republic of China ] ) ( JOIN ( R [ place of birth ] ) [ Guo Qiru ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ place of birth ] ) [ Guo Qiru ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ located in the administrative territorial entity ] [ People's Republic of China ] ) ( JOIN ( R [ place of birth ] ) [ Guo Qiru ] ) )"
    },
    {
        "question": "Question: { What is the ideology of party member Nigel Farage? }",
        "predicted_query": [
            "( JOIN ( R [ ideology ] ) ( JOIN ( R [ member of political party ] ) [ Nigel Farage ] ) )",
            "( AND ( JOIN [ member of political party ] [ Nigel Farage ] ) ( JOIN ( R [ ideology ] ) [ Nigel Farage ] ) )",
            "( JOIN ( R [ political ideology ] ) ( JOIN ( R [ member of political party ] ) [ Nigel Farage ] ) )",
            "( JOIN [ ideology ] [ Nigel Farage ] )",
            "[ joint ] [ Nigel Farage ] "
        ],
        "gen_label": "( JOIN ( R [ political ideology ] ) ( JOIN ( R [ member of political party ] ) [ Nigel Farage ] ) )"
    },
    {
        "question": "Question: { Which SkyscraperPage building ID is of CN Tower? }",
        "predicted_query": [
            "( JOIN ( R [ SkyscraperPage building ID ] ) [ CN Tower ] )",
            "( JOIN ( R [ skyscraperpage.com building ID ] ) [ CN Tower ] )",
            "( JOIN ( R [ SkyscraperPage building ID ] ) [ CN Tower ] )",
            "( AND ( JOIN [ skyscraperpage.com building ID ] [ CN Tower ] ) ( JOIN ( R [ ID in Wikidata ] ) [ CN Tower ] ) )",
            "( JOIN ( R [ SkyscraperPage building ID ] ) [ CN Tower ] )"
        ],
        "gen_label": "( JOIN ( R [ SkyscraperPage building ID ] ) [ CN Tower ] )"
    },
    {
        "question": "Question: { Where did Governor Pedro Romero die? }",
        "predicted_query": [
            "( JOIN ( R [ place of death ] ) [ Pedro Romero ] )",
            "( JOIN ( R [ place of death ] ) ( JOIN ( R [ place of work ] ) [ Pedro Romero ] ) )",
            "( AND ( JOIN [ capital city ] [ Madrid ] ) ( JOIN ( R [ place of death ] ) [ Pedro Romero ] ) )",
            "[ JOIN [ place of death ] [ Pedro Romero ] ]",
            "( JOIN ( R [ place of death ] ) ( JOIN ( R [ place of birth ] ) [ Pedro Romero ] ) )"
        ],
        "gen_label": "( JOIN ( R [ office held by head of government ] ) ( JOIN ( R [ place of death ] ) [ Pedro Romero Martínez ] ) )"
    },
    {
        "question": "Question: { What is National Historic Sites of Canada ID for Rideau Canal ? }",
        "predicted_query": [
            "[ JOIN ( R [ National Historic Sites of Canada ID ] ) [ Rideau Canal ] ]",
            "( JOIN [ National Historic Sites of Canada ID ] [ Rideau Canal ] )",
            "( JOIN ( R [ National Historic Sites of Canada ID ] ) [ Rideau Canal ] )",
            "( JOIN ( R [ National Historic Sites of Canada ID ] ) [ Rideau Canal ] )",
            "[join [R [National Historic Sites of Canada ID] [Rideau Canal]]]"
        ],
        "gen_label": "( JOIN ( R [ National Historic Sites of Canada ID ] ) [ Rideau Canal ] )"
    },
    {
        "question": "Question: { What is Advanced Micro Devices ISIN? }",
        "predicted_query": [
            "( JOIN ( R [ ISIN ] ) [ Advanced Micro Devices ] )",
            "[ JOIN ( R [ ISIN ] ) [ Advanced Micro Devices ] ]",
            "( JOIN ( R [ International Securities Identification Number ] ) [ Advanced Micro Devices ] )",
            "( JOIN ( R [ Advanced Micro Devices ISIN ] ) [ Advanced Micro Devices ] )",
            "[ JOIN [ shares traded on ] [ Advanced Micro Devices, Inc. ] ]"
        ],
        "gen_label": "( JOIN ( R [ ISIN ] ) [ AMD ] )"
    },
    {
        "question": "Question: { Which is the Alexa rank of The Age? }",
        "predicted_query": [
            "( [ joined by ] [ Alexa rank ] [ The Age ] )",
            "[ JOIN ( R [ Alexa rank ] ) [ The Age ] ]",
            "( JOIN [ Alexa rank ] [ The Age ] )",
            "( JOIN [ Alexa rank ] [ The Age ] )",
            "( JOIN ( R [ Alexa rank ] ) [ The Age ] )"
        ],
        "gen_label": "( JOIN ( R [ Alexa rank ] ) [ The Age ] )"
    },
    {
        "question": "Question: { Does Iullus Antonius have a father and brother? }",
        "predicted_query": [
            "( JOIN ( R [ father ] ) ( JOIN ( R [ sibling ] ) [ Iullus Antonius ] ) )",
            "( AND ( JOIN [ child ] [ Iullus Antonius ] ) ( JOIN ( R [ father ] ) [ Iullus Antonius ] ) )",
            "( JOIN [ has father ] [ Iullus Antonius ] ) ( JOIN ( JOIN ( JOIN [ has sibling ] [ Iullus Antonius ] ) ) [ question ] )",
            "( JOIN ( R [ has father ] ) ( JOIN ( R [ sibling ] ) [ Iullus Antonius ] ) )",
            "( AND ( JOIN [ father ] [ Iulus ] ) ( JOIN ( R [ sibling ] ) [ Iullus Antonius ] ) )"
        ],
        "gen_label": "( JOIN ( R [ father ] ) ( JOIN ( R [ sibling ] ) [ Iullus Antonius ] ) )"
    },
    {
        "question": "Question: { What is Curcuma longa's WC SPF ID? }",
        "predicted_query": [
            "( JOIN ( R [ WCSP ID ] ) [ Curcuma longa ] )",
            "( JOIN ( R [ WCSP family ID ] ) [ Curcuma longa ] )",
            "( AND ( JOIN [ World Chromosome Database species ID ] [ Curcuma longa ] ) ( JOIN ( R [ WCSP ID ] ) [ Curcuma longa ] ) )",
            "( JOIN ( R [ WCSP taxon ID ] ) [ Curcuma longa ] )",
            "( JOIN ( R [ World Checklist of Selected Plant Families ID ] ) [ Curcuma longa ] )"
        ],
        "gen_label": "( JOIN ( R [ WCSPF ID ] ) [ Curcuma longa ] )"
    },
    {
        "question": "Question: { Who govern's Francis I, Holy Roman Emperor's workplace? }",
        "predicted_query": [
            "( JOIN ( R [ head of government ] ) ( JOIN ( R [ occupation ] ) [ Francis I, Holy Roman Emperor ] ) )",
            "( JOIN [ governed by ] [ Francis I, Holy Roman Emperor ] )",
            "( JOIN ( R [ government body ] ) ( JOIN ( R [ occupation ] ) [ Francis I, Holy Roman Emperor ] ) )",
            "( JOIN ( R [ governed by ] ) ( JOIN ( R [ occupation ] ) [ Francis I, Holy Roman Emperor ] ) )",
            "( AND ( JOIN [ administered by ] [ Francis I, Holy Roman Emperor ] ) ( JOIN ( R [ work location ] ) [ Francis I, Holy Roman Emperor ] ) )"
        ],
        "gen_label": "( JOIN ( R [ head of government ] ) ( JOIN ( R [ work location ] ) [ Francis I, Holy Roman Emperor ] ) )"
    },
    {
        "question": "Question: { who mortally wounded by of motif of the awakening of Adonis ? }",
        "predicted_query": [
            "( AND ( JOIN [ cause of death ] [ mortal wound ] ) ( JOIN ( R [ motif ] ) [ The Awakening of Adonis ] ) )",
            "( JOIN ( R [ motif ] ) ( JOIN ( R [ influenced by ] ) [ The Awakening of Adonis ] ) )",
            "( JOIN ( R [ cause of death ] ) ( JOIN ( R [ motif ] ) [ The Awakening of Adonis ] ) )",
            "( AND ( JOIN [ location ] [ Motif of the Awakening of Adonis ] ) ( JOIN ( R [ cause of death ] ) [ Adonis ] ) )",
            "( AND ( JOIN [ influenced by ] [ The Awakening of Adonis ] ) ( JOIN ( R [ cause of death ] ) [ Adonis ] ) )"
        ],
        "gen_label": "( JOIN ( R [ killed by ] ) ( JOIN ( R [ depicts ] ) [ The Awakening of Adonis ] ) )"
    },
    {
        "question": "Question: { what is executive director of developed by of ios? }",
        "predicted_query": [
            "( JOIN ( R [ executive director ] ) ( JOIN ( R [ developer ] ) [ iOS ] ) )",
            "( AND ( JOIN [ developer ] [ iOS ] ) ( JOIN ( R [ executive director ] ) [ iOS ] ) )",
            "( JOIN [ executive director ] [ iOS ] )",
            "( AND ( JOIN [ developed by ] [ iOS ] ) ( JOIN ( R [ executive director ] ) [ iOS ] ) )",
            "( JOIN [ executive director ] [ iOS ] )"
        ],
        "gen_label": "( JOIN ( R [ chief executive officer ] ) ( JOIN ( R [ developer ] ) [ iOS ] ) )"
    },
    {
        "question": "Question: { In what town is the work location of Franz Wiedemann? }",
        "predicted_query": [
            "( JOIN ( R [ place of work ] ) ( JOIN ( R [ place of death ] ) [ Franz Wiedemann ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Frankfurt am Main ] ) ( JOIN ( R [ place of work ] ) [ Franz Wiedemann ] ) )",
            "( JOIN ( R [ location ] ) ( JOIN ( R [ place of work ] ) [ Franz Wiedemann ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ place of work ] ) [ Franz Wiedemann ] ) )",
            "( JOIN [ place of work ] [ Franz Wiedemann ] )"
        ],
        "gen_label": "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ work location ] ) [ Franz Wiedemann ] ) )"
    },
    {
        "question": "Question: { What is Ted Kaczynski's defender? }",
        "predicted_query": [
            "( JOIN ( R [ defender ] ) [ Ted Kaczynski ] )",
            "( JOIN [ defender ] [ Ted Kaczynski ] )",
            "( [ joined by ] [ defender ] [ Ted Kaczynski ] )",
            "( JOIN ( R [ defendant ] ) [ Theodore John Kaczynski ] )",
            "( AND ( JOIN [ defender ] [ Ted Kaczynski ] ) ( JOIN ( R [ member of ] ) [ Ted Kaczynski ] ) )"
        ],
        "gen_label": "( JOIN ( R [ defender ] ) [ Ted Kaczynski ] )"
    },
    {
        "question": "Question: { What is the domain name for the nationality of Paulino Alcántara? }",
        "predicted_query": [
            "( JOIN [ country of nationality ] [ Paulino Alcántara ] )",
            "( JOIN ( R [ domain name ] ) ( JOIN ( R [ country of citizenship ] ) [ Paulino Alcántara ] ) )",
            "( AND ( JOIN [ uses the name of ] [ Paulino Alcántara ] ) ( JOIN ( R [ country of citizenship ] ) [ Paulino Alcántara ] ) )",
            "( JOIN ( R [ uses ] ) ( JOIN ( R [ country of citizenship ] ) [ Paulino Alcántara ] ) )",
            "( JOIN ( R [ country of origin ] ) ( JOIN ( R [ sport ] ) [ Paulino Alcántara ] ) )"
        ],
        "gen_label": "( JOIN ( R [ top-level Internet domain ] ) ( JOIN ( R [ country of citizenship ] ) [ Paulino Alcántara ] ) )"
    },
    {
        "question": "Question: { What is the label in sign language of the streak of color asbestos? }",
        "predicted_query": [
            "( JOIN ( R [ sign language ] ) ( JOIN ( R [ has color ] ) [ asbestos ] ) )",
            "( AND ( JOIN [ has color ] [ asbestos ] ) ( JOIN ( R [ language of work or expression ] ) [ streak of color ] ) )",
            "( AND ( JOIN [ color ] [ asbestos ] ) ( JOIN ( R [ language of work ] ) [ sign language ] ) )",
            "( JOIN [ sign language ] [ asbestos ] )",
            "( JOIN ( R [ language of sign ] ) ( JOIN ( R [ has color ] ) [ asbestos ] ) )"
        ],
        "gen_label": "( JOIN ( R [ label in sign language ] ) ( JOIN ( R [ streak color ] ) [ asbestos ] ) )"
    },
    {
        "question": "Question: { Which is Sina Weibo ID for United Nations? }",
        "predicted_query": [
            "( JOIN ( R [ Sina Weibo ID ] ) [ United Nations ] )",
            "( AND ( JOIN [ social media ID ] [ Sina Weibo ID for United Nations ] ) [ Sina Weibo ID for United Nations ] )",
            "( JOIN ( R [ Sina Weibo ID ] ) [ United Nations ] )",
            "( JOIN ( R [ Sina Weibo user ID ] ) [ United Nations ] )",
            "( JOIN [ Sina Weibo ID ] [ United Nations ] )"
        ],
        "gen_label": "( JOIN ( R [ Weibo user ID ] ) [ United Nations ] )"
    },
    {
        "question": "Question: { What is the size of human genome? }",
        "predicted_query": [
            "( JOIN [ size ] [ human genome ] )",
            "( JOIN ( R [ size ] ) [ human genome ] )",
            "( JOIN ( R [ number of base pairs ] ) [ human genome ] )",
            "( JOIN ( R [ genome size ] ) [ human genome ] )",
            "( JOIN [ genome size ] [ human genome ] )"
        ],
        "gen_label": "( JOIN ( R [ genome size ] ) [ human genome ] )"
    },
    {
        "question": "Question: { What is Tod Browning's personal ID scope.dk? }",
        "predicted_query": [
            "[ JOIN [ personal ID ] ] [ Tod Browning ]",
            "( JOIN [ personal ID ] [ scope.dk ] )",
            "( JOIN ( R [ scope.dk ID ] ) [ Tod Browning ] )",
            "( JOIN ( R [ Scope.dk ID ] ) [ Tod Browning ] )",
            "( AND ( JOIN [ scope: Danish personal ID ] [ Tod Browning ] ) ( JOIN ( R [ ID ] ) [ Tod Browning ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Scope.dk person ID ] ) [ Tod Browning ] )"
    },
    {
        "question": "Question: { What is  in the Pokémon browser number of Pikachu ? }",
        "predicted_query": [
            "( JOIN ( R [ Pokémon Browser number ] ) [ Pikachu ] )",
            "( JOIN ( R [ Pokémon browser number ] ) [ Pikachu ] )",
            "( JOIN ( R [ Pokémon Browser ID ] ) [ Pikachu ] )",
            "( JOIN ( R [ has ID ] ) ( JOIN ( R [ question ] ) [ Pokémon browser number of Pikachu ] ) )",
            "( JOIN ( R [ Pokédex ID ] ) [ Pikachu ] )"
        ],
        "gen_label": "( JOIN ( R [ Pokémon index ] ) [ Pikachu ] )"
    },
    {
        "question": "Question: { In what borough is the capital of Kolhar? }",
        "predicted_query": [
            "( JOIN ( R [ capital ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Kolhar ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Kolhar ] ) ( JOIN ( R [ capital ] ) [ Kharagpur ] ) )",
            "( JOIN ( R [ capital of ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Kolhar ] ) )",
            "( AND ( JOIN [ administrative territorial entity ] [ Kolhar ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Kolhar ] ) )",
            "( JOIN [ capital of ] [ Kolhar ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Kolhar ] )"
        ],
        "gen_label": "( JOIN ( R [ capital ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Kolhar ] ) )"
    },
    {
        "question": "Question: { Who competed in the battle of Xerxes? }",
        "predicted_query": [
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ fought in ] ) [ Xerxes I ] ) )",
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ participant in ] ) [ Battle of Xerxes ] ) )",
            "( JOIN [ fought in ] [ Xerxes ] )",
            "( JOIN ( R [ opponent ] ) ( JOIN ( R [ participant ] ) [ Battle of Xerxes ] ) )",
            "( JOIN [ participant ] [ Battle of Xerxes ] )"
        ],
        "gen_label": "( JOIN ( R [ participant ] ) ( JOIN ( R [ conflict ] ) [ Xerxes ] ) )"
    },
    {
        "question": "Question: { What was the key incident of the Adrian Piper trend? }",
        "predicted_query": [
            "( JOIN ( R [ key incident ] ) ( JOIN ( R [ part of the series ] ) [ Adrian Piper ] ) )",
            "( JOIN ( R [ notable event ] ) ( JOIN ( R [ influenced by ] ) [ Adrian Piper ] ) )",
            "( AND ( JOIN [ notable work ] [ Adrian Piper: A Retrospective, 1965–2000 ] ) ( JOIN ( R [ influenced by ] ) [ Adrian Piper ] ) )",
            "( JOIN [ key incident ] [ Adrian Piper trend ] )",
            "( JOIN ( R [ significant event ] ) ( JOIN ( R [ follows trend ] ) [ Adrian Piper ] ) )"
        ],
        "gen_label": "( JOIN ( R [ significant event ] ) ( JOIN ( R [ movement ] ) [ Adrian Piper ] ) )"
    },
    {
        "question": "Question: { What instrument is used to play tennis? }",
        "predicted_query": [
            "( JOIN [ instrument used ] [ tennis ] )",
            "( JOIN ( R [ instrument used ] ) [ tennis ] )",
            "( JOIN ( R [ instrument ] ) [ tennis ] )",
            "( JOIN ( R [ has instrument ] ) ( JOIN ( R [ sport ] ) [ tennis ] ) )",
            "( AND ( JOIN [ uses ] [ tennis ] ) ( JOIN ( R [ instrument ] ) [ tennis ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ uses ] [ tennis ball ] ) ( JOIN ( R [ sport ] ) [ racket ] ) )"
    },
    {
        "question": "Question: { What is art director of Snow White and Seven Dwarfs ? }",
        "predicted_query": [
            "( JOIN ( R [ director ] ) ( JOIN ( R [ cast member ] ) [ Snow White and the Seven Dwarfs ] ) )",
            "( JOIN [ art director ] [ Snow White and the Seven Dwarfs ] )",
            "( JOIN ( R [ art director ] ) [ Snow White and the Seven Dwarfs ] )",
            "( JOIN ( R [ director ] ) ( JOIN ( R [ director ] ) [ Snow White and the Seven Dwarfs ] ) )",
            "( [ joined by ] [ art director ] [ Snow White and the Seven Dwarfs ] )"
        ],
        "gen_label": "( JOIN ( R [ art director ] ) [ Snow White and the Seven Dwarfs ] )"
    },
    {
        "question": "Question: { Who gave the {notable books} of {written by} of {Aria variata alla maniera italiana} ? }",
        "predicted_query": [
            "( JOIN ( R [ notable work ] ) ( JOIN ( R [ author ] ) [ Aria variata alla maniera italiana ] ) )",
            "( JOIN ( R [ notable books ] ) ( JOIN ( R [ author ] ) [ Aria variata alla maniera italiana ] ) )",
            "( AND ( JOIN [ author ] [ Aria variata alla maniera italiana ] ) ( JOIN ( R [ notable work ] ) [ Aria variata alla maniera italiana ] ) )",
            "[ ( JOIN ( R [ notable work ] ) ) ]",
            "( JOIN ( R [ notable book ] ) ( JOIN ( R [ writer ] ) [ Aria variata alla maniera italiana ] ) )"
        ],
        "gen_label": "( JOIN ( R [ notable work ] ) ( JOIN ( R [ composer ] ) [ Aria variata in A minor, BWV 989 ] ) )"
    },
    {
        "question": "Question: { What is WorldFootball.net ID for Zlatan Ibrahimović ? }",
        "predicted_query": [
            "( JOIN ( R [ WorldFootball.net ID ] ) [ Zlatan Ibrahimović ] )",
            "( JOIN ( R [ WorldFootball.net player ID ] ) [ Zlatan Ibrahimović ] )",
            "( JOIN ( R [ WorldFootball.net ID ] ) [ Zlatan Ibrahimović ] )",
            "( JOIN ( R [ WorldFootball.net player ID ] ) [ Zlatan Ibrahimović ] )",
            "( JOIN ( R [ WorldFootball.net ID ] ) [ Zlatan Ibrahimović ] )"
        ],
        "gen_label": "( JOIN ( R [ WorldFootball.net person ID ] ) [ Zlatan Ibrahimović ] )"
    },
    {
        "question": "Question: { What's Stephen Spender's Julien ID? }",
        "predicted_query": [
            "( JOIN ( R [ Julien ID ] ) [ Stephen Spender ] )",
            "( JOIN ( R [ Julien ID ] ) [ Stephen Spender ] )",
            "( JOIN ( R [ Julien's ID ] ) [ Stephen Spender ] )",
            "( JOIN [ Julien ID ] [ Stephen Spender ] )",
            "( AND ( JOIN [ JULIET ID ] [ Stephen Spender ] ) ( JOIN ( R [ ID ] ) [ Julien ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Julien ID ] ) [ Stephen Spender ] )"
    },
    {
        "question": "Question: { Which means{racing-reference driver ID} from{Michael Andretti} ? }",
        "predicted_query": [
            "( JOIN ( R [ racing-reference driver ID ] ) [ Michael Andretti ] )",
            "( JOIN ( R [ racing reference driver ID ] ) [ Michael Andretti ] )",
            "( JOIN ( R [ racing-reference driver ID ] ) [ Michael Andretti ] )",
            "( AND ( JOIN [ Racing Reference driver ID ] [ Michael Andretti ] ) ( JOIN ( R [ sport ] ) [ Michael Andretti ] ) )",
            "( JOIN ( R [ racing reference driver ID ] ) [ Michael Andretti ] )"
        ],
        "gen_label": "( JOIN ( R [ Racing-Reference driver ID ] ) [ Michael Andretti ] )"
    },
    {
        "question": "Question: { What is Lu Xun's Calis ID? }",
        "predicted_query": [
            "( JOIN ( R [ Calis ID ] ) [ Lu Xun ] )",
            "[ JOIN ( [ Caliphate ID ] ) [ Lu Xun ] ]",
            "( JOIN ( R [ Calis ID ] ) [ Lu Xun ] )",
            "( JOIN [ Calis ID ] [ Lu Xun ] )",
            "( JOIN ( R [ Calis ID ] ) [ Lu Xun ] )"
        ],
        "gen_label": "( JOIN ( R [ CALIS ID ] ) [ Lu Xun ] )"
    },
    {
        "question": "Question: { What is the ailment of Akseli Gallen-Kallela, that is caused by Corynebacterium diphtheriae? }",
        "predicted_query": [
            "( AND ( JOIN [ causes ] [ Corynebacterium diphtheriae ] ) ( JOIN ( R [ diagnosed with ] ) [ Akseli Gallen-Kallela ] ) )",
            "( AND ( JOIN [ cause of death ] [ Corynebacterium diphtheriae ] ) ( JOIN ( R [ diagnosed with ] ) [ Akseli Gallen-Kallela ] ) )",
            "( JOIN ( R [ medical condition ] ) ( JOIN ( R [ caused by ] ) [ Corynebacterium diphtheriae ] ) )",
            "( AND ( JOIN [ causes ] [ Corynebacterium diphtheriae ] ) ( JOIN ( R [ disease or medical condition ] ) [ Akseli Gallen-Kallela ] ) )",
            "( JOIN [ cause of death ] [ Corynebacterium diphtheriae ] ) JOIN ( JOIN ( R [ medical condition ] ) [ Akseli Gallen-Kallela ] )"
        ],
        "gen_label": "( AND ( JOIN [ has cause ] [ Corynebacterium diphtheriae ] ) ( JOIN ( R [ medical condition ] ) [ Akseli Gallen-Kallela ] ) )"
    },
    {
        "question": "Question: { What is the elCinaema ID of Adam Sandler? }",
        "predicted_query": [
            "( JOIN ( R [ elCinema ID ] ) [ Adam Sandler ] )",
            "( JOIN ( R [ elCinema ID ] ) [ Adam Sandler ] )",
            "( AND ( JOIN [ Cinema Database ID ] [ Adam Sandler ] ) ( JOIN ( R [ ID ] ) [ Adam Sandler ] ) )",
            "( JOIN ( R [ elCineMagia ID ] ) [ Adam Sandler ] )",
            "( JOIN ( R [ elCinema ID ] ) [ Adam Sandler ] )"
        ],
        "gen_label": "( JOIN ( R [ elCinema person ID ] ) [ Adam Sandler ] )"
    },
    {
        "question": "Question: { Is the surname of Hal David the same as Dávid? }",
        "predicted_query": [
            "( JOIN [ surname ] [ Dávid ] ) AND ( JOIN ( R [ different given name ] ) [ Hal David ] )",
            "( AND ( JOIN [ given name ] [ David ] ) ( JOIN ( R [ family name ] ) [ Hal David ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Dávid ] ) ( JOIN ( R [ given name ] ) [ Hal David ] ) )",
            "( JOIN ( R [ different from ] ) ( JOIN ( R [ given name ] ) [ Hal David ] ) )",
            "( AND ( JOIN [ has different name ] [ Dávid ] ) ( JOIN ( R [ given name ] ) [ Hal David ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ said to be the same as ] [ Dávid ] ) ( JOIN ( R [ family name ] ) [ Hal David ] ) )"
    },
    {
        "question": "Question: { What is the musical score by Toccata and Fugue in D minor, BMV 565 who is a disciple of Johanna Fiedrich Agricola? }",
        "predicted_query": [
            "( AND ( JOIN [ student ] [ Johanna Friedrich Agricola ] ) ( JOIN ( R [ composer ] ) [ Toccata and Fugue in D minor ] ) )",
            "( AND ( JOIN [ student of ] [ Johanna Fiedrich Agricola ] ) ( JOIN ( R [ composer ] ) [ Toccata and Fugue in D minor ] ) )",
            "( AND ( JOIN [ disciple ] [ Johanna Fiedrich Agricola ] ) ( JOIN ( R [ composer ] ) [ Toccata and Fugue in D minor ] ) )",
            "( AND ( JOIN [ pupil ] [ Johanna Friedrich Agricola ] ) ( JOIN ( R [ composer ] ) [ Toccata and Fugue in D minor ] ) )",
            "( AND ( JOIN [ composer ] [ Johanna Fiedrich Agricola ] ) ( JOIN ( R [ composer ] ) [ Toccata and Fugue in D minor ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ student ] [ Johann Friedrich Agricola ] ) ( JOIN ( R [ composer ] ) [ Toccata and Fugue in D minor, BWV 565 ] ) )"
    },
    {
        "question": "Question: { What is the IDEO Job ID of a pharmacist? }",
        "predicted_query": [
            "( JOIN ( R [ IDEO Job ID ] ) [ pharmacist ] )",
            "( JOIN ( R [ IDEO job ID ] ) [ pharmacist ] )",
            "( JOIN ( R [ IDEO Job ID ] ) [ pharmacist ] )",
            "( JOIN ( R [ IDEO Job ID ] ) [ pharmacist ] )",
            "( AND ( JOIN [ ID.com job ID ] [ Pharmaceuticals ] ) ( JOIN ( R [ occupation ] ) [ pharmacist ] ) )"
        ],
        "gen_label": "( JOIN ( R [ IDEO Job ID ] ) [ pharmacist ] )"
    },
    {
        "question": "Question: { What was the last meal of Jesus Christ? }",
        "predicted_query": [
            "( JOIN [ last meal ] [ Jesus Christ ] )",
            "( JOIN ( R [ last meal ] ) [ Jesus Christ ] )",
            "( AND ( JOIN [ food or beverage ] ) ( JOIN ( R [ last meal ] ) [ Jesus Christ ] ) )",
            "( JOIN [ last meal ] [ Jesus Christ ] )",
            "( JOIN ( R [ last meal ] ) [ Jesus Christ ] )"
        ],
        "gen_label": "( JOIN ( R [ had as last meal ] ) [ Jesus ] )"
    },
    {
        "question": "Question: { What is the manifestation  of the causes of deposition? }",
        "predicted_query": [
            "( JOIN ( R [ manifestation ] ) ( JOIN ( R [ cause ] ) [ deposition ] ) )",
            "( AND ( JOIN [ cause ] [ deposition ] ) ( JOIN ( R [ symptom ] ) [ tuberculosis ] ) )",
            "( AND ( JOIN [ has effect or influence ] [ deposition ] ) ( JOIN ( R [ cause ] ) [ deposition ] ) )",
            "( JOIN ( R [ manifestation ] ) ( JOIN ( R [ cause ] ) [ deposition ] ) )",
            "( JOIN [ manifestation of ] [ deposition ] )"
        ],
        "gen_label": "( JOIN ( R [ manifestation of ] ) ( JOIN ( R [ has effect ] ) [ deposition ] ) )"
    },
    {
        "question": "Question: { Who is the parent of the leader of Communist Party of China? }",
        "predicted_query": [
            "{ JOIN [ has parent ] [ Communist Party of China ] }",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ member of political party ] ) [ Communist Party of China ] ) )",
            "( JOIN [ parent of ] [ Communist Party of China ] )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ leader ] ) [ Communist Party of China ] ) )",
            "( JOIN ( R [ parent of ] ) ( JOIN ( R [ leader ] ) [ Communist Party of China ] ) )"
        ],
        "gen_label": "( JOIN ( R [ mother ] ) ( JOIN ( R [ chairperson ] ) [ Chinese Communist Party ] ) )"
    },
    {
        "question": "Question: { What is Oxidation state of integrated circuit? }",
        "predicted_query": [
            "( JOIN ( R [ oxidation state ] ) ( JOIN ( R [ manufactured by ] ) [ integrated circuit ] ) )",
            "( JOIN [ oxidation state ] [ integrated circuit ] )",
            "( JOIN ( R [ oxidation state ] ) ( JOIN ( R [ material ] ) [ integrated circuit ] ) )",
            "( AND ( JOIN [ has isotope of ] [ oxygen ] ) ( JOIN ( R [ electron configuration ] ) [ integrated circuit ] ) )",
            "[What is the electron affinity of integrated circuit?]"
        ],
        "gen_label": "( JOIN ( R [ oxidation state ] ) ( JOIN ( R [ made from material ] ) [ integrated circuit ] ) )"
    },
    {
        "question": "Question: { What is the location of birth of Berthe Morisot with a twin city of Koszalin? }",
        "predicted_query": [
            "( AND ( JOIN [ twinned administrative body ] [ Koszalin ] ) ( JOIN ( R [ place of birth ] ) [ Berthe Morisot ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Koszalin ] ) ( JOIN ( R [ place of birth ] ) [ Berthe Morisot ] ) )",
            "( JOIN ( R [ twin city ] ) ( JOIN ( R [ place of birth ] ) [ Berthe Morisot ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Kołobrzeg ] ) ( JOIN ( R [ place of birth ] ) [ Berthe Morisot ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Koszalin ] ) ( JOIN ( R [ place of birth ] ) [ Berthe Morisot ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ twinned administrative body ] [ Koszalin ] ) ( JOIN ( R [ place of birth ] ) [ Berthe Morisot ] ) )"
    },
    {
        "question": "Question: { Which is signatory of Millard Fillmore? }",
        "predicted_query": [
            "( JOIN [ signatory ] [ Millard Fillmore ] )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ signatory of ] ) [ Millard Fillmore ] ) )",
            "( JOIN ( R [ signatory ] ) [ Millard Fillmore ] )",
            "( JOIN ( R [ diplomatic partner ] ) [ Millard Fillmore ] )",
            "( AND ( JOIN [ diplomatic representative ] [ Millard Fillmore ] ) ( JOIN ( R [ member of ] ) [ United Nations Security Council ] ) )"
        ],
        "gen_label": "( JOIN [ signatory ] [ Millard Fillmore ] )"
    },
    {
        "question": "Question: { Who is the suspect in conflict with Carl Gustaf and Emil Mannerheim that has lived in the Soviet Union? }",
        "predicted_query": [
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Soviet Union ] ) ( JOIN ( R [ conflict ] ) [ Carl Gustaf Emil Mannerheim ] ) )",
            "( AND ( JOIN [ country of citizenship ] [ Soviet Union ] ) ( JOIN ( R [ conflict ] ) [ Carl Gustaf Emil Mannerheim ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Soviet Union ] ) ( JOIN ( R [ conflict ] ) [ Carl Gustaf Emil Mannerheim ] ) )",
            "( AND ( JOIN [ conflict ] [ Carl Gustaf and Emil Mannerheim ] ) ( JOIN ( R [ place of death ] ) [ Carl Gustaf Emil Mannerheim ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Soviet Union ] ) ( JOIN ( R [ opponent ] ) [ Carl Gustaf Emil Mannerheim ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ participant ] [ Soviet Union ] ) ( JOIN ( R [ conflict ] ) [ Carl Gustaf Emil Mannerheim ] ) )"
    },
    {
        "question": "Question: { How many people does Halle have? }",
        "predicted_query": [
            "( AND ( JOIN [ population of administrative territorial entity ] [ Halle ] ) ( JOIN ( R [ population ] ) [ Halle ] ) )",
            "( JOIN ( R [ number of people ] ) [ Halle ] )",
            "( JOIN ( R [ population ] ) ( JOIN ( R [ country ] ) [ Halle ] ) )",
            "( JOIN [ population ] [ Halle ] )",
            "( JOIN ( R [ population ] ) ( JOIN ( R [ located in ] ) [ Halle ] ) )"
        ],
        "gen_label": "( JOIN ( R [ population ] ) ( JOIN ( R [ country ] ) [ Halle ( Saale ) ] ) )"
    },
    {
        "question": "Question: { Which area in East Midlands is the burial place of Richard Arkwright? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ East Midlands ] ) ( JOIN ( R [ place of burial ] ) [ Richard Arkwright ] ) )",
            "( JOIN ( R [ area of East Midlands ] ) ( JOIN ( R [ place of burial ] ) [ Richard Arkwright ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ place of burial ] ) [ Richard Arkwright ] ) )",
            "( JOIN [ place of burial ] [ Richard Arkwright ] ) AND ( JOIN ( R [ located in the administrative territorial entity ] ) [ East Midlands ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ East Midlands ] ) ( JOIN ( R [ place of burial ] ) [ Richard Arkwright ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ located in the administrative territorial entity ] [ East Midlands ] ) ( JOIN ( R [ place of burial ] ) [ Richard Arkwright ] ) )"
    },
    {
        "question": "Question: { What is the country of origin of Achaemenid Empire? }",
        "predicted_query": [
            "( JOIN ( R [ country of origin ] ) ( JOIN ( R [ part of ] ) [ Achaemenid Empire ] ) )",
            "( JOIN ( R [ country of origin ] ) [ Achaemenid Empire ] )",
            "( JOIN ( R [ capital city ] ) ( JOIN ( R [ country of origin ] ) [ Achaemenid Empire ] ) )",
            "( JOIN [ country of origin ] [ Achaemenid Empire ] )",
            "( JOIN [ country of origin ] [ Achaemenid Empire ] )"
        ],
        "gen_label": "( JOIN [ country of origin ] [ Achaemenid Empire ] )"
    },
    {
        "question": "Question: { Which is the Whonamedit? doctor ID of Claude Bernard? }",
        "predicted_query": [
            "[ JOIN ( R [ Whonamedit.com doctor ID ] ) [ Claude Bernard ] ]",
            "( JOIN ( R [ Whonamed.com doctor ID ] ) [ Claude Bernard ] )",
            "( JOIN ( R [ Whonamedit.com doctor ID ] ) [ Claude Bernard ] )",
            "( AND ( JOIN [ doctor ID ] [ Whonamedit.com ] ) ( JOIN ( R [ ID ] ) [ Claude Bernard ] ) )",
            "( JOIN ( R [ Whonamedit.com doctor ID ] ) [ Claude Bernard ] )"
        ],
        "gen_label": "( JOIN ( R [ Whonamedit? doctor ID ] ) [ Claude Bernard ] )"
    },
    {
        "question": "Question: { Which is the immediate cause of grilling? }",
        "predicted_query": [
            "( JOIN ( R [ immediate cause ] ) [ grilling ] )",
            "( AND ( JOIN [ cause of death ] [ grilling ] ) ( JOIN ( R [ has cause ] ) [ grilling ] ) )",
            "( JOIN [ immediate cause ] [ grilling ] )",
            "( AND ( JOIN [ cause ] [ grilling ] ) ( JOIN ( R [ has effect ] ) [ grilling ] ) )",
            "( JOIN [ immediate cause ] [ grilling ] )"
        ],
        "gen_label": "( JOIN ( R [ immediate cause of ] ) [ grilling ] )"
    },
    {
        "question": "Question: { What language of origin has grammatical gender that is neutral? }",
        "predicted_query": [
            "( JOIN [ grammatical gender ] [ neutral ] )",
            "( AND ( JOIN [ has grammatical gender ] [ neutral ] ) ( JOIN ( R [ language of origin ] ) [ gender ] ) )",
            "( AND ( JOIN [ grammatical gender ] [ neutral ] ) ( JOIN ( R [ language of origin ] ) [ gender ] ) )",
            "( AND ( JOIN [ has grammatical gender ] [ neutral ] ) ( JOIN ( R [ language of origin ] ) [ grammatical gender ] ) )",
            "( AND ( JOIN [ grammatical gender ] [ neutral ] ) ( JOIN ( R [ language of origin ] ) [ grammatical gender ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ has grammatical gender ] [ neuter ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Origen ] ) )"
    },
    {
        "question": "Question: { Who is the sister of daddy Abaqa Khan? }",
        "predicted_query": [
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ father ] ) [ Abaqa Khan ] ) )",
            "( JOIN [ sibling ] [ Abaqa Khan ] )",
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ father ] ) [ Abaqa Khan ] ) )",
            "( JOIN [ sibling ] [ Abaqa ] )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ sibling ] ) [ Abaqa ] ) )"
        ],
        "gen_label": "( JOIN ( R [ sibling ] ) ( JOIN ( R [ father ] ) [ Abaqa Khan ] ) )"
    },
    {
        "question": "Question: { What is the UNDP country code of São Tomé and Príncipe? }",
        "predicted_query": [
            "( JOIN ( R [ UNDP country code ] ) [ São Tomé and Príncipe ] )",
            "( JOIN ( R [ United Nations Development Programme country code ] ) [ São Tomé and Príncipe ] )",
            "( JOIN ( R [ UN/LOCODE 3-letter country subdivision code for São Tomé and Príncipe ] ) [ São Tomé and Príncipe ] )",
            "( AND ( JOIN [ United Nations Development Programme country code ] [ ST ] ) ( JOIN ( R [ country ] ) [ São Tomé and Príncipe ] ) )",
            "( JOIN ( R [ UNDP country code ] ) [ São Tomé and Príncipe ] )"
        ],
        "gen_label": "( JOIN ( R [ UNDP country code ] ) [ São Tomé and Príncipe ] )"
    },
    {
        "question": "Question: { WHAT IS POLEMITE MADE OF? }",
        "predicted_query": [
            "( JOIN [ made of ] [ polemit ] )",
            "( JOIN ( R [ material ] ) ( JOIN ( R [ made of ] ) [ polemite ] ) )",
            "( JOIN [ contains material ] [ Polemite ] )",
            "( JOIN ( R [ contains material ] ) ( JOIN ( R [ material ] ) [ Polemite ] ) )",
            "( AND ( JOIN [ material composition ] [ polémite ] ) ( JOIN ( R [ contains the chemical compound ] ) [ polémite ] ) )"
        ],
        "gen_label": "( JOIN ( R [ natural product of taxon ] ) ( JOIN ( R [ made from material ] ) [ polemite ] ) )"
    },
    {
        "question": "Question: { Which is the The Godfather Part II based on? }",
        "predicted_query": [
            "( JOIN ( R [ based on ] ) [ The Godfather Part II ] )",
            "[ JOIN [ based on ] [ The Godfather Part II ] ]",
            "( JOIN ( R [ based on work ] ) [ The Godfather Part II ] )",
            "( JOIN ( R [ based on ] ) [ The Godfather Part II ] )",
            "( JOIN ( JOIN ( R [ based on ] ) [ The Godfather Part II ] ) )"
        ],
        "gen_label": "( JOIN ( R [ based on ] ) [ The Godfather Part II ] )"
    },
    {
        "question": "Question: { WHAT IS THE SECOND FAMILY NAME IN SPANISH NAME FOR JAVIER BARDEM }",
        "predicted_query": [
            "( JOIN ( R [ family name ] ) ( JOIN ( R [ given name ] ) [ Javier Bardem ] ) )",
            "( JOIN ( R [ language spoken, written or signed ] ) ( JOIN ( R [ given name ] ) [ Javier Bardem ] ) )",
            "( JOIN ( R [ second family name ] ) [ Javier Bardem ] )",
            "( AND ( JOIN [ linguistic relation ] [ Spanish name ] ) ( JOIN ( R [ given name ] ) [ Javier Bardem ] ) )",
            "( JOIN [ second family name ] [ Javier Bardem ] )"
        ],
        "gen_label": "( JOIN ( R [ second family name in Spanish name ] ) [ Javier Bardem ] )"
    },
    {
        "question": "Question: { What is the telephone numbering plan of the head quarters of ABC? }",
        "predicted_query": [
            "( JOIN ( R [ telephone numbering plan ] ) [ ABC ] )",
            "( JOIN ( R [ telephone numbering plan ] ) [ ABC ] )",
            "( JOIN [ telephone numbering plan ] [ ABC ] )",
            "( AND ( JOIN [ uses ] [ telephone numbering plan ] ) ( JOIN ( R [ headquarters location ] ) [ ABC ] ) )",
            "( JOIN ( R [ telephone numbering plan ] ) ( JOIN ( R [ headquarters location ] ) [ ABC ] ) )"
        ],
        "gen_label": "( JOIN ( R [ local dialing code ] ) ( JOIN ( R [ headquarters location ] ) [ ABC ] ) )"
    },
    {
        "question": "Question: { Which is CIQUAL 2017 ID for cheddar? }",
        "predicted_query": [
            "( JOIN ( R [ CIQUAL 2017 ID ] ) [ cheddar ] )",
            "( JOIN ( R [ CIQUAL ID 2017 ] ) [ cheddar ] )",
            "( JOIN ( R [ CIQUAL 2017 ID ] ) [ cheddar ] )",
            "( AND ( JOIN [ Ciqual ID ] [ cheddar cheese ] ) ( JOIN ( R [ ID ] ) [ Cheddar cheese ] ) )",
            "( JOIN ( R [ CIQUAL 2017 ID ] ) [ Cheddar cheese ] )"
        ],
        "gen_label": "( JOIN ( R [ CIQUAL2017 ID ] ) [ Cheddar cheese ] )"
    },
    {
        "question": "Question: { Whats the MASL of HQ location of the Fédération Internationale de Motocyclisme ? }",
        "predicted_query": [
            "( JOIN ( R [ MASL ] ) ( JOIN ( R [ headquarters location ] ) [ Fédération Internationale de Motocyclisme ] ) )",
            "( AND ( JOIN [ member of ] [ Fédération Internationale de Motocyclisme ] ) ( JOIN ( R [ located in ] ) [ HQ location of ] ) )",
            "[ JOIN ( R [ military academy location ] ) ( JOIN ( R [ headquarters location ] ) [ Fédération Internationale de Motocyclisme ] ) ]",
            "( AND ( JOIN [ member of ] [ Fédération Internationale de Motocyclisme ] ) ( JOIN ( R [ sports league ] ) [ motorsport ] ) )",
            "( JOIN ( R [ MASL ] ) ( JOIN ( R [ headquarter location ] ) [ Fédération Internationale de Motocyclisme ] ) )"
        ],
        "gen_label": "( JOIN ( R [ elevation above sea level ] ) ( JOIN ( R [ headquarters location ] ) [ International Motorcycling Federation ] ) )"
    },
    {
        "question": "Question: { What is in the territory of Bakhtiarov? }",
        "predicted_query": [
            "( JOIN [ contains the administrative territorial entity ] [ Bakhtiarov ] )",
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ country ] ) [ Bakhtiarov ] ) )",
            "( JOIN ( JOIN ( R [ located in the administrative territorial entity ] ) [ Bakhtiarov ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ country of citizenship ] ) [ Bakhtiarov ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Bakhtiarov ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Bakhtiarov ] ) )"
        ],
        "gen_label": "( JOIN ( R [ located in/on physical feature ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Bakhtiarov ] ) )"
    },
    {
        "question": "Question: { Which is the SNAC Ark ID for Ishirō Honda? }",
        "predicted_query": [
            "( JOIN ( R [ SNAC Ark ID ] ) [ Ishirō Honda ] )",
            "( JOIN ( R [ SNAC ARK ID ] ) [ Ishirō Honda ] )",
            "( AND ( JOIN [ Ark ID ] [ Ishirō Honda ] ) ( JOIN ( R [ ID in this wiki ] ) [ Ishirō Honda ] ) )",
            "( [ joined by ] [ SNAC Ark ID ] [ Ishirō Honda ] )",
            "( JOIN ( R [ SNAC Ark ID ] ) [ Ishirō Honda ] )"
        ],
        "gen_label": "( JOIN ( R [ SNAC ARK ID ] ) [ Ishirō Honda ] )"
    },
    {
        "question": "Question: { Which is the date of first performance for Tannhäuser? }",
        "predicted_query": [
            "( JOIN ( R [ first performance date ] ) [ Tannhäuser ] )",
            "( JOIN ( R [ date of first performance ] ) [ Tannhäuser ] )",
            "[joined by][date of first performance]",
            "( JOIN [ date of first performance ] [ Tannhäuser ] )",
            "( JOIN ( R [ performance date ] ) [ Tannhäuser ] )"
        ],
        "gen_label": "( JOIN ( R [ date of first performance ] ) [ Tannhäuser ] )"
    },
    {
        "question": "Question: { What is manufactured using prune? }",
        "predicted_query": [
            "( JOIN ( R [ manufactured using ] ) ( JOIN ( R [ product of ] ) [ prune ] ) )",
            "( JOIN [ manufactured using ] [ prune ] )",
            "( JOIN ( R [ manufacturer ] ) ( JOIN ( R [ product or service ] ) [ prune ] ) )",
            "( JOIN [ manufactured using ] [ prune ] )",
            "( AND ( JOIN [ product of ] [ prune ] ) ( JOIN ( R [ manufacturer ] ) [ prune ] ) )"
        ],
        "gen_label": "( JOIN ( R [ natural product of taxon ] ) ( JOIN ( R [ made from material ] ) [ prune ] ) )"
    },
    {
        "question": "Question: { What is the population of the city where Jack Sarfatti was born? }",
        "predicted_query": [
            "( JOIN ( R [ population ] ) ( JOIN ( R [ place of birth ] ) [ Jack Sarfatti ] ) )",
            "( JOIN ( R [ population ] ) ( JOIN ( R [ place of birth ] ) [ Jack Sarfatti ] ) )",
            "( JOIN [ population ] [ Jack Sarfatti ] )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ city ] ) ( JOIN ( R [ population ] ) [ Jack Sarfatti ] ) )",
            "( JOIN ( R [ population ] ) ( JOIN ( R [ place of birth ] ) [ Jack Sarfatti ] ) )"
        ],
        "gen_label": "( JOIN ( R [ population ] ) ( JOIN ( R [ place of birth ] ) [ Jack Sarfatti ] ) )"
    },
    {
        "question": "Question: { Which is the source code repository of PHP? }",
        "predicted_query": [
            "( JOIN ( R [ source code repository ] ) [ PHP ] )",
            "( JOIN [ source code repository ] [ PHP ] )",
            "( JOIN [ source code repository ] [ PHP ] )",
            "( JOIN ( R [ source code repository ] ) [ PHP ] )",
            "( AND ( JOIN [ has a version of ] [ PHP ] ) ( JOIN ( R [ developer ] ) [ PHP ] ) )"
        ],
        "gen_label": "( JOIN ( R [ source code repository URL ] ) [ PHP ] )"
    },
    {
        "question": "Question: { What is the LACMA ID for Winslow Homer? }",
        "predicted_query": [
            "( JOIN ( R [ LACMA ID ] ) [ Winslow Homer ] )",
            "{ JOIN ( [ joined by ] ) [ Winslow Homer ] }",
            "( JOIN [ LACMA ID ] [ Winslow Homer ] )",
            "( JOIN ( R [ LACMA ID ] ) [ Winslow Homer ] )",
            "( JOIN ( R [ LACMA ID ] ) [ Winslow Homer ] )"
        ],
        "gen_label": "( JOIN ( R [ LACMA ID ] ) [ Winslow Homer ] )"
    },
    {
        "question": "Question: { WHO MEASURED THE MATERIAL PRODUCED BY EURASIAN NATURAL RESOURCES CORPORATION? }",
        "predicted_query": [
            "( JOIN ( R [ measured by ] ) ( JOIN ( R [ produced by ] ) [ Eurasian Natural Resources Corporation ] ) )",
            "( JOIN ( R [ measured by ] ) ( JOIN ( R [ producer ] ) [ Eurasian Natural Resources Corporation ] ) )",
            "[ JOIN [ measured by ] [ Eurasian Natural Resources Corporation ] ]",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Eurasian Natural Resources Corporation ] ) ( JOIN ( R [ measured by ] ) [ Eurasian Natural Resources Corporation ] ) )",
            "( JOIN ( R [ produced by ] ) ( JOIN ( R [ measured by ] ) [ Eurasian Natural Resources Corporation ] ) )"
        ],
        "gen_label": "( JOIN ( R [ measurement scale ] ) ( JOIN ( R [ product, material, or service produced or provided ] ) [ Eurasian Natural Resources Corporation ] ) )"
    },
    {
        "question": "Question: { What diplomatic relations take place in Fahrenheit 451? }",
        "predicted_query": [
            "( JOIN ( R [ diplomatic relations ] ) ( JOIN ( R [ country of origin ] ) [ Fahrenheit 451 ] ) )",
            "( JOIN [ diplomatic relations ] [ Fahrenheit 451 ] )",
            "( AND ( JOIN [ diplomatic relation ] [ Fahrenheit 451 ] ) ( JOIN ( R [ diplomatic relation ] ) [ Fahrenheit 451 ] ) )",
            "( JOIN ( R [ diplomatic relations ] ) ( JOIN ( R [ located in ] ) [ Fahrenheit 451 ] ) )",
            "( AND ( JOIN [ diplomatic relation ] [ Fahrenheit 451 ] ) ( JOIN ( R [ diplomatic relations ] ) [ Fahrenheit 451 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ narrative location ] ) [ Fahrenheit 451 ] ) )"
    },
    {
        "question": "Question: { What is contains for kiel ? }",
        "predicted_query": [
            "( JOIN ( R [ contains ] ) [ Kiel ] )",
            "( JOIN [ contains ] [ Kiel ] )",
            "( JOIN ( R [ contains ] ) [ Kiel ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Kiel ] ) ( JOIN ( R [ contains the administrative territorial entity ] ) [ Kiel ] ) )",
            "( JOIN [ contains the administrative territorial entity ] [ Kiel ] )"
        ],
        "gen_label": "( JOIN ( R [ contains ] ) [ Kiel ] )"
    },
    {
        "question": "Question: { What is the ISTAT ID of Rimini? }",
        "predicted_query": [
            "( JOIN ( R [ ISTAT ID ] ) [ Rimini ] )",
            "### Logical Form Query:",
            "( JOIN ( R [ ISTAT ID ] ) [ Rimini ] )",
            "( AND ( JOIN [ ISTAT place ID ] [ Rimini ] ) ( JOIN ( R [ ISTAT place ID ] ) [ Rimini ] ) )",
            "( JOIN ( R [ ISTAT ID ] ) [ Rimini ] )"
        ],
        "gen_label": "( JOIN ( R [ ISTAT ID ] ) [ Rimini ] )"
    },
    {
        "question": "Question: { Which is the BAG residence ID of Groningen? }",
        "predicted_query": [
            "( JOIN ( R [ BAG residence ID ] ) [ Groningen ] )",
            "( JOIN [ BAG residence ID ] [ Groningen ] )",
            "( JOIN ( R [ BAG residence ID ] ) [ Groningen ] )",
            "( JOIN ( R [ BAG residence ID ] ) [ Groningen ] )",
            "( JOIN ( R [ BAG residence ID ] ) [ Groningen ] )"
        ],
        "gen_label": "( JOIN ( R [ BAG residence ID ] ) [ Groningen ] )"
    },
    {
        "question": "Question: { Which is separated from the Xavier University? }",
        "predicted_query": [
            "( JOIN ( R [ separated from ] ) [ Xavier University ] )",
            "( AND ( JOIN [ shares border with ] [ Xavier University ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Xavier University ] ) )",
            "( JOIN ( R [ bordering body of water ] ) ( JOIN ( R [ located in ] ) [ Xavier University ] ) )",
            "( JOIN [ separated by ] [ Xavier University ] )",
            "( JOIN [ separated from ] [ Xavier University ] )"
        ],
        "gen_label": "( JOIN [ separated from ] [ Xavier University ] )"
    },
    {
        "question": "Question: { Which team did Carlo Soldo play for? }",
        "predicted_query": [
            "( JOIN ( R [ team ] ) [ Carlo Soldo ] )",
            "( JOIN ( R [ member of team ] ) ( JOIN ( R [ sport ] ) [ Carlo Soldo ] ) )",
            "( JOIN [ team member ] [ Carlo Soldo ] )",
            "( JOIN ( R [ team member ] ) [ Carlo Soldo ] )",
            "( JOIN [ team played for ] [ Carlo Soldo ] )"
        ],
        "gen_label": "( JOIN ( R [ league or competition ] ) ( JOIN ( R [ member of sports team ] ) [ Carlo Soldo ] ) )"
    },
    {
        "question": "Question: { What, other than Orientalism, is the equivalent of Asian studies? }",
        "predicted_query": [
            "( AND ( JOIN [ has equivalent ] [ Asian studies ] ) ( JOIN ( R [ field of study ] ) [ Orientalism ] ) )",
            "( AND ( JOIN [ field of study ] [ Asian studies ] ) ( JOIN ( R [ equivalent of ] ) [ Orientalism ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Asian studies ] ) ( JOIN ( R [ equivalent of ] ) [ Orientalism ] ) )",
            "( JOIN [ equivalent of ] [ Asian studies ] ) ( JOIN ( R [ field of study ] ) [ Orientalism ] )",
            "( AND ( JOIN [ equivalent of ] [ Asian studies ] ) ( JOIN ( R [ notable work ] ) [ Orientalism ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ said to be the same as ] [ Asian studies ] ) ( JOIN ( R [ different from ] ) [ Orientalism ] ) )"
    },
    {
        "question": "Question: { What is the blood group of the person married to Hillary Clinton? }",
        "predicted_query": [
            "( JOIN ( R [ blood group ] ) ( JOIN ( R [ spouse ] ) [ Hillary Clinton ] ) )",
            "( JOIN ( R [ blood group ] ) ( JOIN ( R [ spouse ] ) [ Hillary Clinton ] ) )",
            "( JOIN ( R [ blood type ] ) ( JOIN ( R [ spouse ] ) [ Hillary Clinton ] ) )",
            "( JOIN [ blood group ] [ Hillary Clinton ] )",
            "( AND ( JOIN [ has blood group ] [ Rh negative ] ) ( JOIN ( R [ spouse ] ) [ Hillary Clinton ] ) )"
        ],
        "gen_label": "( JOIN ( R [ blood type ] ) ( JOIN ( R [ spouse ] ) [ Hillary Clinton ] ) )"
    },
    {
        "question": "Question: { What is the name of the place adjacent to josiah Wedgwood? }",
        "predicted_query": [
            "( JOIN [ shares border with ] [ Josiah Wedgwood ] )",
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ place of death ] ) [ Josiah Wedgwood ] ) )",
            "( AND ( JOIN [ shares border with ] [ Josiah Wedgwood ] ) ( JOIN ( R [ named after ] ) [ Josiah Wedgwood ] ) )",
            "( JOIN ( R [ named after ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Josiah Wedgwood ] ) )",
            "( AND ( JOIN [ shares border with ] [ Josiah Wedgwood ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Josiah Wedgwood ] ) )"
        ],
        "gen_label": "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ place of burial ] ) [ Josiah Wedgwood ] ) )"
    },
    {
        "question": "Question: { What is santiago Ramon y Cajal's Medicos historicos doctor ID? }",
        "predicted_query": [
            "( JOIN ( R [ Medicos historicos doctor ID ] ) [ Santiago Ramón y Cajal ] )",
            "( JOIN ( R [ Medicos historicos doctor ID ] ) [ Santiago Ramón y Cajal ] )",
            "( AND ( JOIN [ Medical Historians doctor ID ] [ Santiago Ramón y Cajal ] ) ( JOIN ( R [ ID ] ) [ Santiago Ramón y Cajal ] ) )",
            "[ JOIN ( R [ Medicos Historicos Doctor ID ]",
            "( JOIN ( R [ Medicos históricos doctor ID ] ) [ Santiago Ramón y Cajal ] )"
        ],
        "gen_label": "( JOIN ( R [ Médicos históricos doctor ID ] ) [ Santiago Ramón y Cajal ] )"
    },
    {
        "question": "Question: { Which is the eye color of azure? }",
        "predicted_query": [
            "( JOIN [ eye color ] [ azure ] )",
            "[joint (R [eye color] [azure])]",
            "[ JOIN [ eye color ] [ azure ] ]",
            "[]",
            "( AND ( JOIN [ color ] [ azure ] ) ( JOIN ( R [ eye color ] ) [ Jean-Baptiste-Camille Corot ] ) )"
        ],
        "gen_label": "( JOIN [ eye color ] [ azure ] )"
    },
    {
        "question": "Question: { What is investigated for coroner ? }",
        "predicted_query": [
            "( JOIN [ investigated for ] [ coroner ] )",
            "( JOIN ( R [ investigated by ] ) [ coroner ] )",
            "( AND ( JOIN [ studied or practiced in ] [ coroner ] ) ( JOIN ( R [ field of work ] ) [ coroner ] ) )",
            "( JOIN [ investigated ] [ coroner ] )",
            "( JOIN ( R [ investigated ] ) [ coroner ] )"
        ],
        "gen_label": "( JOIN [ investigated by ] [ coroner ] )"
    },
    {
        "question": "Question: { What language does the Clarissa is broadcasting? }",
        "predicted_query": [
            "( JOIN ( R [ spoken or written language ] ) ( JOIN ( R [ broadcaster ] ) [ Clarissa ] ) )",
            "( JOIN ( R [ language of broadcast ] ) ( JOIN ( R [ language of work or name ] ) [ Clarissa ] ) )",
            "( JOIN [ language spoken, written or signed ] [ Clarissa ] )",
            "( JOIN [ spoken language ] [ Clarissa ] )",
            "( AND ( JOIN [ spoken in ] [ Clarissa ] ) ( JOIN ( R [ language of work ] ) [ Clarissa ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ influenced by ] [ French ] ) ( JOIN ( R [ language of work or name ] ) [ Clarissa ] ) )"
    },
    {
        "question": "Question: { Provide a view from winter in Burlington. }",
        "predicted_query": [
            "( JOIN ( R [ view from ] ) [ Burlington ] )",
            "( JOIN [ view from ] [ winter ] )",
            "( AND ( JOIN [ season ] [ winter ] ) ( JOIN ( R [ view ] ) [ Burlington ] ) )",
            "( JOIN ( R [ view from ] ) [ Burlington ] )",
            "( AND ( JOIN [ has view of ] [ winter ] ) ( JOIN ( R [ view of ] ) [ Burlington ] ) )"
        ],
        "gen_label": "( JOIN ( R [ winter view ] ) [ Burlington ] )"
    },
    {
        "question": "Question: { Located on Upper New York Bay, where did Freddy Schuman die? }",
        "predicted_query": [
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Upper New York Bay ] ) ( JOIN ( R [ place of death ] ) [ Freddy Schuman ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ place of death ] ) [ Freddy Schuman ] ) )",
            "( AND ( JOIN [ shares border with ] [ Upper New York Bay ] ) ( JOIN ( R [ place of death ] ) [ Freddy Schuman ] ) )",
            "( JOIN ( R [ located on ] ) ( JOIN ( R [ place of death ] ) [ Freddy Schuman ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Upper New York Bay ] ) ( JOIN ( R [ place of death ] ) [ Freddy Schuman ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ located in or next to body of water ] [ Upper New York Bay ] ) ( JOIN ( R [ place of death ] ) [ Freddy Schuman ] ) )"
    },
    {
        "question": "Question: { What is the LNH id for Nikola Karabatić? }",
        "predicted_query": [
            "( JOIN ( R [ LNH ID ] ) [ Nikola Karabatić ] )",
            "( JOIN ( R [ LNH player ID ] ) [ Nikola Karabatić ] )",
            "( JOIN [ LNH ID ] [ Nikola Karabatić ] )",
            "( JOIN ( R [ LNH ID ] ) [ Nikola Karabatić ] )",
            "( AND ( JOIN [ Ligue nationale de handball player ID ] [ Nikola Karabatić ] ) ( JOIN ( R [ ID ] ) [ Nikola Karabatić ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Ligue Nationale de Handball player ID ] ) [ Nikola Karabatić ] )"
    },
    {
        "question": "Question: { Which is the National Library of Wales ID for George Bernard Shaw? }",
        "predicted_query": [
            "( JOIN ( R [ National Library of Wales ID ] ) [ George Bernard Shaw ] )",
            "[National Library of Wales ID for George Bernard Shaw]",
            "( JOIN [ National Library of Wales ID ] [ George Bernard Shaw ] )",
            "( JOIN ( R [ National Library of Wales ID ] ) [ George Bernard Shaw ] )",
            "( JOIN ( R [ National Library of Wales ID ] ) [ George Bernard Shaw ] )"
        ],
        "gen_label": "( JOIN ( R [ National Library of Wales Authority ID ] ) [ George Bernard Shaw ] )"
    },
    {
        "question": "Question: { What is the  DfE URN of Newcastle University ? }",
        "predicted_query": [
            "( JOIN ( R [ DfE URN ] ) [ Newcastle University ] )",
            "( JOIN ( R [ Department for Education Unique Reference Number ] ) [ Newcastle University ] )",
            "[{\"joined by\": [{\"R\": \"DfE URN\"}]}[Newcastle University]",
            "( AND ( JOIN [ URN:LCC ] [ Newcastle University ] ) ( JOIN ( R [ ID ] ) [ Newcastle University ] ) )",
            "( JOIN ( R [ DfE URN ] ) [ Newcastle University ] )"
        ],
        "gen_label": "( JOIN ( R [ DfE URN ] ) [ Newcastle University ] )"
    },
    {
        "question": "Question: { What is a polymer of polypropylene? }",
        "predicted_query": [
            "( JOIN [ polymer of ] [ polypropylene ] )",
            "( JOIN ( R [ has polymer ] ) [ polypropylene ] )",
            "( JOIN ( R [ polymer ] ) [ polypropylene ] )",
            "( JOIN ( R [ polymer of ] ) [ polypropylene ] )",
            "( AND ( JOIN [ product of ] [ polypropylene ] ) ( JOIN ( R [ has polymer ] ) [ polypropylene ] ) )"
        ],
        "gen_label": "( JOIN ( R [ polymer of ] ) [ polypropylene ] )"
    },
    {
        "question": "Question: { Which is the MonDO ID for impotence? }",
        "predicted_query": [
            "( JOIN ( R [ MonDO ID ] ) [ impotence ] )",
            "( AND ( JOIN [ MED-DRA ID ] [ impotence ] ) ( JOIN ( R [ ID in MonDO ] ) [ impotence ] ) )",
            "[ JOIN ( R [ MonDO ID ] ) [ impotence ] ]",
            "( [ joined by ] [ MonDO ID ] )",
            "( JOIN [ MonDO ID ] [ impotence ] )"
        ],
        "gen_label": "( JOIN ( R [ Mondo ID ] ) [ erectile dysfunction ] )"
    },
    {
        "question": "Question: { What is the Open Secrets Organization I.D. for the National Association of Broadcasters? }",
        "predicted_query": [
            "[joined]",
            "( JOIN ( R [ Open Secrets organization ID ] ) [ National Association of Broadcasters ] )",
            "( JOIN ( R [ OpenSecrets.org organization ID ] ) [ National Association of Broadcasters ] )",
            "( AND ( JOIN [ OpenSecrets.org organization ID ] [ National Association of Broadcasters ] ) [ organization ID ] )",
            "( JOIN ( R [ Organization ID ] ) [ National Association of Broadcasters ] )"
        ],
        "gen_label": "( JOIN ( R [ OpenSecrets organization ID ] ) [ National Association of Broadcasters ] )"
    },
    {
        "question": "Question: { What is the Goratings ID for Go Seigen? }",
        "predicted_query": [
            "( JOIN ( R [ Goratings ID ] ) [ Go Seigen ] )",
            "( JOIN ( R [ Goratings ID ] ) [ Go Seigen ] )",
            "( JOIN ( R [ Goratings ID ] ) [ Go Seigen ] )",
            "( JOIN [ Goratings ID ] [ Go Seigen ] )",
            "[ { JOIN [ Goratings ID ] } ]"
        ],
        "gen_label": "( JOIN ( R [ Goratings ID ] ) [ Go Seigen ] )"
    },
    {
        "question": "Question: { Who inhabits the place where the Battle of Koniggratz was held? }",
        "predicted_query": [
            "( JOIN ( R [ inhabitant ] ) ( JOIN ( R [ location ] ) [ Battle of Koniggratz ] ) )",
            "( JOIN [ inhabits the place ] [ Battle of Koniggratz ] )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Koniggratz ] ) ( JOIN ( R [ inhabited by ] ) [ Battle of Koniggratz ] ) )",
            "( JOIN ( R [ inhabitant ] ) ( JOIN ( R [ place of occurrence ] ) [ Battle of Koniggratz ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Battle of Koniggratz ] ) ( JOIN ( R [ inhabited by ] ) [ Battle of Koniggratz ] ) )"
        ],
        "gen_label": "( JOIN ( R [ population ] ) ( JOIN ( R [ location ] ) [ Battle of Königgrätz ] ) )"
    },
    {
        "question": "Question: { When is {diplomatic relation} of {county seat of} of {Belgrade} ? }",
        "predicted_query": [
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ capital of ] ) [ Belgrade ] ) )",
            "( JOIN [ diplomatic relation ] [ Belgrade ] )",
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ capital ] ) [ Belgrade ] ) )",
            "[ { JOIN [ diplomatic relation ] [ capital of ] [ Belgrade ] ] }",
            "( JOIN ( R [ diplomatic relations ] ) ( JOIN ( R [ country capital ] ) [ Belgrade ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ capital of ] ) [ Belgrade ] ) )"
    },
    {
        "question": "Question: { Which is the Spotify track ID of O Canada? }",
        "predicted_query": [
            "( JOIN ( R [ Spotify track ID ] ) [ O Canada ] )",
            "[ JOIN ( R [ Spotify track ID ] ) [ O Canada ] ]",
            "( JOIN [ Spotify track ID ] [ O Canada ] )",
            "( JOIN ( R [ Spotify track ID ] ) [ O Canada ] )",
            "( JOIN ( R [ Spotify track ID ] ) [ \"O Canada\" ] )"
        ],
        "gen_label": "( JOIN ( R [ Spotify track ID ] ) [ O Canada ] )"
    },
    {
        "question": "Question: { What is the Peakbagger mountain ID of Mont Blanc? }",
        "predicted_query": [
            "( JOIN ( R [ Peakbagger mountain ID ] ) [ Mont Blanc ] )",
            "( JOIN ( R [ peakbagger mountain ID ] ) [ Mont Blanc ] )",
            "( JOIN [ Peakbagger mountain ID ] [ Mont Blanc ] )",
            "( JOIN ( R [ Peakbagger mountain ID ] ) [ Mont Blanc ] )",
            "( JOIN ( R [ Peakbagger ID ] ) [ Mont Blanc ] )"
        ],
        "gen_label": "( JOIN ( R [ Peakbagger mountain ID ] ) [ Mont Blanc ] )"
    },
    {
        "question": "Question: { Who is the manager/director of Schutzstaffel? }",
        "predicted_query": [
            "( JOIN ( R [ director ] ) ( JOIN ( R [ member of ] ) [ Schutzstaffel ] ) )",
            "( JOIN [ director ] [ Schutzstaffel ] )",
            "( JOIN ( R [ director ] ) ( JOIN ( R [ member of ] ) [ Schutzstaffel ] ) )",
            "( JOIN ( R [ head of government ] ) [ Schutzstaffel ] )",
            "( JOIN ( R [ head of government ] ) ( JOIN ( R [ director ] ) [ Schutzstaffel ] ) )"
        ],
        "gen_label": "( JOIN ( R [ director / manager ] ) [ Schutzstaffel ] )"
    },
    {
        "question": "Question: { What is the Hypertext Transfer Protocol for Garison? }",
        "predicted_query": [
            "( JOIN ( R [ HTTP protocol ] ) [ Garison ] )",
            "( AND ( JOIN [ uses ] [ Hypertext Transfer Protocol ] ) ( JOIN ( R [ located in ] ) [ Garison ] ) )",
            "( JOIN ( R [ Hypertext Transfer Protocol ] ) [ Garison ] )",
            "( JOIN ( R [ Hypertext Transfer Protocol ] ) [ Garison ] )",
            "( JOIN [ Hypertext Transfer Protocol ] [ Garison ] )"
        ],
        "gen_label": "( JOIN ( R [ headquarters location ] ) ( JOIN ( R [ standards body ] ) [ HTTP ] ) )"
    },
    {
        "question": "Question: { Which {history} {subject} of {Ilmar Koppel} ? }",
        "predicted_query": [
            "( JOIN ( R [ history ] ) ( JOIN ( R [ subject ] ) [ Ilmar Koppel ] ) )",
            "( JOIN ( R [ history of the subject ] ) [ Ilmar Koppel ] )",
            "( JOIN [ history ] [ Ilmar Koppel ] )",
            "( JOIN ( R [ subject history ] ) [ Ilmar Koppel ] )",
            "( JOIN ( R [ history ] ) ( JOIN ( R [ subject ] ) [ Ilmar Koppel ] ) )"
        ],
        "gen_label": "( JOIN ( R [ history of topic ] ) ( JOIN ( R [ field of work ] ) [ Ilmar Koppel ] ) )"
    },
    {
        "question": "Question: { Who was on the moon that orbited of Stephano planet? }",
        "predicted_query": [
            "( AND ( JOIN [ orbited by ] [ Stephano ] ) ( JOIN ( R [ discoverer ] ) [ lunar orbit ] ) )",
            "( AND ( JOIN [ has satellite ] [ Stephano ] ) ( JOIN ( R [ has landform feature ] ) [ Moon ] ) )",
            "( JOIN ( R [ planet ] ) ( JOIN ( R [ orbited by ] ) [ Stephano ] ) )",
            "( JOIN [ has moon ] [ Stephano ] ) ( JOIN ( R [ has moon ] ) [ Stephano ] )",
            "( AND ( JOIN [ orbits the planet ] [ Stephano ] ) ( JOIN ( R [ has inhabitant ] ) [ Moon ] ) )"
        ],
        "gen_label": "( JOIN ( R [ child astronomical body ] ) ( JOIN ( R [ parent astronomical body ] ) [ Stephano ] ) )"
    },
    {
        "question": "Question: { What is main food source for Teuthida ? }",
        "predicted_query": [
            "( JOIN ( R [ food source ] ) [ Teuthida ] )",
            "( JOIN [ main food source ] [ Teuthida ] )",
            "( JOIN ( R [ main food source ] ) [ Teuthida ] )",
            "( AND ( JOIN [ trophic level ] [ primary consumer ] ) ( JOIN ( R [ food web ] ) [ Teuthida ] ) )",
            "( JOIN ( R [ food web ] ) ( JOIN ( R [ has taxon ] ) [ Teuthida ] ) )"
        ],
        "gen_label": "( JOIN [ main food source ] [ Teuthida ] )"
    },
    {
        "question": "Question: { wich means {Carnegie Classification of Institutions of Higher Education}for{graduated from} at{Lewis Hine} ? }",
        "predicted_query": [
            "( JOIN ( R [ Carnegie Classification of Institutions of Higher Education ] ) ( JOIN ( R [ educated at ] ) [ Lewis Hine ] ) )",
            "( JOIN ( R [ Carnegie Classification of Institutions of Higher Education ] ) ( JOIN ( R [ alumni ] ) [ Lewis Hine ] ) )",
            "( AND ( JOIN [ institution ] [ Carnegie Classification of Institutions of Higher Education ] ) ( JOIN ( R [ alumni ] ) [ Lewis Hine ] ) )",
            "( JOIN [ Carnegie Classification of Institutions of Higher Education ] [ Lewis Hine ] )",
            "( AND ( JOIN [ field of study ] [ sociology ] ) ( JOIN ( R [ institution ] ) [ Lewis Hine ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Carnegie Classification of Institutions of Higher Education ] ) ( JOIN ( R [ educated at ] ) [ Lewis Hine ] ) )"
    },
    {
        "question": "Question: { Which is MycoBank taxon name ID of Oomycetes? }",
        "predicted_query": [
            "( JOIN ( R [ MycoBank taxon name ID ] ) [ Oomycetes ] )",
            "( [ JOIN ] [ MycoBank taxon name ID ] )",
            "( AND ( JOIN [ MycoBank taxon ID ] [ Oomycetes ] ) ( JOIN ( R [ taxon ID ] ) [ Oomycetes ] ) )",
            "( JOIN [ MycoBank taxon name ID ] [ Oomycetes ] )",
            "( JOIN ( R [ MycoBank taxon ID ] ) [ Oomycetes ] )"
        ],
        "gen_label": "( JOIN ( R [ MycoBank taxon name ID ] ) [ Oomycetes ] )"
    },
    {
        "question": "Question: { What happens in rural cities of Zhongshi Korean International School? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Zhongshi Korean International School ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ rural city ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Zhongshi Korean International School ] ) )",
            "( JOIN ( R [ population ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Zhongshi Korean International School ] ) )",
            "( JOIN ( R [ has location ] ) ( JOIN ( R [ located in ] ) [ Zhongshi Korean International School ] ) )",
            "( JOIN [ located in the administrative territorial entity ] [ Zhongshi Korean International School ] )"
        ],
        "gen_label": "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Zhongshi Korean International School ] ) )"
    },
    {
        "question": "Question: { Which is the takeoff and landing capability of Airbus A380? }",
        "predicted_query": [
            "( JOIN ( R [ takeoff and landing capability ] ) [ Airbus A380 ] )",
            "( JOIN ( R [ take-off and landing capability ] ) [ Airbus A380 ] )",
            "[ JOIN ] [ takeoff and landing capability ] [ Airbus A380 ]",
            "( JOIN ( R [ takeoff and landing capability ] ) [ Airbus A380 ] )",
            "( JOIN ( R [ takeoff and landing capability ] ) ( JOIN ( R [ manufacturer ] ) [ Airbus A380 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ takeoff and landing capability ] ) [ Airbus A380 ] )"
    },
    {
        "question": "Question: { Where {has local government areas} and {location of work} of {Benedict XV} ? }",
        "predicted_query": [
            "( JOIN ( R [ has local government area ] ) ( JOIN ( R [ place of work ] ) [ Pope Benedict XV ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ local government area ] ) ( JOIN ( R [ place of work ] ) [ Pope Benedict XV ] ) )",
            "( JOIN ( R [ has administrative territorial entity ] ) ( JOIN ( R [ place of work ] ) [ Benedict XV ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Local Government Areas ] ) ( JOIN ( R [ place of work ] ) [ Pope Benedict XV ] ) )",
            "( JOIN ( R [ has local government areas ] ) ( JOIN ( R [ location of work ] ) [ Pope Benedict XV ] ) )"
        ],
        "gen_label": "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ work location ] ) [ Benedict XV ] ) )"
    },
    {
        "question": "Question: { Which is the American National Biography ID of Henry Cabot Lodge? }",
        "predicted_query": [
            "( JOIN ( R [ American National Biography ID ] ) [ Henry Cabot Lodge ] )",
            "( JOIN [ American National Biography ID ] [ Henry Cabot Lodge ] )",
            "[{\"joinGenesisQuestion\":{\"taxonomyId\":10000000",
            "( JOIN ( R [ American National Biography ID ] ) [ Henry Cabot Lodge ] )",
            "[ JOIN ( R [ American National Biography ID ] ) [ Henry Cabot Lodge ] ]"
        ],
        "gen_label": "( JOIN ( R [ American National Biography ID ] ) [ Henry Cabot Lodge ] )"
    },
    {
        "question": "Question: { How do you say Haifa? }",
        "predicted_query": [
            "( JOIN ( R [ pronunciation ] ) ( JOIN ( R [ translated from ] ) [ Haifa ] ) )",
            "( JOIN [ spoken language ] [ Haifa ] )",
            "( JOIN ( R [ translation ] ) ( JOIN ( R [ translated from ] ) [ Haifa ] ) )",
            "( JOIN [ translation ] [ Haifa ] )",
            "( AND ( JOIN [ language spoken, written or signed ] [ Hebrew ] ) ( JOIN ( R [ transliteration or transcription ] ) [ Haifa ] ) )"
        ],
        "gen_label": "( JOIN ( R [ vocalized name ] ) [ Haifa ] )"
    },
    {
        "question": "Question: { What is Philadelphia Museum of Art ID for Gioachino Rossini ? }",
        "predicted_query": [
            "( JOIN ( R [ Philadelphia Museum of Art ID ] ) [ Gioachino Rossini ] )",
            "[ { JOIN ( R [ Philadelphia Museum of Art ID ] ) } ] ",
            "[ { JOIN ( R [ Philadelphia Museum of Art ID ] ) } ] ",
            "( JOIN ( R [ Philadelphia Museum of Art artist ID ] ) [ Gioachino Rossini ] )",
            "( [ joined by ] [ Philadelphia Museum of Art artist ID ] ) "
        ],
        "gen_label": "( JOIN ( R [ Philadelphia Museum of Art work ID ] ) [ Gioachino Rossini ] )"
    },
    {
        "question": "Question: { What counties are located near where Lawrence of Brindisi died? }",
        "predicted_query": [
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ place of death ] ) [ Lawrence of Brindisi ] ) )",
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ place of death ] ) [ Lawrence of Brindisi ] ) )",
            "( JOIN [ located in the administrative territorial entity ] [ Brindisi ] ) ( JOIN ( R [ place of death ] ) [ Lawrence of Brindisi ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Province of Lecce ] ) ( JOIN ( R [ place of death ] ) [ Lawrence of Brindisi ] ) )",
            "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ place of death ] ) [ Lawrence of Brindisi ] ) )"
        ],
        "gen_label": "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ place of death ] ) [ Lawrence of Brindisi ] ) )"
    },
    {
        "question": "Question: { What Musée d'Orsay artist ID for Lewis Hine? }",
        "predicted_query": [
            "( JOIN ( R [ Musée d'Orsay artist ID ] ) [ Lewis Hine ] )",
            "( JOIN ( R [ Musée d'Orsay artist ID ] ) [ Lewis Hine ] )",
            "( AND ( JOIN [ Museum of Modern Art artist ID ] [ Lewis Hine ] ) ( JOIN ( R [ ID in Musée d'Orsay ] ) [ Lewis Hine ] ) )",
            "( AND ( JOIN [ Musée d'Orsay artist ID ] [ Lewis Hine ] ) ( JOIN ( R [ ID ] ) [ Lewis Hine ] ) )",
            "( JOIN ( R [ Musée d'Orsay artist ID ] ) [ Lewis Hine ] )"
        ],
        "gen_label": "( JOIN ( R [ Musée d'Orsay artist ID ] ) [ Lewis Hine ] )"
    },
    {
        "question": "Question: { na }",
        "predicted_query": [
            "( JOIN ( R [ National Assembly of France constituency ] ) [ Nathalie Kosciusko-Morizet ] )",
            "( JOIN [ has member of ] [ Na ] )",
            "The JOIN query is: ",
            "( AND ( JOIN [ has part of ] [ Na ] ) ( JOIN ( R [ contains the administrative territorial entity ] ) [ Nauru ] ) )",
            "( JOIN [ contains the administrative territorial entity ] [ Nairobi ] )"
        ],
        "gen_label": "( JOIN ( R [ head of government ] ) ( JOIN ( R [ capital ] ) [ Duchy of Burgundy ] ) )"
    },
    {
        "question": "Question: { What is John Glenn's first name that is the same as Jenő? }",
        "predicted_query": [
            "( AND ( JOIN [ given name ] [ Jenő ] ) ( JOIN ( R [ given name ] ) [ John Glenn ] ) )",
            "( AND ( JOIN [ has the same name ] [ Jenő ] ) ( JOIN ( R [ given name ] ) [ John Glenn ] ) )",
            "( JOIN ( R [ given name ] ) ( JOIN ( R [ same as ] ) [ Jenő ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Jenő ] ) ( JOIN ( R [ given name ] ) [ John Glenn ] ) )",
            "( AND ( JOIN [ given name ] [ Jenő ] ) ( JOIN ( R [ different given name ] ) [ John Glenn ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ said to be the same as ] [ Jenő ] ) ( JOIN ( R [ given name ] ) [ John Glenn ] ) )"
    },
    {
        "question": "Question: { Which is the Luminous-Lint ID for John Frederick William Herschel? }",
        "predicted_query": [
            "( JOIN ( R [ Luminous-Lint ID ] ) [ John Frederick William Herschel ] )",
            "( JOIN ( R [ Luminous-Lint ID ] ) [ John Frederick William Herschel ] )",
            "( JOIN ( R [ Luminous-Lint artist ID ] ) [ John Frederick William Herschel ] )",
            "( JOIN ( R [ Luminous-Lint ID ] ) [ John Frederick William Herschel ] )",
            "( AND ( JOIN [ Luminous-Lint person ID ] [ John Frederick William Herschel ] ) ( JOIN ( R [ ID in this field ] ) [ John Herschel ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Luminous-Lint ID ] ) [ John Frederick William Herschel ] )"
    },
    {
        "question": "Question: { Which is the twinned administrative body for Liaoning? }",
        "predicted_query": [
            "( JOIN ( R [ twinned administrative body ] ) [ Liaoning ] )",
            "( JOIN [ twinned administrative body ] [ Liaoning ] )",
            "( AND ( JOIN [ twinned administrative body ] [ Liaoning ] ) ( JOIN ( R [ twinned administrative body ] ) [ Liaoning ] ) )",
            "( JOIN ( R [ twinned administrative body ] ) [ Liaoning ] )",
            "( JOIN [ twinned administrative body ] [ Liaoning ] )"
        ],
        "gen_label": "( JOIN [ twinned administrative body ] [ Liaoning ] )"
    },
    {
        "question": "Question: { What is  the  fictional universe described in Marvel Cinematic Universe? }",
        "predicted_query": [
            "( JOIN ( R [ fictional universe ] ) ( JOIN ( R [ based on ] ) [ Marvel Cinematic Universe ] ) )",
            "( JOIN [ fictional universe ] [ Marvel Cinematic Universe ] )",
            "( AND ( JOIN [ fictional work ] [ Marvel Cinematic Universe ] ) ( JOIN ( R [ described by ] ) [ Marvel Cinematic Universe ] ) )",
            "( AND ( JOIN [ described by ] [ Marvel Cinematic Universe ] ) ( JOIN ( R [ fictional universe ] ) [ Marvel Cinematic Universe ] ) )",
            "( JOIN ( R [ fictional universe ] ) ( JOIN ( R [ described in ] ) [ Marvel Cinematic Universe ] ) )"
        ],
        "gen_label": "( JOIN ( R [ fictional universe described in ] ) [ Marvel Cinematic Universe ] )"
    },
    {
        "question": "Question: { What is the molecular formula of the drug prescribed for AIDS? }",
        "predicted_query": [
            "( JOIN ( R [ molecular formula ] ) [ AIDS ] )",
            "( JOIN ( R [ molecular formula ] ) ( JOIN ( R [ drug prescribed for ] ) [ AIDS ] ) )",
            "( JOIN ( R [ chemical formula ] ) ( JOIN ( R [ drug used for treatment ] ) [ AIDS ] ) )",
            "( AND ( JOIN [ drug prescribed for ] [ AIDS ] ) ( JOIN ( R [ molecular formula ] ) [ AIDS ] ) )",
            "( JOIN [ molecular formula ] [ drug prescribed for AIDS ] )"
        ],
        "gen_label": "( JOIN ( R [ chemical formula ] ) ( JOIN ( R [ drug or therapy used for treatment ] ) [ AIDS ] ) )"
    },
    {
        "question": "Question: { What is the first name of Juan Vucetich, who has the same name as Ivo? }",
        "predicted_query": [
            "( AND ( JOIN [ given name ] [ Ivo ] ) ( JOIN ( R [ different name ] ) [ Juan Vucetich ] ) )",
            "( AND ( JOIN [ given name ] [ Juan Vucetich ] ) ( JOIN ( R [ different name ] ) [ Ivo Vucetich ] ) )",
            "( AND ( JOIN [ different person ] [ Ivo Vucetich ] ) ( JOIN ( R [ given name ] ) [ Juan Vucetich ] ) )",
            "( AND ( JOIN [ contains the same name ] [ Ivo ] ) ( JOIN ( R [ given name ] ) [ Juan Vucetich ] ) )",
            "( JOIN ( R [ given name ] ) ( JOIN ( R [ same as author ] ) [ Ivo Vucetich ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ said to be the same as ] [ Ivo ] ) ( JOIN ( R [ given name ] ) [ Juan Vucetich ] ) )"
    },
    {
        "question": "Question: { What is the genetic associations of obesity? }",
        "predicted_query": [
            "( JOIN ( R [ genetic association ] ) [ obesity ] )",
            "( JOIN [ genetic association ] [ obesity ] )",
            "( JOIN ( R [ genetic association ] ) [ obesity ] )",
            "( JOIN [ genetic associations ] [ obesity ] )",
            "( AND ( JOIN [ has genetic association ] [ obesity ] ) ( JOIN ( R [ has medical condition ] ) [ obesity ] ) )"
        ],
        "gen_label": "( JOIN ( R [ ortholog ] ) ( JOIN ( R [ genetic association ] ) [ obesity ] ) )"
    },
    {
        "question": "Question: { Describe mount of Pegasus. }",
        "predicted_query": [
            "( JOIN ( R [ elevation ] ) ( JOIN ( R [ located in ] ) [ Pegasus ] ) )",
            "( JOIN [ mountain ] [ Pegasus ] )",
            "( JOIN ( R [ height ] ) ( JOIN ( R [ location of activity ] ) [ Pegasus ] ) )",
            "( JOIN ( R [ summit elevation ] ) [ Pegasus ] )",
            "( AND ( JOIN [ elevation ] [ 1,000 m ( 3,281 ft ) ] ) ( JOIN ( R [ named after ] ) [ Pegasus ] ) )"
        ],
        "gen_label": "( JOIN [ mount ] [ Pegasus ] )"
    },
    {
        "question": "Question: { What team did {Ryan Lochte} play for, that has a {ballpark} named {O'Connell Center}. }",
        "predicted_query": [
            "( AND ( JOIN [ sports facility ] [ O'Connell Center ] ) ( JOIN ( R [ team ] ) [ Ryan Lochte ] ) )",
            "( AND ( JOIN [ sport team location ] [ O'Connell Center ] ) ( JOIN ( R [ sport ] ) [ Ryan Lochte ] ) )",
            "( AND ( JOIN [ sports venue ] [ O'Connell Center ] ) ( JOIN ( R [ team member ] ) [ Ryan Lochte ] ) )",
            "( AND ( JOIN [ has sports facility ] [ O'Connell Center ] ) ( JOIN ( R [ member of sports team ] ) [ Ryan Lochte ] ) )",
            "( AND ( JOIN [ named after ] [ O'Connell Center ] ) ( JOIN ( R [ team or league ] ) [ Ryan Lochte ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ home venue ] [ O'Connell Center ] ) ( JOIN ( R [ member of sports team ] ) [ Ryan Lochte ] ) )"
    },
    {
        "question": "Question: { Which is AUSNUT food ID for nutmeg? }",
        "predicted_query": [
            "( JOIN ( R [ AUSNUT food ID ] ) [ nutmeg ] )",
            "( JOIN [ AUSNUT food ID ] [ nutmeg ] )",
            "( JOIN ( R [ AUSNUT food ID ] ) [ nutmeg ] )",
            "( AND ( JOIN [ food nutrition database ] [ nutmeg ] ) ( JOIN ( R [ ID ] ) [ AUSNUT ] ) )",
            "( JOIN ( R [ AUSNUT food ID ] ) [ nutmeg ] )"
        ],
        "gen_label": "( JOIN ( R [ AUSNUT food ID ] ) [ nutmeg ] )"
    },
    {
        "question": "Question: { What is  in the performer of Vivien Leigh ? }",
        "predicted_query": [
            "( JOIN ( R [ performer ] ) ( JOIN ( R [ cast member ] ) [ Vivien Leigh ] ) )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ performer ] ) [ Vivien Leigh ] ) )",
            "[ JOIN [ performer ] [ Vivien Leigh ] ]",
            "( JOIN ( R [ performer ] ) [ Vivien Leigh ] )",
            "( JOIN ( R JOIN ( R [ performer ] ) ) [ Vivien Leigh ] )"
        ],
        "gen_label": "( JOIN [ performer ] [ Vivien Leigh ] )"
    },
    {
        "question": "Question: { Which is the KDG Komponisten der Gegenwart for Anthony Braxton? }",
        "predicted_query": [
            "( JOIN ( R [ KDG Komponisten der Gegenwart ] ) [ Anthony Braxton ] )",
            "( JOIN ( R [ KDG Komponisten der Gegenwart artist ID ] ) [ Anthony Braxton ] )",
            "( AND ( JOIN [ composer ] [ Anthony Braxton ] ) ( JOIN ( R [ composer of ] ) [ KDG Komponisten der Gegenwart ] ) )",
            "( JOIN ( R [ composer of the present ] ) [ Anthony Braxton ] )",
            "( JOIN ( R [ composer of ] ) ( JOIN ( R [ composer of ] ) [ Anthony Braxton ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Komponisten der Gegenwart ID ] ) [ Anthony Braxton ] )"
    },
    {
        "question": "Question: { Which is the maritime identification digits of Tonga? }",
        "predicted_query": [
            "( JOIN ( R [ maritime identification digits ] ) [ Tonga ] )",
            "( JOIN [ maritime identification digits ] [ Tonga ] )",
            "( JOIN ( R [ Maritime Mobile Service Identity ] ) [ Tonga ] )",
            "( AND ( JOIN [ IMO ship identification number ] [ Tonga ] ) ( JOIN ( R [ maritime identification digits ] ) [ Tonga ] ) )",
            "( JOIN ( R [ maritime identification digits ] ) [ Tonga ] )"
        ],
        "gen_label": "( JOIN ( R [ maritime identification digits ] ) [ Tonga ] )"
    },
    {
        "question": "Question: { What is bordered by Rome? }",
        "predicted_query": [
            "( JOIN ( R [ shares border with ] ) [ Rome ] )",
            "( JOIN [ shares border with ] [ Rome ] )",
            "( AND ( JOIN [ shares border with ] [ Rome ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Rome ] ) )",
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ country ] ) [ Rome ] ) )",
            "( JOIN [ shares border with ] [ Rome ] )"
        ],
        "gen_label": "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ place of death ] ) [ Fra Angelico ] ) )"
    },
    {
        "question": "Question: { Who is the administrator of the hub airport of Pan Am Flight 841? }",
        "predicted_query": [
            "( JOIN ( R [ administered by ] ) ( JOIN ( R [ airport served ] ) [ Pan Am Flight 841 ] ) )",
            "( JOIN ( R [ administrator ] ) ( JOIN ( R [ airport served ] ) [ Pan Am Flight 841 ] ) )",
            "( JOIN ( R [ administrator ] ) ( JOIN ( R [ operator ] ) [ Pan Am Flight 841 ] ) )",
            "( AND ( JOIN [ administered by ] [ Pan Am Flight 841 ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Pan Am Flight 841 ] ) )",
            "( JOIN ( R [ administrator ] ) ( JOIN ( R [ hub airport ] ) [ Pan Am Flight 841 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ airline hub ] ) ( JOIN ( R [ operator ] ) [ Pan Am Flight 841 ] ) )"
    },
    {
        "question": "Question: { Which city, twinned with Steinhagan, is the place of residence of Esther Vergeer? }",
        "predicted_query": [
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ place of residence ] ) [ Esther Vergeer ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Steinhagen ] ) ( JOIN ( R [ place of residence ] ) [ Esther Vergeer ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Steinhagen ] ) ( JOIN ( R [ place of residence ] ) [ Esther Vergeer ] ) )",
            "( JOIN ( R [ twinned with ] ) ( JOIN ( R [ place of residence ] ) [ Esther Vergeer ] ) )",
            "( JOIN ( R [ twinned with ] ) ( JOIN ( R [ place of residence ] ) [ Esther Vergeer ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ twinned administrative body ] [ Steinhagen ] ) ( JOIN ( R [ residence ] ) [ Esther Vergeer ] ) )"
    },
    {
        "question": "Question: { What is {add up to richness rate} of {citizenship} of {Bruno Sammartino} ? }",
        "predicted_query": [
            "( JOIN ( R [ wealth index ] ) ( JOIN ( R [ country of citizenship ] ) [ Bruno Sammartino ] ) )",
            "( AND ( JOIN [ has population ] [ citizenship ] ) ( JOIN ( R [ wealth index ] ) [ Bruno Sammartino ] ) )",
            "( JOIN ( R [ sum of richness rate ] ) ( JOIN ( R [ country of citizenship ] ) [ Bruno Sammartino ] ) )",
            "( AND ( JOIN [ country of citizenship ] [ Italy ] ) ( JOIN ( R [ wealth index ] ) [ Bruno Sammartino ] ) )",
            "( JOIN ( R [ add up to richness rate ] ) ( JOIN ( R [ country of citizenship ] ) [ Bruno Sammartino ] ) )"
        ],
        "gen_label": "( JOIN ( R [ total fertility rate ] ) ( JOIN ( R [ country of citizenship ] ) [ Bruno Sammartino ] ) )"
    },
    {
        "question": "Question: { Are Cavendish bananas named after the son of Georgiana Cavendish, Duchess of Devonshire? }",
        "predicted_query": [
            "( AND ( JOIN [ child ] [ Georgiana Cavendish, Duchess of Devonshire ] ) ( JOIN ( R [ named after ] ) [ Cavendish banana ] ) )",
            "( AND ( JOIN [ parent of ] [ Duchess of Devonshire ] ) ( JOIN ( R [ named after ] ) [ Cavendish banana ] ) )",
            "( AND ( JOIN [ named after ] [ Georgiana Cavendish, Duchess of Devonshire ] ) ( JOIN ( R [ parent of ] ) [ Cavendish banana ] ) )",
            "( AND ( JOIN [ child ] [ Georgiana Cavendish, Duchess of Devonshire ] ) ( JOIN ( R [ named after ] ) [ Cavendish banana ] ) )",
            "( JOIN ( R [ named after ] ) ( JOIN ( R [ child ] ) [ Georgiana Cavendish, Duchess of Devonshire ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ mother ] [ Georgiana Cavendish, Duchess of Devonshire ] ) ( JOIN ( R [ named after ] ) [ Cavendish banana ] ) )"
    },
    {
        "question": "Question: { What's George Whitefield's Clergy of the Church of England database ID? }",
        "predicted_query": [
            "( JOIN ( R [ Clergy of the Church of England database ID ] ) [ George Whitefield ] )",
            "( JOIN ( R [ Clergy of the Church of England database ID ] ) [ George Whitefield ] )",
            "",
            "( JOIN ( R [ clergy of the Church of England database ID ] ) [ George Whitefield ] )",
            "( AND ( JOIN [ Church of England clergy database ID ] [ George Whitefield ] ) ( JOIN ( R [ ID ] ) [ George Whitefield ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Clergy of the Church of England database ID ] ) [ George Whitefield ] )"
    },
    {
        "question": "Question: { Who are the characters that appear in Olivia Flaversham? }",
        "predicted_query": [
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ character ] ) [ Olivia Flaversham ] ) )",
            "( JOIN ( R [ character ] ) ( JOIN ( R [ cast member ] ) [ Olivia Flaversham ] ) )",
            "( JOIN [ cast member ] [ Olivia Flaversham ] )",
            "### Jo",
            "( AND ( JOIN [ cast member ] [ Olivia Flaversham ] ) ( JOIN ( R [ character ] ) [ The League of Extraordinary Gentlemen ] ) )"
        ],
        "gen_label": "( JOIN ( R [ characters ] ) ( JOIN ( R [ present in work ] ) [ Olivia Flaversham ] ) )"
    },
    {
        "question": "Question: { Which is the ARRS runner ID for Haile Gebrselassie? }",
        "predicted_query": [
            "( JOIN ( R [ ARRS runner ID ] ) [ Haile Gebrselassie ] )",
            "( [ joined by ] [ Haile Gebrselassie ] )",
            "( JOIN [ ARRS runner ID ] [ Haile Gebrselassie ] )",
            "( JOIN ( R [ ARRS runner ID ] ) [ Haile Gebrselassie ] )",
            "( JOIN ( R [ ARRS runner ID ] ) [ Haile Gebrselassie ] )"
        ],
        "gen_label": "( JOIN ( R [ ARRS runner ID ] ) [ Haile Gebrselassie ] )"
    },
    {
        "question": "Question: { What is less than the consequence of sublimation? }",
        "predicted_query": [
            "( JOIN ( R [ less than ] ) ( JOIN ( R [ product of ] ) [ sublimation ] ) )",
            "( JOIN [ less than ] [ sublimation ] )",
            "( AND ( JOIN [ has effect of ] [ sublimation ] ) ( JOIN ( R [ follows ] ) [ crystal structure ] ) )",
            "( JOIN [ less than or equal to ] [ sublimation ] )",
            "( AND ( JOIN [ follows ] [ sublimation ] ) ( JOIN ( R [ follows ] ) [ cocaine ] ) )"
        ],
        "gen_label": "( JOIN ( R [ less than ] ) ( JOIN ( R [ has effect ] ) [ sublimation ] ) )"
    },
    {
        "question": "Question: { What is the B.R.A.H.M.S artist ID of Lou Harrison? }",
        "predicted_query": [
            "( JOIN ( R [ B.R.A.H.M.S artist ID ] ) [ Lou Harrison ] )",
            "( JOIN ( R [ B.R.A.H.M.S artist ID ] ) [ Lou Harrison ] )",
            "( JOIN ( R [ B.R.A.H.M.S. artist ID ] ) [ Lou Harrison ] )",
            "( AND ( JOIN [ BRATHM ID ] [ Lou Harrison ] ) ( JOIN ( R [ question ] ) [ Lou Harrison ] ) )",
            "( JOIN ( R [ Brahms Artist ID ] ) [ Lou Harrison ] )"
        ],
        "gen_label": "( JOIN ( R [ BRAHMS artist ID ] ) [ Lou Harrison ] )"
    },
    {
        "question": "Question: { Which is the Justia Patents inventor ID for Steve Jobs? }",
        "predicted_query": [
            "[{\"join\":{\"joinType\":\"JOIN\",\"joint\":{\"joinOn\":\"[Justia Patents inventor ID]\",\"target\":{\"follows\":\"[Steve Jobs]\",\"question\":\"[Which is the Justia Patents inventor ID for Steve Jobs?]\"}}}],\"logicalFormQuery\":\"[]\"}",
            "( JOIN ( R [ Justia Patents inventor ID ] ) [ Steve Jobs ] )",
            "( JOIN ( R [ Justia Patents inventor ID ] ) [ Steve Jobs ] )",
            "( AND ( JOIN [ Justia Patents ID ] [ Steve Jobs ] ) ( JOIN ( R [ inventor ] ) [ Justia Patents ] ) )",
            "( JOIN ( R [ Justia patent inventor ID ] ) [ Steve Jobs ] )"
        ],
        "gen_label": "( JOIN ( R [ Justia Patents inventor ID ] ) [ Steve Jobs ] )"
    },
    {
        "question": "Question: { What medium is preceded by Grand Theft Auto V? }",
        "predicted_query": [
            "( JOIN ( R [ medium ] ) ( JOIN ( R [ preceded by ] ) [ Grand Theft Auto V ] ) )",
            "( JOIN [ medium ] [ Grand Theft Auto V ] )",
            "( AND ( JOIN [ followed by ] [ Grand Theft Auto V ] ) ( JOIN ( R [ medium ] ) [ Grand Theft Auto V ] ) )",
            "( JOIN ( R [ media format ] ) ( JOIN ( R [ preceded by ] ) [ Grand Theft Auto V ] ) )",
            "( JOIN [ preceded by ] [ Grand Theft Auto V ] )"
        ],
        "gen_label": "( JOIN ( R [ follows ] ) ( JOIN ( R [ distribution format ] ) [ Grand Theft Auto V ] ) )"
    },
    {
        "question": "Question: { Which is the JECFA database ID for citric acid? }",
        "predicted_query": [
            "( JOIN ( R [ JECFA database ID ] ) [ citric acid ] )",
            "( JOIN ( R [ JECFA database ID ] ) [ citric acid ] )",
            "( JOIN [ JECFA database ID ] [ citric acid ] )",
            "( JOIN ( R [ JECFA database ID ] ) [ citric acid ] )",
            "( JOIN [ JECFA database ID ] [ citric acid ] )"
        ],
        "gen_label": "( JOIN ( R [ JECFA database ID ] ) [ citric acid ] )"
    },
    {
        "question": "Question: { What is lake of of Doordarshan? }",
        "predicted_query": [
            "( JOIN ( R [ lake of ] ) [ Doordarshan ] )",
            "( JOIN [ lake of ] [ Doordarshan ] )",
            "( JOIN ( R [ lake located in ] ) ( JOIN ( R [ broadcaster ] ) [ Doordarshan ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Doordarshan ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Lake ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Doordarshan ] ) ( JOIN ( R [ lake located in ] ) [ Doordarshan ] ) )"
        ],
        "gen_label": "( JOIN ( R [ located in or next to body of water ] ) ( JOIN ( R [ headquarters location ] ) [ Doordarshan ] ) )"
    },
    {
        "question": "Question: { What does Vincent Gigante represent? }",
        "predicted_query": [
            "( JOIN [ represented by ] [ Vincent Gigante ] )",
            "( JOIN ( R [ represented by ] ) ( JOIN ( R [ member of ] ) [ Vincent Gigante ] ) )",
            "( JOIN [ represented by ] [ Vincent Gigante ] )",
            "( AND ( JOIN [ represented by ] [ Vincent Gigante ] ) ( JOIN ( R [ occupation ] ) [ Vincent Gigante ] ) )",
            "( JOIN ( R [ member of political party ] ) ( JOIN ( R [ represented country ] ) [ Vincent Gigante ] ) )"
        ],
        "gen_label": "( JOIN ( R [ represents ] ) [ Vincent Gigante ] )"
    },
    {
        "question": "Question: { in the aspect of UK history , what has been the diplomatic relation with Malta ? }",
        "predicted_query": [
            "( AND ( JOIN [ diplomatic relation ] [ Malta ] ) ( JOIN ( R [ facet of ] ) [ history of the United Kingdom ] ) )",
            "( JOIN ( R [ diplomatic relations ] ) ( JOIN ( R [ country ] ) [ Malta ] ) )",
            "( AND ( JOIN [ diplomatic relation ] [ Malta ] ) ( JOIN ( R [ part of history ] ) [ United Kingdom ] ) )",
            "( JOIN ( R [ has diplomatic relations with ] ) ( JOIN ( R [ country ] ) [ Malta ] ) )",
            "( AND ( JOIN [ diplomatic relation ] [ Malta ] ) ( JOIN ( R [ has part ] ) [ history of the United Kingdom ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ diplomatic relation ] [ Malta ] ) ( JOIN ( R [ facet of ] ) [ history of the United Kingdom ] ) )"
    },
    {
        "question": "Question: { What is the extended from of the inspiration of Winnie the Pooh? }",
        "predicted_query": [
            "( JOIN ( R [ influenced by ] ) ( JOIN ( R [ based on ] ) [ Winnie the Pooh ] ) )",
            "( JOIN [ inspired by ] [ Winnie the Pooh ] )",
            "( JOIN ( R [ has influence ] ) ( JOIN ( R [ influenced by ] ) [ Winnie-the-Pooh ] ) )",
            "( AND ( JOIN [ influenced by ] [ Winnie the Pooh ] ) ( JOIN ( R [ influenced by ] ) [ Winnie the Pooh ] ) )",
            "( AND ( JOIN [ inspired by ] [ Winnie-the-Pooh ] ) ( JOIN ( R [ influenced by ] ) [ Winnie-the-Pooh ] ) )"
        ],
        "gen_label": "( JOIN ( R [ based on ] ) ( JOIN ( R [ inspired by ] ) [ Winnie the Pooh ] ) )"
    },
    {
        "question": "Question: { What is Steam Application ID for Portal ? }",
        "predicted_query": [
            "( JOIN [ Steam Application ID ] [ Portal ] )",
            "( JOIN ( R [ Steam application ID ] ) [ Portal ] )",
            "( AND ( JOIN [ ID.net Game ID ] [ Steam Application ID for Portal ] ) ( JOIN ( R [ question ] ) [ What is the Steam Application ID for Portal? ] ) )",
            "( JOIN ( R [ Steam Application ID ] ) [ Portal ] )",
            "( JOIN ( R [ Steam application ID ] ) [ Portal ] )"
        ],
        "gen_label": "( JOIN ( R [ Steam application ID ] ) [ Portal ] )"
    },
    {
        "question": "Question: { What is type of orbit for sub-orbital spaceflight }",
        "predicted_query": [
            "( JOIN ( R [ orbit type ] ) [ sub-orbital spaceflight ] )",
            "( JOIN [ type of orbit ] [ sub-orbital spaceflight ] )",
            "( JOIN ( R [ orbital period ] ) ( JOIN ( R [ type of orbit ] ) [ sub-orbital spaceflight ] ) )",
            "( JOIN [ orbit type ] [ sub-orbital spaceflight ] )",
            "( JOIN ( R [ has orbit type ] ) [ sub-orbital spaceflight ] )"
        ],
        "gen_label": "( JOIN [ type of orbit ] [ sub-orbital spaceflight ] )"
    },
    {
        "question": "Question: { What is the active ingredient in testosterone? }",
        "predicted_query": [
            "( JOIN ( R [ active ingredient ] ) [ testosterone ] )",
            "( JOIN [ active ingredient ] [ testosterone ] )",
            "[ JOIN [ active ingredient ] [",
            "( JOIN ( R [ drug ] ) [ testosterone ] )",
            "( JOIN ( R [ active ingredient ] ) [ testosterone ] )"
        ],
        "gen_label": "( JOIN [ has active ingredient ] [ testosterone ] )"
    },
    {
        "question": "Question: { Governmental }",
        "predicted_query": [
            "( JOIN [ governmental authority ] [ United States ] )",
            "( JOIN ( R [ government type ] ) [ government ] )",
            "( JOIN ( R [ governmental system ] ) [ government ] )",
            "( JOIN [ governmental body ] [ government ] ) [ governmental ]",
            "( JOIN ( R [ head of government ] ) ( JOIN ( R [ member of ] ) [ Governmental ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ legislative body ] [ National Congress of Brazil ] ) ( JOIN ( R [ diplomatic relation ] ) [ Malaysia ] ) )"
    },
    {
        "question": "Question: { Which {diplomatic relation} {comes from} {TLC} ? }",
        "predicted_query": [
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ located in ] ) [ TLC ] ) )",
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ member of ] ) [ TLC ] ) )",
            "( JOIN [ diplomatic relation ] [ TLC ] )",
            "( AND ( JOIN [ diplomatic relations between ] [ TLC ] ) ( JOIN ( R [ diplomatic relations ] ) [ TLC ] ) )",
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ member of ] ) [ TLC ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country of origin ] ) [ TLC ] ) )"
    },
    {
        "question": "Question: { What is the postcode of the county seat of the Province of Georgia? }",
        "predicted_query": [
            "( JOIN ( R [ postal code ] ) ( JOIN ( R [ capital ] ) [ Province of Georgia ] ) )",
            "( JOIN ( R [ postal code ] ) ( JOIN ( R [ capital ] ) [ Georgia ] ) )",
            "( JOIN ( R [ postcode ] ) ( JOIN ( R [ capital of ] ) [ Province of Georgia ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Province of Georgia ] ) ( JOIN ( R [ postal code ] ) [ Georgia ] ) )",
            "( JOIN ( R [ postcode of the administrative center ] ) ( JOIN ( R [ country ] ) [ Georgia ] ) )"
        ],
        "gen_label": "( JOIN ( R [ postal code ] ) ( JOIN ( R [ capital ] ) [ Province of Georgia ] ) )"
    },
    {
        "question": "Question: { The AGORHA login information of Mona Lisa is what? }",
        "predicted_query": [
            "( JOIN ( R [ AGORHA login information ] ) [ Mona Lisa ] )",
            "( JOIN ( R [ AGORHA user ID ] ) [ Mona Lisa ] )",
            "( JOIN ( R [ AGORHA login information ] ) [ Mona Lisa ] )",
            "( JOIN ( R [ AGORHA login ] ) [ Mona Lisa ] )",
            "( AND ( JOIN [ login information ] [ Mona Lisa ] ) ( JOIN ( R [ member of ] ) [ Mona Lisa ] ) )"
        ],
        "gen_label": "( JOIN ( R [ AGORHA work ID ] ) [ Mona Lisa ] )"
    },
    {
        "question": "Question: { What commemorates Christmas? }",
        "predicted_query": [
            "( JOIN ( R [ commemorated by ] ) [ Christmas ] )",
            "( JOIN ( R [ commemorates ] ) [ Christmas ] )",
            "( AND ( JOIN [ honors ] [ Christmas ] ) ( JOIN ( R [ commemorated by ] ) [ Christmas ] ) )",
            "( JOIN [ commemorates ] [ Christmas ] )",
            "( JOIN ( R [ commemorates ] ) [ Christmas ] )"
        ],
        "gen_label": "( JOIN ( R [ commemorates ] ) [ Christmas ] )"
    },
    {
        "question": "Question: { Which is {is proximately caused by} of {in conflict} of {Nevil Shute} ? }",
        "predicted_query": [
            "( JOIN ( R [ cause ] ) ( JOIN ( R [ conflict ] ) [ Nevil Shute ] ) )",
            "The query written in Logical Form. ",
            "( JOIN ( R [ is proximately caused by ] ) ( JOIN ( R [ in conflict ] ) [ Nevil Shute ] ) )",
            "( JOIN [ is proximately caused by ] [ conflict ] ) [ Nevil Shute ]",
            "( JOIN ( R [ has cause ] ) [ Nevil Shute ] )"
        ],
        "gen_label": "( JOIN ( R [ has immediate cause ] ) ( JOIN ( R [ conflict ] ) [ Nevil Shute ] ) )"
    },
    {
        "question": "Question: { Which is the FFA ID for Marie-José Pérec? }",
        "predicted_query": [
            "( JOIN ( R [ FFA ID ] ) [ Marie-José Pérec ] )",
            "( JOIN ( R [ FIFA ID ] ) [ Marie-José Pérec ] )",
            "( [ joined by ] [ FFA ID ] )",
            "( JOIN [ FFA ID ] [ Marie-José Pérec ] )",
            "( JOIN ( R [ FFA ID ] ) [ Marie-José Pérec ] )"
        ],
        "gen_label": "( JOIN ( R [ French Athletics Federation athlete ID ] ) [ Marie-José Pérec ] )"
    },
    {
        "question": "Question: { Which is the MAC Address Block Large ID for Nokia? }",
        "predicted_query": [
            "( JOIN ( R [ MAC Address Block Large ID ] ) [ Nokia ] )",
            "( JOIN ( R [ MAC address block large ID ] ) [ Nokia ] )",
            "( JOIN ( R [ MAC Address Block Large ID ] ) [ Nokia ] )",
            "( JOIN ( R [ MAC address block large ID ] ) [ Nokia ] )",
            "( AND ( JOIN [ ID in MAC Address Block Large ] ) ( JOIN ( R [ MAC address ] ) [ Nokia ] ) )"
        ],
        "gen_label": "( JOIN ( R [ MAC Address Block Large ID ] ) [ Nokia ] )"
    },
    {
        "question": "Question: { Who gave the{instrument played} of {play} of {1930 Speedway Northern League} ? }",
        "predicted_query": [
            "( JOIN ( R [ instrument played ] ) ( JOIN ( R [ league played for ] ) [ 1930 Speedway Northern League ] ) )",
            "( JOIN ( R [ sports played ] ) ( JOIN ( R [ sport ] ) [ 1930 Speedway Northern League ] ) )",
            "( JOIN ( R [ instrument played ] ) ( JOIN ( R [ sport ] ) [ 1930 Speedway Northern League ] ) )",
            "( JOIN ( R [ performer or contributor ] ) ( JOIN ( R [ sport ] ) [ 1930 Speedway Northern League ] ) )",
            "( AND ( JOIN [ played on ] [ Speedway Northern League ] ) ( JOIN ( R [ performer ] ) [ 1930 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ uses ] ) ( JOIN ( R [ sport ] ) [ 1930 Speedway Northern League ] ) )"
    },
    {
        "question": "Question: { Which is the instrumentation of tuba? }",
        "predicted_query": [
            "( JOIN [ instrumentation ] [ tuba ] )",
            "( JOIN ( R [ instrumentation ] ) [ tuba ] )",
            "( JOIN ( R [ instrumentation ] ) [ tuba ] )",
            "( JOIN [ instrumentation ] [ tuba ] )",
            "( JOIN ( R [ instrumentation ] ) [ tuba ] )"
        ],
        "gen_label": "( JOIN [ instrumentation ] [ tuba ] )"
    },
    {
        "question": "Question: { What is Paul's deathplace, which his bordered by Formello? }",
        "predicted_query": [
            "( AND ( JOIN [ shares border with ] [ Formello ] ) ( JOIN ( R [ place of death ] ) [ Paul ] ) )",
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ place of death ] ) [ Paul ] ) )",
            "( AND ( JOIN [ shared by ] [ Formello ] ) ( JOIN ( R [ place of death ] ) [ Paul ] ) )",
            "( AND ( JOIN [ shares border with ] [ Formello ] ) ( JOIN ( R [ place of death ] ) [ Paul ] ) )",
            "( AND ( JOIN [ shares border with ] [ Formello ] ) ( JOIN ( R [ place of burial ] ) [ Paul ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ shares border with ] [ Formello ] ) ( JOIN ( R [ place of death ] ) [ Paul the Apostle ] ) )"
    },
    {
        "question": "Question: { Where is the place of Death of Pope Pius XI? }",
        "predicted_query": [
            "( JOIN ( R [ place of death ] ) ( JOIN ( R [ place of burial ] ) [ Pope Pius XI ] ) )",
            "( JOIN ( R [ location of death ] ) ( JOIN ( R [ place of death ] ) [ Pope Pius XI ] ) )",
            "( JOIN ( R [ place of death ] ) [ Pope Pius XI ] )",
            "( JOIN [ place of death ] [ Pope Pius XI ] )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Papal States ] ) ( JOIN ( R [ place of death ] ) [ Pope Pius XI ] ) )"
        ],
        "gen_label": "( JOIN ( R [ head of state ] ) ( JOIN ( R [ place of death ] ) [ Pius XI ] ) )"
    },
    {
        "question": "Question: { Which is the monomer of polyvinyl chloride? }",
        "predicted_query": [
            "( JOIN ( R [ monomer ] ) [ polyvinyl chloride ] )",
            "( JOIN [ monomer ] [ polyvinyl chloride ] )",
            "( JOIN ( R [ polymerized from ] ) ( JOIN ( R [ has molecular formula ] ) [ polyvinyl chloride ] ) )",
            "( JOIN ( R [ monomer ] ) [ polyvinyl chloride ] )",
            "( JOIN [ monomer ] [ polyvinyl chloride ] )"
        ],
        "gen_label": "( JOIN [ monomer of ] [ polyvinyl chloride ] )"
    },
    {
        "question": "Question: { Who is the director whom Tore Blom worked for? }",
        "predicted_query": [
            "( JOIN ( R [ director ] ) ( JOIN ( R [ employer ] ) [ Tore Blom ] ) )",
            "( JOIN [ director ] [ Tore Blom ] )",
            "( AND ( JOIN [ employer ] [ Tore Blom ] ) ( JOIN ( R [ director ] ) [ Tore Blom ] ) )",
            "( JOIN ( R [ director ] ) ( JOIN ( R [ employer ] ) [ Tore Blom ] ) )",
            "( JOIN ( R [ employer ] ) ( JOIN ( R [ director ] ) [ Tore Blom ] ) )"
        ],
        "gen_label": "( JOIN ( R [ director / manager ] ) ( JOIN ( R [ employer ] ) [ Tore Blom ] ) )"
    },
    {
        "question": "Question: { J. R. R. Tolkien is part of what trend? }",
        "predicted_query": [
            "( JOIN ( R [ part of the series ] ) ( JOIN ( R [ author ] ) [ The Lord of the Rings ] ) )",
            "( AND ( JOIN [ follows trend ] ) ( JOIN ( R [ genre ] ) [ J. R. R. Tolkien ] ) )",
            "( AND ( JOIN [ genre ] [ fantasy ] ) ( JOIN ( R [ influenced by ] ) [ J. R. R. Tolkien ] ) )",
            "( JOIN ( R [ trend ] ) [ J. R. R. Tolkien ] )",
            "( JOIN [ part of trend ] [ J. R. R. Tolkien ] )"
        ],
        "gen_label": "( JOIN ( R [ movement ] ) ( JOIN ( R [ patient of ] ) [ J. R. R. Tolkien ] ) )"
    },
    {
        "question": "Question: { \"What administrative unit did Arthur M. Schlesinger serve as an alumna of Exeter?\" }",
        "predicted_query": [
            "( AND ( JOIN [ alumni ] [ Exeter ] ) ( JOIN ( R [ place of work ] ) [ Arthur M. Schlesinger ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Exeter ] ) ( JOIN ( R [ alma mater ] ) [ Arthur M. Schlesinger ] ) )",
            "( JOIN [ administrative unit ] [ Exeter ] ) ( JOIN ( R [ alumni ] ) [ Arthur M. Schlesinger ] )",
            "( AND ( JOIN [ alumnus ] [ Exeter ] ) ( JOIN ( R [ country ] ) [ Arthur M. Schlesinger ] ) )",
            "( AND ( JOIN [ location ] [ Exeter ] ) ( JOIN ( R [ alumni ] ) [ Arthur M. Schlesinger, Jr. ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ located in the administrative territorial entity ] [ Exeter ] ) ( JOIN ( R [ educated at ] ) [ Arthur M. Schlesinger ] ) )"
    },
    {
        "question": "Question: { palace pares id? }",
        "predicted_query": [
            "( AND ( JOIN [ ID.com ID ] [ Palace Pairs ] ) [ palace pares ] )",
            "[ JOIN [ palace pair ID ] ]",
            "( JOIN ( R [ palace pair ] ) [ Louis Philippe I ] )",
            "( JOIN ( R [ Palace Pairs ID ] ) [ Louis-Philippe I ] )",
            "( AND ( JOIN [ ID ] [ Palace Pairs ] ) [ palace pair ] )"
        ],
        "gen_label": "( JOIN ( R [ PARES ID ] ) [ palace ] )"
    },
    {
        "question": "Question: { how many  number of spans for Ponte Sant'Angelo ? }",
        "predicted_query": [
            "( JOIN ( R [ number of spans ] ) [ Ponte Sant'Angelo ] )",
            "( JOIN ( R [ number of spans ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Ponte Sant'Angelo ] ) )",
            "( JOIN ( R [ number of spans ] ) [ Ponte Sant'Angelo ] )",
            "( JOIN [ number of spans ] [ Ponte Sant'Angelo ] )",
            "( JOIN ( R [ has span ] ) ( JOIN ( R [ has bridge ] ) [ Ponte Sant'Angelo ] ) )"
        ],
        "gen_label": "( JOIN ( R [ number of spans ] ) [ Ponte Sant'Angelo ] )"
    },
    {
        "question": "Question: { What is the sibling of John III Sobieski employed as? }",
        "predicted_query": [
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ sibling ] ) [ John III Sobieski ] ) )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ sibling ] ) [ John III Sobieski ] ) )",
            "[ JOIN ] [ John III Sobieski ]",
            "( AND ( JOIN [ employer ] [ John III Sobieski ] ) ( JOIN ( R [ sibling ] ) [ John III Sobieski ] ) )",
            "( AND ( JOIN [ field of work ] [ sibling ] ) ( JOIN ( R [ sibling ] ) [ John III Sobieski ] ) )"
        ],
        "gen_label": "( JOIN ( R [ occupation ] ) ( JOIN ( R [ sibling ] ) [ John III Sobieski ] ) )"
    },
    {
        "question": "Question: { \"What activity of Emil Kraepelin utilized the working language of German\"? }",
        "predicted_query": [
            "( AND ( JOIN [ language of work ] [ German ] ) ( JOIN ( R [ occupation ] ) [ Emil Kraepelin ] ) )",
            "( AND ( JOIN [ language used ] [ German ] ) ( JOIN ( R [ occupation ] ) [ Emil Kraepelin ] ) )",
            "( AND ( JOIN [ has linguistic or literary form ] [ German ] ) ( JOIN ( R [ occupation ] ) [ Emil Kraepelin ] ) )",
            "( AND ( JOIN [ spoken or written language ] [ German ] ) ( JOIN ( R [ occupation ] ) [ Emil Kraepelin ] ) )",
            "( AND ( JOIN [ linguistic or lexical concept ] [ German ] ) ( JOIN ( R [ field of work ] ) [ Emil Kraepelin ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ language used ] [ German ] ) ( JOIN ( R [ work location ] ) [ Emil Kraepelin ] ) )"
    },
    {
        "question": "Question: { Which is the lymphatic drainage of the liver? }",
        "predicted_query": [
            "( JOIN ( R [ lymphatic drainage ] ) [ liver ] )",
            "( JOIN [ lymphatic drainage ] [ liver ] )",
            "( JOIN ( R [ lymphatic drainage ] ) [ liver ] )",
            "( JOIN [ lymphatic drainage ] [ liver ] )",
            "( JOIN ( R [ drains into ] ) [ liver ] )"
        ],
        "gen_label": "( JOIN ( R [ lymphatic drainage ] ) [ liver ] )"
    },
    {
        "question": "Question: { Where is the place of publication of Trujillo? }",
        "predicted_query": [
            "( JOIN [ place of publication ] [ Trujillo ] )",
            "( JOIN ( R [ place of publication ] ) [ Trujillo ] )",
            "[ JOIN [ place of publication ] [ Trujillo ] ]",
            "( JOIN ( R [ publisher ] ) ( JOIN ( R [ place of publication ] ) [ Trujillo ] ) )",
            "( JOIN ( R [ place of publication ] ) [ Trujillo ] )"
        ],
        "gen_label": "( JOIN [ place of publication ] [ Trujillo ] )"
    },
    {
        "question": "Question: { Which is the nomination for Jagjit Singh? }",
        "predicted_query": [
            "( JOIN ( R [ nomination ] ) [ Jagjit Singh ] )",
            "( JOIN [ nomination ] [ Jagjit Singh ] )",
            "( JOIN ( R [ nominated for ] ) ( JOIN ( R [ award received ] ) [ Jagjit Singh ] ) )",
            "( JOIN ( R [ nomination for ] ) [ Jagjit Singh ] )",
            "( AND ( JOIN [ nominated for ] [ Jagjit Singh ] ) ( JOIN ( R [ award received ] ) [ Jagjit Singh ] ) )"
        ],
        "gen_label": "( JOIN ( R [ nominated for ] ) [ Jagjit Singh ] )"
    },
    {
        "question": "Question: { Which is the kinship equivalent in SPARQL at Wikidata for grandparent? }",
        "predicted_query": [
            "( JOIN ( R [ kinship equivalent in SPARQL at Wikidata ] ) [ grandparent ] )",
            "( JOIN ( R [ SPARQL equivalent in Wikidata ] ) [ kinship ] ) [ grandparent ]",
            "( AND ( JOIN [ parent ] [ grandparent ] ) ( JOIN ( R [ equivalent to ] ) [ SPARQL at Wikidata ] ) )",
            "( JOIN ( R [ kinship equivalent in SPARQL at Wikidata ] ) [ grandparent ] )",
            "( JOIN [ kinship equivalent in SPARQL at Wikidata ] [ grandparent ] )"
        ],
        "gen_label": "( JOIN ( R [ kinship equivalent in SPARQL at Wikidata ] ) [ grandparent ] )"
    },
    {
        "question": "Question: { What is the zip code of the headquarters of the Mexican Mafia? }",
        "predicted_query": [
            "( JOIN ( R [ postal code ] ) ( JOIN ( R [ headquarters location ] ) [ Mexican Mafia ] ) )",
            "( JOIN [ postal code ] [ headquarters of the Mexican Mafia ] )",
            "( JOIN ( R [ post office box ] ) ( JOIN ( R [ headquarters location ] ) [ Mexican Mafia ] ) )",
            "The JOIN query is: [ postal code ] [ headquarters location of the Mexican Mafia ] ",
            "( JOIN ( R [ postal code ] ) ( JOIN ( R [ headquarters ] ) [ Mexican Mafia ] ) )"
        ],
        "gen_label": "( JOIN ( R [ postal code ] ) ( JOIN ( R [ headquarters location ] ) [ Mexican Mafia ] ) )"
    },
    {
        "question": "Question: { What is the surname of Keiko Matsuzaka, whose audio language is Japanese? }",
        "predicted_query": [
            "( AND ( JOIN [ language of work ] [ Japanese ] ) ( JOIN ( R [ given name ] ) [ Keiko Matsuzaka ] ) )",
            "( AND ( JOIN [ spoken language ] [ Japanese ] ) ( JOIN ( R [ given name ] ) [ Keiko Matsuzaka ] ) )",
            "( JOIN ( R [ spoken language ] ) ( JOIN ( R [ given name ] ) [ Keiko Matsuzaka ] ) )",
            "( AND ( JOIN [ language spoken, written or signed ] [ Japanese ] ) ( JOIN ( R [ given name ] ) [ Keiko Matsuzaka ] ) )",
            "( AND ( JOIN [ has audio language ] [ Japanese ] ) ( JOIN ( R [ family name ] ) [ Keiko Matsuzaka ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ language of work or name ] [ Japanese ] ) ( JOIN ( R [ family name ] ) [ Keiko Matsuzaka ] ) )"
    },
    {
        "question": "Question: { What is FINA athlete ID for Ryan Lochte? }",
        "predicted_query": [
            "",
            "( JOIN ( R [ FINA athlete ID ] ) [ Ryan Lochte ] )",
            "( [ JOIN ] [ FINA athlete ID ] )",
            "( JOIN ( R [ FINA athlete ID ] ) [ Ryan Lochte ] )",
            "( JOIN ( R [ FINA athlete ID ] ) [ Ryan Lochte ] )"
        ],
        "gen_label": "( JOIN ( R [ World Aquatics athlete ID ] ) [ Ryan Lochte ] )"
    },
    {
        "question": "Question: { What is the profession of Oleg Deripaska? }",
        "predicted_query": [
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ employer ] ) [ Oleg Deripaska ] ) )",
            "[ JOIN ] [ profession ] [ Oleg Deripaska ] ",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ spouse ] ) [ Oleg Deripaska ] ) )",
            "( JOIN ( R [ profession ] ) [ Oleg Deripaska ] )",
            "( JOIN ( R [ occupation ] ) [ Oleg Deripaska ] )"
        ],
        "gen_label": "( JOIN ( R [ field of this occupation ] ) ( JOIN ( R [ occupation ] ) [ Oleg Deripaska ] ) )"
    },
    {
        "question": "Question: { What is studied in the plays of Ian Rush? }",
        "predicted_query": [
            "( JOIN ( R [ studied ] ) ( JOIN ( R [ playwright ] ) [ Ian Rush ] ) )",
            "( JOIN [ studied in ] [ plays of Ian Rush ] )",
            "( JOIN ( R [ field of study ] ) ( JOIN ( R [ studied in ] ) [ Ian Rush ] ) )",
            "( JOIN [ studied ] [ Ian Rush ] )",
            "( AND ( JOIN [ studied at ] [ University of Liverpool ] ) ( JOIN ( R [ subject ] ) [ Ian Rush ] ) )"
        ],
        "gen_label": "( JOIN ( R [ practiced by ] ) ( JOIN ( R [ sport ] ) [ Ian Rush ] ) )"
    },
    {
        "question": "Question: { What is practiced by the housekeeper? }",
        "predicted_query": [
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ practiced by ] ) [ housekeeper ] ) )",
            "( JOIN [ practiced by ] [ housekeeper ] )",
            "( JOIN ( R [ practiced by ] ) [ housekeeper ] )",
            "( JOIN [ practiced by ] [ housekeeper ] )",
            "( AND ( JOIN [ occupation ] [ housemaid ] ) ( JOIN ( R [ practiced by ] ) [ housekeeper ] ) )"
        ],
        "gen_label": "( JOIN [ practiced by ] [ housekeeper ] )"
    },
    {
        "question": "Question: { What is ResearchGate institute ID for European Space Agency ? }",
        "predicted_query": [
            "( JOIN ( R [ ResearchGate institute ID ] ) [ European Space Agency ] )",
            "( JOIN ( R [ ResearchGate institute ID ] ) [ European Space Agency ] )",
            "( JOIN [ ResearchGate institute ID ] [ European Space Agency ] )",
            "( JOIN ( R [ ResearchGate institution ID ] ) [ European Space Agency ] )",
            "( AND ( JOIN [ ID.com ] [ European Space Agency ] ) ( JOIN ( R [ institution ID ] ) [ ResearchGate ] ) )"
        ],
        "gen_label": "( JOIN ( R [ ResearchGate institute ID ] ) [ European Space Agency ] )"
    },
    {
        "question": "Question: { What was co-founded by alumnus Guido Bertolaso? }",
        "predicted_query": [
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ student of ] ) [ Guido Bertolaso ] ) )",
            "( JOIN ( R [ founded by ] ) ( JOIN ( R [ alumni ] ) [ Guido Bertolaso ] ) )",
            "( AND ( JOIN [ founded by ] [ Guido Bertolaso ] ) ( JOIN ( R [ founded by ] ) [ University of Padua ] ) )",
            "( JOIN [ founded by ] [ Guido Bertolaso ] )",
            "( AND ( JOIN [ alumni ] [ Guido Bertolaso ] ) ( JOIN ( R [ founded by ] ) [ University of Padua ] ) )"
        ],
        "gen_label": "( JOIN ( R [ founded by ] ) ( JOIN ( R [ educated at ] ) [ Guido Bertolaso ] ) )"
    },
    {
        "question": "Question: { Who is the student of Raphael? }",
        "predicted_query": [
            "( JOIN [ student ] [ Raphael ] )",
            "( JOIN ( R [ student ] ) [ Raphael ] )",
            "( JOIN [ student of ] [ Raphael ] )",
            "( JOIN ( R [ student ] ) [ Raphael ] )",
            "( JOIN ( R [ student ] ) ( JOIN ( R [ student of ] ) [ Raphael ] ) )"
        ],
        "gen_label": "( JOIN ( R [ student of ] ) [ Raphael ] )"
    },
    {
        "question": "Question: { \"Who is {born at} of {Leopold I, Holy Roman Emperor}, where {county seat for} is {Austria-Hungary} ?\" }",
        "predicted_query": [
            "( AND ( JOIN [ capital of ] [ Austria-Hungary ] ) ( JOIN ( R [ place of birth ] ) [ Leopold I, Holy Roman Emperor ] ) )",
            "( JOIN [ capital of ] [ Austria-Hungary ] ) ( JOIN ( R [ place of birth ] ) [ Leopold I, Holy Roman Emperor ] )",
            "( AND ( JOIN [ capital ] [ Austria-Hungary ] ) ( JOIN ( R [ place of birth ] ) [ Leopold I, Holy Roman Emperor ] ) )",
            "( AND ( JOIN [ capital of administrative entity ] [ Austria-Hungary ] ) ( JOIN ( R [ place of birth ] ) [ Leopold I, Holy Roman Emperor ] ) )",
            "( AND ( JOIN [ administrative body ] [ Austria-Hungary ] ) ( JOIN ( R [ place of birth ] ) [ Leopold I, Holy Roman Emperor ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ capital of ] [ Austria-Hungary ] ) ( JOIN ( R [ place of birth ] ) [ Leopold I, Holy Roman Emperor ] ) )"
    },
    {
        "question": "Question: { What is the Google Arts & Culture ID for Hangzhou? }",
        "predicted_query": [
            "( JOIN ( R [ Google Arts & Culture ID ] ) [ Hangzhou ] )",
            "( JOIN ( R [ Google Arts and Culture ID ] ) [ Hangzhou ] )",
            "( JOIN [ Google Arts & Culture ID ] [ Hangzhou ] )",
            "( JOIN ( R [ Google Arts & Culture ID ] ) [ Hangzhou ] )",
            "( JOIN ( R [ Google Arts & Culture ID ] ) [ Hangzhou ] )"
        ],
        "gen_label": "( JOIN ( R [ Google Arts & Culture partner ID ] ) [ Hangzhou ] )"
    },
    {
        "question": "Question: { What is the Lemon 64 identifier of Frogger? }",
        "predicted_query": [
            "( JOIN ( R [ Lemon 64 ID ] ) [ Frogger ] )",
            "( JOIN ( R [ Lemon64 ID ] ) [ Frogger ] )",
            "( JOIN ( R [ Lemon 64 game ID ] ) [ Frogger ] )",
            "[ JOIN [ Lemon64 ID ] ] [ Frogger ] ",
            "( AND ( JOIN [ Lemon64 ID ] [ Frogger ] ) ( JOIN ( R [ ID ] ) [ Frogger ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Lemon 64 ID ] ) [ Frogger ] )"
    },
    {
        "question": "Question: { Who is the choreographer for Maurice Be'jart? }",
        "predicted_query": [
            "( JOIN ( R [ choreographer ] ) [ Maurice Béjart ] )",
            "( JOIN ( R [ choreographer ] ) ( JOIN ( R [ performer ] ) [ Maurice Béjart ] ) )",
            "( JOIN ( R [ performed by ] ) ( JOIN ( R [ choreographer ] ) [ Maurice Béjart ] ) )",
            "( AND ( JOIN [ employer ] [ Maurice Béjart ] ) ( JOIN ( R [ choreographer ] ) [ Maurice Béjart ] ) )",
            "( JOIN ( R [ dancer ] ) ( JOIN ( R [ choreographed by ] ) [ Maurice Béjart ] ) )"
        ],
        "gen_label": "( JOIN [ choreographer ] [ Maurice Béjart ] )"
    },
    {
        "question": "Question: { When was the subsidiaries of Universite de Montreal created? }",
        "predicted_query": [
            "( JOIN ( R [ founded ] ) ( JOIN ( R [ subsidiaries ] ) [ Université de Montréal ] ) )",
            "( JOIN [ founded ] [ Université de Montréal ] )",
            "( JOIN ( R [ founded ] ) ( JOIN ( R [ subsidiary, parent, or affiliate ] ) [ Université de Montréal ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Université de Montréal ] ) ( JOIN ( R [ founded ] ) [ Université de Montréal ] ) )",
            "( JOIN ( R [ has subsidiary ] ) ( JOIN ( R [ founded ] ) [ Université de Montréal ] ) )"
        ],
        "gen_label": "( JOIN ( R [ inception ] ) ( JOIN ( R [ has subsidiary ] ) [ Université de Montréal ] ) )"
    },
    {
        "question": "Question: { Which is the district in Al-Qassim Region, that has diplomatic relation with Mongolia ? }",
        "predicted_query": [
            "( AND ( JOIN [ diplomatic relation ] [ Mongolia ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Al-Qassim Region ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Al-Qassim Region ] ) ( JOIN ( R [ diplomatic relations ] ) [ Mongolia ] ) )",
            "( JOIN ( R [ has diplomatic relations ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Al-Qassim Region ] ) )",
            "( AND ( JOIN [ diplomatic relation ] [ Mongolia ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Al-Qassim Region ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Al-Qassim Region ] ) ( JOIN ( R [ has a diplomatic relation with ] ) [ Mongolia ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ diplomatic relation ] [ Mongolia ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Al-Qassim ] ) )"
    },
    {
        "question": "Question: { How many out of school children were there in Rafer Johnson's nation? }",
        "predicted_query": [
            "( JOIN ( R [ number of out-of-school children ] ) ( JOIN ( R [ country of citizenship ] ) [ Rafer Johnson ] ) )",
            "( JOIN ( R [ out-of-school children ] ) ( JOIN ( R [ country of citizenship ] ) [ Rafer Johnson ] ) )",
            "( AND ( JOIN [ country ] [ United States ] ) ( JOIN ( R [ affected by ] ) [ Rafer Johnson ] ) )",
            "( JOIN ( R [ number of out-of-school children ] ) ( JOIN ( R [ country of origin ] ) [ Rafer Johnson ] ) )",
            "( JOIN [ number of out-of-school children ] [ Rafer Johnson's nation ] )"
        ],
        "gen_label": "( JOIN ( R [ number of out-of-school children ] ) ( JOIN ( R [ country for sport ] ) [ Rafer Johnson ] ) )"
    },
    {
        "question": "Question: { Who is the honours of James Cameron, whose administrative territorial entity is California? }",
        "predicted_query": [
            "( AND ( JOIN [ administrative territorial entity ] [ California ] ) ( JOIN ( R [ award received ] ) [ James Cameron ] ) )",
            "( AND ( JOIN [ administered by authority ] [ California ] ) ( JOIN ( R [ award received ] ) [ James Cameron ] ) )",
            "( JOIN ( R [ honours received ] ) ( JOIN ( R [ located in ] ) [ California ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ California ] ) ( JOIN ( R [ award received ] ) [ James Cameron ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ California ] ) ( JOIN ( R [ awarded to ] ) [ James Cameron ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ located in the administrative territorial entity ] [ California ] ) ( JOIN ( R [ award received ] ) [ James Cameron ] ) )"
    },
    {
        "question": "Question: { What is the historical language in Guyana? }",
        "predicted_query": [
            "( JOIN ( R [ historical linguistics language family ] ) [ Guyana ] )",
            "( JOIN ( R [ historical language ] ) [ Guyana ] )",
            "( AND ( JOIN [ language family ] [ Guyana ] ) ( JOIN ( R [ language spoken, written or signed ] ) [ Guiana ] ) )",
            "[ JOIN ] [ what is the historical language of ] [ Guyana ]",
            "( JOIN [ historical language ] [ Guyana ] )"
        ],
        "gen_label": "( JOIN ( R [ official language ] ) ( JOIN ( R [ facet of ] ) [ history of Guyana ] ) )"
    },
    {
        "question": "Question: { Please tell me Flanders' NIS/INS code? }",
        "predicted_query": [
            "( JOIN [ NIS/INS code ] [ Flanders ] )",
            "",
            "( JOIN ( R [ NIS/INS code ] ) [ Flanders ] )",
            "[joins.katalyst.com.au • JOIN] [Flanders] ",
            "( AND ( JOIN [ National Statistical Institute of Flanders ] [ NIS/INS code ] ) [ Flanders ] )"
        ],
        "gen_label": "( JOIN ( R [ NIS/INS code ] ) [ Flanders ] )"
    },
    {
        "question": "Question: { Nathan Nandala Mafabi is a Ugandan accountant, lawyer, and politician. He represents ... Nandala Mafabi. From Wikipedia, the free encyclopedia. Jump to navigation Jump to search. Nandala Mafabi ... Residence, Kampala, Uganda. Nationality ...\nMissing: {ocean} ‎| ‎Must include: ‎{ocean} }",
        "predicted_query": [
            "( JOIN ( R [ located in ] ) ( JOIN ( R [ occupation ] ) [ Nathan Nandala Mafabi ] ) )",
            "",
            "( AND ( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ occupation ] ) [ Nathan Nandala Mafabi ] ) ) )",
            "( AND ( JOIN ( R [ occupies position of ] ) [ Nathan Nandala Mafabi ] ) ( JOIN ( R [ field of work ] ) [ oceanographer ] ) )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ occupation ] ) [ Nathan Nandala Mafabi ] ) )"
        ],
        "gen_label": "( JOIN ( R [ located in or next to body of water ] ) ( JOIN ( R [ residence ] ) [ Nandala Mafabi ] ) )"
    },
    {
        "question": "Question: { Who is die from of Jean-Claude Duvalier, that has medical findings of abnormal fourth heart sound? }",
        "predicted_query": [
            "( AND ( JOIN [ has medical finding ] [ abnormal fourth heart sound ] ) ( JOIN ( R [ death cause ] ) [ Jean-Claude Duvalier ] ) )",
            "( AND ( JOIN [ medical finding ] [ abnormal fourth heart sound ] ) ( JOIN ( R [ death cause ] ) [ Jean-Claude Duvalier ] ) )",
            "( AND ( JOIN [ has medical findings ] [ abnormal fourth heart sound ] ) ( JOIN ( R [ death cause ] ) [ Jean-Claude Duvalier ] ) )",
            "( AND ( JOIN [ cause of death ] [ abnormal fourth heart sound ] ) ( JOIN ( R [ died from ] ) [ Jean-Claude Duvalier ] ) )",
            "( AND ( JOIN [ diagnosed with ] [ abnormal fourth heart sound ] ) ( JOIN ( R [ died from ] ) [ Jean-Claude Duvalier ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ possible medical findings ] [ abnormal fourth heart sound ] ) ( JOIN ( R [ cause of death ] ) [ Jean-Claude Duvalier ] ) )"
    },
    {
        "question": "Question: { What is the etymology of Fourier optics, discovered by doctoral student, Claude-Louis Navier? }",
        "predicted_query": [
            "( AND ( JOIN [ student ] [ Claude-Louis Navier ] ) ( JOIN ( R [ etymology ] ) [ Fourier optics ] ) )",
            "( AND ( JOIN [ discoverer ] [ Claude-Louis Navier ] ) ( JOIN ( R [ etymology ] ) [ Fourier optics ] ) )",
            "( JOIN ( R [ etymology ] ) ( JOIN ( R [ student of ] ) [ Claude-Louis Navier ] ) )",
            "( AND ( JOIN [ student of ] [ Claude-Louis Navier ] ) ( JOIN ( R [ etymology ] ) [ Fourier optics ] ) )",
            "( AND ( JOIN [ discovered by ] [ Claude-Louis Navier ] ) ( JOIN ( R [ named after ] ) [ Fourier optics ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ doctoral student ] [ Claude-Louis Navier ] ) ( JOIN ( R [ named after ] ) [ Fourier optics ] ) )"
    },
    {
        "question": "Question: { Who uses Pro Evolution Soccer? }",
        "predicted_query": [
            "( [ joins ] [ sports ] ) [ Pro Evolution Soccer ]",
            "( JOIN [ uses ] [ Pro Evolution Soccer ] )",
            "( [ uses ] JOIN [ sports league ] )",
            "( JOIN ( R [ player ] ) ( JOIN ( R [ sport ] ) [ Pro Evolution Soccer ] ) )",
            "( AND ( JOIN [ uses or services ] [ Pro Evolution Soccer ] ) ( JOIN ( R [ sports team ] ) [ Pro Evolution Soccer ] ) )"
        ],
        "gen_label": "( JOIN ( R [ GUI toolkit or framework ] ) ( JOIN ( R [ platform ] ) [ eFootball ] ) )"
    },
    {
        "question": "Question: { In what region that has a Jinan as a twin city was the Peace of Augsburg? }",
        "predicted_query": [
            "( AND ( JOIN [ twinned administrative body ] [ Jinan ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Peace of Augsburg ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Jinan ] ) ( JOIN ( R [ location of work ] ) [ Peace of Augsburg ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Jiaodong Peninsula ] ) ( JOIN ( R [ influenced by ] ) [ Peace of Augsburg ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Jinan ] ) ( JOIN ( R [ affected by ] ) [ Peace of Augsburg ] ) )",
            "( JOIN ( R [ twin city ] ) ( JOIN ( R [ location ] ) [ Peace of Augsburg ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ twinned administrative body ] [ Jinan ] ) ( JOIN ( R [ location ] ) [ Peace of Augsburg ] ) )"
    },
    {
        "question": "Question: { Which is the BOLD Systems taxon ID for Ascomycota? }",
        "predicted_query": [
            "( JOIN ( R [ BOLD Systems taxon ID ] ) [ Ascomycota ] )",
            "( JOIN ( R [ BOLD Systems taxon ID ] ) [ Ascomycota ] )",
            "( JOIN ( R [ BOLD taxon ID ] ) [ Ascomycota ] )",
            "( JOIN [ BOLD Systems taxon ID ] [ Ascomycota ] )",
            "( JOIN ( R [ BOLD Systems taxon ID ] ) [ Ascomycota ] )"
        ],
        "gen_label": "( JOIN ( R [ BOLD Systems taxon ID ] ) [ Ascomycota ] )"
    },
    {
        "question": "Question: { What is the acreage of the work location of Christian Wihelm Braune? }",
        "predicted_query": [
            "( JOIN ( R [ area ] ) ( JOIN ( R [ place of work ] ) [ Christian Wilhelm Braune ] ) )",
            "( JOIN ( R [ land area ] ) ( JOIN ( R [ place of work ] ) [ Christian Wilhelm Braune ] ) )",
            "( AND ( JOIN [ square metre ] [ 1,000,000 ] ) ( JOIN ( R [ work location ] ) [ Christian Wilhelm Braune ] ) )",
            "( JOIN ( R [ work location has area of ] ) ( JOIN ( R [ work location ] ) [ Christian Wilhelm Braune ] ) )",
            "( JOIN ( R [ area ] ) ( JOIN ( R [ work location ] ) [ Christian Wilhelm Braune ] ) )"
        ],
        "gen_label": "( JOIN ( R [ area ] ) ( JOIN ( R [ work location ] ) [ Christian Wilhelm Braune ] ) )"
    },
    {
        "question": "Question: { Rudolf Augstein competed for what office that he holds? }",
        "predicted_query": [
            "( JOIN [ office held ] [ Rudolf Augstein ] )",
            "( JOIN ( R [ office held ] ) ( JOIN ( R [ member of ] ) [ Rudolf Augstein ] ) )",
            "( AND ( JOIN [ office held or held by ] [ Rudolf Augstein ] ) ( JOIN ( R [ occupation ] ) [ Rudolf Augstein ] ) )",
            "( AND ( JOIN [ held by ] [ Rudolf Augstein ] ) ( JOIN ( R [ office held ] ) [ Rudolf Augstein ] ) )",
            "( JOIN ( R [ position held ] ) ( JOIN ( R [ office held or held ] ) [ Rudolf Augstein ] ) )"
        ],
        "gen_label": "( JOIN ( R [ participant in ] ) ( JOIN ( R [ position held ] ) [ Rudolf Augstein ] ) )"
    },
    {
        "question": "Question: { WHICH IS THE CAPITAL TOWN OF ADJACENT TO SYTHET DIVISION }",
        "predicted_query": [
            "( JOIN [ capital of ] [ adjacent to ] )",
            "( JOIN ( R [ capital city ] ) ( JOIN ( R [ adjacent to ] ) [ Sythet Division ] ) )",
            "( AND ( JOIN [ shares border with ] [ Sythe ] ) ( JOIN ( R [ capital ] ) [ Adjacent Division ] ) )",
            "( JOIN ( R [ capital ] ) ( JOIN ( R [ adjacent to ] ) [ Sythet Division ] ) )",
            "( JOIN ( R [ capital of ] ) ( JOIN ( R [ adjacent to ] ) [ SynthétiDivision ] ) )"
        ],
        "gen_label": "( JOIN ( R [ capital ] ) ( JOIN ( R [ shares border with ] ) [ Sylhet Division ] ) )"
    },
    {
        "question": "Question: { What country is the Airbus A350 made in? }",
        "predicted_query": [
            "( JOIN ( R [ country of manufacture ] ) ( JOIN ( R [ manufacturer ] ) [ Airbus A350 ] ) )",
            "( JOIN [ country of manufacture ] [ Airbus A350 ] )",
            "( AND ( JOIN [ located in administrative territorial entity ] [ Airbus A350 ] ) ( JOIN ( R [ manufactured in ] ) [ Airbus A350 ] ) )",
            "( JOIN ( R [ country of origin ] ) ( JOIN ( R [ manufacturer ] ) [ Airbus A350 ] ) )",
            "( JOIN ( R [ capital city ] ) ( JOIN ( R [ manufacturer ] ) [ Airbus A350 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ location of creation ] ) [ Airbus A350 ] ) )"
    },
    {
        "question": "Question: { What is Ernst Robert Fiechter's craft? }",
        "predicted_query": [
            "( JOIN [ craft ] [ Ernst Robert Fiechter ] )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ field of work ] ) [ Ernst Robert Fiechter ] ) )",
            "( AND ( JOIN [ occupational field ] [ craft ] ) ( JOIN ( R [ occupation ] ) [ Ernst Robert Fiechter ] ) )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ employer ] ) [ Ernst Robert Fiechter ] ) )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ occupation ] ) [ Ernst Robert Fiechter ] ) )"
        ],
        "gen_label": "( JOIN ( R [ field of this occupation ] ) ( JOIN ( R [ occupation ] ) [ Ernst Robert Fiechter ] ) )"
    },
    {
        "question": "Question: { Who is name after boson, that has career as mathematician? }",
        "predicted_query": [
            "( AND ( JOIN [ occupation ] [ mathematician ] ) ( JOIN ( R [ named after ] ) [ boson ] ) )",
            "( AND ( JOIN [ occupation ] [ mathematician ] ) ( JOIN ( R [ named after ] ) [ boson ] ) )",
            "( AND ( JOIN [ field of work ] [ mathematician ] ) ( JOIN ( R [ named after ] ) [ boson ] ) )",
            "( AND ( JOIN [ occupational field ] [ mathematician ] ) ( JOIN ( R [ named after ] ) [ boson ] ) )",
            "( AND ( JOIN [ occupation ] [ mathematician ] ) ( JOIN ( R [ named after ] ) [ boson ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ occupation ] [ mathematician ] ) ( JOIN ( R [ named after ] ) [ boson ] ) )"
    },
    {
        "question": "Question: { Which is the relief location map for Serbia? }",
        "predicted_query": [
            "( JOIN ( R [ relief location map ] ) [ Serbia ] )",
            "( JOIN ( R [ relief location map ] ) [ Serbia ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Serbia ] ) ( JOIN ( R [ depicts ] ) [ relief map ] ) )",
            "( JOIN [ relief location map ] [ Serbia ] )",
            "( AND ( JOIN [ location of relief ] [ Serbia ] ) ( JOIN ( R [ follows ] ) [ Serbia ] ) )"
        ],
        "gen_label": "( JOIN ( R [ relief location map ] ) [ Serbia ] )"
    },
    {
        "question": "Question: { Which {key incident} of {item operator} of {Memorial to the Engine Room Heroes of the Titanic} ? }",
        "predicted_query": [
            "( JOIN ( R [ key incident ] ) ( JOIN ( R [ operator ] ) [ Memorial to the Engine Room Heroes of the Titanic ] ) )",
            "( JOIN ( R [ incident ] ) ( JOIN ( R [ operator ] ) [ Memorial to the Engine Room Heroes of the Titanic ] ) )",
            "( JOIN [ key incident ] [ Memorial to the Engine Room Heroes of the Titanic ] )",
            "( AND ( JOIN [ operator ] [ item operator ] ) ( JOIN ( R [ participant in ] ) [ Memorial to the Engine Room Heroes of the Titanic ] ) )",
            "( JOIN ( R [ operator ] ) ( JOIN ( R [ facet of ] ) [ Memorial to the Engine Room Heroes of the Titanic ] ) )"
        ],
        "gen_label": "( JOIN ( R [ significant event ] ) ( JOIN ( R [ operator ] ) [ Memorial to the Engine Room Heroes of the Titanic ] ) )"
    },
    {
        "question": "Question: { What part of the study of pharmacology is the opposite of its indication? }",
        "predicted_query": [
            "( AND ( JOIN [ opposite of ] [ pharmacology ] ) ( JOIN ( R [ field of study ] ) [ pharmacology ] ) )",
            "( AND ( JOIN [ contraindication ] [ pharmacology ] ) ( JOIN ( R [ field of study ] ) [ pharmacology ] ) )",
            "( AND ( JOIN [ has opposite of ] [ pharmacology ] ) ( JOIN ( R [ field of study ] ) [ pharmacology ] ) )",
            "( AND ( JOIN [ opposite of ] [ indication ] ) ( JOIN ( R [ field of study ] ) [ pharmacology ] ) )",
            "( AND ( JOIN [ field of study ] [ pharmacology ] ) ( JOIN ( R [ opposite ] ) [ indication ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ opposite of ] [ indication ] ) ( JOIN ( R [ is the study of ] ) [ pharmacology ] ) )"
    },
    {
        "question": "Question: { What is the title in the official language of an employee of Leo Baekeland? }",
        "predicted_query": [
            "( JOIN ( R [ official language ] ) ( JOIN ( R [ employee ] ) [ Leo Baekeland ] ) )",
            "( JOIN ( R [ language of work ] ) ( JOIN ( R [ employee ] ) [ Leo Baekeland ] ) )",
            "( JOIN ( R [ language spoken, written or signed ] ) ( JOIN ( R [ employer ] ) [ Leo Baekeland ] ) )",
            "( JOIN ( R [ language spoken, written or signed ] ) ( JOIN ( R [ occupation ] ) [ Leo Baekeland ] ) )",
            "( AND ( JOIN [ language spoken, written or signed ] [ English ] ) ( JOIN ( R [ occupation ] ) [ Leo Baekeland ] ) )"
        ],
        "gen_label": "( JOIN ( R [ native label ] ) ( JOIN ( R [ employer ] ) [ Leo Baekeland ] ) )"
    },
    {
        "question": "Question: { What is helium surname, which has cohabitant is Perse }",
        "predicted_query": [
            "( AND ( JOIN [ cohabits with ] [ Perse ] ) ( JOIN ( R [ given name ] ) [ Helium ] ) )",
            "( AND ( JOIN [ cohabitant ] [ Perse ] ) ( JOIN ( R [ family name ] ) [ helium ] ) )",
            "( AND ( JOIN [ spouse ] [ Perse ] ) ( JOIN ( R [ given name ] ) [ Helium ] ) )",
            "( AND ( JOIN [ resident country ] [ Helium ] ) ( JOIN ( R [ spouse ] ) [ Perse ] ) )",
            "( AND ( JOIN [ spouse ] [ Perse ] ) ( JOIN ( R [ family name ] ) [ helium ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ unmarried partner ] [ Perse ] ) ( JOIN ( R [ named after ] ) [ helium ] ) )"
    },
    {
        "question": "Question: { Livermorium has which element symbol? }",
        "predicted_query": [
            "( JOIN ( R [ chemical symbol ] ) ( JOIN ( R [ discoverer ] ) [ Livermorium ] ) )",
            "( JOIN [ element symbol ] [ Livermorium ] )",
            "( AND ( JOIN [ symbol ] [ Lv ] ) ( JOIN ( R [ has part ] ) [ Livermorium ] ) )",
            "( JOIN [ has element symbol ] [ Livermorium ] )",
            "( AND ( JOIN [ atomic number ] [ 115 ] ) ( JOIN ( R [ chemical symbol ] ) [ Livermorium ] ) )"
        ],
        "gen_label": "( JOIN ( R [ element symbol ] ) [ livermorium ] )"
    },
    {
        "question": "Question: { What is the hight of  the studio where filmed of The Deer Hunte ? }",
        "predicted_query": [
            "( JOIN ( R [ height ] ) ( JOIN ( R [ filming location ] ) [ The Deer Hunter ] ) )",
            "( JOIN ( R [ height above sea level ] ) ( JOIN ( R [ location of filming ] ) [ The Deer Hunter ] ) )",
            "( JOIN ( R [ height ] ) ( JOIN ( R [ location of filming ] ) [ The Deer Hunter ] ) )",
            "( AND ( JOIN [ location of activity ] [ The Deer Hunter ] ) ( JOIN ( R [ height ] ) [ The Deer Hunter ] ) )",
            "( JOIN ( R [ elevation ] ) ( JOIN ( R [ location of filming ] ) [ The Deer Hunter ] ) )"
        ],
        "gen_label": "( JOIN ( R [ elevation above sea level ] ) ( JOIN ( R [ filming location ] ) [ The Deer Hunter ] ) )"
    },
    {
        "question": "Question: { Which is Trismegistos Geo ID for Canterbury? }",
        "predicted_query": [
            "( JOIN ( R [ Trismegistos Geo ID ] ) [ Canterbury ] )",
            "( JOIN [ Trismegistos Geo ID ] [ Canterbury ] )",
            "( JOIN ( R [ Trismegistos Geo ID ] ) [ Canterbury ] )",
            "( JOIN ( R [ Trismegistos GeoID ID ] ) [ Canterbury ] )",
            "( AND ( JOIN [ trismegistus.org geo ID ] [ Canterbury ] ) [ Trismegistus ] )"
        ],
        "gen_label": "( JOIN ( R [ Trismegistos Geo ID ] ) [ Canterbury ] )"
    },
    {
        "question": "Question: { Which is the periapsis for 10 Hygiea? }",
        "predicted_query": [
            "( JOIN ( R [ periapsis ] ) [ 10 Hygiea ] )",
            "( [ joined by ] [ periapsis ] [ 10 Hygiea ] )",
            "( JOIN [ periapsis ] [ 10 Hygiea ] )",
            "( JOIN ( R [ has orbital period ] ) [ 10 Hygiea ] )",
            "( JOIN ( R [ perihelion ] ) [ 10 Hygiea ] )"
        ],
        "gen_label": "( JOIN ( R [ periapsis ] ) [ 10 Hygiea ] )"
    },
    {
        "question": "Question: { Who is the son of Hydra? }",
        "predicted_query": [
            "( JOIN [ child ] [ Hydra ] )",
            "( JOIN [ father ] [ Hydra ] )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ parent of ] ) [ Hydra ] ) )",
            "( JOIN ( R [ father ] ) [ Hydra ] )",
            "( AND ( JOIN [ parent of ] [ Hydra ] ) ( JOIN ( R [ child ] ) [ Hydra ] ) )"
        ],
        "gen_label": "( JOIN ( R [ child ] ) ( JOIN ( R [ father ] ) [ Hydra ] ) )"
    },
    {
        "question": "Question: { Who are the inhabitants that are native to the language of English. }",
        "predicted_query": [
            "( JOIN ( R [ native language ] ) ( JOIN ( R [ language of work ] ) [ English ] ) )",
            "( AND ( JOIN [ indigenous language ] [ English ] ) ( JOIN ( R [ inhabited by ] ) [ English language ] ) )",
            "( JOIN ( R [ language spoken, written or signed ] ) ( JOIN ( R [ native to ] ) [ English ] ) )",
            "( JOIN ( R [ native language ] ) ( JOIN ( R [ spoken in ] ) [ English ] ) )",
            "( JOIN [ native language ] [ English ] )"
        ],
        "gen_label": "( JOIN ( R [ population ] ) ( JOIN ( R [ indigenous to ] ) [ English ] ) )"
    },
    {
        "question": "Question: { which has rural cities in the village  of Loire ? }",
        "predicted_query": [
            "( JOIN ( R [ has rural city ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Loire ] ) )",
            "( JOIN [ has rural city ] [ Loire ] )",
            "( JOIN ( R [ has administrative territorial entity ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Loire ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Loire ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ rural city ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Loire ] ) ( JOIN ( R [ contains the administrative territorial entity ] ) [ rural city ] ) )"
        ],
        "gen_label": "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Loire ] ) )"
    },
    {
        "question": "Question: { What are the statistics Canada geographic code of New Brunswick? }",
        "predicted_query": [
            "( JOIN ( R [ Statistics Canada geographic code ] ) [ New Brunswick ] )",
            "( JOIN ( R [ Statistics Canada geographic code ] ) [ New Brunswick ] )",
            "( JOIN ( R [ Statistics Canada geographic code ] ) [ New Brunswick ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ New Brunswick ] ) ( JOIN ( R [ population census geographic code ] ) [ New Brunswick ] ) )",
            "[ JOIN [ JOIN [ question ] ] ]"
        ],
        "gen_label": "( JOIN ( R [ Statistics Canada Geographic code ] ) [ New Brunswick ] )"
    },
    {
        "question": "Question: { What is Jonathan Edwards' European Athletics ID? }",
        "predicted_query": [
            "[ JOIN [ JOIN [ R [ European Athletics ID ] ] ] [ Jonathan Edwards ] ]",
            "( JOIN ( R [ European Athletics ID ] ) [ Jonathan Edwards ] )",
            "( JOIN [ European Athletics ID ] [ Jonathan Edwards ] )",
            "( AND ( JOIN [ European Athletics athlete ID ] [ Jonathan Edwards ] ) ( JOIN ( R [ sport discipline ] ) [ Jonathan Edwards ] ) )",
            "( AND ( JOIN [ European Athletic Association athlete ID ] [ Jonathan Edwards ] ) ( JOIN ( R [ member of ] ) [ European Athletics ] ) )"
        ],
        "gen_label": "( JOIN ( R [ European Athletics athlete ID ] ) [ Jonathan Edwards ] )"
    },
    {
        "question": "Question: { Where was the actress from Frasier born? }",
        "predicted_query": [
            "( JOIN ( R [ place of birth ] ) ( JOIN ( R [ cast member ] ) [ Frasier ] ) )",
            "( JOIN ( R [ place of birth ] ) [ Kelsey Grammer ] )",
            "( JOIN [ place of birth ] [ Frasier ] )",
            "( JOIN [ place of birth ] [ Kelsey Grammer ] )",
            "( AND ( JOIN [ location of establishment ] [ Frasier ] ) ( JOIN ( R [ place of birth ] ) [ Kelsey Grammer ] ) )"
        ],
        "gen_label": "( JOIN ( R [ place of birth ] ) ( JOIN ( R [ cast member ] ) [ Frasier ] ) )"
    },
    {
        "question": "Question: { What is the transfer location for Tokyo International Airport? }",
        "predicted_query": [
            "( JOIN ( R [ transfer location ] ) [ Tokyo International Airport ] )",
            "( JOIN [ transfer location ] [ Tokyo International Airport ] )",
            "( JOIN ( R [ location of transfer ] ) ( JOIN ( R [ airport served ] ) [ Tokyo International Airport ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ airport served ] ) [ Tokyo International Airport ] ) )",
            "( AND ( JOIN [ has transfer location ] [ Tokyo International Airport ] ) ( JOIN ( R [ located in ] ) [ Tokyo ] ) )"
        ],
        "gen_label": "( JOIN [ airline hub ] [ Tokyo International Airport ] )"
    },
    {
        "question": "Question: { What is Stephanie Mallarme's  MoMA artist ID? }",
        "predicted_query": [
            "( JOIN ( R [ MoMA artist ID ] ) [ Stephanie Mallarmé ] )",
            "( JOIN ( R [ Museum of Modern Art artist ID ] ) [ Stephanie Mallarmé ] )",
            "( JOIN ( R [ MoMA artist ID ] ) [ Stéphane Mallarmé ] )",
            "( JOIN ( R [ MoMA artist ID ] ) [ Stephanie Mallarmé ] )",
            "( AND ( JOIN [ Museum of Modern Art artist ID ] [ Stephanie Mallarmé ] ) ( JOIN ( R [ ID ] ) [ Stephanie Mallarmé ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Museum of Modern Art artist ID ] ) [ Stéphane Mallarmé ] )"
    },
    {
        "question": "Question: { What are the implies of toxaphene whose first aid response is artificial respiration? }",
        "predicted_query": [
            "( AND ( JOIN [ first aid response ] [ artificial respiration ] ) ( JOIN ( R [ has effect ] ) [ toxaphene ] ) )",
            "( AND ( JOIN [ first aid response ] [ artificial respiration ] ) ( JOIN ( R [ has effect ] ) [ toxaphene ] ) )",
            "( AND ( JOIN [ first aid response ] [ artificial respiration ] ) ( JOIN ( R [ has adverse effect ] ) [ toxaphene ] ) )",
            "( AND ( JOIN [ response to ] [ artificial respiration ] ) ( JOIN ( R [ has effect ] ) [ toxaphene ] ) )",
            "( AND ( JOIN [ treatment ] [ artificial respiration ] ) ( JOIN ( R [ has effect ] ) [ toxaphene ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ first aid measures ] [ artificial respiration ] ) ( JOIN ( R [ has effect ] ) [ toxaphene ] ) )"
    },
    {
        "question": "Question: { What is in the  OlimpBase Women's Chess Olympiad player ID of Judit Polgár ? }",
        "predicted_query": [
            "( JOIN ( R [ OlimpBase Women's Chess Olympiad player ID ] ) [ Judit Polgár ] )",
            "( JOIN ( R [ Olympiad player ID ] ) [ Judit Polgár ] )",
            "( JOIN ( R [ OlimpBase Women's Chess Olympiad player ID ] ) [ Judit Polgár ] )",
            "( AND ( JOIN [ OlimpBase player ID ] [ Judit Polgár ] ) ( JOIN ( R [ sport ] ) [ chess ] ) )",
            "( JOIN [ OlimpBase Women's Chess Olympiad player ID ] [ Judit Polgár ] )"
        ],
        "gen_label": "( JOIN ( R [ OlimpBase Women's Chess Olympiad player ID ] ) [ Judit Polgár ] )"
    },
    {
        "question": "Question: { What is the trend of Epictetus's students? }",
        "predicted_query": [
            "( [ joined ] [ trend ] [ Epictetus ] )",
            "( JOIN ( R [ trend ] ) ( JOIN ( R [ student ] ) [ Epictetus ] ) )",
            "( AND ( JOIN [ follower of ] [ Epictetus ] ) ( JOIN ( R [ followed by ] ) [ Epictetus ] ) )",
            "( JOIN [ trend ] [ Epictetus's students ] )",
            "( [ joined ] [ student ] [ Epictetus ] )"
        ],
        "gen_label": "( JOIN ( R [ movement ] ) ( JOIN ( R [ student ] ) [ Epictetus ] ) )"
    },
    {
        "question": "Question: { Who is the husband of the child of Emmanuel Bourdieu? }",
        "predicted_query": [
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ child ] ) [ Emmanuel Bourdieu ] ) )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ child ] ) [ Emmanuel Bourdieu ] ) )",
            "( AND ( JOIN [ child ] [ Emmanuel Bourdieu ] ) ( JOIN ( R [ spouse ] ) [ Emmanuel Bourdieu ] ) )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ child ] ) [ Emmanuel Bourdieu ] ) )",
            "( JOIN [ spouse ] [ Emmanuel Bourdieu ] )"
        ],
        "gen_label": "( JOIN ( R [ spouse ] ) ( JOIN ( R [ mother ] ) [ Emmanuel Bourdieu ] ) )"
    },
    {
        "question": "Question: { What number is succeeded by a binary number with a radix of 3? }",
        "predicted_query": [
            "( JOIN ( R [ base 3 number ] ) ( JOIN ( R [ base number ] ) [ binary number ] ) )",
            "( JOIN ( R [ radix ] ) ( JOIN ( R [ base number ] ) [ binary number ] ) )",
            "( AND ( JOIN [ radix ] [ 3 ] ) ( JOIN ( R [ successor ] ) [ binary number system ] ) )",
            "( JOIN ( R [ base ten numeral system ] ) ( JOIN ( R [ base ten numeral system radix ] ) [ binary number ] ) )",
            "( JOIN [ radix ] [ base 3 ] ) ( JOIN ( R [ successor ] ) [ base 3 numeral system ] )"
        ],
        "gen_label": "( AND ( JOIN [ radix ] [ 3 ] ) ( JOIN ( R [ followed by ] ) [ binary numeral system ] ) )"
    },
    {
        "question": "Question: { What battle did the characters of The Divine Comedy engage in? }",
        "predicted_query": [
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ conflict ] ) [ The Divine Comedy ] ) )",
            "( JOIN [ battle ] [ The Divine Comedy ] )",
            "( AND ( JOIN [ participant ] [ The Divine Comedy ] ) ( JOIN ( R [ participant in the military conflict ] ) [ Battle of the Milvian Bridge ] ) )",
            "( JOIN ( R [ battle ] ) ( JOIN ( R [ participant ] ) [ The Divine Comedy ] ) )",
            "( AND ( JOIN [ conflict ] [ The Divine Comedy ] ) ( JOIN ( R [ participant ] ) [ The Divine Comedy ] ) )"
        ],
        "gen_label": "( JOIN ( R [ conflict ] ) ( JOIN ( R [ characters ] ) [ The Divine Comedy ] ) )"
    },
    {
        "question": "Question: { How is the diplomatic relation between the basin countries of the Euphrates? }",
        "predicted_query": [
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ basin country ] ) [ Euphrates ] ) )",
            "( JOIN [ diplomatic relation ] [ Euphrates ] )",
            "( AND ( JOIN [ country of diplomatic representation ] [ Syria ] ) ( JOIN ( R [ basin country ] ) [ Euphrates ] ) )",
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ basin countries ] ) [ Euphrates ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Euphrates ] ) ( JOIN ( R [ diplomatic relation ] ) [ Euphrates ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ basin country ] ) [ Euphrates ] ) )"
    },
    {
        "question": "Question: { What is Ensemble Gene ID for SCT? }",
        "predicted_query": [
            "( JOIN ( R [ Ensembl Gene ID ] ) [ SCT ] )",
            "( JOIN ( R [ Ensembl gene ID ] ) [ SCT ] )",
            "( JOIN ( R [ Ensembl Gene ID ] ) [ sickle cell trait ] )",
            "( JOIN [ Ensembl Gene ID ] [ SCT ] )",
            "( AND ( JOIN [ Ensembl gene ID for SCT ] [ 1000 Genomes Project ID for SCT ] ) ( JOIN ( R [ question ] ) [ What is Ensembl gene ID for SCT? ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Ensembl gene ID ] ) [ SCT ] )"
    },
    {
        "question": "Question: { \"What are we informed by Jorge Luis Borges, that's known for the Novel The Tell-Tale-Heart?\" }",
        "predicted_query": [
            "( AND ( JOIN [ notable work ] [ The Tell-Tale Heart ] ) ( JOIN ( R [ influenced by ] ) [ Jorge Luis Borges ] ) )",
            "( JOIN ( R [ influenced by ] ) ( JOIN ( R [ notable work ] ) [ The Tell-Tale Heart ] ) )",
            "( AND ( JOIN [ known for ] [ The Tell-Tale-Heart ] ) ( JOIN ( R [ influenced by ] ) [ Jorge Luis Borges ] ) )",
            "( AND ( JOIN [ notable work ] [ The Tell-Tale Heart ] ) ( JOIN ( R [ notable for ] ) [ Jorge Luis Borges ] ) )",
            "( AND ( JOIN [ known for work ] [ The Tell-Tale Heart ] ) ( JOIN ( R [ influenced by ] ) [ Jorge Luis Borges ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ notable work ] [ The Tell-Tale Heart ] ) ( JOIN ( R [ influenced by ] ) [ Jorge Luis Borges ] ) )"
    },
    {
        "question": "Question: { Who is a doctoral student of William Vickrey? }",
        "predicted_query": [
            "( JOIN ( R [ doctoral student ] ) [ William Vickrey ] )",
            "( JOIN [ doctoral student ] [ William Vickrey ] )",
            "( JOIN ( R [ doctoral advisor ] ) ( JOIN ( R [ student ] ) [ William Vickrey ] ) )",
            "( JOIN ( R [ doctoral student ] ) ( JOIN ( R [ student ] ) [ William Vickrey ] ) )",
            "( AND ( JOIN [ student of ] [ William Vickrey ] ) ( JOIN ( R [ doctoral advisor ] ) [ William Vickrey ] ) )"
        ],
        "gen_label": "( JOIN ( R [ doctoral student ] ) [ William Vickrey ] )"
    },
    {
        "question": "Question: { What is Ottomar Anschutz's Photographer's Identities Catalog ID? }",
        "predicted_query": [
            "( JOIN ( R [ Photographer's Identities Catalog ID ] ) [ Ottomar Anschutz ] )",
            "( JOIN ( R [ Photographers' Identities Catalog ID ] ) [ Ottomar Anschutz ] )",
            "[ JOIN [ photographer ] [ Ottomar Anschutz ] ]",
            "( JOIN ( R [ Photographers Identities Catalog ID ] ) [ Ottomar Anschutz ] )",
            "( JOIN ( R [ Photographer's Identities Catalog ID ] ) [ Ottomar Anschütz ] )"
        ],
        "gen_label": "( JOIN ( R [ Photographers’ Identities Catalog ID ] ) [ Ottomar Anschütz ] )"
    },
    {
        "question": "Question: { Which is the GRIN URL for Hypericum? }",
        "predicted_query": [
            "( JOIN ( R [ GRIN taxon ID ] ) [ Hypericum ] )",
            "[ JOIN ( [ joined by ] [ Hypericum ] ) ]",
            "( JOIN [ GRIN URL ] [ Hypericum ] )",
            "[ JOIN [ has GRIN taxon ID ] [ Hypericum ] ]",
            "( JOIN ( R [ GRIN URL ] ) [ Hypericum ] )"
        ],
        "gen_label": "( JOIN ( R [ GRIN URL ] ) [ Hypericum ] )"
    },
    {
        "question": "Question: { What is the Jewish Encyclopedia ID (Russian) for Erich Mendelsohn? }",
        "predicted_query": [
            "( JOIN ( R [ Jewish Encyclopedia ID ( Russian ) ] ) [ Erich Mendelsohn ] )",
            "( JOIN ( R [ Jewish Encyclopedia ID ( Russian ) ] ) [ Erich Mendelsohn ] )",
            "[]",
            "( AND ( JOIN [ Judaica International name ID ( Russian ) ] [ Erich Mendelsohn ] ) ( JOIN ( R [ Jewish Encyclopedia ID ] ) ) )",
            "( JOIN ( R [ Jewish Encyclopedia ID ( Russian ) ] ) [ Erich Mendelsohn ] )"
        ],
        "gen_label": "( JOIN ( R [ Jewish Encyclopedia ID ( Russian ) ] ) [ Erich Mendelsohn ] )"
    },
    {
        "question": "Question: { Which is the sound produced by a leopard? }",
        "predicted_query": [
            "( JOIN ( R [ sound produced ] ) [ leopard ] )",
            "( JOIN [ sound produced ] [ leopard ] )",
            "( JOIN [ sound produced ] [ leopard ] )",
            "( JOIN ( R [ sound produced ] ) [ leopard ] )",
            "( AND ( JOIN [ sound ] [ roar ] ) ( JOIN ( R [ sound produced ] ) [ leopard ] ) )"
        ],
        "gen_label": "( JOIN ( R [ produced sound ] ) [ leopard ] )"
    },
    {
        "question": "Question: { What trees in the arboretum are born in Germina? }",
        "predicted_query": [
            "( JOIN ( R [ genus ] ) ( JOIN ( R [ place of birth ] ) [ Germina ] ) )",
            "( AND ( JOIN [ place of birth ] [ Germina ] ) ( JOIN ( R [ contains the administrative territorial entity ] ) [ tree ] ) )",
            "( JOIN [ born in ] [ Germina ] ) ( JOIN ( R [ taxon ] ) [ arboretum ] )",
            "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ place of birth ] ) [ Germina ] ) )",
            "( AND ( JOIN [ location ] [ Germany ] ) ( JOIN ( R [ parent taxon ] ) [ tree ] ) )"
        ],
        "gen_label": "( JOIN ( R [ species kept ] ) ( JOIN ( R [ place of birth ] ) [ Gemina ] ) )"
    },
    {
        "question": "Question: { What is the Fogis ID of Zlatan Ibrahimovic? }",
        "predicted_query": [
            "( JOIN ( R [ Fogis ID ] ) [ Zlatan Ibrahimovic ] )",
            "( JOIN ( R [ Fogis ID ] ) [ Zlatan Ibrahimovic ] )",
            "( JOIN ( R [ Fogis artist ID ] ) [ Zlatan Ibrahimović ] )",
            "( JOIN ( R [ Fogis ID ] ) [ Zlatan Ibrahimović ] )",
            "( AND ( JOIN [ FOGIS ID ] [ Zlatan Ibrahimovic ] ) [ sport ] )"
        ],
        "gen_label": "( JOIN ( R [ Fogis.se player ID ] ) [ Zlatan Ibrahimović ] )"
    },
    {
        "question": "Question: { What {label} {before was} of {Angle of Entry} ? }",
        "predicted_query": [
            "( JOIN ( R [ label ] ) ( JOIN ( R [ before ] ) [ angle of entry ] ) )",
            "( JOIN [ before was ] [ Angle of Entry ] )",
            "( JOIN ( R [ pre-existing label ] ) ( JOIN ( R [ follows ] ) [ angle of entry ] ) )",
            "( AND ( JOIN [ follows ] [ angle of entry ] ) ( JOIN ( R [ follows ] ) [ The Lord of the Rings ] ) )",
            "( JOIN ( R [ label ] ) ( JOIN ( R [ follows ] ) [ Angle of Entry ] ) )"
        ],
        "gen_label": "( JOIN ( R [ record label ] ) ( JOIN ( R [ follows ] ) [ Angle of Entry ] ) )"
    },
    {
        "question": "Question: { What is Nicolaus Steno's Accademia della Crusca ID? }",
        "predicted_query": [
            "[ JOIN ( R [ Academia della Crusca ID ] ) [ Nicolaus Steno ] ]",
            "[ JOIN [ JOIN [ R [ Academia della Crusca ID ] ]",
            "( JOIN ( R [ Accademia della Crusca ID ] ) [ Nicolaus Steno ] )",
            "( JOIN ( R [ ID of",
            "( AND ( JOIN [ Academy of the Crusca ID ] [ Nicolaus Steno ] ) [ Nicolaus Steno ] )"
        ],
        "gen_label": "( JOIN ( R [ Accademia della Crusca ID ] ) [ Nicolas Steno ] )"
    },
    {
        "question": "Question: { What is it? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Krasnodar Krai ] ) ( JOIN ( R [ follows ] ) [ Vladimir Lenin ] ) )",
            "( JOIN ( R [ has part ] ) ( JOIN ( R [ has material ] ) [ The Last Supper ] ) )",
            "( JOIN [ has part of ] [ what is it? ] )",
            "( JOIN ( R [ has part ] ) ( JOIN ( R [ manufacturer or distributor ] ) [ Samsung Galaxy S III ] ) )",
            "( JOIN [ has item ] [ what is it? ] )"
        ],
        "gen_label": "( AND ( JOIN [ history of topic ] [ media history ] ) ( JOIN ( R [ uses ] ) [ human communication ] ) )"
    },
    {
        "question": "Question: { What is the location of English Civil War, that has coat of arms in Royal Arms of England? }",
        "predicted_query": [
            "( AND ( JOIN [ coat of arms ] [ Royal Arms of England ] ) ( JOIN ( R [ location ] ) [ English Civil War ] ) )",
            "( AND ( JOIN [ has coat of arms ] [ Royal Arms of England ] ) ( JOIN ( R [ location ] ) [ English Civil War ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Royal Arms of England ] ) ( JOIN ( R [ location ] ) [ English Civil War ] ) )",
            "( AND ( JOIN [ location of coat of arms ] [ Royal arms of England ] ) ( JOIN ( R [ participant in ] ) [ English Civil War ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Royal Arms of England ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ English Civil War ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ coat of arms ] [ Royal Arms of England ] ) ( JOIN ( R [ location ] ) [ English Civil War ] ) )"
    },
    {
        "question": "Question: { Which is the run time of the play of Toronto Maple Leafs? }",
        "predicted_query": [
            "( JOIN ( R [ run time ] ) ( JOIN ( R [ play ] ) [ Toronto Maple Leafs ] ) )",
            "( JOIN ( R [ running time ] ) [ Toronto Maple Leafs ] )",
            "( JOIN ( R [ running time ] ) ( JOIN ( R [ team ] ) [ Toronto Maple Leafs ] ) )",
            "( JOIN [ run time ] [ Toronto Maple Leafs ] )",
            "( JOIN ( R [ runtime ] ) ( JOIN ( R [ team ] ) [ Toronto Maple Leafs ] ) )"
        ],
        "gen_label": "( JOIN ( R [ duration ] ) ( JOIN ( R [ sport ] ) [ Toronto Maple Leafs ] ) )"
    },
    {
        "question": "Question: { Who is {wife} of {contestant} of {Dr. Popaul} ? }",
        "predicted_query": [
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ contestant ] ) [ Dr. Popaul ] ) )",
            "( JOIN [ spouse ] [ Dr. Popaul ] )",
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ participant ] ) [ Dr. Popaul ] ) )",
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ opponent ] ) [ Dr. Popaul ] ) )",
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ contestant ] ) [ Dr Popaul ] ) )"
        ],
        "gen_label": "( JOIN ( R [ spouse ] ) ( JOIN ( R [ cast member ] ) [ Dr. Popaul ] ) )"
    },
    {
        "question": "Question: { What is Ext4 maximum size or capacity? }",
        "predicted_query": [
            "( JOIN ( R [ maximum size or capacity ] ) [ Ext4 ] )",
            "( JOIN [ maximum size or capacity ] [ Ext4 ] )",
            "( JOIN ( R [ maximum size or capacity ] ) [ EXT4 ] )",
            "( JOIN [ maximum size or capacity ] [ EXT4 ] )",
            "( AND ( JOIN [ maximum size or capacity ] [ Ext4 ] ) [ question ] )"
        ],
        "gen_label": "( JOIN ( R [ maximum size or capacity ] ) [ ext4 ] )"
    },
    {
        "question": "Question: { why  the animal species are in location of  ken allen? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Ken Allen ] ) ( JOIN ( R [ taxon ] ) [ Ken Allen ] ) )",
            "( JOIN ( R [ has taxon ID ] ) ( JOIN ( R [ location of taxon ] ) [ Ken Allen ] ) )",
            "[ JOIN ( [ taxon ] [ Ken Allen ] ) [ has ] ]",
            "( JOIN ( R [ taxon name ] ) ( JOIN ( R [ location of taxon ] ) [ Ken Allen ] ) )",
            "( JOIN [ location of ] [ Ken Allen ] ) ( JOIN ( R [ taxon author ] ) [ Ken Allen ] )"
        ],
        "gen_label": "( JOIN ( R [ species kept ] ) ( JOIN ( R [ location ] ) [ Ken Allen ] ) )"
    },
    {
        "question": "Question: { Which event did Manu Ginóbili participated in Sudan at the 2012 Summer Olympics? }",
        "predicted_query": [
            "( AND ( JOIN [ participant ] [ Manu Ginóbili ] ) ( JOIN ( R [ location ] ) [ Sudan at the 2012 Summer Olympics ] ) )",
            "( AND ( JOIN [ location ] [ Sudan ] ) ( JOIN ( R [ participant ] ) [ Manu Ginóbili ] ) )",
            "( AND ( JOIN [ participant ] [ Sudan at the 2012 Summer Olympics ] ) ( JOIN ( R [ participant ] ) [ Manu Ginóbili ] ) )",
            "( JOIN ( R [ event ] ) ( JOIN ( R [ participant in ] ) [ Manu Ginóbili ] ) )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ participant ] ) [ Manu Ginóbili ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ participant ] [ Sudan at the 2012 Summer Olympics ] ) ( JOIN ( R [ participant in ] ) [ Manu Ginóbili ] ) )"
    },
    {
        "question": "Question: { Which is {state} of {participated in} by {Ronaldo} ? }",
        "predicted_query": [
            "( JOIN ( R [ country ] ) ( JOIN ( R [ participant ] ) [ Ronaldo ] ) )",
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ country ] ) [ Ronaldo ] ) )",
            "( JOIN [ participates in ] [ Ronaldo ] )",
            "( JOIN ( R [ capital ] ) ( JOIN ( R [ participant in ] ) [ Ronaldo ] ) )",
            "( AND ( JOIN [ participant ] [ Ronaldo ] ) ( JOIN ( R [ country ] ) [ football ] ) )"
        ],
        "gen_label": "( JOIN ( R [ country ] ) ( JOIN ( R [ participant in ] ) [ Ronaldo ] ) )"
    },
    {
        "question": "Question: { How is the medical condition epilepsy treated? }",
        "predicted_query": [
            "( JOIN ( R [ treatment ] ) [ epilepsy ] )",
            "( JOIN ( R [ medical condition ] ) ( JOIN ( R [ treated for ] ) [ epilepsy ] ) )",
            "( JOIN [ medical condition ] [ epilepsy ] )",
            "( AND ( JOIN [ diagnosed with ] [ epilepsy ] ) ( JOIN ( R [ treated for ] ) [ epilepsy ] ) )",
            "( JOIN [ medical condition treated ] [ epilepsy ] )"
        ],
        "gen_label": "( JOIN [ medical condition treated ] [ epilepsy ] )"
    },
    {
        "question": "Question: { Who is the editor of Out? }",
        "predicted_query": [
            "( JOIN ( R [ editor ] ) [ Out ] )",
            "( JOIN [ editor ] [ Out ] )",
            "( JOIN ( R [ publisher ] ) ( JOIN ( R [ editor ] ) [ Out ] ) )",
            "( JOIN ( R [ editor ] ) [ Out ] )",
            "( JOIN [ editor ] [ Out ] )"
        ],
        "gen_label": "( JOIN ( R [ editor ] ) [ Out ] )"
    },
    {
        "question": "Question: { What is on of the is in the commune of 'Aio? }",
        "predicted_query": [
            "( JOIN [ contains the administrative territorial entity ] [ Aio ] )",
            "( JOIN ( R [ capital of ] ) ( JOIN ( R [ country ] ) [ Aio ] ) )",
            "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ country ] ) [ Aio ] ) )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Aio ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Aio ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Aio ] ) )"
        ],
        "gen_label": "( JOIN ( R [ located in/on physical feature ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ 'Aio ] ) )"
    },
    {
        "question": "Question: { What is World Bridge Federation ID   for Omar Sharif }",
        "predicted_query": [
            "( JOIN ( R [ World Bridge Federation ID ] ) [ Omar Sharif ] )",
            "( AND ( JOIN [ WBF ID ] [ Omar Sharif ] ) ( JOIN ( R [ member of ] ) [ World Bridge Federation ] ) )",
            "( JOIN ( R [ World Bridge Federation ID ] ) [ Omar Sharif ] )",
            "( [ joined by ] [ World Bridge Federation ID ] [ Omar Sharif ] )",
            "( JOIN [ World Bridge Federation ID ] [ Omar Sharif ] )"
        ],
        "gen_label": "( JOIN ( R [ World Bridge Federation person ID ] ) [ Omar Sharif ] )"
    },
    {
        "question": "Question: { WHICH IS THE HUMBLE STORE ID OF GRAND THEFT AUTO III }",
        "predicted_query": [
            "( JOIN ( R [ Humble Store ID ] ) [ Grand Theft Auto III ] )",
            "",
            "( JOIN ( R [ Humbug Store ID ] ) [ Grand Theft Auto III ] )",
            "( JOIN ( R [ Humble Store ID ] ) [ Grand Theft Auto III ] )",
            "( JOIN ( R [ Humble Store product ID ] ) [ Grand Theft Auto III ] )"
        ],
        "gen_label": "( JOIN ( R [ Humble Store ID ] ) [ Grand Theft Auto III ] )"
    },
    {
        "question": "Question: { Where is the academic assembly of Rüdiger Zarnekow ? }",
        "predicted_query": [
            "( JOIN ( R [ location ] ) ( JOIN ( R [ member of ] ) [ Rüdiger Zarnekow ] ) )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ place of work ] ) [ Rüdiger Zarnekow ] ) )",
            "( JOIN ( R [ location ] ) ( JOIN ( R [ member of political party ] ) [ Rüdiger Zarnekow ] ) )",
            "( JOIN ( R [ place of meeting ] ) ( JOIN ( R [ member of political party ] ) [ Rüdiger Zarnekow ] ) )",
            "( JOIN [ academic assembly ] [ Rüdiger Zarnekow ] )"
        ],
        "gen_label": "( JOIN ( R [ fabrication method ] ) ( JOIN ( R [ field of work ] ) [ Rüdiger Zarnekow ] ) )"
    },
    {
        "question": "Question: { Which is Ready64 identifier for Frogger? }",
        "predicted_query": [
            "( JOIN [ Ready64 ID ] [ Frogger ] )",
            "( JOIN ( R [ Ready64 ID ] ) [ Frogger ] )",
            "### Faceted Question:",
            "( JOIN ( R [ Ready64 game ID ] ) [ Frogger ] )",
            "[]"
        ],
        "gen_label": "( JOIN ( R [ Ready64 ID ] ) [ Frogger ] )"
    },
    {
        "question": "Question: { What was constructed out of or the systems of mountains to Septimer Pass? }",
        "predicted_query": [
            "( JOIN [ contains the administrative territorial entity ] [ Septimer Pass ] )",
            "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Septimer Pass ] ) )",
            "( JOIN ( R [ made from ] ) ( JOIN ( R [ located in ] ) [ Septimer Pass ] ) )",
            "( AND ( JOIN [ has part of ] [ mountain range ] ) ( JOIN ( R [ contains the administrative territorial entity ] ) [ Septimer Pass ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Septimer Pass ] ) ( JOIN ( R [ made from material ] ) [ mountain range ] ) )"
        ],
        "gen_label": "( JOIN ( R [ made from material ] ) ( JOIN ( R [ mountain range ] ) [ Septimer Pass ] ) )"
    },
    {
        "question": "Question: { What is the motto of Lindsay Lohan's home country? }",
        "predicted_query": [
            "( JOIN ( R [ motto ] ) ( JOIN ( R [ country of citizenship ] ) [ Lindsay Lohan ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Lindsay Lohan ] ) ( JOIN ( R [ motto ] ) [ United States ] ) )",
            "( JOIN ( R [ motto ] ) ( JOIN ( R [ country of origin ] ) [ Lindsay Lohan ] ) )",
            "( JOIN ( R [ motto ] ) ( JOIN ( R [ country ] ) [ Lindsay Lohan ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Lindsay Lohan ] ) ( JOIN ( R [ motto ] ) [ United States ] ) )"
        ],
        "gen_label": "( JOIN ( R [ motto ] ) ( JOIN ( R [ country of citizenship ] ) [ Lindsay Lohan ] ) )"
    },
    {
        "question": "Question: { Where was Romanesque art founded? }",
        "predicted_query": [
            "( JOIN ( R [ place of foundation ] ) [ Romanesque art ] )",
            "( JOIN ( R [ located in ] ) ( JOIN ( R [ genre ] ) [ Romanesque art ] ) )",
            "( JOIN [ founded ] [ Romanesque art ] )",
            "( AND ( JOIN [ location ] [ Romanesque art ] ) ( JOIN ( R [ founded by ] ) [ Romanesque art ] ) )",
            "( JOIN [ founded in ] [ Romanesque art ] )"
        ],
        "gen_label": "( JOIN ( R [ history of topic ] ) ( JOIN ( R [ location ] ) [ Romanesque art ] ) )"
    },
    {
        "question": "Question: { What is the Wiki Aves bird ID for Spheniscidae? }",
        "predicted_query": [
            "{ JOIN [",
            "( JOIN ( R [ Wiki Aves bird ID ] ) [ Spheniscidae ] )",
            "( JOIN ( R [ bird family ID ] ) [ Spheniscidae ] )",
            "( [ JOIN ] [ Wiki Aves bird ID ] )",
            "( AND ( JOIN [ taxon ID ] [ Spheniscidae ] ) ( JOIN ( R [ question ] ) [ What is the Wiki Aves bird ID for Spheniscidae? ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Wiki Aves bird ID ] ) [ penguin ] )"
    },
    {
        "question": "Question: { Anhydrous magnesium sulfate has what Drugbank ID? }",
        "predicted_query": [
            "( JOIN ( R [ DrugBank ID ] ) [ magnesium sulfate ] )",
            "( AND ( JOIN [ DrugBank ID ] [ Anhydrous magnesium sulfate ] ) [ drugbank.com ] )",
            "( AND ( JOIN [ drugbank.com drug ID ] [ Anhydrous magnesium sulfate ] ) ( JOIN ( R [ drugbank.com drug ID ] ) [ magnesium sulfate ] ) )",
            "( JOIN ( R [ DrugBank ID ] ) [ anhydrous magnesium sulfate ] )",
            "( JOIN [ DrugBank ID ] [ anhydrous magnesium sulfate ] )"
        ],
        "gen_label": "( JOIN ( R [ DrugBank ID ] ) [ magnesium sulfate ] )"
    },
    {
        "question": "Question: { Which is the Swedish Academy member ID for Selma Lagerlöf? }",
        "predicted_query": [
            "( JOIN ( R [ Swedish Academy member ID ] ) [ Selma Lagerlöf ] )",
            "[]",
            "( JOIN ( R [ Swedish Academy ID ] ) [ Selma Lagerlöf ] )",
            "( JOIN [ Swedish Academy member ID ] [ Selma Lagerlöf ] )",
            "( JOIN ( R [ member of the Swedish Academy ] ) [ Selma Lagerlöf ] )"
        ],
        "gen_label": "( JOIN ( R [ Swedish Academy member ID ] ) [ Selma Lagerlöf ] )"
    },
    {
        "question": "Question: { Who is the deity of the son of Ogun? }",
        "predicted_query": [
            "( JOIN ( R [ deity ] ) ( JOIN ( R [ father ] ) [ Ogun ] ) )",
            "( JOIN [ deity of ] [ Ogun ] )",
            "( JOIN [ deity ] [ Ogun ] ) AND ( JOIN ( R [ father ] ) [ Oshun ] )",
            "( AND ( JOIN [ worshipped by ] [ Ogun ] ) ( JOIN ( R [ father ] ) [ Oshun ] ) )",
            "( JOIN ( R [ deity ] ) ( JOIN ( R [ child ] ) [ Ogun ] ) )"
        ],
        "gen_label": "( JOIN ( R [ worshipped by ] ) ( JOIN ( R [ mother ] ) [ Ogun ] ) )"
    },
    {
        "question": "Question: { What is Yandex.Music album ID for Revolver ? }",
        "predicted_query": [
            "( JOIN ( R [ Yandex.Music album ID ] ) [ Revolver ] )",
            "( JOIN ( R [ Yandex.Music album ID ] ) [ Revolver ] )",
            "( JOIN ( R [ Yandex.Music album ID ] ) [ Revolver ] )",
            "( JOIN ( R [ Yandex Music album ID ] ) [ Revolver ] )",
            "( [ JOIN ] [ Revolver ] )"
        ],
        "gen_label": "( JOIN ( R [ Yandex Music release ID ] ) [ Revolver ] )"
    },
    {
        "question": "Question: { What principle place has the Grand Mosque of Kut in its village? }",
        "predicted_query": [
            "( AND ( JOIN [ capital ] [ Kut ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Grand Mosque of Kut ] ) )",
            "( JOIN ( R [ capital ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Grand Mosque of Kut ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Grand Mosque of Kut ] ) ( JOIN ( R [ capital ] ) [ Kut ] ) )",
            "( JOIN ( R [ capital of ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Grand Mosque of Kut ] ) )",
            "( AND ( JOIN [ administrative body ] [ Grand Mosque of Kut ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Grand Mosque of Kut ] ) )"
        ],
        "gen_label": "( JOIN ( R [ capital ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Grand Mosque of Kut ] ) )"
    },
    {
        "question": "Question: { what is Kijkwijzer rating for Snow white and the seven dwarfs? }",
        "predicted_query": [
            "( JOIN ( R [ Kijkwijzer rating ] ) [ Snow White and the Seven Dwarfs ] )",
            "( JOIN ( R [ Kijkwijzer rating ] ) [ Snow White and the Seven Dwarfs ] )",
            "( JOIN [ KijkWijzer rating ] [ Snow White and the Seven Dwarfs ] )",
            "( JOIN ( R [ Kijkwijzer rating ] ) [ Snow White and the Seven Dwarfs ] )",
            "( AND ( JOIN [ rating ] [ Kijkwijzer ] ) ( JOIN ( R [ rating ] ) [ Snow White and the Seven Dwarfs ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Kijkwijzer rating ] ) [ Snow White and the Seven Dwarfs ] )"
    },
    {
        "question": "Question: { What is North Dakota's history? }",
        "predicted_query": [
            "[ JOIN",
            "( JOIN ( R [ history ] ) [ North Dakota ] )",
            "( JOIN [ history ] [ North Dakota ] )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ North Dakota ] ) ( JOIN ( R [ follows ] ) [ history ] ) )",
            "( JOIN [ history ] [ North Dakota ] )"
        ],
        "gen_label": "( JOIN [ history of topic ] [ history of North Dakota ] )"
    },
    {
        "question": "Question: { What is Artsy artist ID for Vincent van Gogh ? }",
        "predicted_query": [
            "( JOIN ( R [ Artsy artist ID ] ) [ Vincent van Gogh ] )",
            "( JOIN [ Artsy artist ID ] [ Vincent van Gogh ] )",
            "( JOIN ( R [ Artsy artist ID ] ) [ Vincent van Gogh ] )",
            "( JOIN ( R [ Artsy artist ID ] ) [ Vincent van Gogh ] )",
            "{ JOIN [ Artsy artist ID ] [ Vincent van Gogh ] }"
        ],
        "gen_label": "( JOIN ( R [ Artsy artist ID ] ) [ Vincent van Gogh ] )"
    },
    {
        "question": "Question: { What does deciple Sergey Nikolsky study? }",
        "predicted_query": [
            "( JOIN ( R [ field of study ] ) ( JOIN ( R [ student ] ) [ Sergey Nikolsky ] ) )",
            "( JOIN [ studied by ] [ Sergey Nikolsky ] )",
            "( JOIN ( R [ student ] ) ( JOIN ( R [ field of work ] ) [ Sergey Nikolsky ] ) )",
            "( JOIN ( R [ field of study ] ) ( JOIN ( R [ student ] ) [ Sergey Nikolsky ] ) )",
            "( AND ( JOIN [ studied at ] [ Sergey Nikolsky ] ) ( JOIN ( R [ field of work ] ) [ deciple ] ) )"
        ],
        "gen_label": "( JOIN ( R [ field of work ] ) ( JOIN ( R [ student ] ) [ Sergey Nikolsky ] ) )"
    },
    {
        "question": "Question: { What is INAO product ID for Champagne ? }",
        "predicted_query": [
            "( JOIN ( R [ INAO product ID ] ) [ Champagne ] )",
            "( JOIN ( R [ INAO product ID ] ) [ Champagne ] )",
            "( JOIN [ INAO product ID ] [ Champagne ] )",
            "[ JOIN ( R [ INAO product ID for wine ] ) [ champagne ] ] ",
            "( JOIN ( R [ INAO product code ] ) [ Champagne ] )"
        ],
        "gen_label": "( JOIN ( R [ INAO product ID ] ) [ champagne ] )"
    },
    {
        "question": "Question: { What does caffeine physically relates with? }",
        "predicted_query": [
            "( JOIN [ physically relates to ] [ caffeine ] )",
            "( JOIN ( R [ has physical relation ] ) ( JOIN ( R [ drug ] ) [ caffeine ] ) )",
            "( AND ( JOIN [ contains the chemical structure of ] [ caffeine ] ) ( JOIN ( R [ has physical relation ] ) [ caffeine ] ) )",
            "( JOIN [ physical relates to ] [ caffeine ] )",
            "( JOIN ( R [ chemical compound ] ) ( JOIN ( R [ has physical property ] ) [ caffeine ] ) )"
        ],
        "gen_label": "( JOIN [ physically interacts with ] [ caffeine ] )"
    },
    {
        "question": "Question: { Where did the daughter of Stephen Uros I of Serbia die? }",
        "predicted_query": [
            "( JOIN ( R [ location of death ] ) ( JOIN ( R [ parent ] ) [ Stephen Uroš I of Serbia ] ) )",
            "( JOIN ( R [ place of death ] ) ( JOIN ( R [ child ] ) [ Stephen Uroš I of Serbia ] ) )",
            "( AND ( JOIN [ location of demise ] [ Serbia ] ) ( JOIN ( R [ child ] ) [ Stephen Uroš I of Serbia ] ) )",
            "( JOIN [ place of death ] [ daughter of Stephen Uros I of Serbia ] )",
            "( JOIN ( R [ place of death ] ) ( JOIN ( R [ child ] ) [ Stephen Uroš I of Serbia ] ) )"
        ],
        "gen_label": "( JOIN ( R [ place of death ] ) ( JOIN ( R [ mother ] ) [ Stephen Uroš I of Serbia ] ) )"
    },
    {
        "question": "Question: { Which county seat of Bridgetown has a member of an African, Caribbean or Pacific Group of States? }",
        "predicted_query": [
            "( AND ( JOIN [ member of ] [ African, Caribbean, and Pacific Group of States ] ) ( JOIN ( R [ capital ] ) [ Bridgetown ] ) )",
            "( AND ( JOIN [ member of ] [ African, Caribbean and Pacific Group of States ] ) ( JOIN ( R [ capital ] ) [ Bridgetown ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Bridgetown ] ) ( JOIN ( R [ member of ] ) [ African, Caribbean, and Pacific Group of States ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Bridgetown ] ) ( JOIN ( R [ member of ] ) [ African, Caribbean, and Pacific Group of States ] ) )",
            "( AND ( JOIN [ member of ] [ African Caribbean Pacific Group of States ] ) ( JOIN ( R [ capital ] ) [ Bridgetown ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ member of ] [ Organisation of African, Caribbean and Pacific States ] ) ( JOIN ( R [ capital of ] ) [ Bridgetown ] ) )"
    },
    {
        "question": "Question: { What is Lady Gaga's significant works with record producer RedOne? }",
        "predicted_query": [
            "( JOIN ( R [ significant work ] ) ( JOIN ( R [ record producer ] ) [ Lady Gaga ] ) )",
            "( JOIN ( R [ notable work ] ) ( JOIN ( R [ producer ] ) [ Lady Gaga ] ) )",
            "( JOIN [ significant works ] [ RedOne ] )",
            "( AND ( JOIN [ has field ] [ record producer ] ) ( JOIN ( R [ notable work ] ) [ Lady Gaga ] ) )",
            "( AND ( JOIN [ employer ] [ RedOne ] ) ( JOIN ( R [ work ] ) [ Lady Gaga ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ producer ] [ RedOne ] ) ( JOIN ( R [ notable work ] ) [ Lady Gaga ] ) )"
    },
    {
        "question": "Question: { Which is the ORCID iD of Steven Pinker? }",
        "predicted_query": [
            "( JOIN ( R [ ORCID iD ] ) [ Steven Pinker ] )",
            "( [ joined by ] [ ORCID ID ] [ Steven Pinker ] )",
            "( JOIN ( R [ ORCID ID ] ) [ Steven Pinker ] )",
            "( JOIN [ ORCID iD ] [ Steven Pinker ] )",
            "( JOIN ( R [ ORCID iD ] ) [ Steven Pinker ] )"
        ],
        "gen_label": "( JOIN ( R [ ORCID iD ] ) [ Steven Pinker ] )"
    },
    {
        "question": "Question: { \"Which is {twin city} of {Hanoi}, that has {has states} is {Praga-Południe} ?\" }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Praga-Południe ] ) ( JOIN ( R [ twinned administrative body ] ) [ Hanoi ] ) )",
            "( AND ( JOIN [ has administrative territorial entity ] [ Praga-Południe ] ) ( JOIN ( R [ twinned administrative body ] ) [ Hanoi ] ) )",
            "[ JOIN ( R [ twinned",
            "[ JOIN ( R [ twinned administrative",
            "( AND ( JOIN [ has administrative territorial entity ] [ Praga-Południe ] ) ( JOIN ( R [ twin city ] ) [ Hanoi ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ contains the administrative territorial entity ] [ Praga-Południe ] ) ( JOIN ( R [ twinned administrative body ] ) [ Hanoi ] ) )"
    },
    {
        "question": "Question: { Who is the county seat of the Nordic Council? }",
        "predicted_query": [
            "( JOIN ( R [ capital ] ) ( JOIN ( R [ member of ] ) [ Nordic Council ] ) )",
            "( JOIN [ capital of ] [ Nordic Council ] )",
            "( JOIN ( R [ capital of ] ) ( JOIN ( R [ member of ] ) [ Nordic Council ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Nordic Council ] ) ( JOIN ( R [ capital ] ) [ Nordic Council ] ) )",
            "( JOIN ( R [ seat ] ) ( JOIN ( R [ member of ] ) [ Nordic Council ] ) )"
        ],
        "gen_label": "( JOIN ( R [ capital of ] ) ( JOIN ( R [ headquarters location ] ) [ Nordic Council ] ) )"
    },
    {
        "question": "Question: { What type of fuel is found in the species of human teeth? }",
        "predicted_query": [
            "( JOIN ( R [ fuel type ] ) ( JOIN ( R [ taxon ] ) [ human teeth ] ) )",
            "( JOIN [ fuel type ] [ human teeth ] )",
            "( AND ( JOIN [ contains ] [ fuel ] ) ( JOIN ( R [ taxon ] ) [ human teeth ] ) )",
            "( JOIN ( R [ fuel type ] ) ( JOIN ( R [ taxon of ] ) [ human teeth ] ) )",
            "( AND ( JOIN [ energy carrier ] [ fuel ] ) ( JOIN ( R [ taxon ] ) [ human teeth ] ) )"
        ],
        "gen_label": "( JOIN ( R [ source of energy ] ) ( JOIN ( R [ found in taxon ] ) [ human tooth ] ) )"
    },
    {
        "question": "Question: { What genre of music is played by Brynbella the Seat of G. Piozzi Esqr? What venue are they performing? }",
        "predicted_query": [
            "( AND ( JOIN [ genre ] [ classical music ] ) ( JOIN ( R [ venue ] ) [ Brynbella the Seat of G. Piozzi Esqr ] ) )",
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ venue ] ) [ Brynbella the Seat of G. Piozzi Esqr ] ) )",
            "( AND ( JOIN [ location of performance ] [ G. Piozzi Esqr's seat ] ) ( JOIN ( R [ genre ] ) [ Brynbella ] ) )",
            "( AND ( JOIN [ performer ] [ Brynbella the Seat of G. Piozzi Esqr ] ) ( JOIN ( R [ genre ] ) [ music ] ) )",
            "( JOIN [ genre performed ] [ Brynbella the Seat of G. Piozzi Esqr ] )"
        ],
        "gen_label": "( JOIN ( R [ genre ] ) ( JOIN ( R [ published in ] ) [ Brynbella the Seat of G. Piozzi Esqr ] ) )"
    },
    {
        "question": "Question: { What is displacement treated by  cancer ? }",
        "predicted_query": [
            "( JOIN [ treated by ] [ cancer ] )",
            "( JOIN ( R [ treated for ] ) ( JOIN ( R [ diagnosed with ] ) [ cancer ] ) )",
            "( JOIN ( R [ treatment of ] ) ( JOIN ( R [ diagnosed with ] ) [ cancer ] ) )",
            "( AND ( JOIN [ treated by ] [ cancer ] ) ( JOIN ( R [ has treatment ] ) [ cancer ] ) )",
            "( JOIN [ treated for ] [ cancer ] ) ( JOIN ( R [ has treatment for ] ) [ cancer ] )"
        ],
        "gen_label": "( JOIN ( R [ mass ] ) ( JOIN ( R [ drug or therapy used for treatment ] ) [ cancer ] ) )"
    },
    {
        "question": "Question: { What is Michael Manley's son's title? }",
        "predicted_query": [
            "( JOIN ( R [ father ] ) ( JOIN ( R [ occupation ] ) [ Michael Manley ] ) )",
            "( JOIN ( R [ title ] ) ( JOIN ( R [ child ] ) [ Michael Manley ] ) )",
            "( JOIN ( R [ child of ] ) ( JOIN ( R [ occupation ] ) [ Michael Manley ] ) )",
            "( AND ( JOIN [ parent of ] [ Michael Manley ] ) ( JOIN ( R [ given name ] ) [ Michael Manley ] ) )",
            "( JOIN [ son ] [ Michael Manley ] )"
        ],
        "gen_label": "( JOIN ( R [ award received ] ) ( JOIN ( R [ father ] ) [ Michael Manley ] ) )"
    },
    {
        "question": "Question: { When was faith of NGC 3982 first described? }",
        "predicted_query": [
            "( JOIN ( R [ first described ] ) ( JOIN ( R [ religion ] ) [ NGC 3982 ] ) )",
            "( JOIN ( R [ faith ] ) ( JOIN ( R [ first described ] ) [ NGC 3982 ] ) )",
            "( JOIN ( R [ date of first description ] ) ( JOIN ( R [ faith ] ) [ NGC 3982 ] ) )",
            "( AND ( JOIN [ discovered by ] [ NGC 3982 ] ) ( JOIN ( R [ first described in ] ) [ faith ] ) )",
            "( JOIN [ first described ] [ faith of NGC 3982 ] )"
        ],
        "gen_label": "( JOIN ( R [ religion or worldview ] ) ( JOIN ( R [ discoverer or inventor ] ) [ Q735779 ] ) )"
    },
    {
        "question": "Question: { What is the series that comes before the 37th Venice International Film Festival? }",
        "predicted_query": [
            "( JOIN ( R [ series ] ) ( JOIN ( R [ follows ] ) [ 37th Venice International Film Festival ] ) )",
            "( JOIN ( R [ follows ] ) ( JOIN ( R [ part of the series ] ) [ 37th Venice International Film Festival ] ) )",
            "( AND ( JOIN [ preceded by ] [ 37th Venice International Film Festival ] ) ( JOIN ( R [ part of the series ] ) [ Venice International Film Festival ] ) )",
            "( JOIN [ series ] [ 37th Venice International Film Festival ] )",
            "( JOIN ( R [ series ] ) ( JOIN ( R [ preceded by ] ) [ 37th Venice International Film Festival ] ) )"
        ],
        "gen_label": "( JOIN ( R [ part of the series ] ) ( JOIN ( R [ followed by ] ) [ 37th Venice International Film Festival ] ) )"
    },
    {
        "question": "Question: { How many out of school children come from absinthe? }",
        "predicted_query": [
            "( JOIN ( R [ number of out-of-school children ] ) ( JOIN ( R [ country of origin ] ) [ absinthe ] ) )",
            "( AND ( JOIN [ has population ] [ absinthe ] ) ( JOIN ( R [ affected by ] ) [ out-of-school children ] ) )",
            "( JOIN ( R [ number of children out of school ] ) ( JOIN ( R [ country of origin ] ) [ absinthe ] ) )",
            "( JOIN [ number of out-of-school children ] [ absinthe ] )",
            "( JOIN ( R [ number of out-of-school children ] ) ( JOIN ( R [ country of manufacture ] ) [ absinthe ] ) )"
        ],
        "gen_label": "( JOIN ( R [ number of out-of-school children ] ) ( JOIN ( R [ country of origin ] ) [ absinthe ] ) )"
    },
    {
        "question": "Question: { What are the municipalities of the sovereign state of Guarulhos? }",
        "predicted_query": [
            "( JOIN ( [ capital ] ) [ Guarulhos ] )",
            "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ country ] ) [ Guarulhos ] ) )",
            "( JOIN ( R [ has administrative territorial entity ] ) ( JOIN ( R [ country ] ) [ Guarulhos ] ) )",
            "( JOIN ( R [ country ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Guarulhos ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Guarulhos ] ) ( JOIN ( R [ country ] ) [ Guarulhos ] ) )"
        ],
        "gen_label": "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ country ] ) [ Guarulhos ] ) )"
    },
    {
        "question": "Question: { Which is AWLD status of  official language of Mamluk Sultanate. }",
        "predicted_query": [
            "( JOIN ( R [ AWLD status ] ) [ Mamluk Sultanate ] )",
            "( JOIN ( R [ AWL-DL status ] ) [ Mamluk Sultanate ] )",
            "( AND ( JOIN [ official language ] [ Mamluk Sultanate ] ) ( JOIN ( R [ official language ] ) [ Mamluk Sultanate ] ) )",
            "( JOIN [ AWLD status ] [ official language of Mamluk Sultanate ] )",
            "( AND ( JOIN [ language family ] [ Afro-Asiatic languages ] ) ( JOIN ( R [ official language ] ) [ Mamluk Sultanate ] ) )"
        ],
        "gen_label": "( JOIN ( R [ UNESCO language status ] ) ( JOIN ( R [ official language ] ) [ Mamluk Sultanate ] ) )"
    },
    {
        "question": "Question: { which  period covered of mentioned in of little brother? }",
        "predicted_query": [
            "( JOIN ( R [ period covered ] ) ( JOIN ( R [ mentioned in ] ) [ Little Brother ] ) )",
            "( JOIN ( R [ covered by ] ) ( JOIN ( R [ mentioned in ] ) [ Little Brother ] ) )",
            "( JOIN [ covered by ] [ little brother ] )",
            "( JOIN [ period covered ] [ Little Brother ] )",
            "( AND ( JOIN [ mentioned in ] [ Little Brother ] ) ( JOIN ( R [ covers ] ) [ Little Brother ] ) )"
        ],
        "gen_label": "( JOIN ( R [ set in period ] ) ( JOIN ( R [ present in work ] ) [ Little Brother ] ) )"
    },
    {
        "question": "Question: { who script of created on language of fire line hunting ? }",
        "predicted_query": [
            "( JOIN ( R [ language of fire line hunting ] ) ( JOIN ( R [ creator ] ) [ The Language of Fire ] ) )",
            "[what is the script of created on language of fire line hunting?]",
            "( JOIN ( R [ spoken in ] ) ( JOIN ( R [ language of work ] ) [ Fire Line: Hunting ] ) )",
            "( JOIN [ spoken in ] [ hunting ] ) ( JOIN ( R [ language of work ] ) [ Fire Line ] )",
            "( JOIN [ language of fire line hunting ] [ hunting ] )"
        ],
        "gen_label": "( JOIN ( R [ writing system ] ) ( JOIN ( R [ original language of film or TV show ] ) [ Fire Line Hunting ] ) )"
    },
    {
        "question": "Question: { Which is the FilmTv.it person ID of George Harrison? }",
        "predicted_query": [
            "( JOIN ( R [ FilmTv.it person ID ] ) [ George Harrison ] )",
            "( JOIN ( R [ FilmTV.it person ID ] ) [ George Harrison ] )",
            "( JOIN [ FilmTv.it person ID ] [ George Harrison ] )",
            "( JOIN ( R [ FilmTv.it person ID ] ) [ George Harrison ] )",
            "( JOIN ( R [ FilmTv.it person ID ] ) [ George Harrison ] )"
        ],
        "gen_label": "( JOIN ( R [ FilmTv.it person ID ] ) [ George Harrison ] )"
    },
    {
        "question": "Question: { Which label is preceded by Dr. Hee? }",
        "predicted_query": [
            "( JOIN ( R [ label ] ) ( JOIN ( R [ doctoral advisor ] ) [ Hee-Jin Kim ] ) )",
            "( JOIN [ preceded by ] [ Dr. Hee ] )",
            "( JOIN ( R [ followed by ] ) ( JOIN ( R [ doctoral advisor ] ) [ Hee-Jin Kim ] ) )",
            "( JOIN [ label preceded by ] [ Dr. Hee ] )",
            "( AND ( JOIN [ follows work ] [ Dr. Hee ] ) ( JOIN ( R [ labelled with ] ) [ Dr. Hee ] ) )"
        ],
        "gen_label": "( JOIN ( R [ record label ] ) ( JOIN ( R [ follows ] ) [ Dr. Hee ] ) )"
    },
    {
        "question": "Question: { Who has a diplomatic relation with India and holds the loyalty of Jose Miguel Carrera del Pica? }",
        "predicted_query": [
            "( AND ( JOIN [ diplomatic relation ] [ India ] ) ( JOIN ( R [ homeland ] ) [ José Miguel Carrera ] ) )",
            "[ ( JOIN [ has diplomatic relations ] [ India ] ) [ has loyalty of ] [ José Miguel Carrera del Pica ] ]",
            "( AND ( JOIN [ has diplomatic relations with ] [ India ] ) ( JOIN ( R [ homeland ] ) [ José Miguel Carrera ] ) )",
            "( AND ( JOIN [ diplomatic relation ] [ India ] ) ( JOIN ( R [ influenced by ] ) [ José Miguel Carrera ] ) )",
            "( AND ( JOIN [ diplomatic relations ] [ India ] ) ( JOIN ( R [ place of death ] ) [ José Miguel Carrera ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ diplomatic relation ] [ India ] ) ( JOIN ( R [ allegiance ] ) [ Jose Miguel Carrera ] ) )"
    },
    {
        "question": "Question: { WHICH IS LOCATED ON STREET OF NATIONAL TECHNICAL MUSEUM }",
        "predicted_query": [
            "( JOIN ( R [ located on ] ) ( JOIN ( R [ located in ] ) [ National Technical Museum ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ located in ] ) [ National Technical Museum ] ) )",
            "( JOIN [ located on street ] [ National Technical Museum ] )",
            "( JOIN ( R [ place of establishment ] ) ( JOIN ( R [ located in ] ) [ National Technical Museum ] ) )",
            "( JOIN ( R [ located on ] ) ( JOIN ( R [ located in ] ) [ National Technical Museum ] ) )"
        ],
        "gen_label": "( JOIN ( R [ located on street ] ) [ National Technical Museum building ] )"
    },
    {
        "question": "Question: { What is the etymology of ampere, where the biological sex is a male? }",
        "predicted_query": [
            "( AND ( JOIN [ sex ] [ male ] ) ( JOIN ( R [ etymology ] ) [ ampere ] ) )",
            "( JOIN ( R [ etymology ] ) ( JOIN ( R [ sex or gender ] ) [ ampere ] ) )",
            "( AND ( JOIN [ biological sex ] [ male ] ) ( JOIN ( R [ etymology ] ) [ ampere ] ) )",
            "( JOIN ( R [ etymology ] ) ( JOIN ( R [ sex ] ) [ male ] ) )",
            "( JOIN ( R [ etymology ] ) ( JOIN ( R [ sex ] ) [ male ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ sex or gender ] [ male ] ) ( JOIN ( R [ named after ] ) [ ampere ] ) )"
    },
    {
        "question": "Question: { What is KANTL member ID for Otto Jespersen ? }",
        "predicted_query": [
            "[ JOIN ( R [ KANTL member ID ] ) [ Otto Jespersen ] ]",
            "( JOIN [ KANTL member ID ] [ Otto Jespersen ] )",
            "[ JOIN ( R [ KANTL member ID ] ) [ Otto Jespers",
            "( JOIN ( R [ KantL member ID ] ) [ Otto Jespersen ] )",
            "["
        ],
        "gen_label": "( JOIN ( R [ KANTL member ID ] ) [ Otto Jespersen ] )"
    },
    {
        "question": "Question: { \"How is {found in species} of {citric acid}, which has {type genus} is {Carl Linnaeus} ?\" }",
        "predicted_query": [
            "( AND ( JOIN [ taxon author ] [ Carl Linnaeus ] ) ( JOIN ( R [ found in ] ) [ citric acid ] ) )",
            "( AND ( JOIN [ type genus ] [ Carl Linnaeus ] ) ( JOIN ( R [ found in ] ) [ citric acid ] ) )",
            "( JOIN [ type genus ] [ Carl Linnaeus ] ) ( JOIN ( R [ found in species ] ) [ citric acid ] )",
            "( AND ( JOIN [ contains the taxon ] [ citric acid ] ) ( JOIN ( R [ taxon author ] ) [ Carl Linnaeus ] ) )",
            "( AND ( JOIN [ taxon author ] [ Carl Linnaeus ] ) ( JOIN ( R [ contains chemically ] ) [ citric acid ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ taxonomic type ] [ Carl Linnaeus ] ) ( JOIN ( R [ found in taxon ] ) [ citric acid ] ) )"
    },
    {
        "question": "Question: { What is the asteroid ID given by DAMIT for 10 Hygiea? }",
        "predicted_query": [
            "( JOIN ( R [ asteroid ID ] ) [ 10 Hygiea ] )",
            "( AND ( JOIN [ Damit asteroid ID ] [ 10 Hygiea ] ) ( JOIN ( R [ question ] ) [ 10 Hygiea ] ) )",
            "( JOIN ( R [ DAMIT asteroid ID ] ) [ 10 Hygiea ] )",
            "( JOIN [ asteroid ID given by DAMIT ] [ 10 Hygiea ] )",
            "( JOIN ( R [ Damit asteroid ID ] ) [ 10 Hygiea ] )"
        ],
        "gen_label": "( JOIN ( R [ DAMIT asteroid ID ] ) [ 10 Hygiea ] )"
    },
    {
        "question": "Question: { In which state is Pamlico Sound located? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Pamlico Sound ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Pamlico Sound ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ located in the body of water ] ) [ Pamlico Sound ] ) )",
            "( JOIN [ located in the administrative territorial entity ] [ Pamlico Sound ] )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Pamlico Sound ] ) )",
            "( JOIN [ located in the political entity ] [ Pamlico Sound ] )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country ] ) [ Pamlico Sound ] ) )"
    },
    {
        "question": "Question: { What was previously the employment of Molly Grue? \nWhere is Molly Grue working now? }",
        "predicted_query": [
            "( JOIN ( R [ employer ] ) ( JOIN ( R [ occupation ] ) [ Molly Grue ] ) )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ employer ] ) [ Molly Grue ] ) )",
            "( AND ( JOIN [ location of work ] [ Molly Grue ] ) ( JOIN ( R [ occupation ] ) [ Molly Grue ] ) )",
            "( JOIN [ employment ] [ Molly Grue ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Molly Grue ] ) ( JOIN ( R [ occupation ] ) [ Molly Grue ] ) )"
        ],
        "gen_label": "( JOIN ( R [ field of this occupation ] ) ( JOIN ( R [ occupation ] ) [ Molly Grue ] ) )"
    },
    {
        "question": "Question: { Who {died on} at {patron saint} of {dog} ? }",
        "predicted_query": [
            "( JOIN ( R [ patron saint ] ) ( JOIN ( R [ has died ] ) [ dog ] ) )",
            "( AND ( JOIN [ patron saint of ] [ dog ] ) ( JOIN ( R [ death place ] ) [ Saint Bernard ] ) )",
            "( AND ( JOIN [ patron saint ] [ Saint Francis of Assisi ] ) ( JOIN ( R [ death place ] ) [ dog ] ) )",
            "( JOIN ( R [ death place ] ) ( JOIN ( R [ patron saint ] ) [ dog ] ) )",
            "( JOIN ( R [ died on ] ) ( JOIN ( R [ patron saint ] ) [ dog ] ) )"
        ],
        "gen_label": "( JOIN ( R [ date of death ] ) ( JOIN ( R [ patron saint ] ) [ dog ] ) )"
    },
    {
        "question": "Question: { Which administrative unit is adjacent to Clementi, Singapore? }",
        "predicted_query": [
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Clementi ] ) )",
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ country ] ) [ Clementi ] ) )",
            "( JOIN [ shares border with ] [ Clementi ] )",
            "( AND ( JOIN [ shares border with ] [ Clementi, Singapore ] ) ( JOIN ( R [ shares border with ] ) [ Singapore ] ) )",
            "( AND ( JOIN [ shares border with ] [ Clementi ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Singapore ] ) )"
        ],
        "gen_label": "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ shares border with ] ) [ Clementi ] ) )"
    },
    {
        "question": "Question: { What is reward program for KLM ? }",
        "predicted_query": [
            "( JOIN ( R [ reward program ] ) [ KLM ] )",
            "( JOIN [ reward program ] [ KLM ] )",
            "( JOIN ( R [ reward program ] ) [ KLM ] )",
            "[joint (recipient of award received) [K",
            "( JOIN [ reward program ] [ KLM ] )"
        ],
        "gen_label": "( JOIN [ reward program ] [ KLM ] )"
    },
    {
        "question": "Question: { Which is the illustrator created Goodnight Moon, and also died from Alzheimers disease? }",
        "predicted_query": [
            "( AND ( JOIN [ cause of death ] [ Alzheimer's disease ] ) ( JOIN ( R [ illustrator ] ) [ Goodnight Moon ] ) )",
            "( JOIN ( R [ has medical condition ] ) ( JOIN ( R [ creator ] ) [ Goodnight Moon ] ) )",
            "( AND ( JOIN [ causes or contributes to ] [ Alzheimer's disease ] ) ( JOIN ( R [ illustrator ] ) [ Goodnight Moon ] ) )",
            "( AND ( JOIN [ has medical condition ] [ Alzheimer's disease ] ) ( JOIN ( R [ illustrator ] ) [ Goodnight Moon ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Alzheimer's disease ] ) ( JOIN ( R [ creator ] ) [ Goodnight Moon ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ cause of death ] [ Alzheimer's disease ] ) ( JOIN ( R [ illustrator ] ) [ Goodnight Moon ] ) )"
    },
    {
        "question": "Question: { What is the diplomatic relation that originates at The Age of Innocence? }",
        "predicted_query": [
            "( AND ( JOIN [ diplomatic relation ] [ The Age of Innocence ] ) ( JOIN ( R [ has diplomatic relation ] ) [ The Age of Innocence ] ) )",
            "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ place of origin ] ) [ The Age of Innocence ] ) )",
            "( JOIN [ diplomatic relation ] [ The Age of Innocence ] )",
            "( AND ( JOIN [ has diplomatic relation ] [ The Age of Innocence ] ) ( JOIN ( R [ influenced by ] ) [ The Age of Innocence ] ) )",
            "( AND ( JOIN [ diplomatic relations ] [ The Age of Innocence ] ) ( JOIN ( R [ diplomatic relations ] ) [ The Age of Innocence ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country of origin ] ) [ The Age of Innocence ] ) )"
    },
    {
        "question": "Question: { What it the Swedish portrait archive for Jons Jacob Berzelius? }",
        "predicted_query": [
            "[ JOIN [ has portrait in ] [ Jons Jakob Berzelius ] ]",
            "( JOIN [ portrait archive ] [ Jons Jacob Berzelius ] )",
            "( JOIN ( R [ portrait archive ] ) [ Jöns Jacob Berzelius ] )",
            "( AND ( JOIN [ has the administrative territorial entity ] [ Swedish portrait archive for Jons Jacob Berzelius ] ) ( JOIN ( R [ depicts ] ) [ Jons Jacob Berzelius ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Sweden ] ) ( JOIN ( R [ depicts ] ) [ Jöns Jacob Berzelius ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Swedish Portrait Archive ID ] ) [ Jöns Jacob Berzelius ] )"
    },
    {
        "question": "Question: { Which is the decorative pattern of the blazer? }",
        "predicted_query": [
            "( JOIN ( R [ decorative pattern ] ) [ blazer ] )",
            "( JOIN [ decorative pattern ] [ blazer ] )",
            "[ { JOIN [ decorative pattern ] [",
            "( JOIN ( R [ decorative pattern ] ) [ blazer ] )",
            "( JOIN [ decorative pattern ] [ blazer ] )"
        ],
        "gen_label": "( JOIN ( R [ has pattern ] ) [ blazer ] )"
    },
    {
        "question": "Question: { {Chrysanthemum} has what {fruit type}? }",
        "predicted_query": [
            "( AND ( JOIN [ fruit type ] [ berry ] ) ( JOIN ( R [ flower ] ) [ chrysanthemum ] ) )",
            "( JOIN [ fruit type ] [ chrysanthemum ] )",
            "( AND ( JOIN [ has taxon ] [ Chrysanthemum ] ) ( JOIN ( R [ has taxon ] ) [ fruit ] ) )",
            "( AND ( JOIN [ product of ] [ fruit ] ) ( JOIN ( R [ has taxon ] ) [ chrysanthemum ] ) )",
            "( JOIN [ fruit type ] [ chrysanthemum ] )"
        ],
        "gen_label": "( JOIN ( R [ has fruit type ] ) [ Chrysanthemum ] )"
    },
    {
        "question": "Question: { What is the hometown of shareholder Paul Boyer de Bouillane? }",
        "predicted_query": [
            "( JOIN ( R [ place of birth ] ) ( JOIN ( R [ shareholder ] ) [ Paul Boyer de Bouillane ] ) )",
            "( JOIN ( R [ shareholder ] ) ( JOIN ( R [ place of birth ] ) [ Paul Boyer de Bouillane ] ) )",
            "( JOIN ( R [ location ] ) ( JOIN ( R [ shareholder ] ) [ Paul Boyer de Bouillane ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ shareholder ] ) [ Paul Boyer de Bouillane ] ) )",
            "( AND ( JOIN [ shares held by ] [ Paul Boyer de Bouillane ] ) ( JOIN ( R [ place of birth ] ) [ Jean-Baptiste Colbert ] ) )"
        ],
        "gen_label": "( JOIN ( R [ owned by ] ) ( JOIN ( R [ residence ] ) [ Paul Boyer de Bouillane ] ) )"
    },
    {
        "question": "Question: { Which is the commander of of Pyotr Bagration? }",
        "predicted_query": [
            "( JOIN ( R [ commander ] ) ( JOIN ( R [ military rank ] ) [ Pyotr Bagration ] ) )",
            "( JOIN ( R [ commander ] ) ( JOIN ( R [ member of ] ) [ Pyotr Bagration ] ) )",
            "( JOIN [ commander ] [ Pyotr Bagration ] )",
            "( JOIN [ commander ] [ Pyotr Bagration ] )",
            "( JOIN ( R [ commander ] ) [ Pyotr Bagration ] )"
        ],
        "gen_label": "( JOIN ( R [ commander of ( DEPRECATED ) ] ) [ Pyotr Bagration ] )"
    },
    {
        "question": "Question: { What Mercosur code uses ironing? }",
        "predicted_query": [
            "( JOIN [ Mercosur code ] [ ironing ] )",
            "( AND ( JOIN [ Mercosur product code ] [ ironing ] ) ( JOIN ( R [ has trade item ] ) [ ironing ] ) )",
            "( JOIN ( R [ Mercosur code ] ) ( JOIN ( R [ uses ] ) [ ironing ] ) )",
            "( AND ( JOIN [ uses ] [ ironing ] ) ( JOIN ( R [ Mercosur product code ] ) [ ironing ] ) )",
            "( AND ( JOIN [ member of ] [ Mercosur ] ) ( JOIN ( R [ has IATA code ] ) [ ironing ] ) )"
        ],
        "gen_label": "( JOIN ( R [ MCN code ] ) ( JOIN ( R [ uses ] ) [ ironing ] ) )"
    },
    {
        "question": "Question: { Which is the branch distributed by You Never Can Tell? }",
        "predicted_query": [
            "( JOIN ( R [ distributor ] ) [ You Never Can Tell ] )",
            "( JOIN ( R [ branch of distribution ] ) [ You Never Can Tell ] )",
            "( JOIN [ distributed by ] [ You Never Can Tell ] )",
            "( JOIN ( R [ distributor ] ) [ You Never Can Tell ] )",
            "( JOIN [ branch distributed by ] [ You Never Can Tell ] )"
        ],
        "gen_label": "( JOIN ( R [ industry ] ) ( JOIN ( R [ distributed by ] ) [ You Never Can Tell ] ) )"
    },
    {
        "question": "Question: { What sport does Kristina Kabatova play? }",
        "predicted_query": [
            "( JOIN [ sport played ] [ Kristina Kabátová ] )",
            "( JOIN ( R [ sport ] ) ( JOIN ( R [ participant ] ) [ Kristina Kabátová ] ) )",
            "( JOIN ( R [ sport played ] ) ( JOIN ( R [ spouse ] ) [ Kristina Kabátová ] ) )",
            "( AND ( JOIN [ practiced in ] [ sport ] ) ( JOIN ( R [ occupation ] ) [ Kristína Kabátová ] ) )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ sport played ] ) [ Kristína Kabátová ] ) )"
        ],
        "gen_label": "( JOIN ( R [ sport ] ) ( JOIN ( R [ sports discipline competed in ] ) [ Kristína Kabátová ] ) )"
    },
    {
        "question": "Question: { What borders the birth place of Johann Pachelbel? }",
        "predicted_query": [
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ place of birth ] ) [ Johann Pachelbel ] ) )",
            "( JOIN [ shares border with ] [ birth place of Johann Pachelbel ] )",
            "( AND ( JOIN [ shares border with ] [ Bavaria ] ) ( JOIN ( R [ place of birth ] ) [ Johann Pachelbel ] ) )",
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ place of birth ] ) [ Johann Pachelbel ] ) )",
            "( AND ( JOIN [ shares border with ] [ Saxony-Anhalt ] ) ( JOIN ( R [ place of birth ] ) [ Johann Pachelbel ] ) )"
        ],
        "gen_label": "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ place of birth ] ) [ Johann Pachelbel ] ) )"
    },
    {
        "question": "Question: { For what musical instrument was Piano Concerto No. 2 composed? }",
        "predicted_query": [
            "( JOIN ( R [ instrument ] ) ( JOIN ( R [ composer ] ) [ Piano Concerto No. 2 ] ) )",
            "( JOIN ( R [ composer ] ) ( JOIN ( R [ genre ] ) [ Piano Concerto No. 2 ] ) )",
            "( JOIN [ musical instrument ] [ piano concerto no. 2 ] )",
            "( JOIN ( R [ has instrument ] ) ( JOIN ( R [ composer ] ) [ Piano Concerto No. 2 ] ) )",
            "( AND ( JOIN [ performer ] [ Piano Concerto No. 2 ] ) ( JOIN ( R [ composer ] ) [ Piano Concerto No. 2 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ instrument ] ) ( JOIN ( R [ composer ] ) [ Piano Concerto No. 2 ] ) )"
    },
    {
        "question": "Question: { What is the hometown of the many-worlds interpretation? }",
        "predicted_query": [
            "( JOIN ( R [ location ] ) ( JOIN ( R [ place of work ] ) [ many-worlds interpretation ] ) )",
            "( JOIN ( R [ place of work ] ) ( JOIN ( R [ influenced by ] ) [ many-worlds interpretation ] ) )",
            "( JOIN [ place of work ] [ many-worlds interpretation ] )",
            "( JOIN ( R [ headquarters location ] ) ( JOIN ( R [ origin ] ) [ many-worlds interpretation ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ many-worlds interpretation ] ) ( JOIN ( R [ place of death ] ) [ Hugh Everett III ] ) )"
        ],
        "gen_label": "( JOIN ( R [ residence ] ) ( JOIN ( R [ creator ] ) [ many-worlds interpretation ] ) )"
    },
    {
        "question": "Question: { What is the FOIH ID of Juniperus? }",
        "predicted_query": [
            "( JOIN ( R [ FOIH ID ] ) [ Juniperus ] )",
            "( JOIN ( R [ FOIH ID ] ) [ Juniperus ] )",
            "( AND ( JOIN [ Freebase infobox ID ] [ Juniperus ] ) ( JOIN ( R [ ID.fr ] ) [ Juniperus ] ) )",
            "( JOIN ( R [ FOIH ID ] ) [ juniper ] )",
            "( JOIN [ FOIH ID ] [ Juniperus ] )"
        ],
        "gen_label": "( JOIN ( R [ FOIH taxon ID ] ) [ Juniperus ] )"
    },
    {
        "question": "Question: { Who gave the  {preceeds} of {game platform} of {Insector X} ? }",
        "predicted_query": [
            "( JOIN ( R [ preceded by ] ) ( JOIN ( R [ platform ] ) [ Insector X ] ) )",
            "( JOIN ( R [ follows ] ) ( JOIN ( R [ platform ] ) [ Insector X ] ) )",
            "( JOIN ( R [ predecessor ] ) ( JOIN ( R [ platform ] ) [ Insector X ] ) )",
            "( AND ( JOIN [ follows ] [ Insector X ] ) ( JOIN ( R [ creator ] ) [ Insector X ] ) )",
            "( JOIN ( R [ precedes ] ) ( JOIN ( R [ platform ] ) [ Insector X ] ) )"
        ],
        "gen_label": "( JOIN ( R [ followed by ] ) ( JOIN ( R [ platform ] ) [ Insector X ] ) )"
    },
    {
        "question": "Question: { What is the population of the birthplace of Gerty Cori? }",
        "predicted_query": [
            "( JOIN ( R [ population ] ) ( JOIN ( R [ place of birth ] ) [ Gerty Cori ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Czech Republic ] ) ( JOIN ( R [ place of birth ] ) [ Gerty Cori ] ) )",
            "( JOIN ( R [ population ] ) ( JOIN ( R [ place of birth ] ) [ Gerty Cori ] ) )",
            "( JOIN ( R [ population ] ) ( JOIN ( R [ birthplace ] ) [ Gerty Cori ] ) )",
            "( JOIN ( R [ population ] ) ( JOIN ( R [ place of birth ] ) [ Gertrude B. Elion ] ) )"
        ],
        "gen_label": "( JOIN ( R [ contains settlement ] ) ( JOIN ( R [ place of birth ] ) [ Gerty Cori ] ) )"
    },
    {
        "question": "Question: { What is consumption rate of petroleum ? }",
        "predicted_query": [
            "( JOIN ( R [ consumption rate ] ) [ petroleum ] )",
            "( JOIN [ consumption rate ] [ petroleum ] )",
            "( JOIN ( R [ consumption rate ] ) [ petroleum ] )",
            "( JOIN [ consumption rate ] [ petroleum ] )",
            "( JOIN ( R [ consumption rate ] ) [ petroleum ] )"
        ],
        "gen_label": "( JOIN ( R [ consumption rate ] ) [ petroleum ] )"
    },
    {
        "question": "Question: { What is the ideology of the Florencio Duran party? }",
        "predicted_query": [
            "( JOIN ( R [ ideology ] ) ( JOIN ( R [ political party ] ) [ Florencio Durán ] ) )",
            "( JOIN ( R [ political ideology ] ) ( JOIN ( R [ member of political party ] ) [ Florencio Durán ] ) )",
            "( AND ( JOIN [ follows ] [ Florencio Durán ] ) ( JOIN ( R [ political orientation ] ) [ Florencio Durán ] ) )",
            "( JOIN [ ideology ] [ Florencio Durán ] )",
            "( JOIN ( R [ ideology ] ) ( JOIN ( R [ member of political party ] ) [ Florencio Durán ] ) )"
        ],
        "gen_label": "( JOIN ( R [ political ideology ] ) ( JOIN ( R [ member of political party ] ) [ Florencio Durán ] ) )"
    },
    {
        "question": "Question: { What is Cale Yarborough's pole position? }",
        "predicted_query": [
            "( JOIN ( R [ pole position ] ) [ Cale Yarborough ] )",
            "[what is the join of the not is not the same as the join of the query history?] whose join is [pole position] whose",
            "( JOIN ( R [ number of poles ] ) [ Cale Yarborough ] )",
            "( [ joined by ] [ pole position ] [ Cale Yarborough ] )",
            "( AND ( JOIN [ has record in ] [ NASCAR.com Driver Database ] ) ( JOIN ( R [ pole position ] ) [ Cale Yarborough ] ) )"
        ],
        "gen_label": "( JOIN [ pole position ] [ Cale Yarborough ] )"
    },
    {
        "question": "Question: { What is first described of subject for Fedor Yevgenyevich Korsh ? }",
        "predicted_query": [
            "( JOIN ( R [ first described ] ) ( JOIN ( R [ subject ] ) [ Fedor Yevgenyevich Korsh ] ) )",
            "( JOIN [ first described of subject ] [ Fedor Yevgenyevich Korsh ] )",
            "( JOIN ( R [ first described of subject ] ) [ Fedor Yevgenyevich Korsh ] )",
            "( AND ( JOIN [ described by ] [ Fedor Yevgenyevich Korsh ] ) ( JOIN ( R [ field of work ] ) [ Fedor Yevgenyevich Korsh ] ) )",
            "( JOIN ( R [ has subject ] ) ( JOIN ( R [ discoverer ] ) [ Fedor Yevgenyevich Korsh ] ) )"
        ],
        "gen_label": "( JOIN ( R [ discoverer or inventor ] ) ( JOIN ( R [ field of work ] ) [ Fyodor Yevgenyevich Korsh ] ) )"
    },
    {
        "question": "Question: { Central African Republic is coat of arms ? }",
        "predicted_query": [
            "( JOIN [ coat of arms ] [ Central African Republic ] )",
            "[ JOIN [ coat of arms ] [ Central African Republic ] ]",
            "( JOIN ( R [ coat of arms ] ) [ Central African Republic ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Central African Republic ] ) ( JOIN ( R [ depicts ] ) [ coat of arms ] ) )",
            "( AND ( JOIN [ depicts ] [ coat of arms ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Central African Republic ] ) )"
        ],
        "gen_label": "( JOIN ( R [ coat of arms ] ) [ Central African Republic ] )"
    },
    {
        "question": "Question: { Who {active in} of {inventor} of {cosmic inflation} ? }",
        "predicted_query": [
            "( JOIN ( R [ active in ] ) ( JOIN ( R [ discoverer or inventor ] ) [ cosmic inflation ] ) )",
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ discoverer ] ) [ cosmic inflation ] ) )",
            "( JOIN [ inventor ] [ cosmic inflation ] )",
            "( JOIN ( R [ member of organization ] ) ( JOIN ( R [ discoverer ] ) [ cosmic inflation ] ) )",
            "( AND ( JOIN [ employer ] [ Cosmic Inflation ] ) ( JOIN ( R [ discoverer ] ) [ cosmic inflation ] ) )"
        ],
        "gen_label": "( JOIN ( R [ work location ] ) ( JOIN ( R [ discoverer or inventor ] ) [ inflation ] ) )"
    },
    {
        "question": "Question: { What are the literary works of Author Heat? }",
        "predicted_query": [
            "( JOIN ( R [ literary work ] ) ( JOIN ( R [ author ] ) [ Heat ] ) )",
            "( JOIN [ literary works ] [ Author Heat ] )",
            "( JOIN ( R [ author ] ) ( JOIN ( R [ work ] ) [ Heat ] ) )",
            "( JOIN ( R [ literary work ] ) ( JOIN ( R [ author ] ) [ Heat ] ) )",
            "( AND ( JOIN [ work location ] [ Heat ] ) ( JOIN ( R [ author ] ) [ Heat ] ) )"
        ],
        "gen_label": "( JOIN ( R [ notable work ] ) ( JOIN ( R [ author ] ) [ Heat ] ) )"
    },
    {
        "question": "Question: { What is the Christian name of Kate Moss, the one that has the Latin script? }",
        "predicted_query": [
            "( AND ( JOIN [ script ] [ Latin ] ) ( JOIN ( R [ given name ] ) [ Kate Moss ] ) )",
            "( JOIN ( R [ written in ] ) ( JOIN ( R [ given name ] ) [ Kate Moss ] ) )",
            "( AND ( JOIN [ writing system ] [ Latin script ] ) ( JOIN ( R [ given name ] ) [ Kate Moss ] ) )",
            "( AND ( JOIN [ has Latin script ] [ Kate Moss ] ) ( JOIN ( R [ given name ] ) [ Kate Moss ] ) )",
            "( AND ( JOIN [ uses Latin script ] ) ( JOIN ( R [ given name ] ) [ Kate Moss ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ writing system ] [ Latin script ] ) ( JOIN ( R [ given name ] ) [ Kate Moss ] ) )"
    },
    {
        "question": "Question: { What is Oireachtas member ID for Seán MacBride ? }",
        "predicted_query": [
            "( JOIN ( R [ Oireachtas member ID ] ) [ Seán MacBride ] )",
            "( [ JOIN ] [ Oireachtas member ID ] )",
            "( JOIN ( R [ Oireachtas member ID ] ) [ Seán MacBride ] )",
            "( JOIN ( R [ Oireachtas Member ID ] ) [ Seán MacBride ] )",
            "( AND ( JOIN [ member of ] [ Oireachtas ] ) ( JOIN ( R [ ID ] ) [ Seán MacBride ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Oireachtas member ID ] ) [ Seán MacBride ] )"
    },
    {
        "question": "Question: { What is an example of a manufacturers label? }",
        "predicted_query": [
            "( JOIN ( R [ has manufacturer's label ] ) [ cassette ] )",
            "( JOIN ( R [ manufacturer's label ] ) [ cassette ] )",
            "( JOIN [ manufacturer's label ] [ example ] )",
            "( AND ( JOIN [ product of ] [ manufacturer's label ] ) ( JOIN ( R [ has part ] ) [ cassette ] ) )",
            "( JOIN [ has manufacturer's label ] [ Coca-Cola ] )"
        ],
        "gen_label": "( JOIN ( R [ product, material, or service produced or provided ] ) ( JOIN ( R [ record label ] ) [ Example ] ) )"
    },
    {
        "question": "Question: { What is the location of death of Antipater, whose denomination is the denomination in ancient Greece? }",
        "predicted_query": [
            "( AND ( JOIN [ denomination ] [ Ancient Greece ] ) ( JOIN ( R [ place of death ] ) [ Antipater ] ) )",
            "[]",
            "( AND ( JOIN [ denominational system ] [ ancient Greece ] ) ( JOIN ( R [ place of death ] ) [ Antipater ] ) )",
            "( AND ( JOIN [ place of death ] [ Ancient Greece ] ) ( JOIN ( R [ denomination ] ) [ Antipater ] ) )",
            "( JOIN [ denomination in ancient Greece ] [ Antipater ] )"
        ],
        "gen_label": "( AND ( JOIN [ religion or worldview ] [ Ancient Greek religion ] ) ( JOIN ( R [ place of death ] ) [ Antipater ] ) )"
    },
    {
        "question": "Question: { What is the Hema Malini PRS Legislative Search MP? }",
        "predicted_query": [
            "( JOIN ( R [ Hema Malini PRS Legislative Search MP ] ) [ politician ] )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ member of political party ] ) [ Hema Malini ] ) )",
            "( JOIN ( R [ PRS Legislative Search MP ID ] ) [ Hema Malini ] )",
            "( AND ( JOIN [ parliamentary constituency ] [ Hema Malini PRS Legislative Search MP ] ) ( JOIN ( R [ member of ] ) [ Hema Malini ] ) )",
            "( JOIN ( R [ Hema Malini PRS Legislative Search MP ID ] ) [ Hema Malini ] )"
        ],
        "gen_label": "( JOIN ( R [ PRS Legislative Research MP ID ] ) [ Hema Malini ] )"
    },
    {
        "question": "Question: { What genre of music does Complete Control produce? }",
        "predicted_query": [
            "( JOIN ( R [ genre of music ] ) ( JOIN ( R [ record label ] ) [ Complete Control ] ) )",
            "( JOIN [ genre of music ] [ Complete Control ] )",
            "( JOIN ( R [ genre ] ) ( JOIN ( R [ record label ] ) [ Complete Control ] ) )",
            "( AND ( JOIN [ genre of work ] [ Complete Control ] ) ( JOIN ( R [ genre ] ) [ Complete Control ] ) )",
            "( AND ( JOIN [ field of work ] [ genre of music ] ) ( JOIN ( R [ record label ] ) [ Complete Control ] ) )"
        ],
        "gen_label": "( JOIN ( R [ genre ] ) ( JOIN ( R [ producer ] ) [ Complete Control ] ) )"
    },
    {
        "question": "Question: { What is the {process} of {construction material} of {Stadshusbron} ? }",
        "predicted_query": [
            "( JOIN ( R [ process ] ) ( JOIN ( R [ material ] ) [ Stadshusbron ] ) )",
            "( JOIN ( R [ material composition ] ) ( JOIN ( R [ material ] ) [ Stadshusbron ] ) )",
            "( JOIN ( R [ process ] ) ( JOIN ( R [ material ] ) [ Stadshusbron ] ) )",
            "( AND ( JOIN [ material or technique ] [ construction material ] ) ( JOIN ( R [ follows ] ) [ Stadshusbron ] ) )",
            "( JOIN [ process ] [ construction material ] ) [ Stadshusbron ]"
        ],
        "gen_label": "( JOIN ( R [ fabrication method ] ) ( JOIN ( R [ made from material ] ) [ Stadshusbron ] ) )"
    },
    {
        "question": "Question: { Which is the MeSH ID for Arctic? }",
        "predicted_query": [
            "( JOIN ( R [ MeSH ID ] ) [ Arctic ] )",
            "( JOIN [ MeSH ID ] [ Arctic ] )",
            "( JOIN ( R [ MeSH ID ] ) [ Arctic ] )",
            "( JOIN [ MeSH ID ] [ Arctic ] )",
            "( AND ( JOIN [ MeSH term ID ] [ Arctic ] ) ( JOIN ( R [ question ] ) [ Arctic ] ) )"
        ],
        "gen_label": "( JOIN ( R [ MeSH descriptor ID ] ) [ Arctic ] )"
    },
    {
        "question": "Question: { Which is the biosafety level of 1? }",
        "predicted_query": [
            "( JOIN [ biosafety level ] [ 1 ] )",
            "( JOIN ( R [ biosafety level ] ) [ 1 ] )",
            "( JOIN ( R [ biosafety level ] ) [ 1 ] )",
            "( JOIN [ biosafety level ] [ 1 ] )",
            "[ JOIN ] [ Biosafety Level ] [ 1 ] "
        ],
        "gen_label": "( JOIN [ biosafety level ] [ 1 ] )"
    },
    {
        "question": "Question: { What is the World Rugby Hall of Fame ID for Colin Meads? }",
        "predicted_query": [
            "( JOIN ( R [ World Rugby Hall of Fame ID ] ) [ Colin Meads ] )",
            "[ joined ] [ Colin Meads ] ",
            "( JOIN ( R [ rugby player ID ] ) [ Colin Meads ] )",
            "( AND ( JOIN [ World Rugby Hall of Fame player ID ] [ Colin Meads ] ) ( JOIN ( R [ ID ] ) [ Colin Meads ] ) )",
            "( JOIN ( R [ World Rugby Hall of Fame ID ] ) [ Colin Meads ] )"
        ],
        "gen_label": "( JOIN ( R [ World Rugby Hall of Fame inductee ID ] ) [ Colin Meads ] )"
    },
    {
        "question": "Question: { Which is the competition class of women's sports? }",
        "predicted_query": [
            "( JOIN [ competition class ] [ women's sports ] )",
            "( JOIN ( R [ competition class ] ) [ women's sports ] )",
            "( JOIN [ competition class ] [ women's sports ] )",
            "( JOIN ( R [ competition class ] ) [ women's sports ] )",
            "( AND ( JOIN [ sport ] [ women's sports ] ) ( JOIN ( R [ competition class ] ) [ women's sports ] ) )"
        ],
        "gen_label": "( JOIN [ competition class ] [ women's sports ] )"
    },
    {
        "question": "Question: { What's Horus' sandrart.net person ID? }",
        "predicted_query": [
            "( JOIN ( R [ Sandrart.net person ID ] ) [ Horus ] )",
            "[ JOIN ( [ Sandart.net person ID ] ) [ Horus ] ]",
            "( JOIN ( R [ sandrart.net person ID ] ) [ Horus ] )",
            "( AND ( JOIN [ Sandrart.net artist ID ] [ Horus ] ) ( JOIN ( R [ ID ] ) [ Horus ] ) )",
            "( JOIN ( R [ sandrart.net person ID ] ) [ Horus ] )"
        ],
        "gen_label": "( JOIN ( R [ Sandrart.net person ID ] ) [ Horus ] )"
    },
    {
        "question": "Question: { who chronology of topic of on river of Sumatra ? }",
        "predicted_query": [
            "( JOIN ( R [ chronology ] ) ( JOIN ( R [ located in ] ) [ Sumatra ] ) )",
            "( JOIN ( R [ chronological history ] ) ( JOIN ( R [ located in ] ) [ Sumatra ] ) )",
            "( JOIN ( R [ chronology ] ) ( JOIN ( R [ topic ] ) [ Sumatra ] ) )",
            "( JOIN [ chronology of topic of ] [ Sumatra ] )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Sumatra ] ) ( JOIN ( R [ chronology ] ) [ river ] ) )"
        ],
        "gen_label": "( JOIN ( R [ history of topic ] ) ( JOIN ( R [ located in or next to body of water ] ) [ Sumatra ] ) )"
    },
    {
        "question": "Question: { Which is the Cairn author ID of François Hollande? }",
        "predicted_query": [
            "( JOIN ( R [ Cairn author ID ] ) [ François Hollande ] )",
            "( AND ( JOIN [ author ID ] [ Cairn ] ) [ François Hollande ] )",
            "( JOIN ( R [ Cairn author ID ] ) [ François Hollande ] )",
            "( JOIN ( R [ Cairn author ID ] ) [ François Hollande ] )",
            "( [ joined by ] [ Cairn Author ID ] [ François Hollande ] )"
        ],
        "gen_label": "( JOIN ( R [ Cairn author ID ] ) [ François Hollande ] )"
    },
    {
        "question": "Question: { Tell me what the unit symbol of a square inch is. }",
        "predicted_query": [
            "( JOIN ( R [ SI unit symbol ] ) ( JOIN ( R [ area unit ] ) [ square inch ] ) )",
            "( JOIN ( R [ unit symbol ] ) ( JOIN ( R [ has unit ] ) [ square inch ] ) )",
            "( JOIN [ unit symbol ] [ square inch ] )",
            "( AND ( JOIN [ base unit of measurement ] [ square inch ] ) ( JOIN ( R [ has unit symbol ] ) [ square inch ] ) )",
            "( JOIN ( R [ unit symbol ] ) ( JOIN ( R [ area ] ) [ square inch ] ) )"
        ],
        "gen_label": "( JOIN ( R [ unit symbol ] ) ( JOIN ( R [ based on ] ) [ square inch ] ) )"
    },
    {
        "question": "Question: { Which is the software version for JavaScript? }",
        "predicted_query": [
            "( JOIN [ software version ] [ JavaScript ] )",
            "( [ joined by ] [ software version ] [ JavaScript ] )",
            "None",
            "( AND ( JOIN [ has version of ] [ JavaScript ] ) ( JOIN ( R [ version ] ) [ JavaScript ] ) )",
            "( JOIN [ software version ] [ JavaScript ] )"
        ],
        "gen_label": "( JOIN ( R [ software version identifier ] ) [ JavaScript ] )"
    },
    {
        "question": "Question: { What is the Graphic Processing unit inside an Xbox one? }",
        "predicted_query": [
            "( JOIN ( R [ has process ] ) ( JOIN ( R [ manufacturer ] ) [ Xbox One ] ) )",
            "( JOIN [ has graphic processing unit ] [ Xbox One ] )",
            "( JOIN ( R [ Graphic Processing Unit ] ) [ Xbox One ] )",
            "( JOIN ( R [ has graphic processing unit ] ) ( JOIN ( R [ manufacturer ] ) [ Xbox One ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Xbox One ] ) ( JOIN ( R [ has process ] ) [ graphic processing unit ] ) )"
        ],
        "gen_label": "( JOIN ( R [ GPU ] ) [ Xbox One ] )"
    },
    {
        "question": "Question: { What is the Astronaut's mission with Sally Ride? }",
        "predicted_query": [
            "( JOIN ( R [ astronaut mission ] ) [ Sally Ride ] )",
            "( JOIN ( R [ mission ] ) ( JOIN ( R [ crew member ] ) [ Sally Ride ] ) )",
            "( JOIN ( R [ mission ] ) ( JOIN ( R [ astronaut ] ) [ Sally Ride ] ) )",
            "( JOIN [ astronaut's mission ] [ Sally Ride ] )",
            "( AND ( JOIN [ has participant ] [ Sally Ride ] ) ( JOIN ( R [ mission ] ) [ astronaut ] ) )"
        ],
        "gen_label": "( JOIN ( R [ astronaut mission ] ) [ Sally Ride ] )"
    },
    {
        "question": "Question: { Which of Joachim Murat's Kids wrote language in French? }",
        "predicted_query": [
            "( AND ( JOIN [ language spoken, written or signed ] [ French ] ) ( JOIN ( R [ child ] ) [ Joachim Murat ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ French ] ) ( JOIN ( R [ language ] ) [ Joachim Murat ] ) )",
            "( AND ( JOIN [ has language ] [ French ] ) ( JOIN ( R [ child ] ) [ Joachim Murat ] ) )",
            "( JOIN ( R [ language spoken, written or signed ] ) ( JOIN ( R [ child ] ) [ Joachim Murat ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Joachim Murat ] ) ( JOIN ( R [ language of work or name ] ) [ Joachim Murat ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ languages spoken, written or signed ] [ French ] ) ( JOIN ( R [ child ] ) [ Joachim Murat ] ) )"
    },
    {
        "question": "Question: { What is the location of birth of Jose Maria Aznar which also bordered by Las Rozas de Madrid? }",
        "predicted_query": [
            "( AND ( JOIN [ shares border with ] [ Las Rozas de Madrid ] ) ( JOIN ( R [ place of birth ] ) [ José María Aznar ] ) )",
            "[]",
            "( AND ( JOIN [ shared border ] [ Las Rozas de Madrid ] ) ( JOIN ( R [ place of birth ] ) [ José María Aznar ] ) )",
            "( AND ( JOIN [ shares border with ] [ Las Rozas de Madrid ] ) ( JOIN ( R [ place of birth ] ) [ José María Aznar ] ) )",
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ place of birth ] ) [ José María Aznar ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ shares border with ] [ Las Rozas de Madrid ] ) ( JOIN ( R [ place of birth ] ) [ José María Aznar ] ) )"
    },
    {
        "question": "Question: { What is the award for signatories of the Declaration fo the Establishment of the State of Israel? }",
        "predicted_query": [
            "[ JOIN [ recipient ] [ signatory of the Declaration of the Establishment of the State of Israel ] ]",
            "( AND ( JOIN [ awarded to ] [ Declaration of the Establishment of the State of Israel ] ) ( JOIN ( R [ recipient ] ) [ Nobel Prize in Chemistry ] ) )",
            "( JOIN ( R [ award received ] ) ( JOIN ( R [ signatory ] ) [ Declaration of the Establishment of the State of Israel ] ) )",
            "( JOIN [ award for ] [ Declaration of the Establishment of the State of Israel ] )",
            "( AND ( JOIN [ recipient ] [ Declaration of the Establishment of the State of Israel ] ) ( JOIN ( R [ award received ] ) [ Yitzhak Rabin ] ) )"
        ],
        "gen_label": "( JOIN ( R [ award received ] ) ( JOIN ( R [ signatory ] ) [ Declaration of the Establishment of the State of Israel ] ) )"
    },
    {
        "question": "Question: { What is the sexuality of the winner of MTV Video Music Award for Best Male Video? }",
        "predicted_query": [
            "( JOIN ( R [ sexuality ] ) ( JOIN ( R [ winner ] ) [ MTV Video Music Award for Best Male Video ] ) )",
            "( JOIN ( R [ sexuality ] ) ( JOIN ( R [ winner ] ) [ MTV Video Music Award for Best Male Video ] ) )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ sexuality ] ) [ MTV Video Music Award for Best Male Video ] ) )",
            "( AND ( JOIN [ winner ] [ MTV Video Music Award for Best Male Video ] ) ( JOIN ( R [ sexuality ] ) [ David Bowie ] ) )",
            "( JOIN ( R [ sexual orientation ] ) ( JOIN ( R [ winner ] ) [ MTV Video Music Award for Best Male Video ] ) )"
        ],
        "gen_label": "( JOIN ( R [ sexual orientation ] ) ( JOIN ( R [ winner ] ) [ MTV Video Music Award for Best Male Video ] ) )"
    },
    {
        "question": "Question: { Who was the winner of WrestleMania III? }",
        "predicted_query": [
            "( JOIN ( R [ winner ] ) [ WrestleMania III ] )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ participant ] ) [ WrestleMania III ] ) )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ participant in ] ) [ WrestleMania III ] ) )",
            "( JOIN ( R [ winner ] ) [ WrestleMania III ] )",
            "( JOIN ( R [ winner of ] ) ( JOIN ( R [ participant in ] ) [ WrestleMania III ] ) )"
        ],
        "gen_label": "( JOIN ( R [ cast member ] ) ( JOIN ( R [ follows ] ) [ WrestleMania IV ] ) )"
    },
    {
        "question": "Question: { what is the account on of the scriptwriter of voting system? }",
        "predicted_query": [
            "( JOIN ( R [ account on ] ) ( JOIN ( R [ writer ] ) [ voting system ] ) )",
            "( JOIN ( R [ scriptwriter ] ) ( JOIN ( R [ based on ] ) [ voting system ] ) )",
            "( JOIN [ account on ] [ voting system ] )",
            "( JOIN ( R [ author ] ) ( JOIN ( R [ writer ] ) [ voting system ] ) )",
            "( AND ( JOIN [ written in ] [ voting system ] ) ( JOIN ( R [ author ] ) [ voting system ] ) )"
        ],
        "gen_label": "( JOIN ( R [ website account on ] ) ( JOIN ( R [ screenwriter ] ) [ The Voting System ] ) )"
    },
    {
        "question": "Question: { Where are the administrative headquarters of the Johor Sultanate, who's sister city is Istanbul? }",
        "predicted_query": [
            "( AND ( JOIN [ twinned administrative body ] [ Istanbul ] ) ( JOIN ( R [ capital ] ) [ Johor Sultanate ] ) )",
            "( AND ( JOIN [ twin town ] [ Istanbul ] ) ( JOIN ( R [ capital ] ) [ Johor Sultanate ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Istanbul ] ) ( JOIN ( R [ capital ] ) [ Johor Sultanate ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Istanbul ] ) ( JOIN ( R [ headquarters location ] ) [ Johor Sultanate ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Istanbul ] ) ( JOIN ( R [ headquarters location ] ) [ Johor Sultanate ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ twinned administrative body ] [ Istanbul ] ) ( JOIN ( R [ capital ] ) [ Johor Sultanate ] ) )"
    },
    {
        "question": "Question: { Who is the participant of Beer Hall Putsch? }",
        "predicted_query": [
            "( JOIN ( R [ participant ] ) [ Beer Hall Putsch ] )",
            "( JOIN [ participant ] [ Beer Hall Putsch ] )",
            "( JOIN [ participant ] [ Beer Hall Putsch ] )",
            "( JOIN ( R [ participant ] ) [ Beer Hall Putsch ] )",
            "( JOIN ( R [ participant ] ) [ Beer Hall Putsch ] )"
        ],
        "gen_label": "( JOIN [ participant in ] [ Beer Hall Putsch ] )"
    },
    {
        "question": "Question: { What forename compared to George Burns is equivalent to Jørn? }",
        "predicted_query": [
            "( AND ( JOIN [ comparable name ] [ Jørn ] ) ( JOIN ( R [ given name ] ) [ George Burns ] ) )",
            "( AND ( JOIN [ different name ] [ Jørn ] ) ( JOIN ( R [ given name ] ) [ George Burns ] ) )",
            "[ ( JOIN ( R [ comparable name ] ) ( JOIN ( R [ given name ] ) [ George Burns ] ) ) ]",
            "( JOIN ( R [ given name ] ) ( JOIN ( R [ comparable to ] ) [ Jørn Utzon ] ) )",
            "( JOIN [ name of person ] [ Jørn Utzon ] ) AND ( JOIN ( R [ different name ] ) [ George Burns ] )"
        ],
        "gen_label": "( AND ( JOIN [ said to be the same as ] [ Jørn ] ) ( JOIN ( R [ given name ] ) [ George Burns ] ) )"
    },
    {
        "question": "Question: { What is the recognition title of Max Planck, that was won by George Shuckburgh-Evelyn? }",
        "predicted_query": [
            "( AND ( JOIN [ winner ] [ George Shuckburgh-Evelyn ] ) ( JOIN ( R [ award received ] ) [ Max Planck ] ) )",
            "( AND ( JOIN [ award received ] [ George Shuckburgh-Evelyn ] ) ( JOIN ( R [ award received ] ) [ Max Planck ] ) )",
            "( AND ( JOIN [ award received ] [ Order of Merit for Military Valour ] ) ( JOIN ( R [ awarded to ] ) [ George Shuckburgh-Evelyn ] ) )",
            "( AND ( JOIN [ awarded to ] [ George Shuckburgh-Evelyn ] ) ( JOIN ( R [ awarded by ] ) [ Max Planck ] ) )",
            "( AND ( JOIN [ won by ] [ George Shuckburgh-Evelyn ] ) ( JOIN ( R [ award received ] ) [ Max Planck ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ winner ] [ George Shuckburgh-Evelyn ] ) ( JOIN ( R [ award received ] ) [ Max Planck ] ) )"
    },
    {
        "question": "Question: { What is a neutron's gyromagnetic ratio? }",
        "predicted_query": [
            "( JOIN ( R [ gyromagnetic ratio ] ) [ neutron ] )",
            "( JOIN [ gyromagnetic ratio ] [ neutron ] )",
            "( JOIN ( R [ gyromagnetic ratio ] ) [ neutron ] )",
            "( [ joined by ] [ neutron ] [ gyromagnetic ratio ] )",
            "( AND ( JOIN [ has gyromagnetic ratio ] ) ( JOIN ( R [ electron spin quantum number ] ) [ neutron ] ) )"
        ],
        "gen_label": "( JOIN ( R [ gyromagnetic ratio ] ) [ neutron ] )"
    },
    {
        "question": "Question: { What is quantity of Medal for Honor ? }",
        "predicted_query": [
            "( JOIN ( R [ quantity ] ) [ Medal for Honor ] )",
            "( JOIN [ quantity of ] [ Medal for Honor ] )",
            "( [ joined by ] [ quantity of award ] )",
            "( JOIN ( R [ quantity ] ) [ Medal of Honor ] )",
            "( JOIN [ quantity ] [ Medal for Honor ] )"
        ],
        "gen_label": "( JOIN ( R [ quantity ] ) [ Medal of Honor ] )"
    },
    {
        "question": "Question: { What is teh chemical structure off DL-asparagine? }",
        "predicted_query": [
            "( JOIN ( R [ chemical structure ] ) [ DL-asparagine ] )",
            "( JOIN [ chemical structure ] [ DL-asparagine ] )",
            "( JOIN ( R [ chemical structure ] ) ( JOIN ( R [ has structure ] ) [ DL-asparagine ] ) )",
            "( JOIN ( R [ chemical formula ] ) ( JOIN ( R [ contains ] ) [ DL-asparagine ] ) )",
            "( AND ( JOIN [ has chemical structure ] [ DL-asparagine ] ) ( JOIN ( R [ has chemical structure ] ) [ asparagine ] ) )"
        ],
        "gen_label": "( JOIN ( R [ chemical structure ] ) [ DL-asparagine ] )"
    },
    {
        "question": "Question: { What is the local calling code of twin town of León ? }",
        "predicted_query": [
            "( JOIN [ local calling code ] [ twin town of León ] )",
            "( JOIN ( R [ has telephone area code ] ) ( JOIN ( R [ twinned administrative body ] ) [ Prussia ] ) )",
            "( JOIN ( R [ local calling code ] ) ( JOIN ( R [ twinned administrative body ] ) [ León ] ) )",
            "( JOIN ( R [ telephone dialling plan ] ) ( JOIN ( R [ twinned administrative body ] ) [ León ] ) )",
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ twinned administrative body ] ) [ León ] ) )"
        ],
        "gen_label": "( JOIN ( R [ local dialing code ] ) ( JOIN ( R [ twinned administrative body ] ) [ León de Los Aldama ] ) )"
    },
    {
        "question": "Question: { What is the space group for talc? }",
        "predicted_query": [
            "( JOIN ( R [ space group ] ) [ talc ] )",
            "( JOIN [ space group ] [ talc ] )",
            "( JOIN [ space group ] [ talc ] )",
            "( JOIN ( R [ space group ] ) [ talc ] )",
            "( AND ( JOIN [ crystal system ] [ hexagonal ] ) ( JOIN ( R [ space group ] ) [ talc ] ) )"
        ],
        "gen_label": "( JOIN ( R [ space group ] ) [ talc ] )"
    },
    {
        "question": "Question: { Who gave the {has case} of {first language} of {Millard Fillmore} ? }",
        "predicted_query": [
            "( JOIN ( R [ has case ] ) ( JOIN ( R [ first language ] ) [ Millard Fillmore ] ) )",
            "( JOIN ( R [ has case ] ) ( JOIN ( R [ language of work or name ] ) [ Millard Fillmore ] ) )",
            "( JOIN ( R [ language of first text ] ) ( JOIN ( R [ language of work or text ] ) [ Millard Fillmore ] ) )",
            "( JOIN ( R [ has case ] ) ( JOIN ( R [ language of work ] ) [ Millard Fillmore ] ) )",
            "( JOIN [ has case ] [ first language ] ) [ Millard Fillmore ]"
        ],
        "gen_label": "( JOIN ( R [ has grammatical case ] ) ( JOIN ( R [ native language ] ) [ Millard Fillmore ] ) )"
    },
    {
        "question": "Question: { Which is the ITU triathlete ID for Emma Snowsill? }",
        "predicted_query": [
            "( JOIN ( R [ ITU triathlete ID ] ) [ Emma Snowsill ] )",
            "( [ JOIN ] [ ITU triathlete ID ] )",
            "{ JOIN ( R [ ITU triathlete ID ] ) [ Emma Snowsill ] }",
            "( JOIN [ ITU triathlete ID ] [ Emma Snowsill ] )",
            "( JOIN ( R [ ITU athlete ID ] ) [ Emma Snowsill ] )"
        ],
        "gen_label": "( JOIN ( R [ World Triathlon triathlete ID ] ) [ Emma Snowsill ] )"
    },
    {
        "question": "Question: { What is in the category connector of USB-C ? }",
        "predicted_query": [
            "( JOIN [ category connector ] [ USB-C ] )",
            "( JOIN ( R [ category connector ] ) [ USB-C ] )",
            "( JOIN ( R [ category of ] ) ( JOIN ( R [ has connector ] ) [ USB-C ] ) )",
            "( JOIN ( R [ category of ] ) ( JOIN ( R [ connector ] ) [ USB-C ] ) )",
            "( AND ( JOIN [ has category of ] [ USB-C ] ) ( JOIN ( R [ has category ] ) [ USB-C ] ) )"
        ],
        "gen_label": "( JOIN [ connector ] [ USB-C ] )"
    },
    {
        "question": "Question: { In which city is Route nationale 16 located? }",
        "predicted_query": [
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Route nationale 16 ] ) )",
            "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Route nationale 16 ] ) )",
            "( JOIN [ located in the administrative territorial entity ] [ Route nationale 16 ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Route nationale 16 ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Route nationale 16 ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ route ] ) [ Route nationale 16 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ capital ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Route nationale 16 ] ) )"
    },
    {
        "question": "Question: { What is the number of out of school children of continent of Merapi ? }",
        "predicted_query": [
            "( JOIN ( R [ number of out-of-school children ] ) ( JOIN ( R [ continent ] ) [ Merapi ] ) )",
            "( JOIN ( R [ population ] ) ( JOIN ( R [ country ] ) [ Merapi ] ) )",
            "( AND ( JOIN [ continent or culture ] [ Merapi ] ) ( JOIN ( R [ number of out-of-school children ] ) [ Merapi ] ) )",
            "( JOIN ( R [ number of out of school children ] ) ( JOIN ( R [ continent ] ) [ Merapi ] ) )",
            "( JOIN ( R [ out-of-school child population ] ) ( JOIN ( R [ continent ] ) [ Merapi ] ) )"
        ],
        "gen_label": "( JOIN ( R [ number of out-of-school children ] ) ( JOIN ( R [ continent ] ) [ Merapi ] ) )"
    },
    {
        "question": "Question: { Which friends of power have a craft as an anthropologist? }",
        "predicted_query": [
            "( AND ( JOIN [ occupation ] [ anthropologist ] ) ( JOIN ( R [ friend ] ) [ power ] ) )",
            "( JOIN [ friends of power ] [ anthropologist ] )",
            "( JOIN ( R [ friend ] ) ( JOIN ( R [ occupation ] ) [ anthropologist ] ) )",
            "( AND ( JOIN [ field of work ] [ anthropologist ] ) ( JOIN ( R [ friend ] ) [ power ] ) )",
            "( AND ( JOIN [ occupation ] [ anthropologist ] ) ( JOIN ( R [ friends and family ] ) [ power ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ occupation ] [ anthropologist ] ) ( JOIN ( R [ significant person ] ) [ power ] ) )"
    },
    {
        "question": "Question: { The film Battleship Potemkin, that has been awarded the State Stalin Prize was directed by who? }",
        "predicted_query": [
            "( AND ( JOIN [ award received ] [ State Stalin Prize ] ) ( JOIN ( R [ director ] ) [ Battleship Potemkin ] ) )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ award received ] ) [ Battleship Potemkin ] ) )",
            "( AND ( JOIN [ winner ] [ State Stalin Prize ] ) ( JOIN ( R [ director ] ) [ Battleship Potemkin ] ) )",
            "( AND ( JOIN [ award received ] [ State Stalin Prize ] ) ( JOIN ( R [ directed by ] ) [ Battleship Potemkin ] ) )",
            "( JOIN [ award received ] [ State Stalin Prize ] ) ( JOIN ( R [ director ] ) [ Battleship Potemkin ] )"
        ],
        "gen_label": "( AND ( JOIN [ award received ] [ Stalin Prize ] ) ( JOIN ( R [ director ] ) [ Battleship Potemkin ] ) )"
    },
    {
        "question": "Question: { What is A Clockwork Orange's KAVI rating? }",
        "predicted_query": [
            "( JOIN ( R [ KAVI rating ] ) [ A Clockwork Orange ] )",
            "( JOIN ( R [ KAVI rating ] ) [ A Clockwork Orange ] )",
            "( JOIN [ KAVI rating ] [ A Clockwork Orange ] )",
            "( AND ( JOIN [ KAVI rating ] [ A Clockwork Orange ] ) ( JOIN ( R [ question ] ) [ What is A Clockwork Orange's KAVI rating? ] ) )",
            "( AND ( JOIN [ awarded to ] [ KAVI ] ) ( JOIN ( R [ rating ] ) [ A Clockwork Orange ] ) )"
        ],
        "gen_label": "( JOIN ( R [ KAVI rating ] ) [ A Clockwork Orange ] )"
    },
    {
        "question": "Question: { What are the boys names of William Wilberforce, that were born in Clapham? }",
        "predicted_query": [
            "( AND ( JOIN [ location ] [ Clapham ] ) ( JOIN ( R [ given name ] ) [ William Wilberforce ] ) )",
            "( AND ( JOIN [ place of birth ] [ Clapham ] ) ( JOIN ( R [ given name ] ) [ William Wilberforce ] ) )",
            "( AND ( JOIN [ child ] [ William Wilberforce ] ) ( JOIN ( R [ given name ] ) [ Clapham ] ) )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ place of birth ] ) [ William Wilberforce ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Clapham ] ) ( JOIN ( R [ given name ] ) [ William Wilberforce ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ place of birth ] [ Clapham ] ) ( JOIN ( R [ child ] ) [ William Wilberforce ] ) )"
    },
    {
        "question": "Question: { What was Jonathon Edwards cause of death? }",
        "predicted_query": [
            "( JOIN ( R [ cause of death ] ) [ Jonathan Edwards ] )",
            "( AND ( JOIN [ place of death ] [ Jonathon Edwards ] ) ( JOIN ( R [ cause of death ] ) [ Jonathon Edwards ] ) )",
            "( JOIN ( R [ cause of death ] ) [ Jonathon Edwards ] )",
            "[ JOIN ] [ cause of death ] [ Jonathon Edwards ]",
            "( JOIN [ cause of death ] [ Jonathan Edwards ] )"
        ],
        "gen_label": "( JOIN ( R [ genetic association ] ) ( JOIN ( R [ cause of death ] ) [ Jonathan Edwards ] ) )"
    },
    {
        "question": "Question: { TED topic id of planet? }",
        "predicted_query": [
            "( JOIN ( R [ TED topic ID ] ) [ planet ] )",
            "( JOIN ( R [ TED topic ID ] ) [ planet ] )",
            "( JOIN ( R [ TED topic ID ] ) [ Planet Earth ] )",
            "( JOIN [ TED topic ID ] [ planet ] )",
            "( AND ( JOIN [ topic of TED talk ] ) ( JOIN ( R [ topic ] ) [ planet ] ) )"
        ],
        "gen_label": "( JOIN ( R [ TED topic ID ] ) [ planet ] )"
    },
    {
        "question": "Question: { What nomination  received from Bradley Cooper having victor as Robert Donat? }",
        "predicted_query": [
            "( AND ( JOIN [ winner ] [ Robert Donat ] ) ( JOIN ( R [ nominated for ] ) [ Bradley Cooper ] ) )",
            "( AND ( JOIN [ award received ] [ Robert Donat ] ) ( JOIN ( R [ nominated for ] ) [ Bradley Cooper ] ) )",
            "( JOIN ( R [ nominated for ] ) ( JOIN ( R [ winner ] ) [ Bradley Cooper ] ) )",
            "( AND ( JOIN [ nominee ] [ Robert Donat ] ) ( JOIN ( R [ winner ] ) [ The Hurt Locker ] ) )",
            "( JOIN ( R [ nominated for ] ) ( JOIN ( R [ winner ] ) [ Robert Donat ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ winner ] [ Robert Donat ] ) ( JOIN ( R [ nominated for ] ) [ Bradley Cooper ] ) )"
    },
    {
        "question": "Question: { Who is the daughter of Elena of Montenegro? }",
        "predicted_query": [
            "( JOIN ( R [ child ] ) ( JOIN ( R [ spouse ] ) [ Elena of Montenegro ] ) )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ child ] ) [ Elena of Montenegro ] ) )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ parent of ] ) [ Elena of Montenegro ] ) )",
            "( JOIN [ child ] [ Elena of Montenegro ] )",
            "( AND ( JOIN [ parent of ] [ Elena of Montenegro ] ) ( JOIN ( R [ child ] ) [ Elena of Montenegro ] ) )"
        ],
        "gen_label": "( JOIN ( R [ father ] ) ( JOIN ( R [ sibling ] ) [ Elena of Montenegro ] ) )"
    },
    {
        "question": "Question: { What test did Ben Bernanke take? }",
        "predicted_query": [
            "( JOIN [ taken ] [ Ben Bernanke ] )",
            "( JOIN ( R [ examination or test taken ] ) ( JOIN ( R [ occupation ] ) [ Ben Bernanke ] ) )",
            "[join] [administered by] [Ben Bernanke]",
            "( JOIN ( R [ administered by ] ) ( JOIN ( R [ examination given ] ) [ Ben Bernanke ] ) )",
            "( AND ( JOIN [ taken ] [ Ben Bernanke ] ) ( JOIN ( R [ examination or test taken ] ) [ Ben Bernanke ] ) )"
        ],
        "gen_label": "( JOIN ( R [ assessment ] ) [ Ben Bernanke ] )"
    },
    {
        "question": "Question: { Who are the alumna of painters of King Kong? }",
        "predicted_query": [
            "( JOIN ( R [ student ] ) ( JOIN ( R [ influenced by ] ) [ King Kong ] ) )",
            "( JOIN ( R [ alumni ] ) ( JOIN ( R [ influenced by ] ) [ King Kong ] ) )",
            "( JOIN [ alumni ] [ King Kong ] )",
            "( AND ( JOIN [ alumni ] [ painter of King Kong ] ) ( JOIN ( R [ influenced by ] ) [ King Kong ] ) )",
            "( AND ( JOIN [ student of ] [ King Kong ] ) ( JOIN ( R [ influenced by ] ) [ painter ] ) )"
        ],
        "gen_label": "( JOIN ( R [ educated at ] ) ( JOIN ( R [ creator ] ) [ King Kong ] ) )"
    },
    {
        "question": "Question: { Which administrative unit of Turks and Caicos Islands has a AUSCANNZUKUS member? }",
        "predicted_query": [
            "( AND ( JOIN [ member of ] [ AUSCANNZUKUS ] ) ( JOIN ( R [ country ] ) [ Turks and Caicos Islands ] ) )",
            "( JOIN ( R [ AUSCANNZUKUS member ] ) ( JOIN ( R [ country ] ) [ Turks and Caicos Islands ] ) )",
            "( AND ( JOIN [ member of ] [ AUSCANNZUKUS ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Turks and Caicos Islands ] ) )",
            "( AND ( JOIN [ member of ] [ AUSCANZUKUS ] ) ( JOIN ( R [ country ] ) [ Turks and Caicos Islands ] ) )",
            "( AND ( JOIN [ member of ] [ Australia, New Zealand, United States, Canada, and the United Kingdom ] ) ( JOIN ( R [ capital ] ) [ Turks and Caicos Islands ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ member of ] [ AUSCANNZUKUS ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Turks and Caicos Islands ] ) )"
    },
    {
        "question": "Question: { Who is the musical artist of Dr. John Watson that has a forename of Roland? }",
        "predicted_query": [
            "( AND ( JOIN [ given name ] [ Roland ] ) ( JOIN ( R [ composer ] ) [ Dr. John Watson ] ) )",
            "( AND ( JOIN [ name ] [ Roland ] ) ( JOIN ( R [ composer ] ) [ Dr. John Watson ] ) )",
            "[ ( JOIN ( R [ given name ] ) ( JOIN ( R [ named after ] ) [ Dr. John Watson ] ) ) ]",
            "( JOIN ( R [ performer ] ) [ Dr. John ] )",
            "( AND ( JOIN [ given name ] [ Roland ] ) ( JOIN ( R [ musician ] ) [ Dr. John Watson ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ given name ] [ Roland ] ) ( JOIN ( R [ performer ] ) [ Dr. Watson ] ) )"
    },
    {
        "question": "Question: { Which is the league level below the Premier League? }",
        "predicted_query": [
            "( JOIN ( R [ league below ] ) [ Premier League ] )",
            "### Historical Optimization Description:",
            "### Instruction:",
            "( JOIN ( R [ league level below ] ) [ Premier League ] )",
            "( JOIN [ league level below ] [ Premier League ] )"
        ],
        "gen_label": "( JOIN ( R [ league level below ] ) [ Premier League ] )"
    },
    {
        "question": "Question: { Which is the Theatricalia play ID of The Marriage of Figaro? }",
        "predicted_query": [
            "( JOIN ( R [ Theatricalia play ID ] ) [ The Marriage of Figaro ] )",
            "[ JOIN ( R [ Theatricalia play ID ] ) ]",
            "( JOIN ( R [ Theatricalia play ID ] ) [ The Marriage of Figaro ] )",
            "[joined by] [Theatricalia play ID] [The Marriage of Figaro]",
            "[ JOIN ( R [ Theatricalia play ID ] ) [ The Marriage of Figaro ] ]"
        ],
        "gen_label": "( JOIN ( R [ Theatricalia play ID ] ) [ The Marriage of Figaro ] )"
    },
    {
        "question": "Question: { What year did Thomas Young, who was head of governement and Mayor of London, die in? }",
        "predicted_query": [
            "( JOIN ( R [ year of death ] ) ( JOIN ( R [ head of government ] ) [ Thomas Young ] ) )",
            "( AND ( JOIN [ head of government ] [ Mayor of London ] ) ( JOIN ( R [ place of death ] ) [ Thomas Young ] ) )",
            "( AND ( JOIN [ head of government or head of state ] [ Thomas Young ] ) ( JOIN ( R [ place of death ] ) [ Thomas Young ] ) )",
            "( AND ( JOIN [ position held ] [ Mayor of London ] ) ( JOIN ( R [ place of death ] ) [ Thomas Young ] ) )",
            "( JOIN ( R [ year of death ] ) ( JOIN ( R [ head of government ] ) [ Thomas Young ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ office held by head of government ] [ Mayor of London ] ) ( JOIN ( R [ place of death ] ) [ Thomas Young ] ) )"
    },
    {
        "question": "Question: { What is Janet Jackson's genre? }",
        "predicted_query": [
            "( JOIN ( R [ genre ] ) [ Janet Jackson ] )",
            "### Historical Artifact ID:",
            "( JOIN [ genre ] [ Janet Jackson ] )",
            "",
            "( AND ( JOIN [ field of work ] [ genre ] ) ( JOIN ( R [ genre ] ) [ Janet Jackson ] ) )"
        ],
        "gen_label": "( JOIN ( R [ genre ] ) [ Janet Jackson ] )"
    },
    {
        "question": "Question: { What is the Merchant Category Code for a fast food restaurant. }",
        "predicted_query": [
            "( JOIN ( R [ Merchant Category Code ] ) [ fast food restaurant ] )",
            "( JOIN ( R [ Merchant Category Code ] ) [ fast food restaurant ] )",
            "( JOIN ( R [ merchant category code ] ) [ fast food restaurant ] )",
            "( JOIN ( R [ Merchant Category Code ( MCC ) ] ) [ fast food restaurant ] )",
            "( AND ( JOIN [ industry ] [ fast food restaurant ] ) ( JOIN ( R [ ICD-10 ] ) [ diabetes mellitus ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Merchant Category Code ] ) [ fast food restaurant ] )"
    },
    {
        "question": "Question: { When did the edition of Oresteia air? }",
        "predicted_query": [
            "( JOIN ( R [ publication date ] ) ( JOIN ( R [ part of the work or product ] ) [ Oresteia ] ) )",
            "( JOIN ( R [ first edition published ] ) ( JOIN ( R [ part of the work ] ) [ Oresteia ] ) )",
            "( AND ( JOIN [ date of first performance ] [ Oresteia ] ) ( JOIN ( R [ present in work ] ) [ Oresteia ] ) )",
            "( JOIN [ first edition ] [ Oresteia ] )",
            "( JOIN ( R [ year of publication ] ) ( JOIN ( R [ presenter ] ) [ Oresteia ] ) )"
        ],
        "gen_label": "( JOIN ( R [ publication date ] ) ( JOIN ( R [ has edition or translation ] ) [ Oresteia ] ) )"
    },
    {
        "question": "Question: { Who is the co-founder of Louis Stanley? }",
        "predicted_query": [
            "( JOIN ( R [ co-founder ] ) [ Louis Stanley ] )",
            "( JOIN ( R [ founding member ] ) ( JOIN ( R [ member of ] ) [ Louis Stanley ] ) )",
            "( JOIN ( R [ founder ] ) ( JOIN ( R [ member of ] ) [ Louis Stanley ] ) )",
            "( JOIN [ co-founder ] [ Louis Stanley ] )",
            "( JOIN [ founded by ] [ Louis Stanley ] )"
        ],
        "gen_label": "( JOIN ( R [ founded by ] ) ( JOIN ( R [ employer ] ) [ Louis Stanley ] ) )"
    },
    {
        "question": "Question: { Which {tributary} of {river inflows} from {Menindee Lakes} ? }",
        "predicted_query": [
            "( JOIN ( R [ tributary ] ) ( JOIN ( R [ inflows ] ) [ Menindee Lakes ] ) )",
            "( JOIN ( R [ tributary ] ) ( JOIN ( R [ located in ] ) [ Menindee Lakes ] ) )",
            "( JOIN ( R [ tributary of ] ) ( JOIN ( R [ located in the basin of ] ) [ Menindee Lakes ] ) )",
            "( JOIN ( R [ tributary ] ) ( JOIN ( R [ water body ] ) [ Menindee Lakes ] ) )",
            "( AND ( JOIN [ inflows of ] [ Menindee Lakes ] ) ( JOIN ( R [ tributary of ] ) [ Darling River ] ) )"
        ],
        "gen_label": "( JOIN ( R [ tributary ] ) ( JOIN ( R [ inflows ] ) [ Menindee Lakes ] ) )"
    },
    {
        "question": "Question: { What is Mathematics Genealogy Project ID for Edward Witten ? }",
        "predicted_query": [
            "[ JOIN [ father ] ] [ { { father } } ] [ Edward W",
            "( JOIN ( R [ Mathematics Genealogy Project ID ] ) [ Edward Witten ] )",
            "[ ( [ joins ] [ Mathemat",
            "( JOIN ( R [ Mathematics Genealogy Project ID ] ) [ Edward Witten ] )",
            "( AND ( JOIN [ Mathematics Genealogy Project person ID ] [ Edward Witten ] ) ( JOIN ( R [ ID in this field ] ) [ Edward Witten ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Mathematics Genealogy Project ID ] ) [ Edward Witten ] )"
    },
    {
        "question": "Question: { How many school children of continent of Missouri River? }",
        "predicted_query": [
            "( JOIN ( R [ number of students ] ) ( JOIN ( R [ located in ] ) [ Missouri River ] ) )",
            "( JOIN ( R [ number of students ] ) ( JOIN ( R [ continent ] ) [ Missouri River ] ) )",
            "( JOIN [ number of students ] [ Missouri River ] )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Missouri River ] ) ( JOIN ( R [ number of students ] ) [ Missouri ] ) )",
            "( JOIN ( R [ number of school children ] ) ( JOIN ( R [ located in ] ) [ Missouri River ] ) )"
        ],
        "gen_label": "( JOIN ( R [ number of out-of-school children ] ) ( JOIN ( R [ continent ] ) [ Missouri River ] ) )"
    },
    {
        "question": "Question: { In the history of rail transport, where is it not the same as guided transportation? }",
        "predicted_query": [
            "( AND ( JOIN [ different from ] [ guided transportation ] ) ( JOIN ( R [ history ] ) [ rail transport ] ) )",
            "( AND ( JOIN [ has different meaning ] [ guided transportation ] ) ( JOIN ( R [ history ] ) [ rail transport ] ) )",
            "( AND ( JOIN [ different from ] [ guided transportation ] ) ( JOIN ( R [ has history of ] ) [ rail transport ] ) )",
            "( AND ( JOIN [ has different history ] [ guided transportation ] ) ( JOIN ( R [ has different history ] ) [ rail transport ] ) )",
            "( JOIN ( R JOIN [ history of rail transportation ] ) [ guided transportation ] )"
        ],
        "gen_label": "( AND ( JOIN [ different from ] [ rail and rope guided transport ] ) ( JOIN ( R [ facet of ] ) [ history of rail transport ] ) )"
    },
    {
        "question": "Question: { What is Fukuoka's sister city in the continent of Oceania? }",
        "predicted_query": [
            "( AND ( JOIN [ continent ] [ Oceania ] ) ( JOIN ( R [ twinned administrative body ] ) [ Fukuoka ] ) )",
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Fukuoka ] ) )",
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ continent ] ) [ Oceania ] ) )",
            "( JOIN [ continent ] [ Oceania ] ) ( JOIN ( R [ twinned administrative body ] ) [ Fukuoka ] )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Fukuoka Prefecture ] ) ( JOIN ( R [ twinned administrative body ] ) [ Oceania ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ continent ] [ Insular Oceania ] ) ( JOIN ( R [ twinned administrative body ] ) [ Fukuoka ] ) )"
    },
    {
        "question": "Question: { Which is the Internet Book Database of Fiction writer ID for Frank Herbert? }",
        "predicted_query": [
            "( [ JOIN ] [ Internet Book Database of Fiction writer ID ] [ Frank Herbert ] )",
            "( JOIN ( R [ Internet Book Database of Fiction writer ID ] ) [ Frank Herbert ] )",
            "( JOIN [ Internet Book Database of Fiction writer ID ] [ Frank Herbert ] )",
            "[join]",
            "( JOIN ( R [ Internet Book Database for Fiction author ID ] ) [ Frank Herbert ] )"
        ],
        "gen_label": "( JOIN ( R [ Internet Book Database of Fiction writer ID ] ) [ Frank Herbert ] )"
    },
    {
        "question": "Question: { who president of member  of rené cassin ? }",
        "predicted_query": [
            "( JOIN [ member of ] [ René Cassin ] )",
            "( JOIN ( R [ head of state ] ) ( JOIN ( R [ member of ] ) [ René Cassin ] ) )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ head of government ] ) [ René Cassin ] ) )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ member of ] ) [ René Cassin ] ) )",
            "( JOIN [ member of ] [ René Cassin ] )"
        ],
        "gen_label": "( JOIN ( R [ chairperson ] ) ( JOIN ( R [ member of ] ) [ René Cassin ] ) )"
    },
    {
        "question": "Question: { Who is the son of the brother of Queenie Padilla? }",
        "predicted_query": [
            "( JOIN [ sibling ] [ Queenie Padilla ] )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ sibling ] ) [ Queenie Padilla ] ) )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ child ] ) [ Queenie Padilla ] ) )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ sibling ] ) [ Queenie Padilla ] ) )",
            "( AND ( JOIN [ child ] [ Queenie Padilla ] ) ( JOIN ( R [ father ] ) [ José Padilla ] ) )"
        ],
        "gen_label": "( JOIN ( R [ father ] ) ( JOIN ( R [ sibling ] ) [ Queenie Padilla ] ) )"
    },
    {
        "question": "Question: { Where was the birthplace of Suphot Panich? }",
        "predicted_query": [
            "( JOIN [ place of birth ] [ Suphot Panich ] )",
            "( JOIN ( R [ place of birth ] ) ( JOIN ( R [ place of death ] ) [ Suphot Panich ] ) )",
            "( JOIN ( R [ location ] ) ( JOIN ( R [ place of birth ] ) [ Suphot Panich ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ place of birth ] ) [ Suphot Panich ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Suphot Panich ] ) ( JOIN ( R [ place of birth ] ) [ Suphot Panich ] ) )"
        ],
        "gen_label": "( JOIN ( R [ founded by ] ) ( JOIN ( R [ place of birth ] ) [ Suphot Panich ] ) )"
    },
    {
        "question": "Question: { What religion does the sister of Basil of Caesarea follow? }",
        "predicted_query": [
            "( JOIN ( R [ religion ] ) ( JOIN ( R [ sibling ] ) [ Basil of Caesarea ] ) )",
            "( JOIN ( R [ religion ] ) ( JOIN ( R [ sibling ] ) [ Basil of Caesarea ] ) )",
            "( JOIN [ religion ] [ sister of Basil of Caesarea ] )",
            "( AND ( JOIN [ follower of ] [ Basil of Caesarea ] ) ( JOIN ( R [ religion or worldview ] ) [ Sister of Basil of Caesarea ] ) )",
            "( JOIN ( R [ religion ] ) ( JOIN ( R [ sibling ] ) [ Basil of Caesarea ] ) )"
        ],
        "gen_label": "( JOIN ( R [ religion or worldview ] ) ( JOIN ( R [ sibling ] ) [ Basil of Caesarea ] ) )"
    },
    {
        "question": "Question: { How many people were involved in the Siege of Sevastopol? }",
        "predicted_query": [
            "( JOIN ( R [ number of participants ] ) ( JOIN ( R [ participant in the Battle of Sevastopol ] ) ) )",
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ participant in the battle ] ) [ Siege of Sevastopol ] ) )",
            "( JOIN ( R [ number of people involved ] ) ( JOIN ( R [ participant in the Battle of Sevastopol ] ) ) )",
            "( JOIN [ number of people involved ] [ Siege of Sevastopol ] )",
            "( JOIN ( R [ number of participants ] ) ( JOIN ( R [ participant ] ) [ Siege of Sevastopol ] ) )"
        ],
        "gen_label": "( JOIN ( R [ population ] ) ( JOIN ( R [ location ] ) [ Siege of Sevastopol ] ) )"
    },
    {
        "question": "Question: { What is the source of claim of the house of Lê Thánh Tông? }",
        "predicted_query": [
            "( JOIN [ source of claim ] [ House of Lê Thánh Tông ] )",
            "( AND ( JOIN [ location ] [ Ho Chi Minh City ] ) ( JOIN ( R [ source of claim ] ) [ Lê Thánh Tông ] ) )",
            "( JOIN ( R [ source of claim ] ) [ Lê Thánh Tông ] )",
            "( JOIN ( R [ source of claim ] ) ( JOIN ( R [ residence ] ) [ Lê Thánh Tông ] ) )",
            "( JOIN ( R [ source of claim ] ) [ Lê Thánh Tông ] )"
        ],
        "gen_label": "( JOIN ( R [ stated in ] ) ( JOIN ( R [ family ] ) [ Lê Thánh Tông ] ) )"
    },
    {
        "question": "Question: { Which is the PhDTree person ID for Noam Chomsky? }",
        "predicted_query": [
            "( JOIN ( R [ PhDTree person ID ] ) [ Noam Chomsky ] )",
            "( [ joined by ] [ PhDTree person ID ] )",
            "( JOIN ( R [ PhDTree person ID ] ) [ Noam Chomsky ] )",
            "[ JOIN [ PhDtree Person ID ] ] [ Noam Chomsky ]",
            "[]"
        ],
        "gen_label": "( JOIN ( R [ PhDTree person ID ] ) [ Noam Chomsky ] )"
    },
    {
        "question": "Question: { Which YouPorn ID belongs to Rocco Siffredi? }",
        "predicted_query": [
            "( JOIN ( R [ YouPorn ID ] ) [ Rocco Siffredi ] )",
            "( JOIN ( R [ YouPorn ID ] ) [ Rocco Siffredi ] )",
            "( JOIN [ YouPorn ID ] [ Rocco Siffredi ] )",
            "{ JOIN [ YouPorn ID ] [ Rocco Siffredi ] }",
            "( JOIN ( R [ YouPorn ID ] ) [ Rocco Siffredi ] )"
        ],
        "gen_label": "( JOIN ( R [ YouPorn performer ID ( archived ) ] ) [ Rocco Siffredi ] )"
    },
    {
        "question": "Question: { What is in the action of the family member of Peng Gang ? }",
        "predicted_query": [
            "( JOIN [ action ] [ family member ] ) ( JOIN ( R [ father ] ) [ Peng Gang ] )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ family member ] ) [ Peng Gang ] ) )",
            "( JOIN ( R [ has participant ] ) ( JOIN ( R [ occupation ] ) [ Peng Gang ] ) )",
            "( AND ( JOIN [ family member ] [ Peng Gang ] ) ( JOIN ( R [ occupation ] ) [ Peng Gang ] ) )",
            "( JOIN ( R [ has participant ] ) ( JOIN ( R [ family member ] ) [ Peng Gang ] ) )"
        ],
        "gen_label": "( JOIN ( R [ conflict ] ) ( JOIN ( R [ relative ] ) [ Peng Gang ] ) )"
    },
    {
        "question": "Question: { Who is the mother of William Michael Rossetti who was buried in Highgate Cemetery? }",
        "predicted_query": [
            "( AND ( JOIN [ place of burial ] [ Highgate Cemetery ] ) ( JOIN ( R [ mother ] ) [ William Michael Rossetti ] ) )",
            "( AND ( JOIN [ location of death ] [ Highgate Cemetery ] ) ( JOIN ( R [ mother ] ) [ William Michael Rossetti ] ) )",
            "( AND ( JOIN [ place of burial ] [ Highgate Cemetery ] ) ( JOIN ( R [ parent ] ) [ William Michael Rossetti ] ) )",
            "( JOIN ( R [ mother ] ) ( JOIN ( R [ place of burial ] ) [ William Michael Rossetti ] ) )",
            "( AND ( JOIN [ child ] [ William Michael Rossetti ] ) ( JOIN ( R [ place of burial ] ) [ Dante Gabriel Rossetti ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ place of burial ] [ Highgate Cemetery ] ) ( JOIN ( R [ mother ] ) [ William Michael Rossetti ] ) )"
    },
    {
        "question": "Question: { Where did Albert Einstein live? }",
        "predicted_query": [
            "( JOIN ( R [ place of death ] ) [ Albert Einstein ] )",
            "( JOIN [ place of residence ] [ Albert Einstein ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Baden-Württemberg ] ) ( JOIN ( R [ place of death ] ) [ Albert Einstein ] ) )",
            "( JOIN ( R [ location ] ) ( JOIN ( R [ place of death ] ) [ Albert Einstein ] ) )",
            "( JOIN ( R [ place of residence ] ) [ Albert Einstein ] )"
        ],
        "gen_label": "( JOIN ( R [ population ] ) ( JOIN ( R [ residence ] ) [ Albert Einstein ] ) )"
    },
    {
        "question": "Question: { Which is the day of week for Pentecost? }",
        "predicted_query": [
            "( JOIN ( R [ day of week ] ) [ Pentecost ] )",
            "( JOIN [ day of week ] [ Pentecost ] )",
            "( [ joined by ] [ day of week ] [ Pentecost ] )",
            "( JOIN ( R [ day of the week ] ) [ Pentecost ] )",
            "( JOIN [ day of week ] [ Pentecost ] )"
        ],
        "gen_label": "( JOIN ( R [ day of week ] ) [ Pentecost ] )"
    },
    {
        "question": "Question: { Which is the FSK film rating for RoboCop? }",
        "predicted_query": [
            "( JOIN ( R [ FSK film rating ] ) [ RoboCop ] )",
            "( JOIN [ FSK film rating ] [ RoboCop ] )",
            "( JOIN ( R [ FSK film rating ] ) [ RoboCop ] )",
            "[ { JOIN ( R [ FSK film rating ] ) }, [ RoboCop ] ]",
            "( [ JOIN ] [ FSK film rating ] [ RoboCop ] )"
        ],
        "gen_label": "( JOIN ( R [ FSK film rating ] ) [ RoboCop ] )"
    },
    {
        "question": "Question: { What virus genome composes the West Nile fever? }",
        "predicted_query": [
            "( JOIN ( R [ virus genome ] ) [ West Nile fever ] )",
            "( JOIN [ virus genome ] [ West Nile fever ] )",
            "( JOIN ( R [ genome ] ) ( JOIN ( R [ causes ] ) [ West Nile fever ] ) )",
            "( JOIN ( JOIN ( R [ contains the administrative territorial entity ] ) [ West Nile fever ] ) [ virus genome ] )",
            "( AND ( JOIN [ contains the genome of ] [ West Nile fever ] ) ( JOIN ( R [ contains the genome of ] ) [ West Nile virus ] ) )"
        ],
        "gen_label": "( JOIN ( R [ ICTV virus genome composition ] ) ( JOIN ( R [ has cause ] ) [ West Nile fever ] ) )"
    },
    {
        "question": "Question: { What is not in cooperation with the branch of Jonathan Winters? }",
        "predicted_query": [
            "( JOIN ( R [ has a working relationship with ] ) ( JOIN ( R [ employer ] ) [ Jonathan Winters ] ) )",
            "[ JOIN [ not in cooperation with ] [ branch of ] [ Jonathan Winters ] ]",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Jonathan Winters ] ) ( JOIN ( R [ member of ] ) [ The Three Stooges ] ) )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ employer ] ) [ Jonathan Winters ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ cooperation with the branch of Jonathan Winters ] ) ( JOIN ( R [ member of ] ) [ Jonathan Winters ] ) )"
        ],
        "gen_label": "( JOIN ( R [ conflict ] ) ( JOIN ( R [ military branch ] ) [ Jonathan Winters ] ) )"
    },
    {
        "question": "Question: { Where are the signs of soman exposure found? }",
        "predicted_query": [
            "( JOIN ( R [ has symptom or sign ] ) ( JOIN ( R [ drug ] ) [ soman ] ) )",
            "( JOIN [ location of signs ] [ soman exposure ] )",
            "( JOIN [ has symptom or sign ] [ soman exposure ] )",
            "( JOIN ( R [ location of effect ] ) ( JOIN ( R [ symptoms ] ) [ soman ] ) )",
            "( AND ( JOIN [ present in body ] [ soman ] ) ( JOIN ( R [ symptoms ] ) [ soman exposure ] ) )"
        ],
        "gen_label": "( JOIN ( R [ anatomical location ] ) ( JOIN ( R [ symptoms and signs ] ) [ soman exposure ] ) )"
    },
    {
        "question": "Question: { Which is the Mountain Project ID for Joshua Tree National Park? }",
        "predicted_query": [
            "( JOIN ( R [ Mountain Project ID ] ) [ Joshua Tree National Park ] )",
            "[ JOIN ( R [ MountainProject.com ID ] ) [ Joshua Tree National Park ]",
            "( JOIN ( R [ Mountain Project ID ] ) [ Joshua Tree National Park ] )",
            "( JOIN ( R [ Mountain Project ID ] ) [ Joshua Tree National Park ] )",
            "[ JOIN ( R [ mountain project ID ] ) ] is question. [ Which is the"
        ],
        "gen_label": "( JOIN ( R [ Mountain Project ID ] ) [ Joshua Tree National Park ] )"
    },
    {
        "question": "Question: { What is the Bridgeman artist ID of John Dryden? }",
        "predicted_query": [
            "( JOIN ( R [ Bridgeman Artist ID ] ) [ John Dryden ] )",
            "[ JOIN ] [ John Dryden ] [ Bridgeman Artist ID ]",
            "( JOIN ( R [ Bridgeman artist ID ] ) [ John Dryden ] )",
            "( JOIN ( R [ Bridgeman Artists' Database artist ID ] ) [ John Dryden ] )",
            "( AND ( JOIN [ Bridgeman Art Library artist ID ] [ John Dryden ] ) ( JOIN ( R [ ID in this field ] ) [ John Dryden ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Bridgeman artist ID ] ) [ John Dryden ] )"
    },
    {
        "question": "Question: { What Vesto Slipher honours does 1st place medalist Joel Stebbins have? }",
        "predicted_query": [
            "( AND ( JOIN [ award received ] [ 1st place medalist ] ) ( JOIN ( R [ honors ] ) [ Joel Stebbins ] ) )",
            "( AND ( JOIN [ winner ] [ Joel Stebbins ] ) ( JOIN ( R [ award received ] ) [ Vesto Slipher ] ) )",
            "( AND ( JOIN [ award received ] [ 1st place medalist ] ) ( JOIN ( R [ award received ] ) [ Vesto Slipher ] ) )",
            "( AND ( JOIN [ recipient ] [ Joel Stebbins ] ) ( JOIN ( R [ award received ] ) [ Vesto Slipher ] ) )",
            "( JOIN ( R [ honours received ] ) ( JOIN ( R [ winner ] ) [ Joel Stebbins ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ winner ] [ Joel Stebbins ] ) ( JOIN ( R [ award received ] ) [ Vesto Slipher ] ) )"
    },
    {
        "question": "Question: { What is the energy source of gamma-aminobutyric acid? }",
        "predicted_query": [
            "( JOIN ( R [ energy source ] ) ( JOIN ( R [ has chemical or physical form ] ) [ gamma-aminobutyric acid ] ) )",
            "( JOIN [ energy source ] [ gamma-aminobutyric acid ] )",
            "( AND ( JOIN [ has energy source ] [ gamma-aminobutyric acid ] ) ( JOIN ( R [ has energy source ] ) [ gamma-aminobutyric acid ] ) )",
            "( JOIN ( R [ energy source ] ) [ gamma-aminobutyric acid ] )",
            "( JOIN ( R [ energy source ] ) ( JOIN ( R [ produces ] ) [ gamma-aminobutyric acid ] ) )"
        ],
        "gen_label": "( JOIN ( R [ source of energy ] ) ( JOIN ( R [ found in taxon ] ) [ γ-aminobutyric acid ] ) )"
    },
    {
        "question": "Question: { which sports is present atAnastasia Rodionova ? }",
        "predicted_query": [
            "( JOIN ( R [ present at ] ) ( JOIN ( R [ sport ] ) [ Anastasia Rodionova ] ) )",
            "( JOIN ( R [ present at ] ) ( JOIN ( R [ sports ] ) [ Anastasia Rodionova ] ) )",
            "( [ sports ] JOIN ( [ present at ] ) [ Anastasia Rodionova ] )",
            "( JOIN [ sports played ] [ present at ] ) [ Anastasia Rodionova ]",
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ present at ] ) [ Anastasia Rodionova ] ) )"
        ],
        "gen_label": "( JOIN ( R [ sport ] ) ( JOIN ( R [ participant in ] ) [ Anastasia Rodionova ] ) )"
    },
    {
        "question": "Question: { What town is the birthplace of Joseph Greenberg? }",
        "predicted_query": [
            "( JOIN ( R [ capital ] ) ( JOIN ( R [ place of birth ] ) [ Joseph Greenberg ] ) )",
            "[ JOIN ] [ place of birth ] [ Joseph Greenberg ]",
            "( JOIN ( R [ place of birth ] ) ( JOIN ( R [ linguistic affiliation ] ) [ Joseph Greenberg ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ place of birth ] ) [ Joseph Greenberg ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ town ] ) ( JOIN ( R [ place of birth ] ) [ Joseph Greenberg ] ) )"
        ],
        "gen_label": "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ place of birth ] ) [ Joseph Greenberg ] ) )"
    },
    {
        "question": "Question: { What is the boundary line for the Old City of Jerusalem? }",
        "predicted_query": [
            "( JOIN ( R [ follows the administrative boundary ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Old City of Jerusalem ] ) )",
            "[ JOIN [ boundary line ] [ Old City of Jerusalem ] ]",
            "( JOIN ( R [ boundary line ] ) [ Old City of Jerusalem ] )",
            "( JOIN ( R [ border ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Old City of Jerusalem ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Old City of Jerusalem ] ) ( JOIN ( R [ follows from ] ) [ political boundary ] ) )"
        ],
        "gen_label": "( JOIN ( R [ has boundary ] ) [ Old City of Jerusalem ] )"
    },
    {
        "question": "Question: { What is some of the weork of Jeffrey Nick? }",
        "predicted_query": [
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ employer ] ) [ Jeffrey Nick ] ) )",
            "( AND ( JOIN [ field of work ] [ Jeffrey Nick ] ) ( JOIN ( R [ question ] ) [ Jeffrey Nick ] ) )",
            "( JOIN [ work ] [ Jeffrey Nick ] )",
            "( JOIN ( R [ work ] ) ( JOIN ( R [ occupation ] ) [ Jeffrey Nick ] ) )",
            "( AND ( JOIN [ employer ] [ Jeffrey Nick ] ) ( JOIN ( R [ occupation ] ) [ Jeffrey Nick ] ) )"
        ],
        "gen_label": "( JOIN ( R [ parent organization ] ) ( JOIN ( R [ employer ] ) [ Jeffrey Nick ] ) )"
    },
    {
        "question": "Question: { Name the architectural style pattern of Nocturne: Blue and Silver - Cremorne Lights museum collections }",
        "predicted_query": [
            "( JOIN ( R [ architectural style ] ) ( JOIN ( R [ work ] ) [ Nocturne: Blue and Silver - Cremorne Lights ] ) )",
            "( JOIN ( R [ architectural style pattern ] ) [ Nocturne: Blue and Silver - Cremorne Lights ] )",
            "( JOIN ( R [ architectural style ] ) ( JOIN ( R [ part of the series ] ) [ Nocturne: Blue and Silver - Cremorne Lights ] ) )",
            "( JOIN ( R [ has architectural style pattern ] ) [ Nocturne: Blue and Silver - Cremorne Lights ] )",
            "( JOIN ( R [ architectural style pattern ] ) ( JOIN ( R [ collection ] ) [ Nocturne: Blue and Silver - Cremorne Lights ] ) )"
        ],
        "gen_label": "( JOIN ( R [ architectural style ] ) ( JOIN ( R [ collection ] ) [ Nocturne: Blue and Silver - Cremorne Lights ] ) )"
    },
    {
        "question": "Question: { What is the nomer of George Cayley that has the disputed equivalence to Gorch? }",
        "predicted_query": [
            "( AND ( JOIN [ disputed equivalence ] [ Gorch ] ) ( JOIN ( R [ IATA airport code ] ) [ George Cayley ] ) )",
            "( AND ( JOIN [ disputed equivalence of ] [ Gorch ] ) ( JOIN ( R [ IATA airport code ] ) [ George Cayley ] ) )",
            "[ JOIN ( R [ nommer ] ) [ has equivalent ] [ Gorch ] ]",
            "( AND ( JOIN [ has equivalent of ] [ Gorch ] ) ( JOIN ( R [ ICAO airport code ] ) [ George Cayley ] ) )",
            "( AND ( JOIN [ has disputed equivalence ] [ Gorch ] ) ( JOIN ( R [ ICAO airport code ] ) [ George Cayley ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ said to be the same as ] [ Gorch ] ) ( JOIN ( R [ given name ] ) [ George Cayley ] ) )"
    },
    {
        "question": "Question: { WHAT IS THE NATIONAL GALLERY OF ART ARTWORK ID OF  KNIGHT DEATH AND THE DEVIL }",
        "predicted_query": [
            "( JOIN ( R [ National Gallery of Art artwork ID ] ) [ Knight Death and the Devil ] )",
            "( JOIN ( R [ National Gallery of Art artist ID ] ) [ Knight Death and the Devil ] )",
            "( JOIN ( R JOIN ( JOIN ( R [ National Gallery of Art artwork ID ] ) [ Knight, Death, and the Devil ] ] ) [ question ] )",
            "( [ joined by ] [ Knight, Death, and the Devil ] )",
            "( JOIN ( R [ National Gallery Artwork ID ] ) [ Knight Death and the Devil ] )"
        ],
        "gen_label": "( JOIN ( R [ National Gallery of Art artwork ID ] ) [ Knight, Death, and the Devil ] )"
    },
    {
        "question": "Question: { Mention the position which President of Poland held as a sequence. }",
        "predicted_query": [
            "( JOIN ( R [ position held ] ) ( JOIN ( R [ occupation ] ) [ Lech Kaczyński ] ) )",
            "( JOIN [ position held ] [ President of Poland ] )",
            "( AND ( JOIN [ occupation ] [ President of Poland ] ) ( JOIN ( R [ position held ] ) [ Lech Kaczyński ] ) )",
            "( AND ( JOIN [ occupies position ] [ President of Poland ] ) ( JOIN ( R [ follows ] ) [ sequence ] ) )",
            "( JOIN [ occupies position in sequence ] [ President of Poland ] )"
        ],
        "gen_label": "( JOIN ( R [ position holder ] ) ( JOIN ( R [ follows ] ) [ President of the Republic of Poland ] ) )"
    },
    {
        "question": "Question: { What place that borders Saint-Maurice is where Shi Pei Pu died? }",
        "predicted_query": [
            "( AND ( JOIN [ shares border with ] [ Saint-Maurice ] ) ( JOIN ( R [ place of death ] ) [ Shi Pei Pu ] ) )",
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ place of death ] ) [ Shi Pei Pu ] ) )",
            "( JOIN [ shares border with ] [ Saint-Maurice ] ) ( JOIN ( R [ place of death ] ) [ Shi Pei Pu ] )",
            "( AND ( JOIN [ shares border with ] [ Saint-Maurice ] ) ( JOIN ( R [ place of death ] ) [ Shi Pei Pu ] ) )",
            "( AND ( JOIN [ shares border with ] [ Saint-Maurice, Val-de-Marne ] ) ( JOIN ( R [ place of death ] ) [ Shi Pei Pu ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ shares border with ] [ Saint-Maurice ] ) ( JOIN ( R [ place of death ] ) [ Shi Pei Pu ] ) )"
    },
    {
        "question": "Question: { What are the most famous books of the architecture firm Ben Rebhuhn House? }",
        "predicted_query": [
            "( JOIN ( R [ famous book ] ) ( JOIN ( R [ architect ] ) [ Ben Rebhuhn House ] ) )",
            "( AND ( JOIN [ notable work ] [ Ben Rebhuhn House ] ) ( JOIN ( R [ notable work ] ) [ Hans Scharoun ] ) )",
            "( JOIN ( R [ notable work ] ) ( JOIN ( R [ employer ] ) [ Ben Rebhuhn House ] ) )",
            "[join the historical artifact ID]",
            "( AND ( JOIN [ notable work ] [ Ben Rebhuhn House ] ) ( JOIN ( R [ notable work ] ) [ Peter Eisenman ] ) )"
        ],
        "gen_label": "( JOIN ( R [ notable work ] ) ( JOIN ( R [ architect ] ) [ Ben Rebhuhn House ] ) )"
    },
    {
        "question": "Question: { What is statement of subject for Ojibwe ? }",
        "predicted_query": [
            "( JOIN [ statement of subject ] [ Ojibwe ] )",
            "( JOIN ( R [ statement of subject ] ) [ Ojibwe ] )",
            "( JOIN ( JOIN ( R [ subject of ] ) [ Ojibwe ] ) [ What is the statement of subject for Ojibwe? ] )",
            "( JOIN ( R [ statement of subject ] ) [ Ojibwe ] )",
            "( JOIN ( R [ has statement ] ) ( JOIN ( R [ language of work ] ) [ Ojibwe ] ) )"
        ],
        "gen_label": "( JOIN ( R [ statement is subject of ] ) [ Ojibwe ] )"
    },
    {
        "question": "Question: { What is the Nomisma ID for the Kingdom of France ? }",
        "predicted_query": [
            "( JOIN ( R [ Nomisma ID ] ) [ Kingdom of France ] )",
            "( JOIN [ Nomisma ID ] [ Kingdom of France ] )",
            "( JOIN ( R [ Nomisma ID ] ) [ Kingdom of France ] )",
            "( JOIN ( R [ Nomisma ID ] ) [ Kingdom of France ] )",
            "( JOIN ( R [ Nomisma ID ] ) [ France ] )"
        ],
        "gen_label": "( JOIN ( R [ Nomisma ID ] ) [ Kingdom of France ] )"
    },
    {
        "question": "Question: { The British Overseas Territory G20 is a member of what voivodeship? }",
        "predicted_query": [
            "( AND ( JOIN [ member of ] [ voivodeship ] ) ( JOIN ( R [ member of ] ) [ G20 ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ voivodeship ] ) ( JOIN ( R [ member of ] ) [ G20 ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ voivodeship ] ) ( JOIN ( R [ member of ] ) [ G20 ] ) )",
            "( JOIN ( R [ member of ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ G20 member countries ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ voivodeship ] ) ( JOIN ( R [ member of the Commonwealth of Nations ] ) [ British Overseas Territory G20 ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ member of ] [ G20 ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ British overseas territories ] ) )"
    },
    {
        "question": "Question: { which animals have been filmed in the Jennie Project }",
        "predicted_query": [
            "( JOIN ( R [ filmed by ] ) ( JOIN ( R [ participant ] ) [ Jennie Project ] ) )",
            "( JOIN [ filmed in ] [ Jennie Project ] )",
            "( JOIN ( R [ has film ] ) ( JOIN ( R [ filmed in ] ) [ Jennie ] ) )",
            "( JOIN ( R [ animal filmed in ] ) [ Jennie Project ] )",
            "( AND ( JOIN [ filmed in ] [ Jennie Project ] ) ( JOIN ( R [ taxon ] ) [ animal ] ) )"
        ],
        "gen_label": "( JOIN ( R [ species kept ] ) ( JOIN ( R [ filming location ] ) [ The Jennie Project ] ) )"
    },
    {
        "question": "Question: { Which co-founder works for Christine Jones? }",
        "predicted_query": [
            "( JOIN ( R [ co-founder ] ) ( JOIN ( R [ employer ] ) [ Christine Jones ] ) )",
            "( JOIN ( R [ founder ] ) ( JOIN ( R [ employer ] ) [ Christine Jones ] ) )",
            "( AND ( JOIN [ employer ] [ Christine Jones ] ) ( JOIN ( R [ co-founder ] ) [ The New York Times ] ) )",
            "( JOIN [ co-founder ] [ Christine Jones ] )",
            "( AND ( JOIN [ founded by ] [ Christine Jones ] ) ( JOIN ( R [ employer ] ) [ Christine Jones ] ) )"
        ],
        "gen_label": "( JOIN ( R [ founded by ] ) ( JOIN ( R [ employer ] ) [ Christine Jones ] ) )"
    },
    {
        "question": "Question: { Who beat out Sidney Poitier for awards? }",
        "predicted_query": [
            "( [ joined ] [ winner ] [ Sidney Poitier ] )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ awarded to ] ) [ Sidney Poitier ] ) )",
            "[ JOIN ] [ award won ] [ Sidney Poitier ] ",
            "( AND ( JOIN [ award received ] [ Sidney Poitier ] ) ( JOIN ( R [ influenced by ] ) [ Whoopi Goldberg ] ) )",
            "( JOIN ( R [ winner ] ) ( JOIN ( R [ nominated for ] ) [ Sidney Poitier ] ) )"
        ],
        "gen_label": "( JOIN ( R [ winner ] ) ( JOIN ( R [ award received ] ) [ Sidney Poitier ] ) )"
    },
    {
        "question": "Question: { Which is a pollinator of Apis mellifera? }",
        "predicted_query": [
            "( JOIN ( R [ pollinator ] ) [ Apis mellifera ] )",
            "( JOIN [ pollinator ] [ Apis mellifera ] )",
            "( JOIN ( R [ pollinated by ] ) [ Apis mellifera ] )",
            "( AND ( JOIN [ has taxon ID ] [ Apis mellifera ] ) ( JOIN ( R [ pollinator ] ) [ honey bee ] ) )",
            "( JOIN ( R [ pollinator ] ) [ Apis mellifera ] )"
        ],
        "gen_label": "( JOIN [ is pollinator of ] [ Apis mellifera ] )"
    },
    {
        "question": "Question: { Who is the discoverer of radiocarbon dating and also the member of Heidelberg Academy for Sciences and Humanities? }",
        "predicted_query": [
            "( AND ( JOIN [ member of ] [ Heidelberg Academy for Sciences and Humanities ] ) ( JOIN ( R [ discoverer ] ) [ radiocarbon dating ] ) )",
            "( AND ( JOIN [ faculty member ] [ Heidelberg Academy for Sciences and Humanities ] ) ( JOIN ( R [ discoverer ] ) [ radiocarbon dating ] ) )",
            "( AND ( JOIN [ member of ] [ Heidelberg Academy for Sciences and Humanities ] ) ( JOIN ( R [ discoverer ] ) [ radiocarbon dating ] ) )",
            "( JOIN ( R [ discoverer ] ) ( JOIN ( R [ member of ] ) [ Heidelberg Academy for Sciences and Humanities ] ) )",
            "( AND ( JOIN [ member of ] [ Heidelberg Academy for Sciences and Humanities ] ) ( JOIN ( R [ discoverer ] ) [ radiocarbon dating ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ member of ] [ Heidelberg Academy for Sciences and Humanities ] ) ( JOIN ( R [ discoverer or inventor ] ) [ radiocarbon dating ] ) )"
    },
    {
        "question": "Question: { What is the nominal voltage in the Maldives? }",
        "predicted_query": [
            "( JOIN ( R [ nominal voltage ] ) [ Maldives ] )",
            "( JOIN [ nominal voltage ] [ Maldives ] )",
            "( JOIN ( R [ nominal voltage ] ) [ Maldives ] )",
            "( AND ( JOIN [ maximum value ] [ nominal voltage ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Maldives ] ) )",
            "( JOIN [ nominal voltage ] [ Maldives ] )"
        ],
        "gen_label": "( JOIN ( R [ mains voltage ] ) [ Maldives ] )"
    },
    {
        "question": "Question: { Which is the Ciné-Ressources film ID of Persona? }",
        "predicted_query": [
            "( JOIN ( R [ Ciné-Ressources film ID ] ) [ Persona ] )",
            "( JOIN ( R [ Ciné-Ressources film ID ] ) [ Persona ] )",
            "( JOIN [ Ciné-Ressources film ID ] [ Persona ] )",
            "( [ JOIN ] [ Ciné-Ressources film ID ] )",
            "( JOIN ( R [ Ciné-Ressources film ID ] ) [ Persona ] )"
        ],
        "gen_label": "( JOIN ( R [ Ciné-Ressources film ID ] ) [ Persona ] )"
    },
    {
        "question": "Question: { What is {presented by} {present} {Ben Wizner} ? }",
        "predicted_query": [
            "[ JOIN [ present ] [ Ben Wizner ] ]",
            "( JOIN ( R [ presented by ] ) ( JOIN ( R [ present ] ) [ Ben Wizner ] ) )",
            "[ ( R [ presenter ] ) [ present ] ]",
            "( JOIN ( R [ presented by ] ) [ Ben Wizner ] )",
            "( AND ( JOIN [ award received ] [ presented by ] ) ( JOIN ( R [ present ] ) [ Ben Wizner ] ) )"
        ],
        "gen_label": "( JOIN ( R [ presenter ] ) ( JOIN ( R [ participant in ] ) [ Ben Wizner ] ) )"
    },
    {
        "question": "Question: { Which is the ISzDb person ID for Scarlett Johansson? }",
        "predicted_query": [
            "( JOIN ( R [ ISzDb person ID ] ) [ Scarlett Johansson ] )",
            "( JOIN ( R [ ISzDb person ID ] ) [ Scarlett Johansson ] )",
            "( AND ( JOIN [ ID.br ] [ Scarlett Johansson ] ) ( JOIN ( R [ ID.iszdb.com person ID ] ) [ Scarlett Johansson ] ) )",
            "[ JOIN [ ISzDb person ID ] [ Sc",
            "( JOIN ( R [ ISzDb person ID ] ) [ Scarlett Johansson ] )"
        ],
        "gen_label": "( JOIN ( R [ ISzDb person ID ] ) [ Scarlett Johansson ] )"
    },
    {
        "question": "Question: { who  is favorite player of musical artist  A Collection 1984–1989} ? }",
        "predicted_query": [
            "( JOIN ( R [ favorite player ] ) ( JOIN ( R [ part of the series ] ) [ A Collection 1984–1989 ] ) )",
            "( JOIN ( R [ favorite player ] ) ( JOIN ( R [ performer ] ) [ A Collection 1984–1989 ] ) )",
            "( JOIN ( R [ sports played or practiced ] ) ( JOIN ( R [ performer ] ) [ A Collection 1984–1989 ] ) )",
            "( JOIN ( R [ performer ] ) ( JOIN ( R [ composer ] ) [ A Collection 1984–1989 ] ) )",
            "( AND ( JOIN [ performer ] [ A Collection 1984–1989 ] ) ( JOIN ( R [ favorite sport or sports person ] ) [ John McEnroe ] ) )"
        ],
        "gen_label": "( JOIN ( R [ influenced by ] ) ( JOIN ( R [ performer ] ) [ A Collection 1984–1989 ] ) )"
    },
    {
        "question": "Question: { Which is the Todotango.com person ID for Carmencita Calderón? }",
        "predicted_query": [
            "( JOIN ( R [ Todotango.com person ID ] ) [ Carmencita Calderón ] )",
            "( JOIN ( R [ Todotango.com person ID ] ) [ Carmencita Calderón ] )",
            "( JOIN ( R [ Todotango.com person ID ] ) [ Carmencita Calderón ] )",
            "( JOIN ( R [ TodoTango.com person ID ] ) [ Carmencita Calderón ] )",
            "( JOIN ( R [ Todotango person ID ] ) [ Carmencita Calderón ] )"
        ],
        "gen_label": "( JOIN ( R [ Todotango.com person ID ] ) [ Carmencita Calderón ] )"
    },
    {
        "question": "Question: { WHO IS THE ROLE MODEL RVK IDENTIFIER OF ARTHUR SCHOPENHAUER? }",
        "predicted_query": [
            "[]",
            "( AND ( JOIN [ RVK ID ] [ Arthur Schopenhauer ] ) ( JOIN ( R [ influenced by ] ) [ Arthur Schopenhauer ] ) )",
            "[ JOIN ( R [ RVK",
            "( AND ( JOIN [ role model RVK identifier ] [ Arthur Schopenhauer ] ) ( JOIN ( R [ occupation ] ) [ Arthur Schopenhauer ] ) )",
            "( JOIN ( R [ Role Model RVK identifier ] ) [ Arthur Schopenhauer ] )"
        ],
        "gen_label": "( JOIN ( R [ Regensburg Classification ] ) ( JOIN ( R [ influenced by ] ) [ Arthur Schopenhauer ] ) )"
    },
    {
        "question": "Question: { who subsidiary company of made by of Apple II ? }",
        "predicted_query": [
            "( JOIN ( R [ subsidiary company ] ) ( JOIN ( R [ manufacturer ] ) [ Apple II ] ) )",
            "( JOIN [ subsidiary company ] [ Apple II ] )",
            "( JOIN ( R [ company ] ) ( JOIN ( R [ manufacturer ] ) [ Apple II ] ) )",
            "( AND ( JOIN [ parent company ] [ Apple ] ) ( JOIN ( R [ manufacturer ] ) [ Apple II ] ) )",
            "( JOIN ( R [ subsidiary ] ) ( JOIN ( R [ manufacturer ] ) [ Apple II ] ) )"
        ],
        "gen_label": "( JOIN ( R [ has subsidiary ] ) ( JOIN ( R [ manufacturer ] ) [ Apple II ] ) )"
    },
    {
        "question": "Question: { Which is the Parsons code for Spiegel im Spiegel? }",
        "predicted_query": [
            "( JOIN ( R [ Parsons code ] ) [ Spiegel im Spiegel ] )",
            "( AND ( JOIN [ IATA airport code ] [ SPIEGEL.DE ] ) ( JOIN ( R [ IATA location identifier ] ) [ Spiegel im Spiegel ] ) )",
            "( JOIN ( R [ Parsons Art & Design Thesaurus code ] ) [ Spiegel im Spiegel ] )",
            "( JOIN ( R [ Parsons art and design database ID ] ) [ Spiegel im Spiegel ] )",
            "( JOIN ( R [ Parsons code ] ) [ Spiegel im Spiegel ] )"
        ],
        "gen_label": "( JOIN ( R [ Parsons code ] ) [ Spiegel im Spiegel ] )"
    },
    {
        "question": "Question: { Where did Candice Bergen graduate from and what has she established? }",
        "predicted_query": [
            "( AND ( JOIN [ founded ] [ Candice Bergen ] ) ( JOIN ( R [ place of establishment ] ) [ Candice Bergen ] ) )",
            "( AND ( JOIN [ founded by ] [ Candice Bergen ] ) ( JOIN ( R [ place of establishment ] ) [ Candice Bergen ] ) )",
            "( JOIN [ established ] [ Candice Bergen ] ) ( JOIN ( R [ educated at ] ) [ Candice Bergen ] )",
            "( JOIN ( R [ location ] ) ( JOIN ( R [ founded by ] ) [ Candice Bergen ] ) )",
            "( AND ( JOIN [ established ] [ Candice Bergen ] ) ( JOIN ( R [ education ] ) [ Candice Bergen ] ) )"
        ],
        "gen_label": "( JOIN ( R [ founded by ] ) ( JOIN ( R [ educated at ] ) [ Candice Bergen ] ) )"
    },
    {
        "question": "Question: { Which is the InChl for pyridine? }",
        "predicted_query": [
            "( JOIN [ InChl ] [ pyridine ] )",
            "( JOIN ( R [ InChI ] ) [ pyridine ] )",
            "( AND ( JOIN [ ChemSpider ID ] [ InChI ] ) ( JOIN ( R [ IUPAC name ] ) [ pyridine ] ) )",
            "( JOIN ( R [ InChl ] ) [ pyridine ] )",
            "( JOIN ( JOIN ( R [ InChI ] ) [ pyridine ] ) )"
        ],
        "gen_label": "( JOIN ( R [ InChI ] ) [ pyridine ] )"
    },
    {
        "question": "Question: { Who married the actor in Shadow of the Thin Man? }",
        "predicted_query": [
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ cast member ] ) [ Shadow of the Thin Man ] ) )",
            "( JOIN [ married ] [ Shadow of the Thin Man ] )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ married to ] ) [ Shadow of the Thin Man ] ) )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ married ] ) [ Shadow of the Thin Man ] ) )",
            "( JOIN ( R [ spouse ] ) ( JOIN ( R [ cast ] ) [ Shadow of the Thin Man ] ) )"
        ],
        "gen_label": "( JOIN ( R [ spouse ] ) ( JOIN ( R [ cast member ] ) [ Shadow of the Thin Man ] ) )"
    },
    {
        "question": "Question: { What are the signs or symptoms of hydrogen sulfide? }",
        "predicted_query": [
            "( JOIN ( R [ symptoms or signs ] ) [ hydrogen sulfide ] )",
            "( JOIN ( R [ has symptom or sign ] ) ( JOIN ( R [ has effect ] ) [ hydrogen sulfide ] ) )",
            "( AND ( JOIN [ has symptoms or signs ] [ hydrogen sulfide ] ) ( JOIN ( R [ has symptoms or signs ] ) [ hydrogen sulfide ] ) )",
            "( JOIN [ symptoms or signs ] [ hydrogen sulfide ] )",
            "( JOIN ( R [ symptom or sign ] ) ( JOIN ( R [ has effect ] ) [ hydrogen sulfide ] ) )"
        ],
        "gen_label": "( JOIN ( R [ symptoms and signs ] ) ( JOIN ( R [ has effect ] ) [ hydrogen sulfide ] ) )"
    },
    {
        "question": "Question: { WHO IS THE DIANE'S RECORD PRODUCER PARTNER? }",
        "predicted_query": [
            "( JOIN ( R [ Diane's Record Producer partner ] ) [ Diane Tell ] )",
            "( JOIN ( R [ Diane's Record Producer ] ) [ Diane Tell ] )",
            "( JOIN ( R [ record producer ] ) ( JOIN ( R [ record label ] ) [ Diane ] ) )",
            "( JOIN [ Diane's Record Producer partner ] [ Diane Warren ] )",
            "( JOIN ( R [ producer ] ) ( JOIN ( R [ record label ] ) [ Diane ] ) )"
        ],
        "gen_label": "( JOIN ( R [ spouse ] ) ( JOIN ( R [ producer ] ) [ Diane ] ) )"
    },
    {
        "question": "Question: { Which is the audio for Neil Armstrong? }",
        "predicted_query": [
            "( JOIN ( R [ audio ] ) [ Neil Armstrong ] )",
            "( JOIN ( R [ soundtrack ] ) [ Neil Armstrong ] )",
            "( JOIN [ audio ] [ Neil Armstrong ] )",
            "( AND ( JOIN [ has audio track ] ) ( JOIN ( R [ soundtrack ] ) [ Neil Armstrong ] ) )",
            "None."
        ],
        "gen_label": "( JOIN ( R [ audio ] ) [ Neil Armstrong ] )"
    },
    {
        "question": "Question: { Which is the deepest point of Tajikistan? }",
        "predicted_query": [
            "( JOIN ( R [ deepest point ] ) [ Tajikistan ] )",
            "( JOIN [ deepest point ] [ Tajikistan ] )",
            "( JOIN ( R [ depth below sea level ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Tajikistan ] ) )",
            "( JOIN ( R [ deepest point ] ) [ Tajikistan ] )",
            "( AND ( JOIN [ maximum depth ] [ Tajikistan ] ) ( JOIN ( R [ lowest point ] ) [ Tajikistan ] ) )"
        ],
        "gen_label": "( JOIN ( R [ lowest point ] ) [ Tajikistan ] )"
    },
    {
        "question": "Question: { What is the person is use researchgate of James Hanson }",
        "predicted_query": [
            "( JOIN ( R [ researchgate ID ] ) [ James Hanson ] )",
            "( JOIN ( R [ person is researcher of ] ) [ James Hanson ] )",
            "( JOIN ( R [ discoverer ] ) [ James Hanson ] )",
            "( AND ( JOIN [ uses researchgate ] [ James Hanson ] ) ( JOIN ( R [ occupation ] ) [ James Hanson ] ) )",
            "### Join Details:"
        ],
        "gen_label": "( JOIN ( R [ ResearchGate profile ID ] ) [ James E. Hansen ] )"
    },
    {
        "question": "Question: { When is the biological phase of puberty? }",
        "predicted_query": [
            "( JOIN ( R [ biological phase ] ) [ puberty ] )",
            "( JOIN ( R [ onset ] ) ( JOIN ( R [ biological phase ] ) [ puberty ] ) )",
            "( JOIN [ biological phase of puberty ] [ puberty ] )",
            "( JOIN ( R [ biological phase of puberty ] ) [ puberty ] )",
            "[ JOIN ( [ onset of puberty ] ) ]"
        ],
        "gen_label": "( JOIN [ biological phase ] [ puberty ] )"
    },
    {
        "question": "Question: { Who is the launch contractor for James Webb Space Telescope? }",
        "predicted_query": [
            "( JOIN ( R [ launch contractor ] ) [ James Webb Space Telescope ] )",
            "( JOIN ( R [ contractor ] ) ( JOIN ( R [ launched by ] ) [ James Webb Space Telescope ] ) )",
            "( JOIN [ launch contractor ] [ James Webb Space Telescope ] )",
            "( JOIN ( R [ manufacturer ] ) ( JOIN ( R [ launch vehicle ] ) [ James Webb Space Telescope ] ) )",
            "( JOIN ( R [ launch contractor ] ) [ James Webb Space Telescope ] )"
        ],
        "gen_label": "( JOIN ( R [ launch contractor ] ) [ James Webb Space Telescope ] )"
    },
    {
        "question": "Question: { what do Game Boy Color emulate? }",
        "predicted_query": [
            "( JOIN ( R [ emulates ] ) [ Game Boy Color ] )",
            "( JOIN ( R [ emulated by ] ) ( JOIN ( R [ platform ] ) [ Game Boy Color ] ) )",
            "( JOIN [ emulates ] [ Game Boy Color ] )",
            "( JOIN ( JOIN ( R [ emulates ] ) [ Game Boy Color ] ) )",
            "( AND ( JOIN [ platform ] [ Game Boy Color ] ) ( JOIN ( R [ emulates ] ) [ Game Boy Color ] ) )"
        ],
        "gen_label": "( JOIN [ emulates ] [ Game Boy Color ] )"
    },
    {
        "question": "Question: { What do Wikidata usage instructions say about legend? }",
        "predicted_query": [
            "( JOIN ( R [ Wikidata usage instructions ] ) ( JOIN ( R [ follows ] ) [ legend ] ) )",
            "( AND ( JOIN [ contains the information about ] [ legend ] ) ( JOIN ( R [ follows ] ) [ Wikidata ] ) )",
            "( JOIN [ Wikidata usage instructions ] [ legend ] )",
            "( JOIN ( R [ Wikidata item ID ] ) ( JOIN ( R [ has instruction ] ) [ legend ] ) )",
            "( AND ( JOIN [ has information from ] [ Wikidata usage instructions ] ) ( JOIN ( R [ follows ] ) [ legend ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Wikidata usage instructions ] ) [ legend ] )"
    },
    {
        "question": "Question: { What is script of second language of Plutarch ? }",
        "predicted_query": [
            "( JOIN [ second language ] [ Plutarch ] )",
            "( JOIN ( R [ spoken language ] ) ( JOIN ( R [ language of work ] ) [ Plutarch ] ) )",
            "( AND ( JOIN [ language spoken, written or signed ] [ Latin ] ) ( JOIN ( R [ language of work ] ) [ Plutarch ] ) )",
            "( JOIN ( R [ writing system ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Plutarch ] ) )",
            "( JOIN ( R [ language of work ] ) ( JOIN ( R [ language spoken, written or signed ] ) [ Plutarch ] ) )"
        ],
        "gen_label": "( JOIN ( R [ writing system ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Plutarch ] ) )"
    },
    {
        "question": "Question: { Which is {alphabet} of {official language} of {Crimean Khanate} ? }",
        "predicted_query": [
            "( JOIN ( R [ writing system ] ) ( JOIN ( R [ language ] ) [ Crimean Khanate ] ) )",
            "( AND ( JOIN [ written in language ] [ Crimean Tatar ] ) ( JOIN ( R [ written in ] ) [ Crimean Khanate ] ) )",
            "( JOIN [ alphabet ] [ Crimean Khanate ] )",
            "( JOIN ( R [ writing system ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Crimean Khanate ] ) )",
            "( JOIN ( R [ alphabet ] ) ( JOIN ( R [ official language ] ) [ Crimean Khanate ] ) )"
        ],
        "gen_label": "( JOIN ( R [ writing system ] ) ( JOIN ( R [ official language ] ) [ Crimean Khanate ] ) )"
    },
    {
        "question": "Question: { What is legally established by embezzlement, that applies to territorial jurisdiction in Germany? }",
        "predicted_query": [
            "( AND ( JOIN [ applies to territorial jurisdiction ] [ Germany ] ) ( JOIN ( R [ established by ] ) [ embezzlement ] ) )",
            "( AND ( JOIN [ has territorial jurisdiction ] [ Germany ] ) ( JOIN ( R [ established by ] ) [ embezzlement ] ) )",
            "( AND ( JOIN [ has legal or political status ] [ territorial jurisdiction ] ) ( JOIN ( R [ applies in ] ) [ embezzlement ] ) )",
            "( JOIN [ applies to territorial jurisdiction ] [ embezzlement ] )",
            "( AND ( JOIN [ applies to ] [ territorial jurisdiction ] ) ( JOIN ( R [ legal basis ] ) [ embezzlement ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ applies to jurisdiction ] [ Germany ] ) ( JOIN ( R [ main regulatory text ] ) [ embezzlement ] ) )"
    },
    {
        "question": "Question: { What is Madonna's RSL ID (person)? }",
        "predicted_query": [
            "( JOIN ( R [ RSL ID ( person ) ] ) [ Madonna ] )",
            "( [ joined by ] [ RSL ID ] [ Madonna ] )",
            "( JOIN ( R [ Royal Society of Literature ID ( person ) ] ) [ Madonna ] )",
            "( JOIN [ RSL ID (person) ] [ Madonna ] )",
            "( [ JOIN ] [ RSL ID ( person ) ] [ Madonna ] )"
        ],
        "gen_label": "( JOIN ( R [ RSL ID ( person ) ] ) [ Madonna ] )"
    },
    {
        "question": "Question: { What day of the week is Labour day? }",
        "predicted_query": [
            "( JOIN [ day of the week ] [ Labour Day ] )",
            "( JOIN ( R [ day of the week ] ) [ Labour Day ] )",
            "( JOIN [ day of the week ] [ Labour Day ] )",
            "( JOIN ( R [ day of the week ] ) ( JOIN ( R [ observed ] ) [ Labour Day ] ) )",
            "( JOIN ( R [ day of the week ] ) [ Labour Day ] )"
        ],
        "gen_label": "( JOIN ( R [ day of week ] ) ( JOIN ( R [ day in year for periodic occurrence ] ) [ Labour Day ] ) )"
    },
    {
        "question": "Question: { What is the Tab4u artist ID for Shlomo Carlebach? }",
        "predicted_query": [
            "( JOIN ( R [ Tab4u artist ID ] ) [ Shlomo Carlebach ] )",
            "( JOIN ( R [ Tab4u artist ID ] ) [ Shlomo Carlebach ] )",
            "( JOIN ( R [ Tab4u artist ID ] ) [ Shlomo Carlebach ] )",
            "( AND ( JOIN [ tab4u.com artist ID ] [ Shlomo Carlebach ] ) ( JOIN ( R [ ID in this artist ] ) [ Shlomo Carlebach ] ) )",
            "[ JOIN ( R [ Tab4U artist ID ] ) ] [ Shlomo Carlebach ]"
        ],
        "gen_label": "( JOIN ( R [ Tab4u artist ID ] ) [ Shlomo Carlebach ] )"
    },
    {
        "question": "Question: { how the wallaby's endenism has a diplomamatic relation with New caledonia ? }",
        "predicted_query": [
            "( AND ( JOIN [ diplomatic relation ] [ New Caledonia ] ) ( JOIN ( R [ taxon ] ) [ wallaby ] ) )",
            "[ { JOIN ( R [ diplomatic relation ] ) }, [ taxon ] ]",
            "( AND ( JOIN [ has diplomatic relations with ] [ New Caledonia ] ) ( JOIN ( R [ taxon ] ) [ wallaby ] ) )",
            "( JOIN [ diplomatic relation ] [ New Caledonia ] ) ( JOIN ( R [ has diplomatic relations with ] ) [ wallaby ] )",
            "( AND ( JOIN [ diplomatic relations ] [ New Caledonia ] ) ( JOIN ( R [ has taxon ] ) [ wallaby ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ diplomatic relation ] [ New Caledonia ] ) ( JOIN ( R [ endemic to ] ) [ wallaby ] ) )"
    },
    {
        "question": "Question: { gsdfhgdfh }",
        "predicted_query": [
            "( AND ( JOIN [ member of ] [ GSDF ] ) ( JOIN ( R [ question ] ) [ gsdfhgdfh ] ) )",
            "( JOIN ( R [ has a military rank ] ) ( JOIN ( R [ member of the military unit ] ) [ GSG 9 ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Gansu ] ) ( JOIN ( R [ contains the administrative territorial entity ] ) [ Gansu ] ) )",
            "( JOIN ( R [ GDF-HQ ] ) [ gsdfhgdfh ] )",
            "( JOIN [ has member of ] [ GSDFHGDFH ] )"
        ],
        "gen_label": "( AND ( JOIN [ contains the administrative territorial entity ] [ Saunders County ] ) ( JOIN ( R [ facet of ] ) [ history of Nebraska ] ) )"
    },
    {
        "question": "Question: { What is the language spoken in the city which Ronaldinho played sports? }",
        "predicted_query": [
            "( JOIN ( R [ language spoken ] ) ( JOIN ( R [ place of work ] ) [ Ronaldinho ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Rio de Janeiro ] ) ( JOIN ( R [ native language ] ) [ Ronaldinho ] ) )",
            "( JOIN ( R [ spoken in ] ) ( JOIN ( R [ country ] ) [ Ronaldinho ] ) )",
            "( JOIN ( R [ native language ] ) ( JOIN ( R [ sport played ] ) [ Ronaldinho ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ city ] ) ( JOIN ( R [ native language ] ) [ Ronaldinho ] ) )"
        ],
        "gen_label": "( JOIN ( R [ pronunciation audio ] ) ( JOIN ( R [ country for sport ] ) [ Ronaldinho ] ) )"
    },
    {
        "question": "Question: { What is Norsk biografisk leksikon ID for Niels Henrik Abel ? }",
        "predicted_query": [
            "( JOIN ( R [ Norsk biografisk leksikon ID ] ) [ Niels Henrik Abel ] )",
            "( JOIN ( R [ Norsk biografisk leksikon ID ] ) [ Niels Henrik Abel ] )",
            "[ JOIN [ Nor",
            "( AND ( JOIN [ NBID ] [ Niels Henrik Abel ] ) ( JOIN ( R [ ID ] ) [ Niels Henrik Abel ] ) )",
            "( JOIN ( R [ Norsk biografisk leksikon person ID ] ) [ Niels Henrik Abel ] )"
        ],
        "gen_label": "( JOIN ( R [ Norsk biografisk leksikon ID ] ) [ Niels Henrik Abel ] )"
    },
    {
        "question": "Question: { At which party is Donald Rumsfeld a member and has what is his membership? }",
        "predicted_query": [
            "( AND ( JOIN [ member of ] [ Donald Rumsfeld ] ) ( JOIN ( R [ member of ] ) [ political party ] ) )",
            "( AND ( JOIN [ member of political party ] [ Donald Rumsfeld ] ) ( JOIN ( R [ member of ] ) [ political party ] ) )",
            "( JOIN ( R [ political party ] ) ( JOIN ( R [ member of ] ) [ Donald Rumsfeld ] ) )",
            "( JOIN [ member of ] [ Donald Rumsfeld ] ) ( JOIN ( R [ member of ] ) [ political party ] )",
            "( AND ( JOIN [ party ] [ Republican Party ] ) ( JOIN ( R [ member of ] ) [ Donald Rumsfeld ] ) )"
        ],
        "gen_label": "( JOIN ( R [ member count ] ) ( JOIN ( R [ member of political party ] ) [ Donald Rumsfeld ] ) )"
    },
    {
        "question": "Question: { Which is the clearance of the Forth Bridge? }",
        "predicted_query": [
            "( JOIN ( R [ clearance ] ) [ Forth Bridge ] )",
            "( JOIN ( R [ clearance ] ) [ Forth Bridge ] )",
            "[ JOIN ] [ clear",
            "( JOIN [ clearance ] [ Forth Bridge ] )",
            "( JOIN ( R [ clearance height ] ) [ Forth Bridge ] )"
        ],
        "gen_label": "( JOIN ( R [ clearance ] ) [ Forth Bridge ] )"
    },
    {
        "question": "Question: { Who is starring in Gary the Monster? }",
        "predicted_query": [
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ present in work ] ) [ Gary the Monster ] ) )",
            "( JOIN ( R [ cast member ] ) [ Gary the Monster ] )",
            "[ JOIN ] [ cast member ] [ Gary the Monster ] ",
            "( JOIN [ starring in ] [ Gary the Monster ] )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ based on ] ) [ Gary the Monster ] ) )"
        ],
        "gen_label": "( JOIN ( R [ cast member ] ) ( JOIN ( R [ present in work ] ) [ Gary the Monster ] ) )"
    },
    {
        "question": "Question: { What is the birthplace of A. D. Hope, which has local government areas in the City of Liverpool? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ City of Liverpool ] ) ( JOIN ( R [ place of birth ] ) [ A. D. Hope ] ) )",
            "( AND ( JOIN [ has administrative territorial entity ] [ City of Liverpool ] ) ( JOIN ( R [ place of birth ] ) [ A. D. Hope ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ City of Liverpool ] ) ( JOIN ( R [ place of birth ] ) [ A. D. Hope ] ) )",
            "( AND ( JOIN ( R [ place of birth ] ) [ A. D. Hope ] ) )",
            "( AND ( JOIN [ has local government area ] [ City of Liverpool ] ) ( JOIN ( R [ place of birth ] ) [ A. D. Hope ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ contains the administrative territorial entity ] [ City of Liverpool ] ) ( JOIN ( R [ place of birth ] ) [ A. D. Hope ] ) )"
    },
    {
        "question": "Question: { Which is the Strunz 8th edition (series ID, updated of muscovite? }",
        "predicted_query": [
            "( JOIN ( R [ Strunz 8th edition ( series ID ) ] ) ( JOIN ( R [ updated ] ) [ muscovite ] ) )",
            "( JOIN [ Strunz 8th edition (series ID) ] [ muscovite ] )",
            "( JOIN ( R [ Strunz 8th edition (series ID) ] ) ( JOIN ( R [ updated of ] ) [ muscovite ] ) )",
            "( JOIN ( R [ Strunz series ID ] ) ( JOIN ( R [ updated ] ) [ muscovite ] ) )",
            "( AND ( JOIN [ series ID ] [ Strunz 8th edition ] ) ( JOIN ( R [ updated version of ] ) [ muscovite ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Strunz 8th edition ( series ID, updated ) ] ) [ muscovite ] )"
    },
    {
        "question": "Question: { Who is the mentor of Hans - Hermann Hoppe's doctorate supervisor? }",
        "predicted_query": [
            "( JOIN ( R [ student ] ) ( JOIN ( R [ doctoral advisor ] ) [ Hans-Hermann Hoppe ] ) )",
            "( AND ( JOIN [ student of ] [ Hans-Hermann Hoppe ] ) ( JOIN ( R [ influenced by ] ) [ Hans-Hermann Hoppe ] ) )",
            "( JOIN ( R [ taught by ] ) ( JOIN ( R [ doctoral advisor ] ) [ Hans-Hermann Hoppe ] ) )",
            "( JOIN ( R [ mentor ] ) ( JOIN ( R [ doctoral advisor ] ) [ Hans-Hermann Hoppe ] ) )",
            "( AND ( JOIN [ doctoral advisor ] [ Hans-Hermann Hoppe ] ) ( JOIN ( R [ influenced by ] ) [ Hans-Hermann Hoppe ] ) )"
        ],
        "gen_label": "( JOIN ( R [ student of ] ) ( JOIN ( R [ doctoral advisor ] ) [ Hans-Hermann Hoppe ] ) )"
    },
    {
        "question": "Question: { Which is the IGHOF athlete ID of Nikolai Andrianov? }",
        "predicted_query": [
            "( [ JOIN ] [ IGHOF athlete ID ] )",
            "( [ JOIN ] [ International Gymnastics Hall of Fame athlete ID ] )",
            "[ { JOIN ( R [ IGHOF athlete ID ] ) [ Nikolai Andrianov ] } ]",
            "( JOIN ( R [ International Gymnastics Hall of Fame athlete ID ] ) [ Nikolai Andrianov ] )",
            "( JOIN ( R [ IGHOF athlete ID ] ) [ Nikolai Andrianov ] )"
        ],
        "gen_label": "( JOIN ( R [ IGHOF athlete ID ] ) [ Nikolai Andrianov ] )"
    },
    {
        "question": "Question: { What eponym of Platonic realism is represented in Lysis? }",
        "predicted_query": [
            "( AND ( JOIN [ named after ] [ Platonic realism ] ) ( JOIN ( R [ depicts ] ) [ Lysis ] ) )",
            "( AND ( JOIN [ depicts ] [ Lysis ] ) ( JOIN ( R [ named after ] ) [ Platonic realism ] ) )",
            "( AND ( JOIN [ notable work ] [ Lysis ] ) ( JOIN ( R [ named after ] ) [ Platonic realism ] ) )",
            "( JOIN ( R [ eponym of ] ) ( JOIN ( R [ depicts ] ) [ Lysis ] ) )",
            "( JOIN [ eponym of ] [ Platonic realism ] ) ( JOIN ( R [ question ] ) [ Lysis ] )"
        ],
        "gen_label": "( AND ( JOIN [ notable work ] [ Lysis ] ) ( JOIN ( R [ named after ] ) [ Platonic realism ] ) )"
    },
    {
        "question": "Question: { Which is the enclave within Oromia Region? }",
        "predicted_query": [
            "( JOIN ( R [ enclave within ] ) [ Oromia ] )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Oromia ] ) )",
            "( JOIN [ enclave within ] [ Oromia Region ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Oromia Region ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Oromia ] ) )",
            "( JOIN [ enclave within ] [ Oromia Region ] )"
        ],
        "gen_label": "( JOIN [ enclave within ] [ Oromia Region ] )"
    },
    {
        "question": "Question: { Which is the LAC ID for Patty Hearst? }",
        "predicted_query": [
            "( JOIN ( R [ LAC ID ] ) [ Patty Hearst ] )",
            "( JOIN [ LAC ID ] [ Patty Hearst ] )",
            "( JOIN ( R [ LAC ID ] ) [ Patty Hearst ] )",
            "( JOIN ( R [ LA-AC ID ] ) [ Patty Hearst ] )",
            "( JOIN ( R [ LAC ID ] ) [ Patty Hearst ] )"
        ],
        "gen_label": "( JOIN ( R [ Canadiana Authorities ID ( former scheme ) ] ) [ Patty Hearst ] )"
    },
    {
        "question": "Question: { Which is the Natura 2000 site ID of Minho River? }",
        "predicted_query": [
            "( JOIN ( R [ Natura 2000 site ID ] ) [ Minho River ] )",
            "( JOIN [ Natura 2000 site ID ] [ Minho River ] )",
            "( JOIN ( R [ Natura 2000 site ID ] ) [ Minho ] )",
            "( JOIN ( R [ Natura 2000 site ID ] ) [ Minho River ] )",
            "( JOIN ( R [ Natura 2000 site ID ] ) [ Minho River ] )"
        ],
        "gen_label": "( JOIN ( R [ Natura 2000 site ID ] ) [ Minho River ] )"
    },
    {
        "question": "Question: { What is the forefather of the measured by of tornado ? }",
        "predicted_query": [
            "( JOIN ( R [ father ] ) ( JOIN ( R [ measured by ] ) [ tornado ] ) )",
            "( AND ( JOIN [ measured by ] [ tornado ] ) ( JOIN ( R [ parent taxon ] ) [ tornado ] ) )",
            "( JOIN [ measured by ] [ tornado ] )",
            "( JOIN ( R [ measured by ] ) ( JOIN ( R [ parent of ] ) [ tornado ] ) )",
            "( AND ( JOIN [ follows occupation ] [ meteorologist ] ) ( JOIN ( R [ measured by ] ) [ tornado ] ) )"
        ],
        "gen_label": "( JOIN ( R [ replaces ] ) ( JOIN ( R [ measurement scale ] ) [ tornado ] ) )"
    },
    {
        "question": "Question: { how many number of seasons of Miami Vice ? }",
        "predicted_query": [
            "( JOIN ( R [ number of seasons ] ) [ Miami Vice ] )",
            "( JOIN ( R [ number of seasons ] ) [ Miami Vice ] )",
            "[ JOIN [ number of seasons ] [ Miami Vice ] ]",
            "( JOIN ( R [ season count ] ) [ Miami Vice ] )",
            "( JOIN ( R [ number of seasons ] ) [ Miami Vice ] )"
        ],
        "gen_label": "( JOIN ( R [ number of seasons ] ) [ Miami Vice ] )"
    },
    {
        "question": "Question: { What is made by Webby? }",
        "predicted_query": [
            "( JOIN ( R [ manufactured by ] ) ( JOIN ( R [ award received ] ) [ Webby Awards ] ) )",
            "[ JOIN ( R [ manufacturer ] ) [ Webby Awards ] ]",
            "( JOIN [ made by ] [ Webby ] )",
            "( JOIN [ manufactured by ] [ Webby ] )",
            "( JOIN ( R [ product or service produced ] ) ( JOIN ( R [ product or question ] ) [ Webby Awards ] ) )"
        ],
        "gen_label": "( JOIN ( R [ creator ] ) ( JOIN ( R [ present in work ] ) [ Webby Vanderquack ] ) )"
    },
    {
        "question": "Question: { Which is the border seat of Hafun Fishing Company? }",
        "predicted_query": [
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ headquarters location ] ) [ Hafun Fishing Company ] ) )",
            "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Hafun Fishing Company ] ) )",
            "( JOIN ( R [ border seat ] ) ( JOIN ( R [ company ] ) [ Hafun Fishing Company ] ) )",
            "( AND ( JOIN [ seat in parliament ] [ Hafun Fishing Company ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Hafun Fishing Company ] ) )",
            "( JOIN [ border seat ] [ Hafun Fishing Company ] )"
        ],
        "gen_label": "( JOIN ( R [ shares border with ] ) ( JOIN ( R [ headquarters location ] ) [ Hafun Fishing Company ] ) )"
    },
    {
        "question": "Question: { What is the Science Museum's Science Museum people ID? }",
        "predicted_query": [
            "( JOIN ( R [ Science Museum people ID ] ) [ John Harrison ] )",
            "( JOIN ( R [ Science Museum people ID ] ) [ David Attenborough ] )",
            "( JOIN ( R [ Science Museum people ID ] ) [ Sir Isaac Newton ] )",
            "( JOIN ( R [ Science Museum people ID ] ) [ Robert Hooke ] )",
            "( AND ( JOIN [ ID.com person ID ] [ Science Museum people ID ] ) ( JOIN ( R [ ID.com person ID ] ) [ Science Museum ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Science Museum people ID ] ) [ Science Museum ] )"
    },
    {
        "question": "Question: { What is PM20 folder ID for Daniel Ortega ? }",
        "predicted_query": [
            "( JOIN ( R [ PM20 folder ID ] ) [ Daniel Ortega ] )",
            "( JOIN ( R [ PM20 folder ID ] ) [ Daniel Ortega ] )",
            "( JOIN [ PM20 folder ID ] [ Daniel Ortega ] )",
            "( [ joined by ] [ PM20 folder ID ] [ Daniel Ortega ] )",
            "( AND ( JOIN [ Pandora Music artist ID ] [ Daniel Ortega ] ) ( JOIN ( R [ folder ID ] ) [ Daniel Ortega ] ) )"
        ],
        "gen_label": "( JOIN ( R [ PM20 folder ID ] ) [ Daniel Ortega ] )"
    },
    {
        "question": "Question: { What is Ohio State University's Emporis building complex ID? }",
        "predicted_query": [
            "( JOIN ( R [ Emporis building complex ID ] ) [ Ohio State University ] )",
            "( JOIN ( R [ Emporis building ID ] ) [ Ohio State University ] )",
            "##",
            "( [ joined by ] [ Emporis building complex ID ] [ Ohio State University ] )",
            "( AND ( JOIN [ Emporis ID ] [ Ohio State University ] ) ( JOIN ( R [ ID ] ) [ Ohio State University ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Emporis building complex ID ] ) [ Ohio State University ] )"
    },
    {
        "question": "Question: { What is the biological classification of the subject in the photograph Cypress, Point Lobos? }",
        "predicted_query": [
            "( JOIN ( R [ taxon ] ) ( JOIN ( R [ photographed by ] ) [ Cypress, Point Lobos ] ) )",
            "( JOIN ( R [ taxon name ] ) ( JOIN ( R [ depicted ] ) [ Cypress, Point Lobos ] ) )",
            "( JOIN ( R [ biological classification ] ) ( JOIN ( R [ photographed by ] ) [ Cypress, Point Lobos ] ) )",
            "( JOIN [ biological classification ] [ Cypress, Point Lobos ] )",
            "( AND ( JOIN [ taxon name ] [ Cypress, Point Lobos ] ) ( JOIN ( R [ taxon of ] ) [ Cypress, Point Lobos ] ) )"
        ],
        "gen_label": "( JOIN ( R [ parent taxon ] ) ( JOIN ( R [ depicts ] ) [ Cypress, Point Lobos ] ) )"
    },
    {
        "question": "Question: { Which is the title for Girl with a Pearl Earring? }",
        "predicted_query": [
            "( JOIN ( R [ title ] ) [ Girl with a Pearl Earring ] )",
            "( [ joined by ] [ title ] [ Girl with a Pearl Earring ] )",
            "( JOIN [ title ] [ Girl with a Pearl Earring ] )",
            "( JOIN ( R [ title ] ) [ Girl with a Pearl Earring ] )",
            "{ JOIN ( R [ title ] ) [ Girl with a Pearl Earring ] }"
        ],
        "gen_label": "( JOIN ( R [ title ] ) [ Girl with a Pearl Earring ] )"
    },
    {
        "question": "Question: { Which {regulatory body} of {language of expression} of {Juan José Flores} ? }",
        "predicted_query": [
            "( JOIN ( R [ regulatory body ] ) ( JOIN ( R [ language of expression ] ) [ Juan José Flores ] ) )",
            "( [ joined ] [ language of expression ] [ Juan José Flores ] )",
            "( JOIN [ regulatory body ] [ language of expression ] ) [ Juan José Flores ]",
            "( AND ( JOIN [ language of expression ] [ Spanish ] ) ( JOIN ( R [ regulated by ] ) [ Juan José Flores ] ) )",
            "( JOIN ( R [ regulated by ] ) ( JOIN ( R [ linguistic affiliation ] ) [ Juan José Flores ] ) )"
        ],
        "gen_label": "( JOIN ( R [ language regulatory body ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Juan José Flores ] ) )"
    },
    {
        "question": "Question: { Which is the number of households of Meknes? }",
        "predicted_query": [
            "( JOIN ( R [ number of households ] ) [ Meknes ] )",
            "( JOIN [ number of households ] [ Meknes ] )",
            "( JOIN ( R [ household size ] ) ( JOIN ( R [ population ] ) [ Meknes ] ) )",
            "( JOIN ( R [ number of households ] ) [ Meknes ] )",
            "( JOIN [ number of households ] [ Meknès ] )"
        ],
        "gen_label": "( JOIN ( R [ number of households ] ) [ Meknes ] )"
    },
    {
        "question": "Question: { Which team is owned by Bryan Meredith? }",
        "predicted_query": [
            "( JOIN ( R [ owned by ] ) ( JOIN ( R [ team ] ) [ Bryan Meredith ] ) )",
            "( JOIN ( R [ team owner ] ) [ Bryan Meredith ] )",
            "( JOIN [ owned by ] [ Bryan Meredith ] )",
            "( JOIN ( JOIN ( R [ owner ] ) [ Bryan Meredith ] ) )",
            "( AND ( JOIN [ owned by ] [ Bryan Meredith ] ) ( JOIN ( R [ member of ] ) [ Team USA ] ) )"
        ],
        "gen_label": "( JOIN ( R [ owned by ] ) ( JOIN ( R [ member of sports team ] ) [ Bryan Meredith ] ) )"
    },
    {
        "question": "Question: { I s Santiago Calatrava a structural engineer? }",
        "predicted_query": [
            "( JOIN ( R [ structural engineer ] ) [ Santiago Calatrava ] )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ field of work ] ) [ Santiago Calatrava ] ) )",
            "( JOIN [ structural engineer ] [ Santiago Calatrava ] )",
            "( JOIN ( R [ architect or designer ] ) ( JOIN ( R [ field of work ] ) [ Santiago Calatrava ] ) )",
            "( AND ( JOIN [ field of work ] [ structural engineer ] ) ( JOIN ( R [ follows ] ) [ Santiago Calatrava ] ) )"
        ],
        "gen_label": "( JOIN [ structural engineer ] [ Santiago Calatrava ] )"
    },
    {
        "question": "Question: { Which is the Turkish Football Federation coach ID for Zico? }",
        "predicted_query": [
            "( JOIN ( R [ Turkish Football Federation coach ID ] ) [ Zico ] )",
            "( JOIN ( R [ Turkish Football Federation coach ID ] ) [ Zico ] )",
            "### Instruction:",
            "( AND ( JOIN [ coach ] [ Zico ] ) ( JOIN ( R [ ID ] ) [ Turkish Football Federation ] ) )",
            "( JOIN ( R [ Turkish Football Federation player ID ] ) [ Zico ] )"
        ],
        "gen_label": "( JOIN ( R [ Turkish Football Federation coach ID ] ) [ Zico ] )"
    },
    {
        "question": "Question: { What is the PORT film ID for the movie Toy Story? }",
        "predicted_query": [
            "( JOIN ( R [ PORT film ID ] ) [ Toy Story ] )",
            "( JOIN ( R [ Port.film.id ] ) [ Toy Story ] )",
            "( JOIN ( R [ PORT film ID ] ) [ Toy Story ] )",
            "( AND ( JOIN [ IFFD database ID ] [ Toy Story ] ) ( JOIN ( R [ film ID ] ) [ Toy Story ] ) )",
            "( JOIN ( R [ PORT film ID ] ) [ Toy Story ] )"
        ],
        "gen_label": "( JOIN ( R [ PORT film ID ] ) [ Toy Story ] )"
    },
    {
        "question": "Question: { What are the ends that are informed by baroque? }",
        "predicted_query": [
            "( JOIN ( R [ has end ] ) ( JOIN ( R [ influenced by ] ) [ Baroque ] ) )",
            "( JOIN [ informed by ] [ baroque ] )",
            "( JOIN ( R [ end ] ) ( JOIN ( R [ influenced by ] ) [ baroque ] ) )",
            "( AND ( JOIN [ informed by ] [ baroque ] ) ( JOIN ( R [ end ] ) [ baroque ] ) )",
            "( JOIN [ ends informed by ] [ baroque ] )"
        ],
        "gen_label": "( JOIN ( R [ end time ] ) ( JOIN ( R [ influenced by ] ) [ Baroque ] ) )"
    },
    {
        "question": "Question: { Which is {history} of {plays} of {Lenin Guerra Tulcan} ? }",
        "predicted_query": [
            "( JOIN ( R [ history ] ) ( JOIN ( R [ author ] ) [ Lenin Guerra Tulcan ] ) )",
            "( JOIN ( R [ history ] ) ( JOIN ( R [ playwright ] ) [ Lenin Guerra Tulcan ] ) )",
            "( JOIN ( R [ history of playwright ] ) ( JOIN ( R [ playwright ] ) [ Lenin Guerra Tulcan ] ) )",
            "( JOIN [ history ] [ plays ] ) [ Lenin Guerra Tulcan ]",
            "( JOIN ( R [ history ] ) ( JOIN ( R [ writer ] ) [ Lenin Guerra Tulcan ] ) )"
        ],
        "gen_label": "( JOIN ( R [ history of topic ] ) ( JOIN ( R [ sport ] ) [ Lenin Guerra Tulcan ] ) )"
    },
    {
        "question": "Question: { Which is the WBPLN author ID for Rainer Maria Rilke? }",
        "predicted_query": [
            "( JOIN ( R [ WBPLN author ID ] ) [ Rainer Maria Rilke ] )",
            "( [ joined by ] [ WBPLN author ID ] [ Rainer Maria Rilke ] )",
            "( JOIN ( R [ WBPLN author ID ] ) [ Rainer Maria Rilke ] )",
            "( AND ( JOIN [ WorldCat Person ID ] [ Rainer Maria Rilke ] ) ( JOIN ( R [ author ] ) [ WBPLN ] ) )",
            "( JOIN ( R [ World Book Publication List Number ( WBPLN ) ] ) [ Rainer Maria Rilke ] )"
        ],
        "gen_label": "( JOIN ( R [ WBPLN author ID ] ) [ Rainer Maria Rilke ] )"
    },
    {
        "question": "Question: { WHAT IS THE CROSSES FOR TOWER BRIDGE }",
        "predicted_query": [
            "( JOIN ( R [ has cross ] ) ( JOIN ( R [ located in ] ) [ Tower Bridge ] ) )",
            "( JOIN [ has crosses ] [ Tower Bridge ] )",
            "( JOIN ( R [ number of crossings ] ) ( JOIN ( R [ located in ] ) [ Tower Bridge ] ) )",
            "( JOIN [ crosses ] [ Tower Bridge ] )",
            "( JOIN ( R [ crosses ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Tower Bridge ] ) )"
        ],
        "gen_label": "( JOIN ( R [ crosses ] ) [ Tower Bridge ] )"
    },
    {
        "question": "Question: { Who is the head coach of Malcolm Allison? }",
        "predicted_query": [
            "( JOIN ( R [ head coach ] ) [ Malcolm Allison ] )",
            "[",
            "( JOIN [ head coach ] [ Malcolm Allison ] )",
            "( JOIN ( R [ coach ] ) [ Malcolm Allison ] )",
            "( JOIN ( R [ coach ] ) ( JOIN ( R [ head of government ] ) [ Malcolm Allison ] ) )"
        ],
        "gen_label": "( JOIN [ head coach ] [ Malcolm Allison ] )"
    },
    {
        "question": "Question: { Which is the North Carolina Sports Hall of Fame ID of Dale Earnhardt? }",
        "predicted_query": [
            "( JOIN ( R [ North Carolina Sports Hall of Fame ID ] ) [ Dale Earnhardt ] )",
            "Overview of the North Carolina Sports Hall of Fame",
            "( AND ( JOIN [ NCSPORTSHOF.com ID ] [ Dale Earnhardt ] ) ( JOIN ( R [ member of ] ) [ North Carolina Sports Hall of Fame ] ) )",
            "( JOIN ( R [ North Carolina Sports Hall of Fame ID ] ) [ Dale Earnhardt ] )",
            "( JOIN ( R [ North Carolina Sports Hall of Fame ID ] ) [ Dale Earnhardt ] )"
        ],
        "gen_label": "( JOIN ( R [ North Carolina Sports Hall of Fame ID ] ) [ Dale Earnhardt ] )"
    },
    {
        "question": "Question: { What is the Sherdog ID of Fedor Emelianenko? }",
        "predicted_query": [
            "( JOIN ( R [ Sherdog ID ] ) [ Fedor Emelianenko ] )",
            "( JOIN ( R [ Sherdog ID ] ) [ Fedor Emelianenko ] )",
            "( JOIN ( R [ Sherdog.com ID ] ) [ Fedor Emelianenko ] )",
            "( AND ( JOIN [ Sport Data archive record ID ] [ Sherdog ID of Fedor Emelianenko ] ) ( JOIN ( R [ sport discipline ] ) [ Fedor Emelianenko ] ) )",
            "( JOIN ( R [ Sherdog ID ] ) [ Fedor Emelianenko ] )"
        ],
        "gen_label": "( JOIN ( R [ Sherdog fighter ID ] ) [ Fedor Emelianenko ] )"
    },
    {
        "question": "Question: { If the point group is cubic-hexoctahedral, what is the space group of spinel? }",
        "predicted_query": [
            "( AND ( JOIN [ point group ] [ cubic-hexoctahedral ] ) ( JOIN ( R [ space group ] ) [ spinel ] ) )",
            "( JOIN [ space group ] [ spinel ] ) ( JOIN ( R [ point group ] ) [ cubic-hexoctahedral ] )",
            "( AND ( JOIN [ crystal system ] [ cubic-hexoctahedral ] ) ( JOIN ( R [ space group ] ) [ spinel ] ) )",
            "( JOIN ( R [ space group ] ) ( JOIN ( R [ crystal system ] ) [ spinel ] ) )",
            "( AND ( JOIN [ point group ] [ cubic-hexoctahedral ] ) ( JOIN ( R [ space group ] ) [ spinel ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ point group ] [ cubic-hexoctahedral ] ) ( JOIN ( R [ space group ] ) [ espinela ] ) )"
    },
    {
        "question": "Question: { Which is in opposition to nuclear weapon? }",
        "predicted_query": [
            "( JOIN ( R [ opposite of ] ) [ nuclear weapon ] )",
            "( JOIN [ in opposition to ] [ nuclear weapon ] )",
            "( JOIN [ in opposition to ] [ nuclear weapon ] )",
            "( AND ( JOIN [ opposed to ] [ nuclear weapon ] ) [ nuclear power ] )",
            "( AND ( JOIN [ opponent ] [ nuclear weapon ] ) ( JOIN ( R [ opposed by ] ) [ nuclear weapon ] ) )"
        ],
        "gen_label": "( JOIN [ in opposition to ] [ nuclear weapon ] )"
    },
    {
        "question": "Question: { Tell me the geographic data of the country of Kampala. }",
        "predicted_query": [
            "( JOIN ( R [ geographic data ] ) [ Kampala ] )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ country of origin ] ) [ Kampala ] ) )",
            "( JOIN [ geographic data ] [ Kampala ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Kampala ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Uganda ] ) )",
            "( JOIN ( R [ country ] ) ( JOIN ( R [ located in ] ) [ Kampala ] ) )"
        ],
        "gen_label": "( JOIN ( R [ geoshape ] ) ( JOIN ( R [ capital of ] ) [ Kampala ] ) )"
    },
    {
        "question": "Question: { What is the political ideology of the Conservative Party? }",
        "predicted_query": [
            "( JOIN ( R [ political ideology ] ) [ Conservative Party ] )",
            "[ joined ] [ political ideology ]",
            "( JOIN [ political ideology ] [ Conservative Party ] )",
            "( JOIN ( R [ political ideology ] ) ( JOIN ( R [ member of ] ) [ Conservative Party ] ) )",
            "( AND ( JOIN [ ideology ] [ conservatism ] ) ( JOIN ( R [ member of ] ) [ Conservative Party ] ) )"
        ],
        "gen_label": "( JOIN ( R [ political ideology ] ) [ Conservative Party ] )"
    },
    {
        "question": "Question: { What is the name of the Dungeons and Dragon's publishing house that was founded in Seattle? }",
        "predicted_query": [
            "( AND ( JOIN [ founded in ] [ Seattle ] ) ( JOIN ( R [ publisher ] ) [ Dungeons & Dragons ] ) )",
            "( JOIN ( R [ publisher ] ) ( JOIN ( R [ founded in ] ) [ Dungeons & Dragons ] ) )",
            "( AND ( JOIN [ location ] [ Seattle ] ) ( JOIN ( R [ publisher ] ) [ Dungeons & Dragons ] ) )",
            "( AND ( JOIN [ founded in ] [ Seattle ] ) ( JOIN ( R [ publisher ] ) [ Dungeons & Dragons ] ) )",
            "( AND ( JOIN [ located in the administrative territorial entity ] [ Seattle ] ) ( JOIN ( R [ publisher ] ) [ Dungeons & Dragons ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ location of formation ] [ Seattle ] ) ( JOIN ( R [ publisher ] ) [ Dungeons & Dragons ] ) )"
    },
    {
        "question": "Question: { What are the diplomatic relations of Burgas? }",
        "predicted_query": [
            "( JOIN ( R [ diplomatic relations ] ) [ Burgas ] )",
            "( JOIN ( R [ diplomatic relations ] ) [ Burgas ] )",
            "( JOIN [ diplomatic relations ] [ Burgas ] )",
            "( JOIN [ diplomatic relations ] [ Burgas ] )",
            "( AND ( JOIN [ has diplomatic relations with ] [ Burgas ] ) ( JOIN ( R [ diplomatic relations ] ) [ Burgas ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country ] ) [ Burgas ] ) )"
    },
    {
        "question": "Question: { who inhabitants of twin city of monrovia ? }",
        "predicted_query": [
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ twinned administrative body ] ) [ Monrovia ] ) )",
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ twinned administrative body ] ) [ Monrovia ] ) )",
            "( JOIN ( R [ twin city ] ) ( JOIN ( R [ inhabitant ] ) [ Monrovia ] ) )",
            "( JOIN [ twinned administrative body ] [ Monrovia ] )",
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Monrovia ] ) )"
        ],
        "gen_label": "( JOIN ( R [ population ] ) ( JOIN ( R [ twinned administrative body ] ) [ Monrovia ] ) )"
    },
    {
        "question": "Question: { WHO IS THE SISTER OR BROTHER OF THE BAHAI FAITH FOUNDER? }",
        "predicted_query": [
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ religion ] ) [ Bahá'í Faith ] ) )",
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ religion ] ) [ Baháʼí Faith ] ) )",
            "( AND ( JOIN [ sibling ] [ Bahá'í Faith founder ] ) ( JOIN ( R [ given name ] ) [ Bahá'u'lláh ] ) )",
            "( JOIN [ sibling ] [ Bahá'í Faith founder ] )",
            "( AND ( JOIN [ sibling ] [ Bahá'í Faith founder ] ) ( JOIN ( R [ family member ] ) [ Bahá'í Faith ] ) )"
        ],
        "gen_label": "( JOIN ( R [ sibling ] ) ( JOIN ( R [ founded by ] ) [ Baháʼí Faith ] ) )"
    },
    {
        "question": "Question: { Which is {headquarter} {made by} of {SM UB-43} ? }",
        "predicted_query": [
            "( JOIN ( R [ headquarters ] ) ( JOIN ( R [ manufacturer ] ) [ SM UB-43 ] ) )",
            "( JOIN ( R [ headquarters location ] ) ( JOIN ( R [ manufacturer ] ) [ SM UB-43 ] ) )",
            "( JOIN ( R [ headquarter ] ) ( JOIN ( R [ manufacturer ] ) [ SM UB-43 ] ) )",
            "( JOIN ( R [ headquarters ] ) ( JOIN ( R [ manufacturer ] ) [ SM UB-43 ] ) )",
            "( AND ( JOIN [ location of headquarters ] [ SM UB-43 ] ) ( JOIN ( R [ manufacturer ] ) [ SM UB-43 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ headquarters location ] ) ( JOIN ( R [ manufacturer ] ) [ SM UB-43 ] ) )"
    },
    {
        "question": "Question: { Who is the main building contractor for Krak des Chevaliers? }",
        "predicted_query": [
            "( JOIN ( R [ main building contractor ] ) [ Krak des Chevaliers ] )",
            "( JOIN ( R [ main contractor ] ) [ Krak des Chevaliers ] )",
            "( JOIN ( R [ contractor ] ) ( JOIN ( R [ architect ] ) [ Krak des Chevaliers ] ) )",
            "( JOIN [ main building contractor ] [ Krak des Chevaliers ] )",
            "( AND ( JOIN [ employer ] [ Krak des Chevaliers ] ) ( JOIN ( R [ architect ] ) [ Krak des Chevaliers ] ) )"
        ],
        "gen_label": "( JOIN ( R [ main building contractor ] ) [ Krak des Chevaliers ] )"
    },
    {
        "question": "Question: { When and where did George Henderson die? }",
        "predicted_query": [
            "( JOIN ( R [ place of death ] ) ( JOIN ( R [ place of birth ] ) [ George Henderson ] ) )",
            "( JOIN ( R [ place of death ] ) ( JOIN ( R [ died ] ) [ George Henderson ] ) )",
            "( JOIN [ place of death ] [ George Henderson ] ) AND ( JOIN ( R [ place of death ] ) [ George Henderson ] )",
            "( AND ( JOIN [ place of death ] [ George Henderson ] ) ( JOIN ( R [ place of death ] ) [ George Henderson ] ) )",
            "( JOIN [ place of death ] [ George Henderson ] ) AND ( JOIN ( R [ located in time period ] ) [ George Henderson ] )"
        ],
        "gen_label": "( JOIN ( R [ history of topic ] ) ( JOIN ( R [ place of death ] ) [ George Henderson ] ) )"
    },
    {
        "question": "Question: { What is the language of Debbie Macomber, that is English? }",
        "predicted_query": [
            "( AND ( JOIN [ language of work ] [ English ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Debbie Macomber ] ) )",
            "( JOIN [ language of work ] [ English ] )",
            "( AND ( JOIN [ spoken in ] [ English ] ) ( JOIN ( R [ language ] ) [ Debbie Macomber ] ) )",
            "( AND ( JOIN [ native language ] [ English ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Debbie Macomber ] ) )",
            "( AND ( JOIN [ contains linguistic information ] [ English ] ) ( JOIN ( R [ language ] ) [ Debbie Macomber ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ named after ] [ England ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Debbie Macomber ] ) )"
    },
    {
        "question": "Question: { Who is the co-founder who works for Rosita Boisseau? }",
        "predicted_query": [
            "( JOIN ( R [ founder ] ) ( JOIN ( R [ employer ] ) [ Rosita Boisseau ] ) )",
            "( JOIN ( R [ co-founder ] ) ( JOIN ( R [ employer ] ) [ Rosita Boisseau ] ) )",
            "( AND ( JOIN [ employer ] [ Rosita Boisseau ] ) ( JOIN ( R [ co-founder ] ) [ The New York Times ] ) )",
            "[ JOIN [ founded by ] [ Rosita Boisseau ] ]",
            "( AND ( JOIN [ employment ] [ Rosita Boisseau ] ) ( JOIN ( R [ founding member ] ) [ The Beatles ] ) )"
        ],
        "gen_label": "( JOIN ( R [ founded by ] ) ( JOIN ( R [ employer ] ) [ Rosita Boisseau ] ) )"
    },
    {
        "question": "Question: { What is the MuseScore ID of 1812 Overture? }",
        "predicted_query": [
            "( JOIN ( R [ MuseScore ID ] ) [ 1812 Overture ] )",
            "( JOIN ( R [ MuseScore work ID ] ) [ 1812 Overture ] )",
            "( JOIN ( R [ MuseScore ID ] ) [ 1812 Overture ] )",
            "( AND ( JOIN [ Musescore ID ] [ Symphony No. 5 ( Beethoven ) ] ) ( JOIN ( R [ ID ] ) [ 1812 Overture ] ) )",
            "( JOIN ( R [ MuseScore ID ] ) [ Overture to The Year 1812 ] )"
        ],
        "gen_label": "( JOIN ( R [ MuseScore ID ] ) [ 1812 Overture ] )"
    },
    {
        "question": "Question: { Name the boyfriend of Aphrodite who has the child of Cephalus. }",
        "predicted_query": [
            "( AND ( JOIN [ child ] [ Cephalus ] ) ( JOIN ( R [ spouse ] ) [ Aphrodite ] ) )",
            "( AND ( JOIN [ parent of ] [ Cephalus ] ) ( JOIN ( R [ spouse ] ) [ Aphrodite ] ) )",
            "( AND ( JOIN [ child ] [ Cephalus ] ) ( JOIN ( R [ spouse ] ) [ Aphrodite ] ) )",
            "( JOIN [ child ] [ Cephalus ] ) ( JOIN ( R [ spouse ] ) [ Aphrodite ] )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ spouse ] ) [ Aphrodite ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ father ] [ Cephalus ] ) ( JOIN ( R [ unmarried partner ] ) [ Aphrodite ] ) )"
    },
    {
        "question": "Question: { Who is the child of the sister or the brother of Meketaten? }",
        "predicted_query": [
            "( JOIN ( R [ child ] ) ( JOIN ( R [ sibling ] ) [ Meketaten ] ) )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ child ] ) [ Meketaten ] ) )",
            "( JOIN [ sibling ] [ Meketaten ] ) ( JOIN ( R [ father ] ) [ Tutankhamun ] )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ sibling ] ) [ Meketaten ] ) )",
            "( AND ( JOIN [ sibling ] [ Meketaten ] ) ( JOIN ( R [ parent ] ) [ Nefertiti ] ) )"
        ],
        "gen_label": "( JOIN ( R [ father ] ) ( JOIN ( R [ sibling ] ) [ Meketaten ] ) )"
    },
    {
        "question": "Question: { What countries does Renata Tebaldi hold citizenship with? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Italy ] ) ( JOIN ( R [ country of citizenship ] ) [ Renata Tebaldi ] ) )",
            "( JOIN [ country of citizenship ] [ Renata Tebaldi ] )",
            "( JOIN ( R [ country of citizenship ] ) ( JOIN ( R [ place of birth ] ) [ Renata Tebaldi ] ) )",
            "( JOIN ( R [ diplomatic relations ] ) ( JOIN ( R [ country of citizenship ] ) [ Renata Tebaldi ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Italy ] ) ( JOIN ( R [ country of citizenship ] ) [ Renata Tebaldi ] ) )"
        ],
        "gen_label": "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ country of citizenship ] ) [ Renata Tebaldi ] ) )"
    },
    {
        "question": "Question: { Which is the MIMO instrument ID of didgeridoo? }",
        "predicted_query": [
            "( JOIN ( R [ MIMO instrument ID ] ) [ didgeridoo ] )",
            "( JOIN ( R [ MIMO instrument ID ] ) [ didgeridoo ] )",
            "[ JOIN ( R [ MIMO instrument ID ] ) [ didgeridoo ] ]",
            "( AND ( JOIN [ instrument ID ] [ didgeridoo ] ) ( JOIN ( R [ MIMO instrument ID ] ) [ didgeridoo ] ) )",
            "( JOIN ( R [ MIMO instrument ID ] ) [ didjeridu ] )"
        ],
        "gen_label": "( JOIN ( R [ MIMO instrument ID ] ) [ didgeridoo ] )"
    },
    {
        "question": "Question: { What planet orbits the star of an asteroid belt? }",
        "predicted_query": [
            "( JOIN ( R [ planet ] ) ( JOIN ( R [ orbited by ] ) [ asteroid belt ] ) )",
            "( JOIN [ planet orbits ] [ asteroid belt ] )",
            "( AND ( JOIN [ has planetary system ] [ asteroid belt ] ) ( JOIN ( R [ has planetary system ] ) [ asteroid ] ) )",
            "( JOIN ( R [ planet orbits ] ) ( JOIN ( R [ has planet ] ) [ asteroid belt ] ) )",
            "( AND ( JOIN [ orbited by ] [ asteroid belt ] ) ( JOIN ( R [ has planet ] ) [ Jupiter ] ) )"
        ],
        "gen_label": "( JOIN ( R [ child astronomical body ] ) ( JOIN ( R [ parent astronomical body ] ) [ asteroid belt ] ) )"
    },
    {
        "question": "Question: { Who died and wrote The Planets? }",
        "predicted_query": [
            "( JOIN ( R [ composer ] ) ( JOIN ( R [ author ] ) [ The Planets ] ) )",
            "( JOIN [ died ] [ The Planets ] )",
            "( JOIN ( R [ author ] ) ( JOIN ( R [ composer ] ) [ The Planets ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ The Planets ] ) ( JOIN ( R [ author ] ) [ The Planets ] ) )",
            "( JOIN ( R [ has died ] ) ( JOIN ( R [ composer ] ) [ The Planets ] ) )"
        ],
        "gen_label": "( JOIN ( R [ cause of death ] ) ( JOIN ( R [ composer ] ) [ The Planets ] ) )"
    },
    {
        "question": "Question: { Which is the century breaks for Joe Davis? }",
        "predicted_query": [
            "( JOIN ( R [ century breaks ] ) [ Joe Davis ] )",
            "( JOIN ( R [ century breaks ] ) [ Joe Davis ] )",
            "( JOIN [ century breaks ] [ Joe Davis ] )",
            "### Instruction:",
            "( JOIN [ century breaks ] [ Joe Davis ] )"
        ],
        "gen_label": "( JOIN ( R [ century breaks ] ) [ Joe Davis ] )"
    },
    {
        "question": "Question: { What day of the week is preceded by Easter? }",
        "predicted_query": [
            "( JOIN ( R [ day of the week ] ) ( JOIN ( R [ follows ] ) [ Easter ] ) )",
            "( JOIN [ day of the week ] [ Easter ] )",
            "( JOIN ( R [ day of the week ] ) ( JOIN ( R [ preceded by ] ) [ Easter ] ) )",
            "( AND ( JOIN [ follows ] [ Easter ] ) ( JOIN ( R [ day of the week ] ) [ Easter ] ) )",
            "( JOIN ( R [ follows ] ) ( JOIN ( R [ day of the week ] ) [ Easter ] ) )"
        ],
        "gen_label": "( JOIN ( R [ day of week ] ) ( JOIN ( R [ follows ] ) [ Easter − 7 days ] ) )"
    },
    {
        "question": "Question: { What diplomatic relations do the originates of Anal Cunt possess? }",
        "predicted_query": [
            "( JOIN ( R [ diplomatic relations ] ) ( JOIN ( R [ origin country ] ) [ Anal Cunt ] ) )",
            "( JOIN [ diplomatic relations ] [ Anal Cunt ] )",
            "( AND ( JOIN [ has diplomatic relations ] [ Anal Cunt ] ) ( JOIN ( R [ country of origin ] ) [ Anal Cunt ] ) )",
            "( JOIN ( R [ diplomatic relations ] ) ( JOIN ( R [ country of origin ] ) [ Anal Cunt ] ) )",
            "( AND ( JOIN [ diplomatic relation ] [ diplomatic relations ] ) ( JOIN ( R [ origin country ] ) [ Anal Cunt ] ) )"
        ],
        "gen_label": "( JOIN ( R [ diplomatic relation ] ) ( JOIN ( R [ country of origin ] ) [ Anal Cunt ] ) )"
    },
    {
        "question": "Question: { In Varun Dhawan what is the second language? }",
        "predicted_query": [
            "( AND ( JOIN [ language of work ] [ Hindi ] ) ( JOIN ( R [ native language ] ) [ Varun Dhawan ] ) )",
            "( JOIN ( R [ second language ] ) [ Varun Dhawan ] )",
            "( JOIN ( R [ second language ] ) ( JOIN ( R [ native language ] ) [ Varun Dhawan ] ) )",
            "( JOIN [ second language ] [ Varun Dhawan ] )",
            "( AND ( JOIN [ spoken in ] [ Hindi ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Varun Dhawan ] ) )"
        ],
        "gen_label": "( JOIN ( R [ linguistic typology ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Varun Dhawan ] ) )"
    },
    {
        "question": "Question: { Which is the totem of Mantodea? }",
        "predicted_query": [
            "( JOIN ( R [ totem ] ) [ Mantodea ] )",
            "[ JOIN [ totem ] [ Mantodea ] ]",
            "( JOIN ( R [ totem ] ) [ Mantodea ] )",
            "( JOIN [ totem ] [ Mantodea ] )",
            "( AND ( JOIN [ taxon name ] [ Mantodea ] ) ( JOIN ( R [ followed by ] ) [ totem animal ] ) )"
        ],
        "gen_label": "( JOIN [ totem ] [ Mantodea ] )"
    },
    {
        "question": "Question: { Where was Voyager 1 travelling? }",
        "predicted_query": [
            "( JOIN ( R [ location ] ) ( JOIN ( R [ launched from ] ) [ Voyager 1 ] ) )",
            "( JOIN ( R [ travelled to ] ) [ Voyager 1 ] )",
            "( JOIN [ travels to ] [ Voyager 1 ] )",
            "( AND ( JOIN [ country of origin ] [ United States ] ) ( JOIN ( R [ location of discovery ] ) [ Voyager 1 ] ) )",
            "( JOIN ( R [ location of discovery ] ) ( JOIN ( R [ launched from ] ) [ Voyager 1 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ destination point ] ) [ Voyager 1 ] )"
    },
    {
        "question": "Question: { What is the enthalpy of vaporization for potassium hydroxide? }",
        "predicted_query": [
            "( JOIN ( R [ enthalpy of vaporization ] ) [ potassium hydroxide ] )",
            "( JOIN [ enthalpy of vaporization ] [ potassium hydroxide ] )",
            "( JOIN ( R [ enthalpy of vaporization ] ) [ potassium hydroxide ] )",
            "( JOIN ( R [ heat of vaporization ] ) [ potassium hydroxide ] )",
            "( JOIN ( R [ has entropy of vaporization ] ) [ potassium hydroxide ] )"
        ],
        "gen_label": "( JOIN ( R [ molar enthalpy of vaporization ] ) [ potassium hydroxide ] )"
    },
    {
        "question": "Question: { What is in the production designer of It's a Wonderful Life ? }",
        "predicted_query": [
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ cast member ] ) [ It's a Wonderful Life ] ) )",
            "( JOIN [ production designer ] [ It's a Wonderful Life ] )",
            "[The Last Supper]",
            "( JOIN ( R [ producer or distributor ] ) ( JOIN ( R [ cast member ] ) [ It's a Wonderful Life ] ) )",
            "( JOIN ( R [ employer ] ) ( JOIN ( R [ cast member ] ) [ It's a Wonderful Life ] ) )"
        ],
        "gen_label": "( JOIN ( R [ production designer ] ) [ It's a Wonderful Life ] )"
    },
    {
        "question": "Question: { Who is {mayor} of {birth location} of {Humphrey Bogart} ? }",
        "predicted_query": [
            "( JOIN ( R [ mayor ] ) ( JOIN ( R [ place of birth ] ) [ Humphrey Bogart ] ) )",
            "( AND ( JOIN [ location of birth ] [ Humphrey Bogart ] ) ( JOIN ( R [ occupation ] ) [ Humphrey Bogart ] ) )",
            "( JOIN ( R [ capital city ] ) ( JOIN ( R [ place of birth ] ) [ Humphrey Bogart ] ) )",
            "( JOIN ( R [ mayor ] ) ( JOIN ( R [ place of birth ] ) [ Humphrey Bogart ] ) )",
            "( JOIN ( R [ head of government ] ) ( JOIN ( R [ place of birth ] ) [ Humphrey Bogart ] ) )"
        ],
        "gen_label": "( JOIN ( R [ head of government ] ) ( JOIN ( R [ place of birth ] ) [ Humphrey Bogart ] ) )"
    },
    {
        "question": "Question: { What son of Aminah is married to Umm Salama Hind bint Abi Umayya? }",
        "predicted_query": [
            "( AND ( JOIN [ child ] [ Aminah ] ) ( JOIN ( R [ spouse ] ) [ Umm Salama ] ) )",
            "( AND ( JOIN [ spouse ] [ Umm Salama Hind bint Abi Umayya ] ) ( JOIN ( R [ father ] ) [ Aminah ] ) )",
            "( JOIN ( R [ father ] ) ( JOIN ( R [ spouse ] ) [ Umm Salama Hind bint Abi Umayya ] ) )",
            "( AND ( JOIN [ parent of ] [ Aminah ] ) ( JOIN ( R [ spouse ] ) [ Umm Salama ] ) )",
            "( AND ( JOIN [ father ] [ Aminah ] ) ( JOIN ( R [ spouse ] ) [ Umm Salama Hind bint Abi Umayya ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ spouse ] [ Umm Salama ] ) ( JOIN ( R [ child ] ) [ Aminah ] ) )"
    },
    {
        "question": "Question: { What is BVMC person ID for Jascha Heifetz ? }",
        "predicted_query": [
            "( JOIN ( R [ BVMC person ID ] ) [ Jascha Heifetz ] )",
            "( JOIN ( R [ BVMC person ID ] ) [ Jascha Heifetz ] )",
            "( JOIN [ BVMC person ID ] [ Jascha Heifetz ] )",
            "[join [BVMC person ID] [Jascha Heifetz]]",
            "( JOIN ( R [ BVKM person ID ] ) [ Jascha Heifetz ] )"
        ],
        "gen_label": "( JOIN ( R [ BVMC person ID ] ) [ Jascha Heifetz ] )"
    },
    {
        "question": "Question: { What field does Scott Denning work in? }",
        "predicted_query": [
            "( JOIN ( R [ field of work ] ) ( JOIN ( R [ occupation ] ) [ Scott Denning ] ) )",
            "( JOIN ( R [ field of work ] ) [ Scott Denning ] )",
            "( AND ( JOIN [ occupation ] [ meteorologist ] ) ( JOIN ( R [ field of work ] ) [ Scott Denning ] ) )",
            "( JOIN [ field of work ] [ Scott Denning ] )",
            "( JOIN [ field of work ] [ Scott Denning ] )"
        ],
        "gen_label": "( JOIN ( R [ field of this occupation ] ) ( JOIN ( R [ occupation ] ) [ Scott Denning ] ) )"
    },
    {
        "question": "Question: { What did Henry Luce donate? }",
        "predicted_query": [
            "( JOIN [ donated by ] [ Henry Luce ] )",
            "( AND ( JOIN [ recipient ] [ Henry Luce ] ) ( JOIN ( R [ donated by ] ) [ Henry Luce ] ) )",
            "( JOIN ( R [ donated by ] ) [ Henry Luce ] )",
            "( JOIN [ donation ] [ Henry Luce ] )",
            "( JOIN ( R [ donation ] ) [ Henry Luce ] )"
        ],
        "gen_label": "( JOIN [ donated by ] [ Henry Luce ] )"
    },
    {
        "question": "Question: { Which are the mandates for Universal Declaration of Human Rights? }",
        "predicted_query": [
            "( JOIN ( R [ mandate ] ) [ Universal Declaration of Human Rights ] )",
            "( JOIN [ mandates ] [ Universal Declaration of Human Rights ] )",
            "( [ joined by ] [ mandate ] [ Universal Declaration of Human Rights ] )",
            "( AND ( JOIN [ member of ] [ Universal Declaration of Human Rights ] ) ( JOIN ( R [ has mandate ] ) [ Universal Declaration of Human Rights ] ) )",
            "( JOIN ( R [ mandates ] ) [ Universal Declaration of Human Rights ] )"
        ],
        "gen_label": "( JOIN ( R [ mandates ] ) [ Universal Declaration of Human Rights ] )"
    },
    {
        "question": "Question: { Which is the disjoint union of the tropical cyclone? }",
        "predicted_query": [
            "( JOIN [ disjoint union ] [ tropical cyclone ] )",
            "( JOIN ( R [ disjoint union ] ) [ tropical cyclone ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ tropical cyclone ] ) ( JOIN ( R [ disjoint union ] ) [ tropical cyclone ] ) )",
            "( JOIN ( R [ disjoint union ] ) [ tropical cyclone ] )",
            "[ JOIN [ disjoint union ] [ tropical cyclone ] ]"
        ],
        "gen_label": "( JOIN ( R [ disjoint union of ] ) [ tropical cyclone ] )"
    },
    {
        "question": "Question: { What is used as a treatment to treat the medical condition of bupivacaine? }",
        "predicted_query": [
            "( AND ( JOIN [ therapy or treatment ] [ bupivacaine ] ) ( JOIN ( R [ drug or therapy used for the treatment or prevention of ] ) [ bupivacaine ] ) )",
            "( JOIN ( R [ medical condition treated ] ) ( JOIN ( R [ drug ] ) [ bupivacaine ] ) )",
            "( JOIN ( R [ treatment for ] ) ( JOIN ( R [ medical condition ] ) [ bupivacaine ] ) )",
            "( JOIN [ used as a treatment to treat the medical condition of ] [ bupivacaine ] )",
            "( JOIN ( R [ drug used for treatment ] ) ( JOIN ( R [ medical condition ] ) [ bupivacaine ] ) )"
        ],
        "gen_label": "( JOIN ( R [ drug or therapy used for treatment ] ) ( JOIN ( R [ medical condition treated ] ) [ bupivacaine- ( RS ) ] ) )"
    },
    {
        "question": "Question: { What is the name of the weapon of Trishula, the marriage partner of Kali? }",
        "predicted_query": [
            "( JOIN ( R [ name ] ) ( JOIN ( R [ weapon ] ) [ Trishula ] ) )",
            "( AND ( JOIN [ weapon ] [ Trishula ] ) ( JOIN ( R [ spouse ] ) [ Kali ] ) )",
            "( AND ( JOIN [ weapon used ] [ Trishula ] ) ( JOIN ( R [ spouse ] ) [ Kali ] ) )",
            "( JOIN ( R [ weapon ] ) [ Trishula ] )",
            "( JOIN ( R [ named after ] ) ( JOIN ( R [ spouse ] ) [ Kali ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ armament ] [ trishula ] ) ( JOIN ( R [ spouse ] ) [ Kali ] ) )"
    },
    {
        "question": "Question: { Which are the lake inflows of Aral Sea? }",
        "predicted_query": [
            "( JOIN ( R [ lake inflows ] ) [ Aral Sea ] )",
            "( JOIN [ lake inflows ] [ Aral Sea ] )",
            "( JOIN ( R [ lake inflows ] ) [ Aral Sea ] )",
            "( JOIN ( R [ inflows ] ) ( JOIN ( R [ located in body of water ] ) [ Aral Sea ] ) )",
            "( AND ( JOIN [ has outlet ] [ Aral Sea ] ) ( JOIN ( R [ inflow ] ) [ Aral Sea ] ) )"
        ],
        "gen_label": "( JOIN ( R [ inflows ] ) [ Aral Sea ] )"
    },
    {
        "question": "Question: { Who is the curator of São Paulo Museum of Art? }",
        "predicted_query": [
            "( JOIN ( R [ curator ] ) [ São Paulo Museum of Art ] )",
            "( JOIN ( R [ curator ] ) ( JOIN ( R [ located in ] ) [ São Paulo Museum of Art ] ) )",
            "( JOIN [ curator ] [ São Paulo Museum of Art ] )",
            "( JOIN ( R [ curator ] ) [ São Paulo Museum of Art ] )",
            "( JOIN ( R [ director ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ São Paulo Museum of Art ] ) )"
        ],
        "gen_label": "( JOIN ( R [ curator ] ) [ São Paulo Museum of Art ] )"
    },
    {
        "question": "Question: { What's the unemployment rate in Ethiopia? }",
        "predicted_query": [
            "( JOIN ( R [ unemployment rate ] ) [ Ethiopia ] )",
            "( JOIN ( R [ unemployment rate ] ) [ Ethiopia ] )",
            "( JOIN [ unemployment rate ] [ Ethiopia ] )",
            "( JOIN ( R [ unemployment rate ] ) [ Ethiopia ] )",
            "["
        ],
        "gen_label": "( JOIN ( R [ unemployment rate ] ) ( JOIN ( R [ country ] ) [ region of Ethiopia ] ) )"
    },
    {
        "question": "Question: { Who takes the form of brother of Poseidon? }",
        "predicted_query": [
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ child ] ) [ Poseidon ] ) )",
            "( JOIN [ sibling ] [ Poseidon ] )",
            "( AND ( JOIN [ sibling ] [ Poseidon ] ) ( JOIN ( R [ follows ] ) [ Hades ] ) )",
            "( JOIN ( R [ has form ] ) ( JOIN ( R [ sibling ] ) [ Poseidon ] ) )",
            "( AND ( JOIN [ sibling ] [ Poseidon ] ) ( JOIN ( R [ given name ] ) [ Hades ] ) )"
        ],
        "gen_label": "( JOIN ( R [ appears in the form of ] ) ( JOIN ( R [ sibling ] ) [ Poseidon ] ) )"
    },
    {
        "question": "Question: { Which is found in taxon of the nitric oxide radical? }",
        "predicted_query": [
            "( JOIN ( R [ taxon of ] ) ( JOIN ( R [ reacts with ] ) [ nitric oxide radical ] ) )",
            "( JOIN ( R [ taxon ] ) ( JOIN ( R [ reacts with ] ) [ nitric oxide radical ] ) )",
            "( AND ( JOIN [ contains taxon ] [ nitric oxide radical ] ) ( JOIN ( R [ discoverer ] ) [ nitric oxide ] ) )",
            "( JOIN ( R [ found in taxon ] ) [ nitric oxide radical ] )",
            "( JOIN [ taxon of ] [ nitric oxide radical ] )"
        ],
        "gen_label": "( JOIN ( R [ found in taxon ] ) [ nitric oxide ] )"
    },
    {
        "question": "Question: { What was the co-founder of Walsh University found guilty of? }",
        "predicted_query": [
            "( JOIN [ convicted of ] [ Walsh University ] )",
            "( JOIN ( R [ convicted of ] ) ( JOIN ( R [ founded by ] ) [ Walsh University ] ) )",
            "( JOIN ( R [ found guilty of ] ) ( JOIN ( R [ founders ] ) [ Walsh University ] ) )",
            "( AND ( JOIN [ convicted person ] [ William Walsh ] ) ( JOIN ( R [ found guilty of ] ) [ Walsh University ] ) )",
            "( AND ( JOIN [ convicted of ] [ Walsh University ] ) ( JOIN ( R [ founded by ] ) [ Walsh University ] ) )"
        ],
        "gen_label": "( JOIN ( R [ convicted of ] ) ( JOIN ( R [ founded by ] ) [ Walsh University ] ) )"
    },
    {
        "question": "Question: { Who is character of portrayed by Sythians? }",
        "predicted_query": [
            "( JOIN ( R [ character ] ) ( JOIN ( R [ portrayed by ] ) [ Sythians ] ) )",
            "( JOIN [ portrayed by ] [ Sythians ] )",
            "( AND ( JOIN [ portrays ] [ Sythians ] ) ( JOIN ( R [ character ] ) [ The Lord of the Rings ] ) )",
            "( JOIN ( R [ portrayed by ] ) ( JOIN ( R [ character ] ) [ Sythians ] ) )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ portrayed by ] ) [ Sythians ] ) )"
        ],
        "gen_label": "( JOIN ( R [ characters ] ) ( JOIN ( R [ depicted by ] ) [ Scythians ] ) )"
    },
    {
        "question": "Question: { Which parent of Wilhelm Ostwald is a member of the German Academy of Sciences Leopoldina? }",
        "predicted_query": [
            "( AND ( JOIN [ member of ] [ German Academy of Sciences Leopoldina ] ) ( JOIN ( R [ parent ] ) [ Wilhelm Ostwald ] ) )",
            "( JOIN (",
            "[ JOIN ( [ member of ] ) [ German Academy of Sciences Leopoldina ] ]",
            "( AND ( JOIN [ member of ] [ German Academy of Sciences Leopoldina ] ) ( JOIN ( R [ father ] ) [ Wilhelm Ostwald ] ) )",
            "( JOIN ( R [ parent ] ) ( JOIN ( R [ member of the Academy of Sciences Leopoldina ] ) [ Wilhelm Ostwald ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ member of ] [ German Academy of Sciences Leopoldina ] ) ( JOIN ( R [ child ] ) [ Wilhelm Ostwald ] ) )"
    },
    {
        "question": "Question: { What is the name of the film script for Mr. Smith Goes to Washington? }",
        "predicted_query": [
            "( JOIN ( R [ screenplay writer ] ) ( JOIN ( R [ based on work ] ) [ Mr. Smith Goes to Washington ] ) )",
            "( JOIN ( R [ film script ] ) [ Mr. Smith Goes to Washington ] )",
            "( AND ( JOIN [ written by ] [ Mr. Smith Goes to Washington ] ) ( JOIN ( R [ based on ] ) [ Mr. Smith Goes to Washington ] ) )",
            "( JOIN ( R [ writer ] ) ( JOIN ( R [ based on work ] ) [ Mr. Smith Goes to Washington ] ) )",
            "( JOIN ( R [ cast member ] ) ( JOIN ( R [ written by ] ) [ Mr. Smith Goes to Washington ] ) )"
        ],
        "gen_label": "( JOIN ( R [ film script ] ) [ Mr. Smith Goes to Washington ] )"
    },
    {
        "question": "Question: { What is the volume of the Dead Sea? }",
        "predicted_query": [
            "( JOIN ( R [ volume ] ) [ Dead Sea ] )",
            "( JOIN ( R [ volume ] ) [ Dead Sea ] )",
            "( JOIN ( R [ volume of water ] ) [ Dead Sea ] )",
            "( JOIN [ volume ] [ Dead Sea ] )",
            "( JOIN [ volume ] [ Dead Sea ] )"
        ],
        "gen_label": "( JOIN ( R [ volume as quantity ] ) [ Dead Sea ] )"
    },
    {
        "question": "Question: { What is the name of the player that competes in Italy in the Eurovision Song Contest in 1963? }",
        "predicted_query": [
            "( AND ( JOIN [ participant ] [ Italy ] ) ( JOIN ( R [ winner ] ) [ Eurovision Song Contest ] ) )",
            "( AND ( JOIN [ country of origin ] [ Italy ] ) ( JOIN ( R [ participant ] ) [ Eurovision Song Contest 1963 ] ) )",
            "( AND ( JOIN [ location of headquarters ] [ Italy ] ) ( JOIN ( R [ participant in the Eurovision Song Contest ] ) [ Gigliola Cinquetti ] ) )",
            "( AND ( JOIN [ participant ] [ Eurovision Song Contest ] ) ( JOIN ( R [ participant in ] ) [ Italy ] ) )",
            "( JOIN ( R [ contestant ] ) ( JOIN ( R [ participant in ] ) [ Eurovision Song Contest 1963 ] ) )"
        ],
        "gen_label": "( JOIN ( R [ participant ] ) ( JOIN ( R [ participant in ] ) [ Italy in the Eurovision Song Contest 1963 ] ) )"
    },
    {
        "question": "Question: { who location of narrative of comes after of Crazy Safari ? }",
        "predicted_query": [
            "( JOIN ( R [ location ] ) ( JOIN ( R [ narrative location ] ) [ Crazy Safari ] ) )",
            "( JOIN ( R [ narrative location ] ) ( JOIN ( R [ follows ] ) [ Crazy Safari ] ) )",
            "( JOIN [ narrative of ] [ Crazy Safari ] )",
            "( AND ( JOIN [ follows ] [ Crazy Safari ] ) ( JOIN ( R [ narrative location ] ) [ Crazy Safari ] ) )",
            "( JOIN ( R [ location of narrative ] ) ( JOIN ( R [ follows ] ) [ Crazy Safari ] ) )"
        ],
        "gen_label": "( JOIN ( R [ narrative location ] ) ( JOIN ( R [ follows ] ) [ Crazy Safari ] ) )"
    },
    {
        "question": "Question: { Who gave  the  {pronunciation audio} of {national of} of {Maurice de Vlaminck} ? }",
        "predicted_query": [
            "( JOIN ( R [ pronunciation audio ] ) ( JOIN ( R [ country of origin ] ) [ Maurice de Vlaminck ] ) )",
            "( JOIN ( R [ pronunciation audio ] ) ( JOIN ( R [ country of citizenship ] ) [ Maurice de Vlaminck ] ) )",
            "[{( JOIN ( R [ pronunciation ] ) [ Maurice de Vlaminck ] )}]",
            "( JOIN ( R [ pronunciation audio ] ) ( JOIN ( R [ native language ] ) [ Maurice de Vlaminck ] ) )",
            "( JOIN ( R [ pronunciation audio ] ) ( JOIN ( R [ country of citizenship ] ) [ Maurice de Vlaminck ] ) )"
        ],
        "gen_label": "( JOIN ( R [ pronunciation audio ] ) ( JOIN ( R [ country of citizenship ] ) [ Maurice de Vlaminck ] ) )"
    },
    {
        "question": "Question: { What is the  meaning of Q48460 when discussing the history of photography? }",
        "predicted_query": [
            "( AND ( JOIN [ meaning ] [ history of photography ] ) ( JOIN ( R [ meaning of ] ) [ Q48460 ] ) )",
            "( JOIN ( R [ meaning ] ) ( JOIN ( R [ discusses ] ) [ history of photography ] ) )",
            "( AND ( JOIN [ has meaning ] [ photography ] ) ( JOIN ( R [ meaning ] ) [ Q48460 ] ) )",
            "( AND ( JOIN [ discussed in ] [ history of photography ] ) ( JOIN ( R [ meaning ] ) [ Q48460 ] ) )",
            "( JOIN ( R [ meaning ] ) ( JOIN ( R [ discussed in ] ) [ history of photography ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Dewey Decimal Classification ] ) ( JOIN ( R [ facet of ] ) [ history of photography ] ) )"
    },
    {
        "question": "Question: { What are the FIPS 10-4 (countries and regions) of the Aosta Valley? }",
        "predicted_query": [
            "( JOIN ( R [ FIPS 10-4 ( countries and regions ) ] ) [ Aosta Valley ] )",
            "( AND ( JOIN [ FIPS 10-4 country code ] [ Aosta Valley ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Aosta Valley ] ) )",
            "( JOIN ( R [ FIPS 10-4 (countries and regions) ] ) [ Aosta Valley ] )",
            "( JOIN ( R [ FIPS 10-4 (countries and regions) ] ) [ Aosta Valley ] )",
            "( AND ( JOIN [ FIPS-10-4 ] [ Aosta Valley ] ) ( JOIN ( R [ country ] ) [ Aosta Valley ] ) )"
        ],
        "gen_label": "( JOIN ( R [ FIPS 10-4 ( countries and regions ) ] ) [ Aosta Valley ] )"
    },
    {
        "question": "Question: { who is the Minnie Marx children's sister? }",
        "predicted_query": [
            "( JOIN [ child ] [ Minnie Marx ] )",
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ child ] ) [ Minnie Marx ] ) )",
            "( JOIN ( R [ child ] ) ( JOIN ( R [ sibling ] ) [ Minnie Marx ] ) )",
            "( JOIN ( R [ sibling ] ) ( JOIN ( R [ father ] ) [ Max Reinhardt ] ) )",
            "( AND ( JOIN [ sibling ] [ Minnie Marx ] ) ( JOIN ( R [ child ] ) [ Minnie Marx ] ) )"
        ],
        "gen_label": "( JOIN ( R [ sibling ] ) ( JOIN ( R [ child ] ) [ Minnie Marx ] ) )"
    },
    {
        "question": "Question: { What is the Quora topic ID for Percy Bysshe Shelley? }",
        "predicted_query": [
            "( JOIN ( R [ Quora topic ID ] ) [ Percy Bysshe Shelley ] )",
            "( AND ( JOIN [ topic ID ] [ Quora ] ) ( JOIN ( R [ topic ] ) [ Percy Bysshe Shelley ] ) )",
            "( JOIN ( R [ Quora topic ID ] ) [ Percy Bysshe Shelley ] )",
            "[question.com topic ID] for [Percy Bysshe Shelley]",
            "[]"
        ],
        "gen_label": "( JOIN ( R [ Quora topic ID ] ) [ Percy Bysshe Shelley ] )"
    },
    {
        "question": "Question: { Who lives in Knoxville? }",
        "predicted_query": [
            "( JOIN ( R [ resident country ] ) ( JOIN ( R [ place of death ] ) [ James Knox Polk ] ) )",
            "( JOIN ( R [ inhabitant ] ) ( JOIN ( R [ located in ] ) [ Knoxville ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ place of death ] ) [ James Knox Polk ] ) )",
            "( JOIN [ inhabitant ] [ Knoxville ] )",
            "( JOIN [ located in the administrative territorial entity ] [ Knoxville ] )"
        ],
        "gen_label": "( JOIN ( R [ member of ] ) ( JOIN ( R [ country ] ) [ Knoxville ] ) )"
    },
    {
        "question": "Question: { What area is managed by Buckenham Marshes RSPB reserve }",
        "predicted_query": [
            "( JOIN ( R [ administered by ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Buckenham Marshes RSPB reserve ] ) )",
            "( JOIN ( R [ managed by ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Buckenham Marshes RSPB reserve ] ) )",
            "( JOIN ( R [ area managed by ] ) ( JOIN ( R [ protected by ] ) [ Buckenham Marshes RSPB reserve ] ) )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ managed by ] ) [ Buckenham Marshes RSPB reserve ] ) )",
            "[join] [has relation] [Buckenham Marshes RSPB reserve] [management] [joint] [joint management] [jointly managed] [jointly managed by] [jointly managed by] [jointly managed by] [jointly managed by] [jointly managed by] [jointly managed by] [jointly managed by] [jointly managed by] [jointly managed by] [jointly managed by] [jointly managed by] [jointly managed by"
        ],
        "gen_label": "( JOIN ( R [ interested in ] ) ( JOIN ( R [ operator ] ) [ Buckenham Marshes RSPB reserve ] ) )"
    },
    {
        "question": "Question: { Whom is participating in Battle of Breitenfeld 1631? }",
        "predicted_query": [
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ participant in ] ) [ Battle of Breitenfeld ] ) )",
            "[ JOIN [ participant ] [ Battle of Breitenfeld ] ]",
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ fought in ] ) [ Battle of Breitenfeld ] ) )",
            "( AND ( JOIN [ participant ] [ Battle of Breitenfeld ] ) ( JOIN ( R [ participant ] ) [ Battle of Breitenfeld ] ) )",
            "( JOIN ( R [ participant ] ) ( JOIN ( R [ participant in the battle ] ) [ Battle of Breitenfeld ] ) )"
        ],
        "gen_label": "( JOIN ( R [ participant ] ) [ Battle of Breitenfeld ] )"
    },
    {
        "question": "Question: { What is Movement settlement ID for Eilat? }",
        "predicted_query": [
            "( JOIN ( R [ movement settlement ID ] ) [ Eilat ] )",
            "( JOIN ( R [ Movement settlement ID ] ) [ Eilat ] )",
            "( JOIN ( R [ Movement settlement ID ] ) [ Eilat ] )",
            "( JOIN [ Movement settlement ID ] [ Eilat ] )",
            "( AND ( JOIN [ movement settlement ID ] [ Eilat ] ) ( JOIN ( R [ ID ] ) [ Eilat ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Or Movement settlement ID ] ) [ Eilat ] )"
    },
    {
        "question": "Question: { what is in the Encyclopedia of Surfing ID of Kelly Slater? }",
        "predicted_query": [
            "( AND ( JOIN [ encyclopedia of surfing ID ] [ Kelly Slater ] ) ( JOIN ( R [ ID ] ) [ Kelly Slater ] ) )",
            "( JOIN ( R [ surfer ID ] ) [ Kelly Slater ] )",
            "( JOIN ( R [ Encyclopedia of Surfing ID ] ) [ Kelly Slater ] )",
            "( [ JOIN ] [ Encyclopedia of Surfing ID ] [ Kelly Slater ] )",
            "( JOIN ( R [ Encyclopedia of Surfing surfer ID ] ) [ Kelly Slater ] )"
        ],
        "gen_label": "( JOIN ( R [ Encyclopedia of Surfing ID ] ) [ Kelly Slater ] )"
    },
    {
        "question": "Question: { What is edibility of Amanita phalloides ? }",
        "predicted_query": [
            "( JOIN [ edibility ] [ Amanita phalloides ] )",
            "( JOIN ( R [ edibility ] ) [ Amanita phalloides ] )",
            "( JOIN ( R [ edible part ] ) ( JOIN ( R [ contains ] ) [ Amanita phalloides ] ) )",
            "( AND ( JOIN [ has taxon ID ] [ Amanita phalloides ] ) ( JOIN ( R [ edible ] ) [ Amanita phalloides ] ) )",
            "( JOIN ( R [ edibility ] ) [ Amanita phalloides ] )"
        ],
        "gen_label": "( JOIN ( R [ edibility ] ) [ Amanita phalloides ] )"
    },
    {
        "question": "Question: { Which is the vessel of Soyuz? }",
        "predicted_query": [
            "( JOIN ( R [ ship or spacecraft ] ) ( JOIN ( R [ manufacturer ] ) [ Soyuz ] ) )",
            "( JOIN ( R [ vessel ] ) [ Soyuz ] )",
            "( JOIN [ vessel ] [ Soyuz ] )",
            "( JOIN [ vessel of ] [ Soyuz ] )",
            "( JOIN ( R [ has vessel ] ) [ Soyuz ] )"
        ],
        "gen_label": "( JOIN [ vessel ] [ Soyuz ] )"
    },
    {
        "question": "Question: { What is the birth place of twin cities of Domingos Saraiva? }",
        "predicted_query": [
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ place of birth ] ) [ Domingos Saraiva ] ) )",
            "( JOIN ( R [ twin city ] ) ( JOIN ( R [ place of birth ] ) [ Domingos Saraiva ] ) )",
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ place of birth ] ) [ Domingos Saraiva ] ) )",
            "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ place of birth ] ) [ Domingos Saraiva ] ) )",
            "( AND ( JOIN [ twinned administrative body ] [ Domingos Saraiva ] ) ( JOIN ( R [ place of birth ] ) [ Domingos Saraiva ] ) )"
        ],
        "gen_label": "( JOIN ( R [ twinned administrative body ] ) ( JOIN ( R [ place of birth ] ) [ Domingos Saraiva ] ) )"
    },
    {
        "question": "Question: { Which is immediate cause  of War on Terror ? }",
        "predicted_query": [
            "( JOIN [ immediate cause ] [ War on Terror ] )",
            "( JOIN ( R [ immediate cause ] ) [ War on Terror ] )",
            "( JOIN ( R [ immediate cause ] ) [ War on Terror ] )",
            "[]",
            "( AND ( JOIN [ cause ] [ War on Terror ] ) ( JOIN ( R [ caused by ] ) [ War on Terror ] ) )"
        ],
        "gen_label": "( JOIN [ immediate cause of ] [ War on Terror ] )"
    },
    {
        "question": "Question: { who painters of has brother of antiope? }",
        "predicted_query": [
            "( JOIN ( R [ painter ] ) ( JOIN ( R [ sibling ] ) [ Antiope ] ) )",
            "( AND ( JOIN [ sibling ] [ Antiope ] ) ( JOIN ( R [ artist ] ) [ The Rape of Europa ] ) )",
            "( JOIN [ sibling ] [ Antiope ] ) ( JOIN ( R [ artist ] ) [ Heracles ] )",
            "( JOIN ( R [ painter ] ) ( JOIN ( R [ sibling ] ) [ Antiope ] ) )",
            "( AND ( JOIN [ sibling ] [ Antiope ] ) ( JOIN ( R [ painter ] ) [ Antiope ] ) )"
        ],
        "gen_label": "( JOIN ( R [ creator ] ) ( JOIN ( R [ sibling ] ) [ Antiope ] ) )"
    },
    {
        "question": "Question: { Which is the Kinopolis film ID of Forrest Gump? }",
        "predicted_query": [
            "( JOIN ( R [ Kinopolis film ID ] ) [ Forrest Gump ] )",
            "( [ joined by ] [ Kinopolis film ID ] [ Forrest Gump ] )",
            "( JOIN [ Kinopolis film ID ] [ Forrest Gump ] )",
            "( JOIN ( R [ Kinopolis film ID ] ) [ Forrest Gump ] )",
            "( JOIN ( R [ Kinopolis film ID ] ) [ Forrest Gump ] )"
        ],
        "gen_label": "( JOIN ( R [ Kinopolis film ID ] ) [ Forrest Gump ] )"
    },
    {
        "question": "Question: { What is family name of Neil Diamond ? }",
        "predicted_query": [
            "( JOIN ( R [ family name ] ) [ Neil Diamond ] )",
            "[ JOIN ] [ family name ] [ Neil Diamond ]",
            "( [ joined by ] [ family name ] [ Neil Diamond ] )",
            "( JOIN ( R [ family name ] ) [ Neil Diamond ] )",
            "( JOIN [ family name ] [ Neil Diamond ] )"
        ],
        "gen_label": "( JOIN ( R [ family name ] ) [ Neil Diamond ] )"
    },
    {
        "question": "Question: { Who are the authors of Doonesbury? }",
        "predicted_query": [
            "( JOIN ( R [ author ] ) ( JOIN ( R [ creator ] ) [ Doonesbury ] ) )",
            "( JOIN ( R [ author ] ) [ Doonesbury ] )",
            "( JOIN [ author ] [ Doonesbury ] )",
            "( JOIN [ author ] [ Doonesbury ] )",
            "( JOIN ( R [ author ] ) ( JOIN ( R [ creator ] ) [ Doonesbury ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ sex or gender ] [ male ] ) ( JOIN ( R [ author ] ) [ Doonesbury ] ) )"
    },
    {
        "question": "Question: { What is the life stance of the interment of Pavel Tsitsianov? }",
        "predicted_query": [
            "( JOIN ( R [ life stance ] ) ( JOIN ( R [ place of burial ] ) [ Pavel Tsitsianov ] ) )",
            "( JOIN ( R [ religious or philosophical worldview ] ) ( JOIN ( R [ place of burial ] ) [ Pavel Tsitsianov ] ) )",
            "( AND ( JOIN [ religion ] [ Eastern Orthodox Church ] ) ( JOIN ( R [ place of burial ] ) [ Pavel Tsitsianov ] ) )",
            "( JOIN [ life stance ] [ Pavel Tsitsianov ] )",
            "( JOIN ( R [ life stance ] ) ( JOIN ( R [ place of interment ] ) [ Pavel Tsitsianov ] ) )"
        ],
        "gen_label": "( JOIN ( R [ religion or worldview ] ) ( JOIN ( R [ place of burial ] ) [ Pavel Tsitsianov ] ) )"
    },
    {
        "question": "Question: { Coriandrum sativum has what Flora of Israel plant ID? }",
        "predicted_query": [
            "( JOIN ( R [ Flora of Israel plant ID ] ) [ Coriandrum sativum ] )",
            "( JOIN ( R [ Flora of Israel plant ID ] ) [ Coriandrum sativum ] )",
            "( AND ( JOIN [ Flora of Israel plant ID ] [ Coriandrum sativum ] ) ( JOIN ( R [ taxon ID ] ) [ Coriandrum sativum ] ) )",
            "( JOIN [ Flora of Israel plant ID ] [ Coriandrum sativum ] )",
            "( AND ( JOIN [ Florabase taxon ID for Coriandrum sativum ] [ 100000000 ] ) ( JOIN ( R [ has taxon ID in ] ) [ Coriandrum sativum ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Flora of Israel Online plant ID ] ) [ Coriandrum sativum ] )"
    },
    {
        "question": "Question: { Who is antonym  user of associativity ? }",
        "predicted_query": [
            "( JOIN [ antonym ] [ associativity ] )",
            "( JOIN ( R [ opposite of ] ) ( JOIN ( R [ associative property ] ) [ antonym ] ) )",
            "( AND ( JOIN [ has opposite of ] [ associativity ] ) ( JOIN ( R [ user ] ) [ associativity ] ) )",
            "( AND ( JOIN [ opposite of ] [ associativity ] ) ( JOIN ( R [ user ] ) [ antonym ] ) )",
            "( JOIN ( R [ antonym ] ) ( JOIN ( R [ has attribute ] ) [ associativity ] ) )"
        ],
        "gen_label": "( JOIN ( R [ opposite of ] ) ( JOIN ( R [ used by ] ) [ associativity ] ) )"
    },
    {
        "question": "Question: { Which {position occupied} is {incumbent} of {United Nations Secretary-General} ? }",
        "predicted_query": [
            "( JOIN ( R [ position held ] ) ( JOIN ( R [ office held ] ) [ United Nations Secretary-General ] ) )",
            "( JOIN ( R [ position held ] ) ( JOIN ( R [ incumbent ] ) [ United Nations Secretary-General ] ) )",
            "( JOIN ( R [ occupation ] ) ( JOIN ( R [ office held ] ) [ United Nations Secretary-General ] ) )",
            "( JOIN [ position held ] [ United Nations Secretary-General ] )",
            "( AND ( JOIN [ occupies position ] [ United Nations Secretary-General ] ) ( JOIN ( R [ follows occupation ] ) [ John F. Kennedy ] ) )"
        ],
        "gen_label": "( JOIN ( R [ position held ] ) ( JOIN ( R [ position holder ] ) [ United Nations Secretary-General ] ) )"
    },
    {
        "question": "Question: { What is the pathogen transmission process of tuberculosis? }",
        "predicted_query": [
            "( JOIN [ pathogen transmission process ] [ tuberculosis ] )",
            "( JOIN ( R [ pathogen transmission process ] ) [ tuberculosis ] )",
            "( JOIN ( R [ disease transmission process ] ) ( JOIN ( R [ cause of death ] ) [ tuberculosis ] ) )",
            "( AND ( JOIN [ has pathway of transmission ] [ tuberculosis ] ) ( JOIN ( R [ cause ] ) [ tuberculosis ] ) )",
            "( JOIN ( R [ pathogen transmission process ] ) [ tuberculosis ] )"
        ],
        "gen_label": "( JOIN ( R [ disease transmission process ] ) [ tuberculosis ] )"
    },
    {
        "question": "Question: { Which is the last line for Crime and Punishment? }",
        "predicted_query": [
            "( JOIN ( R [ last line ] ) [ Crime and Punishment ] )",
            "( JOIN ( R [ last line of work ] ) [ Crime and Punishment ] )",
            "( JOIN [ last line ] [ Crime and Punishment ] )",
            "( JOIN ( R [ last line ] ) [ Crime and Punishment ] )",
            "( JOIN ( R [ last line ] ) [ Crime and Punishment ] )"
        ],
        "gen_label": "( JOIN ( R [ last line ] ) [ Crime and Punishment ] )"
    },
    {
        "question": "Question: { On the continent of Asia, where can the topic of the history of Tajikistan be found? }",
        "predicted_query": [
            "[ ( JOIN ( R [ topic ] ) [ history of Tajikistan ] ) ]",
            "( AND ( JOIN [ country ] [ Asia ] ) ( JOIN ( R [ topic ] ) [ history of Tajikistan ] ) )",
            "( JOIN [ history of ] [ Tajikistan ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Asia ] ) ( JOIN ( R [ topic ] ) [ history of Tajikistan ] ) )",
            "( AND ( JOIN [ shares border with ] [ Asia ] ) ( JOIN ( R [ topic ] ) [ history of Tajikistan ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ continent ] [ Asia ] ) ( JOIN ( R [ facet of ] ) [ history of Tajikistan ] ) )"
    },
    {
        "question": "Question: { WHICH IS THE ORTHOLOG OF GENETIC ASSOCIATION OF TRANSMISSIBLE SPONGIFROM ENCEPHALOPATHY }",
        "predicted_query": [
            "( JOIN ( R [ ortholog of ] ) ( JOIN ( R [ affected by ] ) [ transmissible spongiform encephalopathy ] ) )",
            "( AND ( JOIN [ taxon name ] [ spongiform encephalopathy ] ) ( JOIN ( R [ ortholog ] ) [ G protein-coupled receptor 119 ] ) )",
            "( JOIN ( R [ ortholog ] ) ( JOIN ( R [ affected by ] ) [ transmissible spongiform encephalopathy ] ) )",
            "( JOIN [ ortholog of genetic association ] [ transmissible spongiform encephalopathy ] )",
            "( JOIN [ ortholog ] [ spongiform encephalopathy ] )"
        ],
        "gen_label": "( JOIN ( R [ ortholog ] ) ( JOIN ( R [ genetic association ] ) [ transmissible spongiform encephalopathy ] ) )"
    },
    {
        "question": "Question: { WHICH IS THE ISSN OF FOREIGN AFFAIRS }",
        "predicted_query": [
            "( JOIN ( R [ ISSN ] ) [ Foreign Affairs ] )",
            "{",
            "( JOIN ( R [ ISSN ] ) [ Foreign Affairs ] )",
            "( JOIN [ ISSN ] [ Foreign Affairs ] )",
            "### Instruction:"
        ],
        "gen_label": "( JOIN ( R [ ISSN ] ) [ Foreign Affairs ] )"
    },
    {
        "question": "Question: { What is Johann Wolfgang von Goethe's Biography ID? }",
        "predicted_query": [
            "( JOIN ( R [ Biography ID ] ) [ Johann Wolfgang von Goethe ] )",
            "( JOIN [ Biography ID ] [ Johann Wolfgang von Goethe ] )",
            "( JOIN ( R [ Biography ID ] ) [ Johann Wolfgang von Goethe ] )",
            "( AND ( JOIN [ Biographies.net ID ] [ Johann Wolfgang von Goethe ] ) ( JOIN ( R [ question ] ) [ What is Johann Wolfgang von Goethe's Biography ID? ] ) )",
            "( JOIN ( R [ Biography ID ] ) [ Johann Wolfgang von Goethe ] )"
        ],
        "gen_label": "( JOIN ( R [ Low German Bibliography and Biography ID ] ) [ Johann Wolfgang von Goethe ] )"
    },
    {
        "question": "Question: { What science is the study of addiction? }",
        "predicted_query": [
            "( AND ( JOIN [ studied in ] [ addiction ] ) ( JOIN ( R [ field of study ] ) [ science ] ) )",
            "( JOIN [ science is the study of ] [ addiction ] )",
            "( JOIN ( R [ field of study ] ) ( JOIN ( R [ studied by ] ) [ addiction ] ) )",
            "( JOIN [ field of science ] [ addiction ] )",
            "( AND ( JOIN [ field of science ] [ addiction ] ) ( JOIN ( R [ studied by ] ) [ addiction ] ) )"
        ],
        "gen_label": "( JOIN ( R [ is the study of ] ) ( JOIN ( R [ studied in ] ) [ addiction ] ) )"
    },
    {
        "question": "Question: { Which are the coordinates for northernmost point of Afghanistan? }",
        "predicted_query": [
            "( JOIN ( R [ coordinates for northernmost point ] ) [ Afghanistan ] )",
            "( JOIN [ coordinates for northernmost point ] [ Afghanistan ] )",
            "( JOIN ( R [ latitude or longitude ] ) [ northernmost point of Afghanistan ] )",
            "( JOIN ( R [ latitude ] ) ( JOIN ( R [ located in the administrative territorial entity ] ) [ Afghanistan ] ) )",
            "( JOIN ( R [ coordinates of northernmost point ] ) [ Afghanistan ] )"
        ],
        "gen_label": "( JOIN ( R [ coordinates of northernmost point ] ) [ Afghanistan ] )"
    },
    {
        "question": "Question: { What is the Australian Business Number of the Australian Broadcasting Corporation? }",
        "predicted_query": [
            "( JOIN ( R [ Australian Business Number ] ) [ Australian Broadcasting Corporation ] )",
            "( JOIN [ Australian Business Number ] [ Australian Broadcasting Corporation ] )",
            "( JOIN ( R [ Australian Business Number ] ) [ Australian Broadcasting Corporation ] )",
            "( JOIN ( R [ ABN ] ) [ Australian Broadcasting Corporation ] )",
            "{ JOIN [ Australian Business Number ] [ question ] }"
        ],
        "gen_label": "( JOIN ( R [ Australian Business Number ] ) [ Australian Broadcasting Corporation ] )"
    },
    {
        "question": "Question: { When did Charles Reynolds create typology of used language? }",
        "predicted_query": [
            "( JOIN [ created typology of ] [ Charles Reynolds ] )",
            "( JOIN ( R [ created by ] ) ( JOIN ( R [ linguistic typology ] ) [ Charles Reynolds ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Charles Reynolds ] ) ( JOIN ( R [ created using ] ) [ typology of used language ] ) )",
            "( JOIN ( R [ has type of usage ] ) ( JOIN ( R [ language of work ] ) [ Charles Reynolds ] ) )",
            "( AND ( JOIN [ has part of ] [ typology of ] ) ( JOIN ( R [ created ] ) [ Charles Reynolds ] ) )"
        ],
        "gen_label": "( JOIN ( R [ linguistic typology ] ) ( JOIN ( R [ languages spoken, written or signed ] ) [ Charles Reynolds ] ) )"
    },
    {
        "question": "Question: { Who is mint issued by? }",
        "predicted_query": [
            "( JOIN [ minted by ] [ United States Mint ] )",
            "( JOIN ( R [ minted by ] ) [ William the Conqueror ] )",
            "( JOIN [ mint issued by ] [ Royal Mint ] )",
            "( JOIN ( R [ minted by ] ) ( JOIN ( R [ country of origin ] ) [ William the Conqueror ] ) )",
            "[ JOIN ( [ minted by ] ) [ George Washington ] ]"
        ],
        "gen_label": "( JOIN [ issued by ] [ mint ] )"
    },
    {
        "question": "Question: { The Diary of Anne Frank has how many editions? }",
        "predicted_query": [
            "( JOIN ( R [ number of editions ] ) [ The Diary of Anne Frank ] )",
            "( JOIN ( R [ number of editions ] ) ( JOIN ( R [ author ] ) [ The Diary of Anne Frank ] ) )",
            "( JOIN ( R [ number of editions ] ) [ The Diary of a Young Girl ] )",
            "( JOIN [ number of editions ] [ The Diary of Anne Frank ] )",
            "( AND ( JOIN [ has edition ] [ The Diary of Anne Frank ] ) ( JOIN ( R [ number of books in series ] ) [ The Diary of Anne Frank ] ) )"
        ],
        "gen_label": "( JOIN ( R [ has edition or translation ] ) [ Diary of Anne Frank ] )"
    },
    {
        "question": "Question: { Who is the choir director employed by Joseph Bradley? }",
        "predicted_query": [
            "( JOIN ( R [ employer ] ) ( JOIN ( R [ composer ] ) [ Joseph Bradley ] ) )",
            "( JOIN [ choir director ] [ Joseph Bradley ] )",
            "( JOIN ( R [ choir director ] ) ( JOIN ( R [ employer ] ) [ Joseph Bradley ] ) )",
            "( JOIN ( R [ director ] ) ( JOIN ( R [ employer ] ) [ Joseph Bradley ] ) )",
            "( AND ( JOIN [ employer ] [ Joseph Bradley ] ) ( JOIN ( R [ composer ] ) [ Joseph Bradley ] ) )"
        ],
        "gen_label": "( JOIN ( R [ musical conductor ] ) ( JOIN ( R [ employer ] ) [ Joseph Bradley ] ) )"
    },
    {
        "question": "Question: { Who is the titleholder of Katharine Hepburn's honours? }",
        "predicted_query": [
            "( JOIN ( R [ award received ] ) ( JOIN ( R [ recipient ] ) [ Katharine Hepburn ] ) )",
            "( JOIN ( R [ honours awarded ] ) ( JOIN ( R [ recipient ] ) [ Katharine Hepburn ] ) )",
            "( JOIN ( R [ holder ] ) ( JOIN ( R [ award received ] ) [ Katharine Hepburn ] ) )",
            "( JOIN ( R [ recipient ] ) ( JOIN ( R [ award received ] ) [ Katharine Hepburn ] ) )",
            "( AND ( JOIN [ awarded to ] [ Katharine Hepburn ] ) ( JOIN ( R [ recipient ] ) [ Academy Award for Best Actress ] ) )"
        ],
        "gen_label": "( JOIN ( R [ winner ] ) ( JOIN ( R [ award received ] ) [ Katharine Hepburn ] ) )"
    },
    {
        "question": "Question: { Boötes III is located in what part of the constellation? }",
        "predicted_query": [
            "( JOIN ( R [ part of constellation ] ) ( JOIN ( R [ located in ] ) [ Boötes III ] ) )",
            "( JOIN ( R [ contains the administrative territorial entity ] ) ( JOIN ( R [ part of the constellation ] ) [ Boötes III ] ) )",
            "( AND ( JOIN [ part of ] [ constellation ] ) ( JOIN ( R [ located in ] ) [ Boötes III ] ) )",
            "( JOIN [ part of constellation ] [ Boötes III ] )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Boötes III ] ) ( JOIN ( R [ located in ] ) [ Boötes ] ) )"
        ],
        "gen_label": "( JOIN ( R [ constellation ] ) ( JOIN ( R [ parent astronomical body ] ) [ Boötes III ] ) )"
    },
    {
        "question": "Question: { What's the Flatiron Building's NRHP reference number? }",
        "predicted_query": [
            "{ JOIN [ National Register of Historic Places reference number ] [ Flatiron Building ] }",
            "[ JOIN (",
            "( JOIN ( R [ NRHP reference number ] ) [ Flatiron Building ] )",
            "( JOIN ( R [ National Register of Historic Places ID ] ) ( JOIN ( R [ ID ] ) [ Flatiron Building ] ) )",
            "( JOIN ( R [ National Register of Historic Places reference number ] ) [ Flatiron Building ] )"
        ],
        "gen_label": "( JOIN ( R [ NRHP reference number ] ) [ Flatiron Building ] )"
    },
    {
        "question": "Question: { What is the CNO-11 occupation code for truck driver? }",
        "predicted_query": [
            "( JOIN ( R [ CNO occupation code ] ) [ truck driver ] )",
            "( JOIN ( R [ CNO-11 occupation code ] ) [ truck driver ] )",
            "( JOIN ( R [ CNO-11 occupation code ] ) [ truck driver ] )",
            "( AND ( JOIN [ occupation ] [ truck driver ] ) ( JOIN ( R [ occupation code ] ) [ CNO-11 ] ) )",
            "( JOIN [ CNO-11 occupation code ] [ truck driver ] )"
        ],
        "gen_label": "( JOIN ( R [ CNO-11 occupation code ] ) [ truck driver ] )"
    },
    {
        "question": "Question: { Which is the UNESCO Thesaurus ID for vandalism? }",
        "predicted_query": [
            "[]",
            "( JOIN [ UNESCO Thesaurus ID ] [ vandalism ] )",
            "( JOIN ( R [ UNESCO Thesaurus ID ] ) [ vandalism ] )",
            "( AND ( JOIN [ UNEP-WIDE Taxonomy ID ] [ vandalism ] ) ( JOIN ( R [ UNESCO Thesaurus ID ] ) [ vandalism ] ) )",
            "( JOIN ( R [ UNESCO Thesaurus ID ] ) [ vandalism ] )"
        ],
        "gen_label": "( JOIN ( R [ UNESCO Thesaurus ID ] ) [ vandalism ] )"
    },
    {
        "question": "Question: { Which is the Bulbapedia article of Super Smash Bros. Melee? }",
        "predicted_query": [
            "( JOIN ( R [ Bulbapedia article ID ] ) [ Super Smash Bros. Melee ] )",
            "( JOIN [ Bulbapedia article ID ] [ Super Smash Bros. Melee ] )",
            "( JOIN ( R [ Bulbapedia article ID ] ) [ Super Smash Bros. Melee ] )",
            "( AND ( JOIN [ official website ] [ Bulbapedia ] ) ( JOIN ( R [ question ] ) [ Super Smash Bros. Melee ] ) )",
            "( JOIN ( R [ Bulbapedia article ] ) [ Super Smash Bros. Melee ] )"
        ],
        "gen_label": "( JOIN ( R [ Bulbapedia article ID ] ) [ Super Smash Bros. Melee ] )"
    },
    {
        "question": "Question: { What is the subject of the history of Illinois that contains Coles County, which has rural cities? }",
        "predicted_query": [
            "( AND ( JOIN [ contains the administrative territorial entity ] [ rural cities ] ) ( JOIN ( R [ subject ] ) [ history of Illinois ] ) )",
            "( AND ( JOIN [ has history of ] [ rural cities ] ) ( JOIN ( R [ subject ] ) [ history of Illinois ] ) )",
            "( AND ( JOIN [ has ] [ rural city ] ) ( JOIN ( R [ subject ] ) [ history of Illinois ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ Coles County ] ) ( JOIN ( R [ subject ] ) [ history of Illinois ] ) )",
            "( AND ( JOIN [ contains the administrative territorial entity ] [ rural city ] ) ( JOIN ( R [ subject ] ) [ history of Illinois ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ contains the administrative territorial entity ] [ Coles County ] ) ( JOIN ( R [ facet of ] ) [ history of Illinois ] ) )"
    },
    {
        "question": "Question: { What is  in the  CosIng number of citric acid ? }",
        "predicted_query": [
            "( JOIN ( R [ CAS registry number ] ) [ citric acid ] )",
            "( JOIN ( R [ Chemical Abstracts Service Registry Number ] ) [ citric acid ] )",
            "[ JOIN [ Chemical Abstracts Service Registry Number ] [ citric acid ] ]",
            "( JOIN ( R [ ChemSpider ID ] ) ( JOIN ( R [ has CAS registry number ] ) [ citric acid ] ) )",
            "( JOIN ( R [ CAS Registry Number ] ) [ citric acid ] )"
        ],
        "gen_label": "( JOIN ( R [ CosIng number ] ) [ citric acid ] )"
    },
    {
        "question": "Question: { Where in Verona did Galeazzo Ciano die? }",
        "predicted_query": [
            "( JOIN ( R [ place of death ] ) ( JOIN ( R [ place of death ] ) [ Galeazzo Ciano ] ) )",
            "( JOIN [ place of death ] [ Galeazzo Ciano ] )",
            "( JOIN ( R [ located in the administrative territorial entity ] ) ( JOIN ( R [ place of death ] ) [ Galeazzo Ciano ] ) )",
            "( AND ( JOIN [ place of death ] [ Verona ] ) ( JOIN ( R [ place of death ] ) [ Galeazzo Ciano ] ) )",
            "( JOIN ( R [ location of death ] ) ( JOIN ( R [ spouse ] ) [ Galeazzo Ciano ] ) )"
        ],
        "gen_label": "( AND ( JOIN [ category of associated people ] [ Category:People from Verona ] ) ( JOIN ( R [ place of death ] ) [ Galeazzo Ciano ] ) )"
    },
    {
        "question": "Question: { Who is {scriptwriter} of {bibliography} of {Natja Brunckhorst} ? }",
        "predicted_query": [
            "( JOIN ( R [ writer ] ) ( JOIN ( R [ author ] ) [ Natja Brunckhorst ] ) )",
            "[ JOIN [",
            "( JOIN ( R [ screenwriter ] ) ( JOIN ( R [ author ] ) [ Natja Brunckhorst ] ) )",
            "( JOIN [ writer ] [ Natja Brunckhorst ] )",
            "( JOIN ( R [ writer ] ) ( JOIN ( R [ author ] ) [ Natja Brunckhorst ] ) )"
        ],
        "gen_label": "( JOIN ( R [ screenwriter ] ) ( JOIN ( R [ list of works ] ) [ Natja Brunckhorst ] ) )"
    },
    {
        "question": "Question: { What is antonym of of spore print color of Pleurotus ostreatus ? }",
        "predicted_query": [
            "( AND ( JOIN [ color of spore ] [ brown ] ) ( JOIN ( R [ synonym ] ) [ Pleurotus ostreatus ] ) )",
            "( AND ( JOIN [ has opposite ] [ spore print color ] ) ( JOIN ( R [ synonym of ] ) [ Pleurotus ostreatus ] ) )",
            "( AND ( JOIN [ opposite ] [ spore print color ] ) ( JOIN ( R [ synonym of ] ) [ Pleurotus ostreatus ] ) )",
            "( JOIN ( R [ antonym ] ) ( JOIN ( R [ color ] ) [ spore print color of Pleurotus ostreatus ] ) )",
            "[What is the opposite of color of spore print of Pleurotus ostreatus?]"
        ],
        "gen_label": "( JOIN ( R [ opposite of ] ) ( JOIN ( R [ spore print color ] ) [ Pleurotus ostreatus ] ) )"
    },
    {
        "question": "Question: { What Theoi Project ID does Manticore has? }",
        "predicted_query": [
            "( JOIN ( R [ Theoi Project ID ] ) [ Manticore ] )",
            "( JOIN [ Theoi Project ID ] [ Manticore ] )",
            "( AND ( JOIN [ Theoi ID ] [ Manticore ] ) ( JOIN ( R [ ID ] ) [ Theoi Project ] ) )",
            "( JOIN ( R [ Theoi Project ID ] ) [ Manticore ] )",
            "( AND ( JOIN [ Theoi ID ] [ Manticore ] ) ( JOIN ( R [ ID in Theoi ] ) [ Manticore ] ) )"
        ],
        "gen_label": "( JOIN ( R [ Theoi Project ID ] ) [ manticore ] )"
    }
]